/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Quest :
        OblivionMajorRecord,
        IQuestInternal,
        ILoquiObjectSetter<Quest>,
        INamed,
        IEquatable<Quest>,
        IEqualsMask
    {
        #region Ctor
        protected Quest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Script
        protected IFormIDSetLink<Script> _Script = new FormIDSetLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IScriptGetter> IQuestGetter.Script => this.Script;
        #endregion
        #region Name
        public bool Name_IsSet
        {
            get => _hasBeenSetTracker[(int)Quest_FieldIndex.Name];
            set => _hasBeenSetTracker[(int)Quest_FieldIndex.Name] = value;
        }
        bool IQuestGetter.Name_IsSet => Name_IsSet;
        private String _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name;
            set => Name_Set(value);
        }
        String IQuestGetter.Name => this.Name;
        public void Name_Set(
            String value,
            bool markSet = true)
        {
            _Name = value;
            _hasBeenSetTracker[(int)Quest_FieldIndex.Name] = markSet;
        }
        public void Name_Unset()
        {
            this.Name_Set(default(String), false);
        }
        #endregion
        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Quest_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)Quest_FieldIndex.Icon] = value;
        }
        bool IQuestGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IQuestGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)Quest_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region Flags
        private Quest.Flag _Flags;
        public Quest.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Priority
        private Byte _Priority;
        public Byte Priority
        {
            get => this._Priority;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Priority = value;
            }
        }
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Condition> _Conditions = new SetList<Condition>();
        public ISetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IQuest.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> IQuestGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Stages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<QuestStage> _Stages = new SetList<QuestStage>();
        public ISetList<QuestStage> Stages => _Stages;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<QuestStage> IQuest.Stages => _Stages;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IQuestStageGetter> IQuestGetter.Stages => _Stages;
        #endregion

        #endregion
        #region Targets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<QuestTarget> _Targets = new SetList<QuestTarget>();
        public ISetList<QuestTarget> Targets => _Targets;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<QuestTarget> IQuest.Targets => _Targets;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IQuestTargetGetter> IQuestGetter.Targets => _Targets;
        #endregion

        #endregion
        #region DATADataTypeState
        public Quest.DATADataType DATADataTypeState { get; set; }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            QuestMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IQuestGetter rhs)) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Quest obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => QuestXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((QuestXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Quest CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Quest CreateFromXml(
            XElement node,
            out Quest_ErrorMask errorMask,
            bool doMasks = true,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Quest CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Quest() : null;
                    break;
                default:
                    break;
            }
            var ret = new Quest();
            ((QuestSetterCommon)((IQuestGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Quest CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Quest CreateFromXml(
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Quest CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Quest CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Quest CreateFromXml(
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Quest CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Quest_FieldIndex)index)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                    return _hasBeenSetTracker[index];
                case Quest_FieldIndex.Conditions:
                    return Conditions.HasBeenSet;
                case Quest_FieldIndex.Stages:
                    return Stages.HasBeenSet;
                case Quest_FieldIndex.Targets:
                    return Targets.HasBeenSet;
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Quest_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public override IEnumerable<ILinkGetter> Links => QuestCommon.Instance.GetLinks(this);
        public Quest(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Quest(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Quest CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Quest CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Quest CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Quest();
            ((QuestSetterCommon)((IQuestGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestGetter)rhs, include);

        void IClearable.Clear()
        {
            ((QuestSetterCommon)((IQuestGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Quest GetNew()
        {
            return new Quest();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuest :
        IQuestGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IQuestInternal>
    {
        new IFormIDSetLink<Script> Script { get; }
        new String Name { get; set; }
        new bool Name_IsSet { get; set; }
        void Name_Set(String value, bool hasBeenSet = true);
        void Name_Unset();

        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Quest.Flag Flags { get; set; }

        new Byte Priority { get; set; }

        new ISetList<Condition> Conditions { get; }
        new ISetList<QuestStage> Stages { get; }
        new ISetList<QuestTarget> Targets { get; }
        new Quest.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IQuestInternal :
        IOblivionMajorRecordInternal,
        IQuest,
        IQuestGetter
    {
    }

    public partial interface IQuestGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IQuestGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Script
        IFormIDSetLinkGetter<IScriptGetter> Script { get; }
        #endregion
        #region Name
        String Name { get; }
        bool Name_IsSet { get; }

        #endregion
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region Flags
        Quest.Flag Flags { get; }

        #endregion
        #region Priority
        Byte Priority { get; }

        #endregion
        #region Conditions
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        #endregion
        #region Stages
        IReadOnlySetList<IQuestStageGetter> Stages { get; }
        #endregion
        #region Targets
        IReadOnlySetList<IQuestTargetGetter> Targets { get; }
        #endregion
        #region DATADataTypeState
        Quest.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class QuestMixIn
    {
        public static void Clear(this IQuestInternal item)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Quest_Mask<bool> GetEqualsMask(
            this IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestGetter item,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestGetter item,
            FileGeneration fg,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            ((QuestCommon)((IQuestGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IQuestGetter item,
            Quest_Mask<bool?> checkMask)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Quest_Mask<bool> GetHasBeenSetMask(this IQuestGetter item)
        {
            var ret = new Quest_Mask<bool>();
            ((QuestCommon)((IQuestGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IQuestGetter item,
            IQuestGetter rhs)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            Quest_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            Quest_TranslationMask copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestInternal item,
            XElement node,
            out Quest_ErrorMask errorMask,
            bool doMasks = true,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IQuestInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Quest_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Quest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Quest_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Script = 5,
        Name = 6,
        Icon = 7,
        Flags = 8,
        Priority = 9,
        Conditions = 10,
        Stages = 11,
        Targets = 12,
        DATADataTypeState = 13,
    }
    #endregion

    #region Registration
    public class Quest_Registration : ILoquiRegistration
    {
        public static readonly Quest_Registration Instance = new Quest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 148,
            version: 0);

        public const string GUID = "bcd4f22e-1051-4402-9032-895ecb9ac0ac";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Quest_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Quest_ErrorMask);

        public static readonly Type ClassType = typeof(Quest);

        public static readonly Type GetterType = typeof(IQuestGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuest);

        public static readonly Type InternalSetterType = typeof(IQuestInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Quest";

        public const string Name = "Quest";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SCRIPT":
                    return (ushort)Quest_FieldIndex.Script;
                case "NAME":
                    return (ushort)Quest_FieldIndex.Name;
                case "ICON":
                    return (ushort)Quest_FieldIndex.Icon;
                case "FLAGS":
                    return (ushort)Quest_FieldIndex.Flags;
                case "PRIORITY":
                    return (ushort)Quest_FieldIndex.Priority;
                case "CONDITIONS":
                    return (ushort)Quest_FieldIndex.Conditions;
                case "STAGES":
                    return (ushort)Quest_FieldIndex.Stages;
                case "TARGETS":
                    return (ushort)Quest_FieldIndex.Targets;
                case "DATADATATYPESTATE":
                    return (ushort)Quest_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return true;
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                    return true;
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                case Quest_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return "Script";
                case Quest_FieldIndex.Name:
                    return "Name";
                case Quest_FieldIndex.Icon:
                    return "Icon";
                case Quest_FieldIndex.Flags:
                    return "Flags";
                case Quest_FieldIndex.Priority:
                    return "Priority";
                case Quest_FieldIndex.Conditions:
                    return "Conditions";
                case Quest_FieldIndex.Stages:
                    return "Stages";
                case Quest_FieldIndex.Targets:
                    return "Targets";
                case Quest_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                case Quest_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                case Quest_FieldIndex.Name:
                case Quest_FieldIndex.Icon:
                case Quest_FieldIndex.Flags:
                case Quest_FieldIndex.Priority:
                case Quest_FieldIndex.Conditions:
                case Quest_FieldIndex.Stages:
                case Quest_FieldIndex.Targets:
                case Quest_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Quest_FieldIndex.Name:
                    return typeof(String);
                case Quest_FieldIndex.Icon:
                    return typeof(String);
                case Quest_FieldIndex.Flags:
                    return typeof(Quest.Flag);
                case Quest_FieldIndex.Priority:
                    return typeof(Byte);
                case Quest_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case Quest_FieldIndex.Stages:
                    return typeof(ISetList<QuestStage>);
                case Quest_FieldIndex.Targets:
                    return typeof(ISetList<QuestTarget>);
                case Quest_FieldIndex.DATADataTypeState:
                    return typeof(Quest.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(QuestXmlWriteTranslation);
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType QSTA_HEADER = new RecordType("QSTA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = QUST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(QuestBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly QuestSetterCommon Instance = new QuestSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestInternal item)
        {
            ClearPartial();
            item.Script.Unset();
            item.Name_Unset();
            item.Icon_Unset();
            item.Flags = default(Quest.Flag);
            item.Priority = default(Byte);
            item.Conditions.Unset();
            item.Stages.Unset();
            item.Targets.Unset();
            item.DATADataTypeState = default(Quest.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IQuestInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Quest.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IQuestInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    QuestXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Quest_Registration.QUST_HEADER;
        protected static void FillBinaryStructs(
            IQuestInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IQuestInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey ScriptParse))
                    {
                        item.Script.FormKey = ScriptParse;
                    }
                    else
                    {
                        item.Script.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Script);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NameParse))
                    {
                        item.Name = NameParse;
                    }
                    else
                    {
                        item.Name = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Name);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Quest.DATADataType.Has;
                    }
                    if (EnumBinaryTranslation<Quest.Flag>.Instance.Parse(
                        frame: dataFrame.SpawnWithLength(1),
                        item: out Quest.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Quest.Flag);
                    }
                    item.Priority = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Priority);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                        item: item.Conditions,
                        fieldIndex: (int)Quest_FieldIndex.Conditions,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out Condition listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Conditions);
                }
                case 0x58444E49: // INDX
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestStage>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Quest_Registration.INDX_HEADER,
                        item: item.Stages,
                        fieldIndex: (int)Quest_FieldIndex.Stages,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out QuestStage listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<QuestStage>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Stages);
                }
                case 0x41545351: // QSTA
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestTarget>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Quest_Registration.QSTA_HEADER,
                        item: item.Targets,
                        fieldIndex: (int)Quest_FieldIndex.Targets,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out QuestTarget listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<QuestTarget>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Targets);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IQuestInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IQuestInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class QuestCommon : OblivionMajorRecordCommon
    {
        public new static readonly QuestCommon Instance = new QuestCommon();

        public Quest_Mask<bool> GetEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Quest_Mask<bool>();
            ((QuestCommon)((IQuestGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            Quest_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Name = item.Name_IsSet == rhs.Name_IsSet && string.Equals(item.Name, rhs.Name);
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Stages = item.Stages.CollectionEqualsHelper(
                rhs.Stages,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Targets = item.Targets.CollectionEqualsHelper(
                rhs.Targets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IQuestGetter item,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IQuestGetter item,
            FileGeneration fg,
            string name = null,
            Quest_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Quest =>");
            }
            else
            {
                fg.AppendLine($"{name} (Quest) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IQuestGetter item,
            FileGeneration fg,
            Quest_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendLine($"Priority => {item.Priority}");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Stages?.Overall ?? true)
            {
                fg.AppendLine("Stages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Stages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Targets?.Overall ?? true)
            {
                fg.AppendLine("Targets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Targets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IQuestGetter item,
            Quest_Mask<bool?> checkMask)
        {
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_IsSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.Conditions.Overall.HasValue && checkMask.Conditions.Overall.Value != item.Conditions.HasBeenSet) return false;
            if (checkMask.Stages.Overall.HasValue && checkMask.Stages.Overall.Value != item.Stages.HasBeenSet) return false;
            if (checkMask.Targets.Overall.HasValue && checkMask.Targets.Overall.Value != item.Targets.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IQuestGetter item,
            Quest_Mask<bool> mask)
        {
            mask.Script = item.Script.HasBeenSet;
            mask.Name = item.Name_IsSet;
            mask.Icon = item.Icon_IsSet;
            mask.Flags = true;
            mask.Priority = true;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition_Mask<bool>>>>(item.Conditions.HasBeenSet, item.Conditions.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Stages = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, QuestStage_Mask<bool>>>>(item.Stages.HasBeenSet, item.Stages.WithIndex().Select((i) => new MaskItemIndexed<bool, QuestStage_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Targets = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, QuestTarget_Mask<bool>>>>(item.Targets.HasBeenSet, item.Targets.WithIndex().Select((i) => new MaskItemIndexed<bool, QuestTarget_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Quest_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Quest_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Quest_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestGetter lhs,
            IQuestGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Script.HasBeenSet != rhs.Script.HasBeenSet) return false;
            if (lhs.Script.HasBeenSet)
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if (lhs.Name_IsSet != rhs.Name_IsSet) return false;
            if (lhs.Name_IsSet)
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Priority != rhs.Priority) return false;
            if (lhs.Conditions.HasBeenSet != rhs.Conditions.HasBeenSet) return false;
            if (lhs.Conditions.HasBeenSet)
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            }
            if (lhs.Stages.HasBeenSet != rhs.Stages.HasBeenSet) return false;
            if (lhs.Stages.HasBeenSet)
            {
                if (!lhs.Stages.SequenceEqual(rhs.Stages)) return false;
            }
            if (lhs.Targets.HasBeenSet != rhs.Targets.HasBeenSet) return false;
            if (lhs.Targets.HasBeenSet)
            {
                if (!lhs.Targets.SequenceEqual(rhs.Targets)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IQuestGetter)lhs,
                rhs: rhs as IQuestGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IQuestGetter)lhs,
                rhs: rhs as IQuestGetter);
        }
        
        public virtual int GetHashCode(IQuestGetter item)
        {
            int ret = 0;
            if (item.Script.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Script).CombineHashCode(ret);
            }
            if (item.Name_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            }
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Priority).CombineHashCode(ret);
            if (item.Conditions.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            }
            if (item.Stages.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Stages).CombineHashCode(ret);
            }
            if (item.Targets.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Targets).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Quest.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IQuestGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            foreach (var item in obj.Stages.WhereCastable<IQuestStageGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            foreach (var item in obj.Targets.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Quest obj, Quest rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Quest(getNextFormKey());
            ret.DeepCopyFieldsFrom((Quest)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Quest)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class QuestSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly QuestSetterTranslationCommon Instance = new QuestSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IQuestInternal item,
            IQuestGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Script);
                try
                {
                    item.Script.SetToFormKey(rhs: rhs.Script);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Name);
                try
                {
                    if (rhs.Name_IsSet)
                    {
                        item.Name = rhs.Name;
                    }
                    else
                    {
                        item.Name_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Icon) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Icon);
                try
                {
                    if (rhs.Icon_IsSet)
                    {
                        item.Icon = rhs.Icon;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Conditions);
                try
                {
                    if (rhs.Conditions.HasBeenSet)
                    {
                        item.Conditions.SetTo(
                            items: rhs.Conditions,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Conditions.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                try
                {
                    if (rhs.Stages.HasBeenSet)
                    {
                        item.Stages.SetTo(
                            items: rhs.Stages,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Stages.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Targets) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Targets);
                try
                {
                    if (rhs.Targets.HasBeenSet)
                    {
                        item.Targets.SetTo(
                            items: rhs.Targets,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Targets.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Quest DeepCopy(
            IQuestGetter item,
            Quest_TranslationMask copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Quest
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static Quest_Registration Registration => Quest_Registration.Instance;
        protected override object CommonInstance() => QuestCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return QuestSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static QuestXmlWriteTranslation Instance = new QuestXmlWriteTranslation();

        public static void WriteToNodeXml(
            IQuestGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script?.FormKey,
                    fieldIndex: (int)Quest_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Name_IsSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Quest_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Quest_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Quest.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Quest.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Quest_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Priority),
                        item: item.Priority,
                        fieldIndex: (int)Quest_FieldIndex.Priority,
                        errorMask: errorMask);
                }
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)Quest_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Stages.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                ListXmlTranslation<IQuestStageGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Stages),
                    item: item.Stages,
                    fieldIndex: (int)Quest_FieldIndex.Stages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Stages),
                    transl: (XElement subNode, IQuestStageGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((QuestStageXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Targets.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Quest_FieldIndex.Targets) ?? true))
            {
                ListXmlTranslation<IQuestTargetGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Targets),
                    item: item.Targets,
                    fieldIndex: (int)Quest_FieldIndex.Targets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Quest_FieldIndex.Targets),
                    transl: (XElement subNode, IQuestTargetGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((QuestTargetXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Quest_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Quest.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Quest_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IQuestGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Quest");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Quest");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IQuestGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IQuestGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IQuestGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class QuestXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static QuestXmlCreateTranslation Instance = new QuestXmlCreateTranslation();

        public static void FillPublicXml(
            IQuestInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IQuestInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Script);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey ScriptParse,
                            errorMask: errorMask))
                        {
                            item.Script.FormKey = ScriptParse;
                        }
                        else
                        {
                            item.Script.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Flags);
                        if (EnumXmlTranslation<Quest.Flag>.Instance.Parse(
                            node: node,
                            item: out Quest.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Quest.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Quest.DATADataType.Has;
                    break;
                case "Priority":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Priority);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte PriorityParse,
                            errorMask: errorMask))
                        {
                            item.Priority = PriorityParse;
                        }
                        else
                        {
                            item.Priority = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Conditions);
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stages":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                        if (ListXmlTranslation<QuestStage>.Instance.Parse(
                            node: node,
                            enumer: out var StagesItem,
                            transl: LoquiXmlTranslation<QuestStage>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Stages.SetTo(StagesItem);
                        }
                        else
                        {
                            item.Stages.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Targets":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.Targets);
                        if (ListXmlTranslation<QuestTarget>.Instance.Parse(
                            node: node,
                            enumer: out var TargetsItem,
                            transl: LoquiXmlTranslation<QuestTarget>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Targets.SetTo(TargetsItem);
                        }
                        else
                        {
                            item.Targets.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Quest_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Quest.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Quest.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Quest.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class QuestXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IQuestGetter item,
            XElement node,
            out Quest_ErrorMask errorMask,
            bool doMasks = true,
            Quest_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IQuestGetter item,
            string path,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestGetter item,
            Stream stream,
            out Quest_ErrorMask errorMask,
            Quest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Quest_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Quest_Mask<T>>
    {
        #region Ctors
        public Quest_Mask()
        {
        }

        public Quest_Mask(T initialValue)
        {
            this.Script = initialValue;
            this.Name = initialValue;
            this.Icon = initialValue;
            this.Flags = initialValue;
            this.Priority = initialValue;
            this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>>(initialValue, null);
            this.Stages = new MaskItem<T, IEnumerable<MaskItemIndexed<T, QuestStage_Mask<T>>>>(initialValue, null);
            this.Targets = new MaskItem<T, IEnumerable<MaskItemIndexed<T, QuestTarget_Mask<T>>>>(initialValue, null);
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Script;
        public T Name;
        public T Icon;
        public T Flags;
        public T Priority;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition_Mask<T>>>> Conditions;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, QuestStage_Mask<T>>>> Stages;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, QuestTarget_Mask<T>>>> Targets;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Quest_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Quest_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Priority, rhs.Priority)) return false;
            if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
            if (!object.Equals(this.Stages, rhs.Stages)) return false;
            if (!object.Equals(this.Targets, rhs.Targets)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Priority?.GetHashCode());
            ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
            ret = ret.CombineHashCode(this.Stages?.GetHashCode());
            ret = ret.CombineHashCode(this.Targets?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Name)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Priority)) return false;
            if (this.Conditions != null)
            {
                if (!eval(this.Conditions.Overall)) return false;
                if (this.Conditions.Specific != null)
                {
                    foreach (var item in this.Conditions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Stages != null)
            {
                if (!eval(this.Stages.Overall)) return false;
                if (this.Stages.Specific != null)
                {
                    foreach (var item in this.Stages.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Targets != null)
            {
                if (!eval(this.Targets.Overall)) return false;
                if (this.Targets.Specific != null)
                {
                    foreach (var item in this.Targets.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Quest_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Quest_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Quest_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Script = eval(this.Script);
            obj.Name = eval(this.Name);
            obj.Icon = eval(this.Icon);
            obj.Flags = eval(this.Flags);
            obj.Priority = eval(this.Priority);
            if (Conditions != null)
            {
                obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition_Mask<R>>>>();
                obj.Conditions.Overall = eval(this.Conditions.Overall);
                if (Conditions.Specific != null)
                {
                    List<MaskItemIndexed<R, Condition_Mask<R>>> l = new List<MaskItemIndexed<R, Condition_Mask<R>>>();
                    obj.Conditions.Specific = l;
                    foreach (var item in Conditions.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Condition_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Condition_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Stages != null)
            {
                obj.Stages = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestStage_Mask<R>>>>();
                obj.Stages.Overall = eval(this.Stages.Overall);
                if (Stages.Specific != null)
                {
                    List<MaskItemIndexed<R, QuestStage_Mask<R>>> l = new List<MaskItemIndexed<R, QuestStage_Mask<R>>>();
                    obj.Stages.Specific = l;
                    foreach (var item in Stages.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, QuestStage_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, QuestStage_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Targets != null)
            {
                obj.Targets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestTarget_Mask<R>>>>();
                obj.Targets.Overall = eval(this.Targets.Overall);
                if (Targets.Specific != null)
                {
                    List<MaskItemIndexed<R, QuestTarget_Mask<R>>> l = new List<MaskItemIndexed<R, QuestTarget_Mask<R>>>();
                    obj.Targets.Specific = l;
                    foreach (var item in Targets.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, QuestTarget_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, QuestTarget_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Conditions.Specific = null;
            this.Stages.Specific = null;
            this.Targets.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Quest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Quest_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Quest_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Priority ?? true)
                {
                    fg.AppendLine($"Priority => {Priority}");
                }
                if (printMask?.Conditions?.Overall ?? true)
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Stages?.Overall ?? true)
                {
                    fg.AppendLine("Stages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Stages.Overall != null)
                        {
                            fg.AppendLine(Stages.Overall.ToString());
                        }
                        if (Stages.Specific != null)
                        {
                            foreach (var subItem in Stages.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Targets?.Overall ?? true)
                {
                    fg.AppendLine("Targets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Targets.Overall != null)
                        {
                            fg.AppendLine(Targets.Overall.ToString());
                        }
                        if (Targets.Specific != null)
                        {
                            foreach (var subItem in Targets.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Quest_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Quest_ErrorMask>
    {
        #region Members
        public Exception Script;
        public Exception Name;
        public Exception Icon;
        public Exception Flags;
        public Exception Priority;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>> Conditions;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>> Stages;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>> Targets;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    return Script;
                case Quest_FieldIndex.Name:
                    return Name;
                case Quest_FieldIndex.Icon:
                    return Icon;
                case Quest_FieldIndex.Flags:
                    return Flags;
                case Quest_FieldIndex.Priority:
                    return Priority;
                case Quest_FieldIndex.Conditions:
                    return Conditions;
                case Quest_FieldIndex.Stages:
                    return Stages;
                case Quest_FieldIndex.Targets:
                    return Targets;
                case Quest_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Quest_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Quest_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Quest_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Quest_FieldIndex.Priority:
                    this.Priority = ex;
                    break;
                case Quest_FieldIndex.Conditions:
                    this.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(ex, null);
                    break;
                case Quest_FieldIndex.Stages:
                    this.Stages = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>(ex, null);
                    break;
                case Quest_FieldIndex.Targets:
                    this.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>(ex, null);
                    break;
                case Quest_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Quest_FieldIndex enu = (Quest_FieldIndex)index;
            switch (enu)
            {
                case Quest_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Quest_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Quest_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Quest_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Quest_FieldIndex.Priority:
                    this.Priority = (Exception)obj;
                    break;
                case Quest_FieldIndex.Conditions:
                    this.Conditions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>)obj;
                    break;
                case Quest_FieldIndex.Stages:
                    this.Stages = (MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>)obj;
                    break;
                case Quest_FieldIndex.Targets:
                    this.Targets = (MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>)obj;
                    break;
                case Quest_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Script != null) return true;
            if (Name != null) return true;
            if (Icon != null) return true;
            if (Flags != null) return true;
            if (Priority != null) return true;
            if (Conditions != null) return true;
            if (Stages != null) return true;
            if (Targets != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Quest_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Priority => {Priority}");
            fg.AppendLine("Conditions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Conditions.Overall != null)
                {
                    fg.AppendLine(Conditions.Overall.ToString());
                }
                if (Conditions.Specific != null)
                {
                    foreach (var subItem in Conditions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Stages =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Stages.Overall != null)
                {
                    fg.AppendLine(Stages.Overall.ToString());
                }
                if (Stages.Specific != null)
                {
                    foreach (var subItem in Stages.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Targets =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Targets.Overall != null)
                {
                    fg.AppendLine(Targets.Overall.ToString());
                }
                if (Targets.Specific != null)
                {
                    foreach (var subItem in Targets.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Quest_ErrorMask Combine(Quest_ErrorMask rhs)
        {
            var ret = new Quest_ErrorMask();
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Priority = this.Priority.Combine(rhs.Priority);
            ret.Conditions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Condition_ErrorMask>>>(this.Conditions.Overall.Combine(rhs.Conditions.Overall), new List<MaskItem<Exception, Condition_ErrorMask>>(this.Conditions.Specific.And(rhs.Conditions.Specific)));
            ret.Stages = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestStage_ErrorMask>>>(this.Stages.Overall.Combine(rhs.Stages.Overall), new List<MaskItem<Exception, QuestStage_ErrorMask>>(this.Stages.Specific.And(rhs.Stages.Specific)));
            ret.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, QuestTarget_ErrorMask>>>(this.Targets.Overall.Combine(rhs.Targets.Overall), new List<MaskItem<Exception, QuestTarget_ErrorMask>>(this.Targets.Specific.And(rhs.Targets.Specific)));
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Quest_ErrorMask Combine(Quest_ErrorMask lhs, Quest_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Quest_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Quest_ErrorMask();
        }
        #endregion

    }
    public class Quest_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Script;
        public bool Name;
        public bool Icon;
        public bool Flags;
        public bool Priority;
        public MaskItem<bool, Condition_TranslationMask> Conditions;
        public MaskItem<bool, QuestStage_TranslationMask> Stages;
        public MaskItem<bool, QuestTarget_TranslationMask> Targets;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Quest_TranslationMask()
            : base()
        {
        }

        public Quest_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Script = defaultOn;
            this.Name = defaultOn;
            this.Icon = defaultOn;
            this.Flags = defaultOn;
            this.Priority = defaultOn;
            this.Conditions = new MaskItem<bool, Condition_TranslationMask>(defaultOn, null);
            this.Stages = new MaskItem<bool, QuestStage_TranslationMask>(defaultOn, null);
            this.Targets = new MaskItem<bool, QuestTarget_TranslationMask>(defaultOn, null);
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Script, null));
            ret.Add((Name, null));
            ret.Add((Icon, null));
            ret.Add((Flags, null));
            ret.Add((Priority, null));
            ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            ret.Add((Stages?.Overall ?? true, Stages?.Specific?.GetCrystal()));
            ret.Add((Targets?.Overall ?? true, Targets?.Specific?.GetCrystal()));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static QuestBinaryWriteTranslation Instance = new QuestBinaryWriteTranslation();

        public static void Write_Embedded(
            IQuestGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IQuestGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Script.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Script,
                    header: recordTypeConverter.ConvertToCustom(Quest_Registration.SCRI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Name_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    header: recordTypeConverter.ConvertToCustom(Quest_Registration.FULL_HEADER),
                    nullable: false);
            }
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Quest_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.DATADataTypeState.HasFlag(Quest.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Quest_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Quest.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    writer.Write(item.Priority);
                }
            }
            if (item.Conditions.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                    writer: writer,
                    items: item.Conditions,
                    fieldIndex: (int)Quest_FieldIndex.Conditions,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IConditionGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Stages.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IQuestStageGetter>.Instance.Write(
                    writer: writer,
                    items: item.Stages,
                    fieldIndex: (int)Quest_FieldIndex.Stages,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IQuestStageGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((QuestStageBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.Targets.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IQuestTargetGetter>.Instance.Write(
                    writer: writer,
                    items: item.Targets,
                    fieldIndex: (int)Quest_FieldIndex.Targets,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IQuestTargetGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((QuestTargetBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IQuestGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Quest_Registration.QUST_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IQuestGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IQuestGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IQuestGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class QuestBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static QuestBinaryCreateTranslation Instance = new QuestBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class QuestBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Quest_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((QuestBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Quest_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class QuestBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IQuestGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static Quest_Registration Registration => Quest_Registration.Instance;
        protected override object CommonInstance() => QuestCommon.Instance;
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => QuestCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => QuestXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((QuestXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        #endregion
        #region Name
        private int? _NameLocation;
        public bool Name_IsSet => _NameLocation.HasValue;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Icon
        private int? _IconLocation;
        public bool Icon_IsSet => _IconLocation.HasValue;
        public String Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default;
        #endregion
        private int? _DATALocation;
        public Quest.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Quest.Flag Flags => _Flags_IsSet ? (Quest.Flag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Priority
        private int _PriorityLocation => _DATALocation.Value + 0x1;
        private bool _Priority_IsSet => _DATALocation.HasValue;
        public Byte Priority => _Priority_IsSet ? _data.Span[_PriorityLocation] : default;
        #endregion
        public IReadOnlySetList<IConditionGetter> Conditions { get; private set; } = EmptySetList<ConditionBinaryWrapper>.Instance;
        public IReadOnlySetList<IQuestStageGetter> Stages { get; private set; } = EmptySetList<QuestStageBinaryWrapper>.Instance;
        public IReadOnlySetList<IQuestTargetGetter> Targets { get; private set; } = EmptySetList<QuestTargetBinaryWrapper>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected QuestBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static QuestBinaryWrapper QuestFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new QuestBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Script);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Name);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Quest.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Priority);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryWrapperSetList<ConditionBinaryWrapper>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryWrapper.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Conditions);
                }
                case 0x58444E49: // INDX
                {
                    this.Stages = this.ParseRepeatedTypelessSubrecord<QuestStageBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Quest_Registration.INDX_HEADER,
                        factory:  QuestStageBinaryWrapper.QuestStageFactory);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Stages);
                }
                case 0x41545351: // QSTA
                {
                    this.Targets = this.ParseRepeatedTypelessSubrecord<QuestTargetBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Quest_Registration.QSTA_HEADER,
                        factory:  QuestTargetBinaryWrapper.QuestTargetFactory);
                    return TryGet<int?>.Succeed((int)Quest_FieldIndex.Targets);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

