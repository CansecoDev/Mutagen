/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Race :
        OblivionMajorRecord,
        IRaceInternal,
        ILoquiObjectSetter<Race>,
        INamed,
        IEquatable<Race>,
        IEqualsMask
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Description => this.Description;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Spell>> _Spells = new SetList<IFormLink<Spell>>();
        public ISetList<IFormLink<Spell>> Spells => _Spells;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Spell>> IRace.Spells => _Spells;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<ISpellGetter>> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<RaceRelation> _Relations = new SetList<RaceRelation>();
        public ISetList<RaceRelation> Relations => _Relations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RaceRelation> IRace.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRaceRelationGetter> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region SkillBoost0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost0 = new SkillBoost();
        public SkillBoost SkillBoost0
        {
            get => _SkillBoost0;
            set => _SkillBoost0 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost0 => _SkillBoost0;
        #endregion
        #region SkillBoost1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost1 = new SkillBoost();
        public SkillBoost SkillBoost1
        {
            get => _SkillBoost1;
            set => _SkillBoost1 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost1 => _SkillBoost1;
        #endregion
        #region SkillBoost2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost2 = new SkillBoost();
        public SkillBoost SkillBoost2
        {
            get => _SkillBoost2;
            set => _SkillBoost2 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost2 => _SkillBoost2;
        #endregion
        #region SkillBoost3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost3 = new SkillBoost();
        public SkillBoost SkillBoost3
        {
            get => _SkillBoost3;
            set => _SkillBoost3 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost3 => _SkillBoost3;
        #endregion
        #region SkillBoost4
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost4 = new SkillBoost();
        public SkillBoost SkillBoost4
        {
            get => _SkillBoost4;
            set => _SkillBoost4 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost4 => _SkillBoost4;
        #endregion
        #region SkillBoost5
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost5 = new SkillBoost();
        public SkillBoost SkillBoost5
        {
            get => _SkillBoost5;
            set => _SkillBoost5 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost5 => _SkillBoost5;
        #endregion
        #region SkillBoost6
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillBoost _SkillBoost6 = new SkillBoost();
        public SkillBoost SkillBoost6
        {
            get => _SkillBoost6;
            set => _SkillBoost6 = value ?? new SkillBoost();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost6 => _SkillBoost6;
        #endregion
        #region Fluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Fluff = new byte[4];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IRaceGetter.Fluff => this.Fluff;
        #endregion
        #region MaleHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _MaleHeight;
        public Single MaleHeight
        {
            get => this._MaleHeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MaleHeight = value;
            }
        }
        #endregion
        #region FemaleHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FemaleHeight;
        public Single FemaleHeight
        {
            get => this._FemaleHeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FemaleHeight = value;
            }
        }
        #endregion
        #region MaleWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _MaleWeight;
        public Single MaleWeight
        {
            get => this._MaleWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MaleWeight = value;
            }
        }
        #endregion
        #region FemaleWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FemaleWeight;
        public Single FemaleWeight
        {
            get => this._FemaleWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FemaleWeight = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Race.Flag _Flags;
        public Race.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Voices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RaceVoices? _Voices;
        public RaceVoices? Voices
        {
            get => _Voices;
            set => _Voices = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceVoicesGetter? IRaceGetter.Voices => this.Voices;
        #endregion
        #region DefaultHair
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RaceHair? _DefaultHair;
        public RaceHair? DefaultHair
        {
            get => _DefaultHair;
            set => _DefaultHair = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceHairGetter? IRaceGetter.DefaultHair => this.DefaultHair;
        #endregion
        #region DefaultHairColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _DefaultHairColor;
        public Byte? DefaultHairColor
        {
            get => this._DefaultHairColor;
            set => this._DefaultHairColor = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IRaceGetter.DefaultHairColor => this.DefaultHairColor;
        #endregion
        #region FaceGenMainClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _FaceGenMainClamp;
        public Int32? FaceGenMainClamp
        {
            get => this._FaceGenMainClamp;
            set => this._FaceGenMainClamp = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenMainClamp => this.FaceGenMainClamp;
        #endregion
        #region FaceGenFaceClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _FaceGenFaceClamp;
        public Int32? FaceGenFaceClamp
        {
            get => this._FaceGenFaceClamp;
            set => this._FaceGenFaceClamp = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenFaceClamp => this.FaceGenFaceClamp;
        #endregion
        #region RaceStats
        public GenderedItem<RaceStats>? RaceStats { get; set; }
        IGenderedItemGetter<IRaceStatsGetter>? IRaceGetter.RaceStats => this.RaceStats;
        #endregion
        #region FaceData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<FacePart> _FaceData = new SetList<FacePart>();
        public ISetList<FacePart> FaceData => _FaceData;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<FacePart> IRace.FaceData => _FaceData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFacePartGetter> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenderedBodyData? _BodyData;
        public GenderedBodyData? BodyData
        {
            get => _BodyData;
            set => _BodyData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGenderedBodyDataGetter? IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Hair>> _Hairs = new SetList<IFormLink<Hair>>();
        public ISetList<IFormLink<Hair>> Hairs => _Hairs;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Hair>> IRace.Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IHairGetter>> IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Eye>> _Eyes = new SetList<IFormLink<Eye>>();
        public ISetList<IFormLink<Eye>> Eyes => _Eyes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Eye>> IRace.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FaceGenData? _FaceGenData;
        public FaceGenData? FaceGenData
        {
            get => _FaceGenData;
            set => _FaceGenData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceGenDataGetter? IRaceGetter.FaceGenData => this.FaceGenData;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IRaceGetter.Unknown => this.Unknown;
        bool IRaceGetter.Unknown_IsSet => this.Unknown != null;
        #endregion
        #region DATADataTypeState
        public Race.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRaceGetter rhs)) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Race obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Race CreateFromXml(
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Race CreateFromXml(
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Race CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Race CreateFromXml(
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Race CreateFromXml(
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            OblivionMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RaceRelation.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, RaceRelation.Mask<T>?>>());
                this.SkillBoost0 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost1 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost2 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost3 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost4 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost5 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.SkillBoost6 = new MaskItem<T, SkillBoost.Mask<T>?>(initialValue, new SkillBoost.Mask<T>(initialValue));
                this.Fluff = initialValue;
                this.MaleHeight = initialValue;
                this.FemaleHeight = initialValue;
                this.MaleWeight = initialValue;
                this.FemaleWeight = initialValue;
                this.Flags = initialValue;
                this.Voices = new MaskItem<T, RaceVoices.Mask<T>?>(initialValue, new RaceVoices.Mask<T>(initialValue));
                this.DefaultHair = new MaskItem<T, RaceHair.Mask<T>?>(initialValue, new RaceHair.Mask<T>(initialValue));
                this.DefaultHairColor = initialValue;
                this.FaceGenMainClamp = initialValue;
                this.FaceGenFaceClamp = initialValue;
                this.RaceStats = new MaskItem<T, GenderedItem<RaceStats.Mask<T>?>?>(initialValue, default);
                this.FaceData = new MaskItem<T, IEnumerable<MaskItemIndexed<T, FacePart.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, FacePart.Mask<T>?>>());
                this.BodyData = new MaskItem<T, GenderedBodyData.Mask<T>?>(initialValue, new GenderedBodyData.Mask<T>(initialValue));
                this.Hairs = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.FaceGenData = new MaskItem<T, FaceGenData.Mask<T>?>(initialValue, new FaceGenData.Mask<T>(initialValue));
                this.Unknown = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Name,
                T Description,
                T Spells,
                T Relations,
                T SkillBoost0,
                T SkillBoost1,
                T SkillBoost2,
                T SkillBoost3,
                T SkillBoost4,
                T SkillBoost5,
                T SkillBoost6,
                T Fluff,
                T MaleHeight,
                T FemaleHeight,
                T MaleWeight,
                T FemaleWeight,
                T Flags,
                T Voices,
                T DefaultHair,
                T DefaultHairColor,
                T FaceGenMainClamp,
                T FaceGenFaceClamp,
                T RaceStats,
                T FaceData,
                T BodyData,
                T Hairs,
                T Eyes,
                T FaceGenData,
                T Unknown,
                T DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Spells = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Spells, Enumerable.Empty<(int Index, T Value)>());
                this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RaceRelation.Mask<T>?>>>(Relations, Enumerable.Empty<MaskItemIndexed<T, RaceRelation.Mask<T>?>>());
                this.SkillBoost0 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost0, new SkillBoost.Mask<T>(SkillBoost0));
                this.SkillBoost1 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost1, new SkillBoost.Mask<T>(SkillBoost1));
                this.SkillBoost2 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost2, new SkillBoost.Mask<T>(SkillBoost2));
                this.SkillBoost3 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost3, new SkillBoost.Mask<T>(SkillBoost3));
                this.SkillBoost4 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost4, new SkillBoost.Mask<T>(SkillBoost4));
                this.SkillBoost5 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost5, new SkillBoost.Mask<T>(SkillBoost5));
                this.SkillBoost6 = new MaskItem<T, SkillBoost.Mask<T>?>(SkillBoost6, new SkillBoost.Mask<T>(SkillBoost6));
                this.Fluff = Fluff;
                this.MaleHeight = MaleHeight;
                this.FemaleHeight = FemaleHeight;
                this.MaleWeight = MaleWeight;
                this.FemaleWeight = FemaleWeight;
                this.Flags = Flags;
                this.Voices = new MaskItem<T, RaceVoices.Mask<T>?>(Voices, new RaceVoices.Mask<T>(Voices));
                this.DefaultHair = new MaskItem<T, RaceHair.Mask<T>?>(DefaultHair, new RaceHair.Mask<T>(DefaultHair));
                this.DefaultHairColor = DefaultHairColor;
                this.FaceGenMainClamp = FaceGenMainClamp;
                this.FaceGenFaceClamp = FaceGenFaceClamp;
                this.RaceStats = new MaskItem<T, GenderedItem<RaceStats.Mask<T>?>?>(RaceStats, default);
                this.FaceData = new MaskItem<T, IEnumerable<MaskItemIndexed<T, FacePart.Mask<T>?>>>(FaceData, Enumerable.Empty<MaskItemIndexed<T, FacePart.Mask<T>?>>());
                this.BodyData = new MaskItem<T, GenderedBodyData.Mask<T>?>(BodyData, new GenderedBodyData.Mask<T>(BodyData));
                this.Hairs = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Hairs, Enumerable.Empty<(int Index, T Value)>());
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Eyes, Enumerable.Empty<(int Index, T Value)>());
                this.FaceGenData = new MaskItem<T, FaceGenData.Mask<T>?>(FaceGenData, new FaceGenData.Mask<T>(FaceGenData));
                this.Unknown = Unknown;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Description;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Spells;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, RaceRelation.Mask<T>?>>>? Relations;
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost0 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost1 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost2 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost3 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost4 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost5 { get; set; }
            public MaskItem<T, SkillBoost.Mask<T>?>? SkillBoost6 { get; set; }
            public T Fluff;
            public T MaleHeight;
            public T FemaleHeight;
            public T MaleWeight;
            public T FemaleWeight;
            public T Flags;
            public MaskItem<T, RaceVoices.Mask<T>?>? Voices { get; set; }
            public MaskItem<T, RaceHair.Mask<T>?>? DefaultHair { get; set; }
            public T DefaultHairColor;
            public T FaceGenMainClamp;
            public T FaceGenFaceClamp;
            public MaskItem<T, GenderedItem<RaceStats.Mask<T>?>?>? RaceStats;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, FacePart.Mask<T>?>>>? FaceData;
            public MaskItem<T, GenderedBodyData.Mask<T>?>? BodyData { get; set; }
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Hairs;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Eyes;
            public MaskItem<T, FaceGenData.Mask<T>?>? FaceGenData { get; set; }
            public T Unknown;
            public T DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.SkillBoost0, rhs.SkillBoost0)) return false;
                if (!object.Equals(this.SkillBoost1, rhs.SkillBoost1)) return false;
                if (!object.Equals(this.SkillBoost2, rhs.SkillBoost2)) return false;
                if (!object.Equals(this.SkillBoost3, rhs.SkillBoost3)) return false;
                if (!object.Equals(this.SkillBoost4, rhs.SkillBoost4)) return false;
                if (!object.Equals(this.SkillBoost5, rhs.SkillBoost5)) return false;
                if (!object.Equals(this.SkillBoost6, rhs.SkillBoost6)) return false;
                if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
                if (!object.Equals(this.MaleHeight, rhs.MaleHeight)) return false;
                if (!object.Equals(this.FemaleHeight, rhs.FemaleHeight)) return false;
                if (!object.Equals(this.MaleWeight, rhs.MaleWeight)) return false;
                if (!object.Equals(this.FemaleWeight, rhs.FemaleWeight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
                if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
                if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
                if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
                if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
                if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Spells?.GetHashCode());
                ret = ret.CombineHashCode(this.Relations?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost0?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost1?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost2?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost3?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost4?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost5?.GetHashCode());
                ret = ret.CombineHashCode(this.SkillBoost6?.GetHashCode());
                ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleHeight?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleHeight?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Voices?.GetHashCode());
                ret = ret.CombineHashCode(this.DefaultHair?.GetHashCode());
                ret = ret.CombineHashCode(this.DefaultHairColor?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenMainClamp?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenFaceClamp?.GetHashCode());
                ret = ret.CombineHashCode(this.RaceStats?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceData?.GetHashCode());
                ret = ret.CombineHashCode(this.BodyData?.GetHashCode());
                ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
                ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceGenData?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                        }
                    }
                }
                if (SkillBoost0 != null)
                {
                    if (!eval(this.SkillBoost0.Overall)) return false;
                    if (this.SkillBoost0.Specific != null && !this.SkillBoost0.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost1 != null)
                {
                    if (!eval(this.SkillBoost1.Overall)) return false;
                    if (this.SkillBoost1.Specific != null && !this.SkillBoost1.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost2 != null)
                {
                    if (!eval(this.SkillBoost2.Overall)) return false;
                    if (this.SkillBoost2.Specific != null && !this.SkillBoost2.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost3 != null)
                {
                    if (!eval(this.SkillBoost3.Overall)) return false;
                    if (this.SkillBoost3.Specific != null && !this.SkillBoost3.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost4 != null)
                {
                    if (!eval(this.SkillBoost4.Overall)) return false;
                    if (this.SkillBoost4.Specific != null && !this.SkillBoost4.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost5 != null)
                {
                    if (!eval(this.SkillBoost5.Overall)) return false;
                    if (this.SkillBoost5.Specific != null && !this.SkillBoost5.Specific.AllEqual(eval)) return false;
                }
                if (SkillBoost6 != null)
                {
                    if (!eval(this.SkillBoost6.Overall)) return false;
                    if (this.SkillBoost6.Specific != null && !this.SkillBoost6.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.Fluff)) return false;
                if (!eval(this.MaleHeight)) return false;
                if (!eval(this.FemaleHeight)) return false;
                if (!eval(this.MaleWeight)) return false;
                if (!eval(this.FemaleWeight)) return false;
                if (!eval(this.Flags)) return false;
                if (Voices != null)
                {
                    if (!eval(this.Voices.Overall)) return false;
                    if (this.Voices.Specific != null && !this.Voices.Specific.AllEqual(eval)) return false;
                }
                if (DefaultHair != null)
                {
                    if (!eval(this.DefaultHair.Overall)) return false;
                    if (this.DefaultHair.Specific != null && !this.DefaultHair.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.DefaultHairColor)) return false;
                if (!eval(this.FaceGenMainClamp)) return false;
                if (!eval(this.FaceGenFaceClamp)) return false;
                if (!GenderedItem.AllEqualMask(
                    this.RaceStats,
                    eval: eval)) return false;
                if (this.FaceData != null)
                {
                    if (!eval(this.FaceData.Overall)) return false;
                    if (this.FaceData.Specific != null)
                    {
                        foreach (var item in this.FaceData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                        }
                    }
                }
                if (BodyData != null)
                {
                    if (!eval(this.BodyData.Overall)) return false;
                    if (this.BodyData.Specific != null && !this.BodyData.Specific.AllEqual(eval)) return false;
                }
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FaceGenData != null)
                {
                    if (!eval(this.FaceGenData.Overall)) return false;
                    if (this.FaceGenData.Specific != null && !this.FaceGenData.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceRelation.Mask<R>?>>>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, RaceRelation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RaceRelation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RaceRelation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RaceRelation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SkillBoost0 = this.SkillBoost0 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost0.Overall), this.SkillBoost0.Specific?.Translate(eval));
                obj.SkillBoost1 = this.SkillBoost1 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost1.Overall), this.SkillBoost1.Specific?.Translate(eval));
                obj.SkillBoost2 = this.SkillBoost2 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost2.Overall), this.SkillBoost2.Specific?.Translate(eval));
                obj.SkillBoost3 = this.SkillBoost3 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost3.Overall), this.SkillBoost3.Specific?.Translate(eval));
                obj.SkillBoost4 = this.SkillBoost4 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost4.Overall), this.SkillBoost4.Specific?.Translate(eval));
                obj.SkillBoost5 = this.SkillBoost5 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost5.Overall), this.SkillBoost5.Specific?.Translate(eval));
                obj.SkillBoost6 = this.SkillBoost6 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost6.Overall), this.SkillBoost6.Specific?.Translate(eval));
                obj.Fluff = eval(this.Fluff);
                obj.MaleHeight = eval(this.MaleHeight);
                obj.FemaleHeight = eval(this.FemaleHeight);
                obj.MaleWeight = eval(this.MaleWeight);
                obj.FemaleWeight = eval(this.FemaleWeight);
                obj.Flags = eval(this.Flags);
                obj.Voices = this.Voices == null ? null : new MaskItem<R, RaceVoices.Mask<R>?>(eval(this.Voices.Overall), this.Voices.Specific?.Translate(eval));
                obj.DefaultHair = this.DefaultHair == null ? null : new MaskItem<R, RaceHair.Mask<R>?>(eval(this.DefaultHair.Overall), this.DefaultHair.Specific?.Translate(eval));
                obj.DefaultHairColor = eval(this.DefaultHairColor);
                obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
                obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
                if (this.RaceStats == null)
                {
                    obj.RaceStats = null;
                }
                else
                {
                    obj.RaceStats = new MaskItem<R, GenderedItem<RaceStats.Mask<R>?>?>(
                        eval(this.RaceStats.Overall),
                        this.RaceStats.Specific == null ? null : new GenderedItem<RaceStats.Mask<R>?>(this.RaceStats.Specific.Male?.Translate(eval), this.RaceStats.Specific.Female?.Translate(eval)));
                }
                if (FaceData != null)
                {
                    obj.FaceData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FacePart.Mask<R>?>>>(eval(this.FaceData.Overall), Enumerable.Empty<MaskItemIndexed<R, FacePart.Mask<R>?>>());
                    if (FaceData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FacePart.Mask<R>?>>();
                        obj.FaceData.Specific = l;
                        foreach (var item in FaceData.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, FacePart.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, FacePart.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = this.BodyData == null ? null : new MaskItem<R, GenderedBodyData.Mask<R>?>(eval(this.BodyData.Overall), this.BodyData.Specific?.Translate(eval));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FaceGenData = this.FaceGenData == null ? null : new MaskItem<R, FaceGenData.Mask<R>?>(eval(this.FaceGenData.Overall), this.FaceGenData.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Race.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Race.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Race.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendLine($"Description => {Description}");
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Spells != null)
                            {
                                if (Spells.Overall != null)
                                {
                                    fg.AppendLine(Spells.Overall.ToString());
                                }
                                if (Spells.Specific != null)
                                {
                                    foreach (var subItem in Spells.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Relations?.Overall ?? true)
                    {
                        fg.AppendLine("Relations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Relations != null)
                            {
                                if (Relations.Overall != null)
                                {
                                    fg.AppendLine(Relations.Overall.ToString());
                                }
                                if (Relations.Specific != null)
                                {
                                    foreach (var subItem in Relations.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SkillBoost0?.Overall ?? true)
                    {
                        SkillBoost0?.ToString(fg);
                    }
                    if (printMask?.SkillBoost1?.Overall ?? true)
                    {
                        SkillBoost1?.ToString(fg);
                    }
                    if (printMask?.SkillBoost2?.Overall ?? true)
                    {
                        SkillBoost2?.ToString(fg);
                    }
                    if (printMask?.SkillBoost3?.Overall ?? true)
                    {
                        SkillBoost3?.ToString(fg);
                    }
                    if (printMask?.SkillBoost4?.Overall ?? true)
                    {
                        SkillBoost4?.ToString(fg);
                    }
                    if (printMask?.SkillBoost5?.Overall ?? true)
                    {
                        SkillBoost5?.ToString(fg);
                    }
                    if (printMask?.SkillBoost6?.Overall ?? true)
                    {
                        SkillBoost6?.ToString(fg);
                    }
                    if (printMask?.Fluff ?? true)
                    {
                        fg.AppendLine($"Fluff => {Fluff}");
                    }
                    if (printMask?.MaleHeight ?? true)
                    {
                        fg.AppendLine($"MaleHeight => {MaleHeight}");
                    }
                    if (printMask?.FemaleHeight ?? true)
                    {
                        fg.AppendLine($"FemaleHeight => {FemaleHeight}");
                    }
                    if (printMask?.MaleWeight ?? true)
                    {
                        fg.AppendLine($"MaleWeight => {MaleWeight}");
                    }
                    if (printMask?.FemaleWeight ?? true)
                    {
                        fg.AppendLine($"FemaleWeight => {FemaleWeight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.Voices?.Overall ?? true)
                    {
                        Voices?.ToString(fg);
                    }
                    if (printMask?.DefaultHair?.Overall ?? true)
                    {
                        DefaultHair?.ToString(fg);
                    }
                    if (printMask?.DefaultHairColor ?? true)
                    {
                        fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
                    }
                    if (printMask?.FaceGenMainClamp ?? true)
                    {
                        fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
                    }
                    if (printMask?.FaceGenFaceClamp ?? true)
                    {
                        fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
                    }
                    if (printMask?.RaceStats?.Overall ?? true)
                    {
                        if (RaceStats != null)
                        {
                            fg.AppendLine($"RaceStats => {RaceStats}");
                        }
                    }
                    if (printMask?.FaceData?.Overall ?? true)
                    {
                        fg.AppendLine("FaceData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (FaceData != null)
                            {
                                if (FaceData.Overall != null)
                                {
                                    fg.AppendLine(FaceData.Overall.ToString());
                                }
                                if (FaceData.Specific != null)
                                {
                                    foreach (var subItem in FaceData.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BodyData?.Overall ?? true)
                    {
                        BodyData?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        fg.AppendLine("Hairs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Hairs != null)
                            {
                                if (Hairs.Overall != null)
                                {
                                    fg.AppendLine(Hairs.Overall.ToString());
                                }
                                if (Hairs.Specific != null)
                                {
                                    foreach (var subItem in Hairs.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Eyes != null)
                            {
                                if (Eyes.Overall != null)
                                {
                                    fg.AppendLine(Eyes.Overall.ToString());
                                }
                                if (Eyes.Specific != null)
                                {
                                    foreach (var subItem in Eyes.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FaceGenData?.Overall ?? true)
                    {
                        FaceGenData?.ToString(fg);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendLine($"Unknown => {Unknown}");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>? Relations;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost0;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost1;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost2;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost3;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost4;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost5;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost6;
            public Exception? Fluff;
            public Exception? MaleHeight;
            public Exception? FemaleHeight;
            public Exception? MaleWeight;
            public Exception? FemaleWeight;
            public Exception? Flags;
            public MaskItem<Exception?, RaceVoices.ErrorMask?>? Voices;
            public MaskItem<Exception?, RaceHair.ErrorMask?>? DefaultHair;
            public Exception? DefaultHairColor;
            public Exception? FaceGenMainClamp;
            public Exception? FaceGenFaceClamp;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? RaceStats;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>? FaceData;
            public MaskItem<Exception?, GenderedBodyData.ErrorMask?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public MaskItem<Exception?, FaceGenData.ErrorMask?>? FaceGenData;
            public Exception? Unknown;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.Spells:
                        return Spells;
                    case Race_FieldIndex.Relations:
                        return Relations;
                    case Race_FieldIndex.SkillBoost0:
                        return SkillBoost0;
                    case Race_FieldIndex.SkillBoost1:
                        return SkillBoost1;
                    case Race_FieldIndex.SkillBoost2:
                        return SkillBoost2;
                    case Race_FieldIndex.SkillBoost3:
                        return SkillBoost3;
                    case Race_FieldIndex.SkillBoost4:
                        return SkillBoost4;
                    case Race_FieldIndex.SkillBoost5:
                        return SkillBoost5;
                    case Race_FieldIndex.SkillBoost6:
                        return SkillBoost6;
                    case Race_FieldIndex.Fluff:
                        return Fluff;
                    case Race_FieldIndex.MaleHeight:
                        return MaleHeight;
                    case Race_FieldIndex.FemaleHeight:
                        return FemaleHeight;
                    case Race_FieldIndex.MaleWeight:
                        return MaleWeight;
                    case Race_FieldIndex.FemaleWeight:
                        return FemaleWeight;
                    case Race_FieldIndex.Flags:
                        return Flags;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DefaultHair:
                        return DefaultHair;
                    case Race_FieldIndex.DefaultHairColor:
                        return DefaultHairColor;
                    case Race_FieldIndex.FaceGenMainClamp:
                        return FaceGenMainClamp;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        return FaceGenFaceClamp;
                    case Race_FieldIndex.RaceStats:
                        return RaceStats;
                    case Race_FieldIndex.FaceData:
                        return FaceData;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.FaceGenData:
                        return FaceGenData;
                    case Race_FieldIndex.Unknown:
                        return Unknown;
                    case Race_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Fluff:
                        this.Fluff = ex;
                        break;
                    case Race_FieldIndex.MaleHeight:
                        this.MaleHeight = ex;
                        break;
                    case Race_FieldIndex.FemaleHeight:
                        this.FemaleHeight = ex;
                        break;
                    case Race_FieldIndex.MaleWeight:
                        this.MaleWeight = ex;
                        break;
                    case Race_FieldIndex.FemaleWeight:
                        this.FemaleWeight = ex;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, RaceVoices.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = new MaskItem<Exception?, RaceHair.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = ex;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedBodyData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = new MaskItem<Exception?, FaceGenData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Fluff:
                        this.Fluff = (Exception?)obj;
                        break;
                    case Race_FieldIndex.MaleHeight:
                        this.MaleHeight = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FemaleHeight:
                        this.FemaleHeight = (Exception?)obj;
                        break;
                    case Race_FieldIndex.MaleWeight:
                        this.MaleWeight = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FemaleWeight:
                        this.FemaleWeight = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, RaceVoices.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = (MaskItem<Exception?, RaceHair.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedBodyData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = (MaskItem<Exception?, FaceGenData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Spells != null) return true;
                if (Relations != null) return true;
                if (SkillBoost0 != null) return true;
                if (SkillBoost1 != null) return true;
                if (SkillBoost2 != null) return true;
                if (SkillBoost3 != null) return true;
                if (SkillBoost4 != null) return true;
                if (SkillBoost5 != null) return true;
                if (SkillBoost6 != null) return true;
                if (Fluff != null) return true;
                if (MaleHeight != null) return true;
                if (FemaleHeight != null) return true;
                if (MaleWeight != null) return true;
                if (FemaleWeight != null) return true;
                if (Flags != null) return true;
                if (Voices != null) return true;
                if (DefaultHair != null) return true;
                if (DefaultHairColor != null) return true;
                if (FaceGenMainClamp != null) return true;
                if (FaceGenFaceClamp != null) return true;
                if (RaceStats != null) return true;
                if (FaceData != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (FaceGenData != null) return true;
                if (Unknown != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Description => {Description}");
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Spells != null)
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Relations != null)
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                SkillBoost0?.ToString(fg);
                SkillBoost1?.ToString(fg);
                SkillBoost2?.ToString(fg);
                SkillBoost3?.ToString(fg);
                SkillBoost4?.ToString(fg);
                SkillBoost5?.ToString(fg);
                SkillBoost6?.ToString(fg);
                fg.AppendLine($"Fluff => {Fluff}");
                fg.AppendLine($"MaleHeight => {MaleHeight}");
                fg.AppendLine($"FemaleHeight => {FemaleHeight}");
                fg.AppendLine($"MaleWeight => {MaleWeight}");
                fg.AppendLine($"FemaleWeight => {FemaleWeight}");
                fg.AppendLine($"Flags => {Flags}");
                Voices?.ToString(fg);
                DefaultHair?.ToString(fg);
                fg.AppendLine($"DefaultHairColor => {DefaultHairColor}");
                fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp}");
                fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp}");
                if (RaceStats != null)
                {
                    fg.AppendLine($"RaceStats => {RaceStats}");
                }
                fg.AppendLine("FaceData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (FaceData != null)
                    {
                        if (FaceData.Overall != null)
                        {
                            fg.AppendLine(FaceData.Overall.ToString());
                        }
                        if (FaceData.Specific != null)
                        {
                            foreach (var subItem in FaceData.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                BodyData?.ToString(fg);
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Hairs != null)
                    {
                        if (Hairs.Overall != null)
                        {
                            fg.AppendLine(Hairs.Overall.ToString());
                        }
                        if (Hairs.Specific != null)
                        {
                            foreach (var subItem in Hairs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Eyes != null)
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                FaceGenData?.ToString(fg);
                fg.AppendLine($"Unknown => {Unknown}");
                fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.SkillBoost0 = this.SkillBoost0.Combine(rhs.SkillBoost0, (l, r) => l.Combine(r));
                ret.SkillBoost1 = this.SkillBoost1.Combine(rhs.SkillBoost1, (l, r) => l.Combine(r));
                ret.SkillBoost2 = this.SkillBoost2.Combine(rhs.SkillBoost2, (l, r) => l.Combine(r));
                ret.SkillBoost3 = this.SkillBoost3.Combine(rhs.SkillBoost3, (l, r) => l.Combine(r));
                ret.SkillBoost4 = this.SkillBoost4.Combine(rhs.SkillBoost4, (l, r) => l.Combine(r));
                ret.SkillBoost5 = this.SkillBoost5.Combine(rhs.SkillBoost5, (l, r) => l.Combine(r));
                ret.SkillBoost6 = this.SkillBoost6.Combine(rhs.SkillBoost6, (l, r) => l.Combine(r));
                ret.Fluff = this.Fluff.Combine(rhs.Fluff);
                ret.MaleHeight = this.MaleHeight.Combine(rhs.MaleHeight);
                ret.FemaleHeight = this.FemaleHeight.Combine(rhs.FemaleHeight);
                ret.MaleWeight = this.MaleWeight.Combine(rhs.MaleWeight);
                ret.FemaleWeight = this.FemaleWeight.Combine(rhs.FemaleWeight);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Voices = this.Voices.Combine(rhs.Voices, (l, r) => l.Combine(r));
                ret.DefaultHair = this.DefaultHair.Combine(rhs.DefaultHair, (l, r) => l.Combine(r));
                ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
                ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
                ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
                ret.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.RaceStats?.Overall, rhs.RaceStats?.Overall), GenderedItem.Combine(this.RaceStats?.Specific, rhs.RaceStats?.Specific));
                ret.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePart.ErrorMask?>>?>(ExceptionExt.Combine(this.FaceData?.Overall, rhs.FaceData?.Overall), ExceptionExt.Combine(this.FaceData?.Specific, rhs.FaceData?.Specific));
                ret.BodyData = this.BodyData.Combine(rhs.BodyData, (l, r) => l.Combine(r));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.FaceGenData = this.FaceGenData.Combine(rhs.FaceGenData, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Spells;
            public MaskItem<bool, RaceRelation.TranslationMask?> Relations;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost0;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost1;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost2;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost3;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost4;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost5;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost6;
            public bool Fluff;
            public bool MaleHeight;
            public bool FemaleHeight;
            public bool MaleWeight;
            public bool FemaleWeight;
            public bool Flags;
            public MaskItem<bool, RaceVoices.TranslationMask?> Voices;
            public MaskItem<bool, RaceHair.TranslationMask?> DefaultHair;
            public bool DefaultHairColor;
            public bool FaceGenMainClamp;
            public bool FaceGenFaceClamp;
            public MaskItem<bool, GenderedItem<RaceStats.TranslationMask?>?> RaceStats;
            public MaskItem<bool, FacePart.TranslationMask?> FaceData;
            public MaskItem<bool, GenderedBodyData.TranslationMask?> BodyData;
            public bool Hairs;
            public bool Eyes;
            public MaskItem<bool, FaceGenData.TranslationMask?> FaceGenData;
            public bool Unknown;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Spells = defaultOn;
                this.Relations = new MaskItem<bool, RaceRelation.TranslationMask?>(defaultOn, null);
                this.SkillBoost0 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost1 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost2 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost3 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost4 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost5 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost6 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.Fluff = defaultOn;
                this.MaleHeight = defaultOn;
                this.FemaleHeight = defaultOn;
                this.MaleWeight = defaultOn;
                this.FemaleWeight = defaultOn;
                this.Flags = defaultOn;
                this.Voices = new MaskItem<bool, RaceVoices.TranslationMask?>(defaultOn, null);
                this.DefaultHair = new MaskItem<bool, RaceHair.TranslationMask?>(defaultOn, null);
                this.DefaultHairColor = defaultOn;
                this.FaceGenMainClamp = defaultOn;
                this.FaceGenFaceClamp = defaultOn;
                this.RaceStats = new MaskItem<bool, GenderedItem<RaceStats.TranslationMask?>?>(defaultOn, default);
                this.FaceData = new MaskItem<bool, FacePart.TranslationMask?>(defaultOn, null);
                this.BodyData = new MaskItem<bool, GenderedBodyData.TranslationMask?>(defaultOn, null);
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.FaceGenData = new MaskItem<bool, FaceGenData.TranslationMask?>(defaultOn, null);
                this.Unknown = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Spells, null));
                ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
                ret.Add((SkillBoost0?.Overall ?? true, SkillBoost0?.Specific?.GetCrystal()));
                ret.Add((SkillBoost1?.Overall ?? true, SkillBoost1?.Specific?.GetCrystal()));
                ret.Add((SkillBoost2?.Overall ?? true, SkillBoost2?.Specific?.GetCrystal()));
                ret.Add((SkillBoost3?.Overall ?? true, SkillBoost3?.Specific?.GetCrystal()));
                ret.Add((SkillBoost4?.Overall ?? true, SkillBoost4?.Specific?.GetCrystal()));
                ret.Add((SkillBoost5?.Overall ?? true, SkillBoost5?.Specific?.GetCrystal()));
                ret.Add((SkillBoost6?.Overall ?? true, SkillBoost6?.Specific?.GetCrystal()));
                ret.Add((Fluff, null));
                ret.Add((MaleHeight, null));
                ret.Add((FemaleHeight, null));
                ret.Add((MaleWeight, null));
                ret.Add((FemaleWeight, null));
                ret.Add((Flags, null));
                ret.Add((Voices?.Overall ?? true, Voices?.Specific?.GetCrystal()));
                ret.Add((DefaultHair?.Overall ?? true, DefaultHair?.Specific?.GetCrystal()));
                ret.Add((DefaultHairColor, null));
                ret.Add((FaceGenMainClamp, null));
                ret.Add((FaceGenFaceClamp, null));
                ret.Add((RaceStats?.Overall ?? true, null));
                ret.Add((FaceData?.Overall ?? true, FaceData?.Specific?.GetCrystal()));
                ret.Add((BodyData?.Overall ?? true, BodyData?.Specific?.GetCrystal()));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((FaceGenData?.Overall ?? true, FaceGenData?.Specific?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Race_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => RaceCommon.Instance.GetLinks(this);
        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Race(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Race CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Race CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IRaceGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IRaceInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new ISetList<IFormLink<Spell>> Spells { get; }
        new ISetList<RaceRelation> Relations { get; }
        new SkillBoost SkillBoost0 { get; set; }
        new SkillBoost SkillBoost1 { get; set; }
        new SkillBoost SkillBoost2 { get; set; }
        new SkillBoost SkillBoost3 { get; set; }
        new SkillBoost SkillBoost4 { get; set; }
        new SkillBoost SkillBoost5 { get; set; }
        new SkillBoost SkillBoost6 { get; set; }
        new Byte[] Fluff { get; set; }
        new Single MaleHeight { get; set; }
        new Single FemaleHeight { get; set; }
        new Single MaleWeight { get; set; }
        new Single FemaleWeight { get; set; }
        new Race.Flag Flags { get; set; }
        new RaceVoices? Voices { get; set; }
        new RaceHair? DefaultHair { get; set; }
        new Byte? DefaultHairColor { get; set; }
        new Int32? FaceGenMainClamp { get; set; }
        new Int32? FaceGenFaceClamp { get; set; }
        new GenderedItem<RaceStats>? RaceStats { get; set; }
        new ISetList<FacePart> FaceData { get; }
        new GenderedBodyData? BodyData { get; set; }
        new ISetList<IFormLink<Hair>> Hairs { get; }
        new ISetList<IFormLink<Eye>> Eyes { get; }
        new FaceGenData? FaceGenData { get; set; }
        new Byte[]? Unknown { get; set; }
        new Race.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IRaceInternal :
        IOblivionMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new GenderedItem<RaceStats>? RaceStats { get; set; }
    }

    public partial interface IRaceGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IRaceGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        String? Description { get; }
        IReadOnlySetList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        IReadOnlySetList<IRaceRelationGetter> Relations { get; }
        ISkillBoostGetter SkillBoost0 { get; }
        ISkillBoostGetter SkillBoost1 { get; }
        ISkillBoostGetter SkillBoost2 { get; }
        ISkillBoostGetter SkillBoost3 { get; }
        ISkillBoostGetter SkillBoost4 { get; }
        ISkillBoostGetter SkillBoost5 { get; }
        ISkillBoostGetter SkillBoost6 { get; }
        ReadOnlySpan<Byte> Fluff { get; }
        Single MaleHeight { get; }
        Single FemaleHeight { get; }
        Single MaleWeight { get; }
        Single FemaleWeight { get; }
        Race.Flag Flags { get; }
        IRaceVoicesGetter? Voices { get; }
        IRaceHairGetter? DefaultHair { get; }
        Byte? DefaultHairColor { get; }
        Int32? FaceGenMainClamp { get; }
        Int32? FaceGenFaceClamp { get; }
        IGenderedItemGetter<IRaceStatsGetter>? RaceStats { get; }
        IReadOnlySetList<IFacePartGetter> FaceData { get; }
        IGenderedBodyDataGetter? BodyData { get; }
        IReadOnlySetList<IFormLinkGetter<IHairGetter>> Hairs { get; }
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; }
        IFaceGenDataGetter? FaceGenData { get; }
        #region Unknown
        ReadOnlySpan<Byte> Unknown { get; }
        bool Unknown_IsSet { get; }
        #endregion
        Race.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Race.Mask<bool> GetHasBeenSetMask(this IRaceGetter item)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Spells = 7,
        Relations = 8,
        SkillBoost0 = 9,
        SkillBoost1 = 10,
        SkillBoost2 = 11,
        SkillBoost3 = 12,
        SkillBoost4 = 13,
        SkillBoost5 = 14,
        SkillBoost6 = 15,
        Fluff = 16,
        MaleHeight = 17,
        FemaleHeight = 18,
        MaleWeight = 19,
        FemaleWeight = 20,
        Flags = 21,
        Voices = 22,
        DefaultHair = 23,
        DefaultHairColor = 24,
        FaceGenMainClamp = 25,
        FaceGenFaceClamp = 26,
        RaceStats = 27,
        FaceData = 28,
        BodyData = 29,
        Hairs = 30,
        Eyes = 31,
        FaceGenData = 32,
        Unknown = 33,
        DATADataTypeState = 34,
    }
    #endregion

    #region Registration
    public partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort AdditionalFieldCount = 30;

        public const ushort FieldCount = 35;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Race_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "SKILLBOOST0":
                    return (ushort)Race_FieldIndex.SkillBoost0;
                case "SKILLBOOST1":
                    return (ushort)Race_FieldIndex.SkillBoost1;
                case "SKILLBOOST2":
                    return (ushort)Race_FieldIndex.SkillBoost2;
                case "SKILLBOOST3":
                    return (ushort)Race_FieldIndex.SkillBoost3;
                case "SKILLBOOST4":
                    return (ushort)Race_FieldIndex.SkillBoost4;
                case "SKILLBOOST5":
                    return (ushort)Race_FieldIndex.SkillBoost5;
                case "SKILLBOOST6":
                    return (ushort)Race_FieldIndex.SkillBoost6;
                case "FLUFF":
                    return (ushort)Race_FieldIndex.Fluff;
                case "MALEHEIGHT":
                    return (ushort)Race_FieldIndex.MaleHeight;
                case "FEMALEHEIGHT":
                    return (ushort)Race_FieldIndex.FemaleHeight;
                case "MALEWEIGHT":
                    return (ushort)Race_FieldIndex.MaleWeight;
                case "FEMALEWEIGHT":
                    return (ushort)Race_FieldIndex.FemaleWeight;
                case "FLAGS":
                    return (ushort)Race_FieldIndex.Flags;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DEFAULTHAIR":
                    return (ushort)Race_FieldIndex.DefaultHair;
                case "DEFAULTHAIRCOLOR":
                    return (ushort)Race_FieldIndex.DefaultHairColor;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FaceGenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FaceGenFaceClamp;
                case "RACESTATS":
                    return (ushort)Race_FieldIndex.RaceStats;
                case "FACEDATA":
                    return (ushort)Race_FieldIndex.FaceData;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "FACEGENDATA":
                    return (ushort)Race_FieldIndex.FaceGenData;
                case "UNKNOWN":
                    return (ushort)Race_FieldIndex.Unknown;
                case "DATADATATYPESTATE":
                    return (ushort)Race_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.SkillBoost0:
                case Race_FieldIndex.SkillBoost1:
                case Race_FieldIndex.SkillBoost2:
                case Race_FieldIndex.SkillBoost3:
                case Race_FieldIndex.SkillBoost4:
                case Race_FieldIndex.SkillBoost5:
                case Race_FieldIndex.SkillBoost6:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                case Race_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoost0:
                case Race_FieldIndex.SkillBoost1:
                case Race_FieldIndex.SkillBoost2:
                case Race_FieldIndex.SkillBoost3:
                case Race_FieldIndex.SkillBoost4:
                case Race_FieldIndex.SkillBoost5:
                case Race_FieldIndex.SkillBoost6:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.Unknown:
                case Race_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoost0:
                case Race_FieldIndex.SkillBoost1:
                case Race_FieldIndex.SkillBoost2:
                case Race_FieldIndex.SkillBoost3:
                case Race_FieldIndex.SkillBoost4:
                case Race_FieldIndex.SkillBoost5:
                case Race_FieldIndex.SkillBoost6:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                case Race_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return "Name";
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.SkillBoost0:
                    return "SkillBoost0";
                case Race_FieldIndex.SkillBoost1:
                    return "SkillBoost1";
                case Race_FieldIndex.SkillBoost2:
                    return "SkillBoost2";
                case Race_FieldIndex.SkillBoost3:
                    return "SkillBoost3";
                case Race_FieldIndex.SkillBoost4:
                    return "SkillBoost4";
                case Race_FieldIndex.SkillBoost5:
                    return "SkillBoost5";
                case Race_FieldIndex.SkillBoost6:
                    return "SkillBoost6";
                case Race_FieldIndex.Fluff:
                    return "Fluff";
                case Race_FieldIndex.MaleHeight:
                    return "MaleHeight";
                case Race_FieldIndex.FemaleHeight:
                    return "FemaleHeight";
                case Race_FieldIndex.MaleWeight:
                    return "MaleWeight";
                case Race_FieldIndex.FemaleWeight:
                    return "FemaleWeight";
                case Race_FieldIndex.Flags:
                    return "Flags";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DefaultHair:
                    return "DefaultHair";
                case Race_FieldIndex.DefaultHairColor:
                    return "DefaultHairColor";
                case Race_FieldIndex.FaceGenMainClamp:
                    return "FaceGenMainClamp";
                case Race_FieldIndex.FaceGenFaceClamp:
                    return "FaceGenFaceClamp";
                case Race_FieldIndex.RaceStats:
                    return "RaceStats";
                case Race_FieldIndex.FaceData:
                    return "FaceData";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.FaceGenData:
                    return "FaceGenData";
                case Race_FieldIndex.Unknown:
                    return "Unknown";
                case Race_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoost0:
                case Race_FieldIndex.SkillBoost1:
                case Race_FieldIndex.SkillBoost2:
                case Race_FieldIndex.SkillBoost3:
                case Race_FieldIndex.SkillBoost4:
                case Race_FieldIndex.SkillBoost5:
                case Race_FieldIndex.SkillBoost6:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                case Race_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.SkillBoost0:
                case Race_FieldIndex.SkillBoost1:
                case Race_FieldIndex.SkillBoost2:
                case Race_FieldIndex.SkillBoost3:
                case Race_FieldIndex.SkillBoost4:
                case Race_FieldIndex.SkillBoost5:
                case Race_FieldIndex.SkillBoost6:
                case Race_FieldIndex.Fluff:
                case Race_FieldIndex.MaleHeight:
                case Race_FieldIndex.FemaleHeight:
                case Race_FieldIndex.MaleWeight:
                case Race_FieldIndex.FemaleWeight:
                case Race_FieldIndex.Flags:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                case Race_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return typeof(String);
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(ISetList<IFormLink<Spell>>);
                case Race_FieldIndex.Relations:
                    return typeof(ISetList<RaceRelation>);
                case Race_FieldIndex.SkillBoost0:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost1:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost2:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost3:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost4:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost5:
                    return typeof(SkillBoost);
                case Race_FieldIndex.SkillBoost6:
                    return typeof(SkillBoost);
                case Race_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case Race_FieldIndex.MaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleHeight:
                    return typeof(Single);
                case Race_FieldIndex.MaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.FemaleWeight:
                    return typeof(Single);
                case Race_FieldIndex.Flags:
                    return typeof(Race.Flag);
                case Race_FieldIndex.Voices:
                    return typeof(RaceVoices);
                case Race_FieldIndex.DefaultHair:
                    return typeof(RaceHair);
                case Race_FieldIndex.DefaultHairColor:
                    return typeof(Byte);
                case Race_FieldIndex.FaceGenMainClamp:
                    return typeof(Int32);
                case Race_FieldIndex.FaceGenFaceClamp:
                    return typeof(Int32);
                case Race_FieldIndex.RaceStats:
                    return typeof(GenderedItem<RaceStats>);
                case Race_FieldIndex.FaceData:
                    return typeof(ISetList<FacePart>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedBodyData);
                case Race_FieldIndex.Hairs:
                    return typeof(ISetList<IFormLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(ISetList<IFormLink<Eye>>);
                case Race_FieldIndex.FaceGenData:
                    return typeof(FaceGenData);
                case Race_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Race_FieldIndex.DATADataTypeState:
                    return typeof(Race.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceXmlWriteTranslation);
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RACE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 16;
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Spells.Unset();
            item.Relations.Unset();
            item.SkillBoost0 = new SkillBoost();
            item.SkillBoost1 = new SkillBoost();
            item.SkillBoost2 = new SkillBoost();
            item.SkillBoost3 = new SkillBoost();
            item.SkillBoost4 = new SkillBoost();
            item.SkillBoost5 = new SkillBoost();
            item.SkillBoost6 = new SkillBoost();
            item.Fluff = new byte[4];
            item.MaleHeight = default;
            item.FemaleHeight = default;
            item.MaleWeight = default;
            item.FemaleWeight = default;
            item.Flags = default;
            item.Voices = null;
            item.DefaultHair = null;
            item.DefaultHairColor = default;
            item.FaceGenMainClamp = default;
            item.FaceGenFaceClamp = default;
            item.RaceStats = null;
            item.FaceData.Unset();
            item.BodyData = null;
            item.Hairs.Unset();
            item.Eyes.Unset();
            item.FaceGenData = null;
            item.Unknown = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Race.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Race_Registration.RACE_HEADER;
        protected static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x4F4C5053: // SPLO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Spell>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.Spells,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Spells);
                }
                case 0x4D414E58: // XNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RaceRelation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.XNAM_HEADER,
                        item: item.Relations,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out RaceRelation listSubItem) =>
                        {
                            return LoquiBinaryTranslation<RaceRelation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Race.DATADataType.Has;
                    }
                    item.SkillBoost0 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost1 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost2 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost3 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost4 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost5 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.SkillBoost6 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(
                        frame: dataFrame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    item.Fluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MaleHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FemaleHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MaleWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FemaleWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Flags = EnumBinaryTranslation<Race.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Flags);
                }
                case 0x4D414E56: // VNAM
                {
                    item.Voices = Mutagen.Bethesda.Oblivion.RaceVoices.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    item.DefaultHair = Mutagen.Bethesda.Oblivion.RaceHair.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHair);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DefaultHairColor = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColor);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FaceGenMainClamp = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FaceGenFaceClamp = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenFaceClamp);
                }
                case 0x52545441: // ATTR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RaceStats = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation<RaceStats>.Parse(
                        frame: frame,
                        masterReferences: masterReferences,
                        transl: LoquiBinaryTranslation<RaceStats>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.RaceStats);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<FacePart>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: FacePart_Registration.TriggeringRecordTypes,
                        item: item.FaceData,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out FacePart listSubItem) =>
                        {
                            return LoquiBinaryTranslation<FacePart>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceData);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Oblivion.GenderedBodyData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Hair>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Hairs,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eye>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Eyes,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x53474746: // FGGS
                case 0x41474746: // FGGA
                case 0x53544746: // FGTS
                {
                    item.FaceGenData = Mutagen.Bethesda.Oblivion.FaceGenData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenData);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Unknown);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RaceCommon : OblivionMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkillBoost0 = MaskItemExt.Factory(item.SkillBoost0.GetEqualsMask(rhs.SkillBoost0, include), include);
            ret.SkillBoost1 = MaskItemExt.Factory(item.SkillBoost1.GetEqualsMask(rhs.SkillBoost1, include), include);
            ret.SkillBoost2 = MaskItemExt.Factory(item.SkillBoost2.GetEqualsMask(rhs.SkillBoost2, include), include);
            ret.SkillBoost3 = MaskItemExt.Factory(item.SkillBoost3.GetEqualsMask(rhs.SkillBoost3, include), include);
            ret.SkillBoost4 = MaskItemExt.Factory(item.SkillBoost4.GetEqualsMask(rhs.SkillBoost4, include), include);
            ret.SkillBoost5 = MaskItemExt.Factory(item.SkillBoost5.GetEqualsMask(rhs.SkillBoost5, include), include);
            ret.SkillBoost6 = MaskItemExt.Factory(item.SkillBoost6.GetEqualsMask(rhs.SkillBoost6, include), include);
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.MaleHeight = item.MaleHeight.EqualsWithin(rhs.MaleHeight);
            ret.FemaleHeight = item.FemaleHeight.EqualsWithin(rhs.FemaleHeight);
            ret.MaleWeight = item.MaleWeight.EqualsWithin(rhs.MaleWeight);
            ret.FemaleWeight = item.FemaleWeight.EqualsWithin(rhs.FemaleWeight);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Voices = EqualsMaskHelper.EqualsHelper(
                item.Voices,
                rhs.Voices,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DefaultHair = EqualsMaskHelper.EqualsHelper(
                item.DefaultHair,
                rhs.DefaultHair,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DefaultHairColor = item.DefaultHairColor == rhs.DefaultHairColor;
            ret.FaceGenMainClamp = item.FaceGenMainClamp == rhs.FaceGenMainClamp;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp == rhs.FaceGenFaceClamp;
            ret.RaceStats = GenderedItem.EqualityMaskHelper(
                lhs: item.RaceStats,
                rhs: rhs.RaceStats,
                maskGetter: (l, r, i) => l.GetEqualsMask(r, i),
                include: include);
            ret.FaceData = item.FaceData.CollectionEqualsHelper(
                rhs.FaceData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = EqualsMaskHelper.EqualsHelper(
                item.BodyData,
                rhs.BodyData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceGenData = EqualsMaskHelper.EqualsHelper(
                item.FaceGenData,
                rhs.FaceGenData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown, rhs.Unknown);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Race =>");
            }
            else
            {
                fg.AppendLine($"{name} (Race) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            FileGeneration fg,
            Race.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SkillBoost0?.Overall ?? true)
            {
                item.SkillBoost0?.ToString(fg, "SkillBoost0");
            }
            if (printMask?.SkillBoost1?.Overall ?? true)
            {
                item.SkillBoost1?.ToString(fg, "SkillBoost1");
            }
            if (printMask?.SkillBoost2?.Overall ?? true)
            {
                item.SkillBoost2?.ToString(fg, "SkillBoost2");
            }
            if (printMask?.SkillBoost3?.Overall ?? true)
            {
                item.SkillBoost3?.ToString(fg, "SkillBoost3");
            }
            if (printMask?.SkillBoost4?.Overall ?? true)
            {
                item.SkillBoost4?.ToString(fg, "SkillBoost4");
            }
            if (printMask?.SkillBoost5?.Overall ?? true)
            {
                item.SkillBoost5?.ToString(fg, "SkillBoost5");
            }
            if (printMask?.SkillBoost6?.Overall ?? true)
            {
                item.SkillBoost6?.ToString(fg, "SkillBoost6");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.MaleHeight ?? true)
            {
                fg.AppendLine($"MaleHeight => {item.MaleHeight}");
            }
            if (printMask?.FemaleHeight ?? true)
            {
                fg.AppendLine($"FemaleHeight => {item.FemaleHeight}");
            }
            if (printMask?.MaleWeight ?? true)
            {
                fg.AppendLine($"MaleWeight => {item.MaleWeight}");
            }
            if (printMask?.FemaleWeight ?? true)
            {
                fg.AppendLine($"FemaleWeight => {item.FemaleWeight}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Voices?.Overall ?? true)
            {
                item.Voices?.ToString(fg, "Voices");
            }
            if (printMask?.DefaultHair?.Overall ?? true)
            {
                item.DefaultHair?.ToString(fg, "DefaultHair");
            }
            if (printMask?.DefaultHairColor ?? true)
            {
                fg.AppendLine($"DefaultHairColor => {item.DefaultHairColor}");
            }
            if (printMask?.FaceGenMainClamp ?? true)
            {
                fg.AppendLine($"FaceGenMainClamp => {item.FaceGenMainClamp}");
            }
            if (printMask?.FaceGenFaceClamp ?? true)
            {
                fg.AppendLine($"FaceGenFaceClamp => {item.FaceGenFaceClamp}");
            }
            if (printMask?.RaceStats?.Overall ?? true)
            {
                item.RaceStats?.ToString(fg, "RaceStats");
            }
            if (printMask?.FaceData?.Overall ?? true)
            {
                fg.AppendLine("FaceData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.FaceData)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BodyData?.Overall ?? true)
            {
                item.BodyData?.ToString(fg, "BodyData");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Hairs)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Eyes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FaceGenData?.Overall ?? true)
            {
                item.FaceGenData?.ToString(fg, "FaceGenData");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Spells?.Overall.HasValue ?? false && checkMask.Spells!.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Relations?.Overall.HasValue ?? false && checkMask.Relations!.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Voices?.Overall.HasValue ?? false && checkMask.Voices.Overall.Value != (item.Voices != null)) return false;
            if (checkMask.Voices?.Specific != null && (item.Voices == null || !item.Voices.HasBeenSet(checkMask.Voices.Specific))) return false;
            if (checkMask.DefaultHair?.Overall.HasValue ?? false && checkMask.DefaultHair.Overall.Value != (item.DefaultHair != null)) return false;
            if (checkMask.DefaultHair?.Specific != null && (item.DefaultHair == null || !item.DefaultHair.HasBeenSet(checkMask.DefaultHair.Specific))) return false;
            if (checkMask.DefaultHairColor.HasValue && checkMask.DefaultHairColor.Value != (item.DefaultHairColor != null)) return false;
            if (checkMask.FaceGenMainClamp.HasValue && checkMask.FaceGenMainClamp.Value != (item.FaceGenMainClamp != null)) return false;
            if (checkMask.FaceGenFaceClamp.HasValue && checkMask.FaceGenFaceClamp.Value != (item.FaceGenFaceClamp != null)) return false;
            if (checkMask.RaceStats?.Overall ?? false) return false;
            if (checkMask.FaceData?.Overall.HasValue ?? false && checkMask.FaceData!.Overall.Value != item.FaceData.HasBeenSet) return false;
            if (checkMask.BodyData?.Overall.HasValue ?? false && checkMask.BodyData.Overall.Value != (item.BodyData != null)) return false;
            if (checkMask.BodyData?.Specific != null && (item.BodyData == null || !item.BodyData.HasBeenSet(checkMask.BodyData.Specific))) return false;
            if (checkMask.Hairs?.Overall.HasValue ?? false && checkMask.Hairs!.Overall.Value != item.Hairs.HasBeenSet) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.FaceGenData?.Overall.HasValue ?? false && checkMask.FaceGenData.Overall.Value != (item.FaceGenData != null)) return false;
            if (checkMask.FaceGenData?.Specific != null && (item.FaceGenData == null || !item.FaceGenData.HasBeenSet(checkMask.FaceGenData.Specific))) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRaceGetter item,
            Race.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.Spells = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Spells.HasBeenSet, Enumerable.Empty<(int, bool)>());
            var RelationsItem = item.Relations;
            mask.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RaceRelation.Mask<bool>?>>>(RelationsItem.HasBeenSet, RelationsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RaceRelation.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.SkillBoost0 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost0?.GetHasBeenSetMask());
            mask.SkillBoost1 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost1?.GetHasBeenSetMask());
            mask.SkillBoost2 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost2?.GetHasBeenSetMask());
            mask.SkillBoost3 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost3?.GetHasBeenSetMask());
            mask.SkillBoost4 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost4?.GetHasBeenSetMask());
            mask.SkillBoost5 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost5?.GetHasBeenSetMask());
            mask.SkillBoost6 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost6?.GetHasBeenSetMask());
            mask.Fluff = true;
            mask.MaleHeight = true;
            mask.FemaleHeight = true;
            mask.MaleWeight = true;
            mask.FemaleWeight = true;
            mask.Flags = true;
            var itemVoices = item.Voices;
            mask.Voices = new MaskItem<bool, RaceVoices.Mask<bool>?>(itemVoices != null, itemVoices?.GetHasBeenSetMask());
            var itemDefaultHair = item.DefaultHair;
            mask.DefaultHair = new MaskItem<bool, RaceHair.Mask<bool>?>(itemDefaultHair != null, itemDefaultHair?.GetHasBeenSetMask());
            mask.DefaultHairColor = (item.DefaultHairColor != null);
            mask.FaceGenMainClamp = (item.FaceGenMainClamp != null);
            mask.FaceGenFaceClamp = (item.FaceGenFaceClamp != null);
            var itemRaceStats = item.RaceStats;
            mask.RaceStats = new MaskItem<bool, GenderedItem<RaceStats.Mask<bool>?>?>(itemRaceStats != null, itemRaceStats == null ? null : new GenderedItem<RaceStats.Mask<bool>?>(itemRaceStats.Male.GetHasBeenSetMask(), itemRaceStats.Female.GetHasBeenSetMask()));
            var FaceDataItem = item.FaceData;
            mask.FaceData = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, FacePart.Mask<bool>?>>>(FaceDataItem.HasBeenSet, FaceDataItem.WithIndex().Select((i) => new MaskItemIndexed<bool, FacePart.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemBodyData = item.BodyData;
            mask.BodyData = new MaskItem<bool, GenderedBodyData.Mask<bool>?>(itemBodyData != null, itemBodyData?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Hairs.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Eyes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Eyes.HasBeenSet, Enumerable.Empty<(int, bool)>());
            var itemFaceGenData = item.FaceGenData;
            mask.FaceGenData = new MaskItem<bool, FaceGenData.Mask<bool>?>(itemFaceGenData != null, itemFaceGenData?.GetHasBeenSetMask());
            mask.Unknown = item.Unknown_IsSet;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Race_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Relations.SequenceEqual(rhs.Relations)) return false;
            if (!object.Equals(lhs.SkillBoost0, rhs.SkillBoost0)) return false;
            if (!object.Equals(lhs.SkillBoost1, rhs.SkillBoost1)) return false;
            if (!object.Equals(lhs.SkillBoost2, rhs.SkillBoost2)) return false;
            if (!object.Equals(lhs.SkillBoost3, rhs.SkillBoost3)) return false;
            if (!object.Equals(lhs.SkillBoost4, rhs.SkillBoost4)) return false;
            if (!object.Equals(lhs.SkillBoost5, rhs.SkillBoost5)) return false;
            if (!object.Equals(lhs.SkillBoost6, rhs.SkillBoost6)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (!lhs.MaleHeight.EqualsWithin(rhs.MaleHeight)) return false;
            if (!lhs.FemaleHeight.EqualsWithin(rhs.FemaleHeight)) return false;
            if (!lhs.MaleWeight.EqualsWithin(rhs.MaleWeight)) return false;
            if (!lhs.FemaleWeight.EqualsWithin(rhs.FemaleWeight)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!object.Equals(lhs.Voices, rhs.Voices)) return false;
            if (!object.Equals(lhs.DefaultHair, rhs.DefaultHair)) return false;
            if (lhs.DefaultHairColor != rhs.DefaultHairColor) return false;
            if (lhs.FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            if (lhs.FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            if (!Equals(lhs.RaceStats, rhs.RaceStats)) return false;
            if (!lhs.FaceData.SequenceEqual(rhs.FaceData)) return false;
            if (!object.Equals(lhs.BodyData, rhs.BodyData)) return false;
            if (!lhs.Hairs.SequenceEqual(rhs.Hairs)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!object.Equals(lhs.FaceGenData, rhs.FaceGenData)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown, rhs.Unknown)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Relations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost0).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost4).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost5).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SkillBoost6).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FemaleHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FemaleWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            if (item.Voices.TryGet(out var Voicesitem))
            {
                ret = HashHelper.GetHashCode(Voicesitem).CombineHashCode(ret);
            }
            if (item.DefaultHair.TryGet(out var DefaultHairitem))
            {
                ret = HashHelper.GetHashCode(DefaultHairitem).CombineHashCode(ret);
            }
            if (item.DefaultHairColor.TryGet(out var DefaultHairColoritem))
            {
                ret = HashHelper.GetHashCode(DefaultHairColoritem).CombineHashCode(ret);
            }
            if (item.FaceGenMainClamp.TryGet(out var FaceGenMainClampitem))
            {
                ret = HashHelper.GetHashCode(FaceGenMainClampitem).CombineHashCode(ret);
            }
            if (item.FaceGenFaceClamp.TryGet(out var FaceGenFaceClampitem))
            {
                ret = HashHelper.GetHashCode(FaceGenFaceClampitem).CombineHashCode(ret);
            }
            if (item.RaceStats.TryGet(out var RaceStatsitem))
            {
                ret = HashHelper.GetHashCode(RaceStatsitem.Male, RaceStatsitem.Female).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.FaceData).CombineHashCode(ret);
            if (item.BodyData.TryGet(out var BodyDataitem))
            {
                ret = HashHelper.GetHashCode(BodyDataitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Hairs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Eyes).CombineHashCode(ret);
            if (item.FaceGenData.TryGet(out var FaceGenDataitem))
            {
                ret = HashHelper.GetHashCode(FaceGenDataitem).CombineHashCode(ret);
            }
            if (item.Unknown_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRaceGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Spells)
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.Links))
            {
                yield return item;
            }
            if (obj.Voices != null)
            {
                foreach (var item in obj.Voices.Links)
                {
                    yield return item;
                }
            }
            if (obj.DefaultHair != null)
            {
                foreach (var item in obj.DefaultHair.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Hairs)
            {
                yield return item;
            }
            foreach (var item in obj.Eyes)
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Race obj, Race rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Race(getNextFormKey());
            ret.DeepCopyIn((Race)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Race)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RaceSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                try
                {
                    if (rhs.Spells.HasBeenSet)
                    {
                        item.Spells.SetTo(
                            rhs.Spells,
                            (r) => new FormLink<Spell>(r.FormKey));
                    }
                    else
                    {
                        item.Spells.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                try
                {
                    if (rhs.Relations.HasBeenSet)
                    {
                        item.Relations.SetTo(
                            items: rhs.Relations,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Relations.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost0);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
                    {
                        item.SkillBoost0 = rhs.SkillBoost0.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost0),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
                    {
                        item.SkillBoost1 = rhs.SkillBoost1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost2);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
                    {
                        item.SkillBoost2 = rhs.SkillBoost2.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost2),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost3);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
                    {
                        item.SkillBoost3 = rhs.SkillBoost3.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost3),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost4);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
                    {
                        item.SkillBoost4 = rhs.SkillBoost4.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost4),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost5);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
                    {
                        item.SkillBoost5 = rhs.SkillBoost5.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost5),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost6);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
                    {
                        item.SkillBoost6 = rhs.SkillBoost6.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost6),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Fluff) ?? true))
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MaleHeight) ?? true))
            {
                item.MaleHeight = rhs.MaleHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleHeight) ?? true))
            {
                item.FemaleHeight = rhs.FemaleHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MaleWeight) ?? true))
            {
                item.MaleWeight = rhs.MaleWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleWeight) ?? true))
            {
                item.FemaleWeight = rhs.FemaleWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                try
                {
                    if(rhs.Voices.TryGet(out var rhsVoices))
                    {
                        item.Voices = rhsVoices.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.Voices));
                    }
                    else
                    {
                        item.Voices = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHair) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                try
                {
                    if(rhs.DefaultHair.TryGet(out var rhsDefaultHair))
                    {
                        item.DefaultHair = rhsDefaultHair.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHair));
                    }
                    else
                    {
                        item.DefaultHair = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                item.DefaultHairColor = rhs.DefaultHairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                item.FaceGenMainClamp = rhs.FaceGenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                item.FaceGenFaceClamp = rhs.FaceGenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.RaceStats) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                try
                {
                    if (!rhs.RaceStats.TryGet(out var rhsRaceStatsitem))
                    {
                        item.RaceStats = null;
                    }
                    else
                    {
                        item.RaceStats = new GenderedItem<RaceStats>(
                            male: rhsRaceStatsitem.Male.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal)),
                            female: rhsRaceStatsitem.Female.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal)));
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                try
                {
                    if (rhs.FaceData.HasBeenSet)
                    {
                        item.FaceData.SetTo(
                            items: rhs.FaceData,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.FaceData.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                try
                {
                    if(rhs.BodyData.TryGet(out var rhsBodyData))
                    {
                        item.BodyData = rhsBodyData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
                    }
                    else
                    {
                        item.BodyData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if (rhs.Hairs.HasBeenSet)
                    {
                        item.Hairs.SetTo(
                            rhs.Hairs,
                            (r) => new FormLink<Hair>(r.FormKey));
                    }
                    else
                    {
                        item.Hairs.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if (rhs.Eyes.HasBeenSet)
                    {
                        item.Eyes.SetTo(
                            rhs.Eyes,
                            (r) => new FormLink<Eye>(r.FormKey));
                    }
                    else
                    {
                        item.Eyes.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                try
                {
                    if(rhs.FaceGenData.TryGet(out var rhsFaceGenData))
                    {
                        item.FaceGenData = rhsFaceGenData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                    }
                    else
                    {
                        item.FaceGenData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown_IsSet)
                {
                    item.Unknown = rhs.Unknown.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RaceXmlWriteTranslation Instance = new RaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.Spells.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Race_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLinkGetter<ISpellGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Relations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<IRaceRelationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Race_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Relations),
                    transl: (XElement subNode, IRaceRelationGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((RaceRelationXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.DATADataTypeState.HasFlag(Race.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
                {
                    var SkillBoost0Item = item.SkillBoost0;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost0Item).XmlWriteTranslator).Write(
                        item: SkillBoost0Item,
                        node: node,
                        name: nameof(item.SkillBoost0),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost0,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost0));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
                {
                    var SkillBoost1Item = item.SkillBoost1;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost1Item).XmlWriteTranslator).Write(
                        item: SkillBoost1Item,
                        node: node,
                        name: nameof(item.SkillBoost1),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost1,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost1));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
                {
                    var SkillBoost2Item = item.SkillBoost2;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost2Item).XmlWriteTranslator).Write(
                        item: SkillBoost2Item,
                        node: node,
                        name: nameof(item.SkillBoost2),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost2,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost2));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
                {
                    var SkillBoost3Item = item.SkillBoost3;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost3Item).XmlWriteTranslator).Write(
                        item: SkillBoost3Item,
                        node: node,
                        name: nameof(item.SkillBoost3),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost3,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost3));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
                {
                    var SkillBoost4Item = item.SkillBoost4;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost4Item).XmlWriteTranslator).Write(
                        item: SkillBoost4Item,
                        node: node,
                        name: nameof(item.SkillBoost4),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost4,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost4));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
                {
                    var SkillBoost5Item = item.SkillBoost5;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost5Item).XmlWriteTranslator).Write(
                        item: SkillBoost5Item,
                        node: node,
                        name: nameof(item.SkillBoost5),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost5,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost5));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
                {
                    var SkillBoost6Item = item.SkillBoost6;
                    ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost6Item).XmlWriteTranslator).Write(
                        item: SkillBoost6Item,
                        node: node,
                        name: nameof(item.SkillBoost6),
                        fieldIndex: (int)Race_FieldIndex.SkillBoost6,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost6));
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Fluff) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff),
                        item: item.Fluff,
                        fieldIndex: (int)Race_FieldIndex.Fluff,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaleHeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaleHeight),
                        item: item.MaleHeight,
                        fieldIndex: (int)Race_FieldIndex.MaleHeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleHeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FemaleHeight),
                        item: item.FemaleHeight,
                        fieldIndex: (int)Race_FieldIndex.FemaleHeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaleWeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaleWeight),
                        item: item.MaleWeight,
                        fieldIndex: (int)Race_FieldIndex.MaleWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleWeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FemaleWeight),
                        item: item.FemaleWeight,
                        fieldIndex: (int)Race_FieldIndex.FemaleWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Race.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Race_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if ((item.Voices != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                var VoicesItem = item.Voices;
                ((RaceVoicesXmlWriteTranslation)((IXmlItem)VoicesItem).XmlWriteTranslator).Write(
                    item: VoicesItem,
                    node: node,
                    name: nameof(item.Voices),
                    fieldIndex: (int)Race_FieldIndex.Voices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Voices));
            }
            if ((item.DefaultHair != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHair) ?? true))
            {
                var DefaultHairItem = item.DefaultHair;
                ((RaceHairXmlWriteTranslation)((IXmlItem)DefaultHairItem).XmlWriteTranslator).Write(
                    item: DefaultHairItem,
                    node: node,
                    name: nameof(item.DefaultHair),
                    fieldIndex: (int)Race_FieldIndex.DefaultHair,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHair));
            }
            if ((item.DefaultHairColor != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultHairColor),
                    item: item.DefaultHairColor.Value,
                    fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                    errorMask: errorMask);
            }
            if ((item.FaceGenMainClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenMainClamp),
                    item: item.FaceGenMainClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                    errorMask: errorMask);
            }
            if ((item.FaceGenFaceClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenFaceClamp),
                    item: item.FaceGenFaceClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                    errorMask: errorMask);
            }
            if ((item.RaceStats != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.RaceStats) ?? true))
            {
                {
                    var Item = item.RaceStats.Male;
                    ((RaceStatsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                        item: Item,
                        node: node,
                        name: nameof(item.RaceStats),
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
                {
                    var Item = item.RaceStats.Female;
                    ((RaceStatsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                        item: Item,
                        node: node,
                        name: nameof(item.RaceStats),
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            if (item.FaceData.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                ListXmlTranslation<IFacePartGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.FaceData),
                    item: item.FaceData,
                    fieldIndex: (int)Race_FieldIndex.FaceData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceData),
                    transl: (XElement subNode, IFacePartGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((FacePartXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.BodyData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                var BodyDataItem = item.BodyData;
                ((GenderedBodyDataXmlWriteTranslation)((IXmlItem)BodyDataItem).XmlWriteTranslator).Write(
                    item: BodyDataItem,
                    node: node,
                    name: nameof(item.BodyData),
                    fieldIndex: (int)Race_FieldIndex.BodyData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
            }
            if (item.Hairs.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Hairs),
                    item: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Hairs),
                    transl: (XElement subNode, IFormLinkGetter<IHairGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Eyes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLinkGetter<IEyeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.FaceGenData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                var FaceGenDataItem = item.FaceGenData;
                ((FaceGenDataXmlWriteTranslation)((IXmlItem)FaceGenDataItem).XmlWriteTranslator).Write(
                    item: FaceGenDataItem,
                    node: node,
                    name: nameof(item.FaceGenData),
                    fieldIndex: (int)Race_FieldIndex.FaceGenData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
            }
            if (item.Unknown_IsSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Race_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Race.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Race_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Race");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Race");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RaceXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static RaceXmlCreateTranslation Instance = new RaceXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Race_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Race_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Spell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                    try
                    {
                        if (ListXmlTranslation<RaceRelation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<RaceRelation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost0":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost0);
                    try
                    {
                        item.SkillBoost0 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost0));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Race.DATADataType.Has;
                    break;
                case "SkillBoost1":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost1);
                    try
                    {
                        item.SkillBoost1 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost1));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost2":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost2);
                    try
                    {
                        item.SkillBoost2 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost2));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost3":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost3);
                    try
                    {
                        item.SkillBoost3 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost3));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost4":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost4);
                    try
                    {
                        item.SkillBoost4 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost4));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost5":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost5);
                    try
                    {
                        item.SkillBoost5 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost5));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost6":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost6);
                    try
                    {
                        item.SkillBoost6 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost6));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    errorMask?.PushIndex((int)Race_FieldIndex.Fluff);
                    try
                    {
                        item.Fluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleHeight":
                    errorMask?.PushIndex((int)Race_FieldIndex.MaleHeight);
                    try
                    {
                        item.MaleHeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleHeight":
                    errorMask?.PushIndex((int)Race_FieldIndex.FemaleHeight);
                    try
                    {
                        item.FemaleHeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWeight":
                    errorMask?.PushIndex((int)Race_FieldIndex.MaleWeight);
                    try
                    {
                        item.MaleWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWeight":
                    errorMask?.PushIndex((int)Race_FieldIndex.FemaleWeight);
                    try
                    {
                        item.FemaleWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Race_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Race.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Voices":
                    errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                    try
                    {
                        item.Voices = LoquiXmlTranslation<RaceVoices>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Voices));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHair":
                    errorMask?.PushIndex((int)Race_FieldIndex.DefaultHair);
                    try
                    {
                        item.DefaultHair = LoquiXmlTranslation<RaceHair>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHair));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHairColor":
                    errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColor);
                    try
                    {
                        item.DefaultHairColor = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenMainClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenMainClamp);
                    try
                    {
                        item.FaceGenMainClamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenFaceClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenFaceClamp);
                    try
                    {
                        item.FaceGenFaceClamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RaceStats":
                    errorMask?.PushIndex((int)Race_FieldIndex.RaceStats);
                    try
                    {
                        item.RaceStats = new GenderedItem<RaceStats>(
                            male: LoquiXmlTranslation<RaceStats>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<RaceStats>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceData":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                    try
                    {
                        if (ListXmlTranslation<FacePart>.Instance.Parse(
                            node: node,
                            enumer: out var FaceDataItem,
                            transl: LoquiXmlTranslation<FacePart>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.FaceData.SetTo(FaceDataItem);
                        }
                        else
                        {
                            item.FaceData.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyData":
                    errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                    try
                    {
                        item.BodyData = LoquiXmlTranslation<GenderedBodyData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Hair>>.Instance.Parse(
                            node: node,
                            enumer: out var HairsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Hairs.SetTo(HairsItem);
                        }
                        else
                        {
                            item.Hairs.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes.SetTo(EyesItem);
                        }
                        else
                        {
                            item.Eyes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenData":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                    try
                    {
                        item.FaceGenData = LoquiXmlTranslation<FaceGenData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Race_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 2,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Race_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Race.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceGetter item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RaceBinaryWriteTranslation Instance = new RaceBinaryWriteTranslation();

        public static void Write_Embedded(
            IRaceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.SPLO_HEADER),
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRaceRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRaceRelationGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RaceRelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            if (item.DATADataTypeState.HasFlag(Race.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Race_Registration.DATA_HEADER)))
                {
                    var SkillBoost0Item = item.SkillBoost0;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost0Item).BinaryWriteTranslator).Write(
                        item: SkillBoost0Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost1Item = item.SkillBoost1;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost1Item).BinaryWriteTranslator).Write(
                        item: SkillBoost1Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost2Item = item.SkillBoost2;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost2Item).BinaryWriteTranslator).Write(
                        item: SkillBoost2Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost3Item = item.SkillBoost3;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost3Item).BinaryWriteTranslator).Write(
                        item: SkillBoost3Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost4Item = item.SkillBoost4;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost4Item).BinaryWriteTranslator).Write(
                        item: SkillBoost4Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost5Item = item.SkillBoost5;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost5Item).BinaryWriteTranslator).Write(
                        item: SkillBoost5Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    var SkillBoost6Item = item.SkillBoost6;
                    ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost6Item).BinaryWriteTranslator).Write(
                        item: SkillBoost6Item,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Fluff);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaleHeight);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FemaleHeight);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaleWeight);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FemaleWeight);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 2);
                }
            }
            if (item.Voices.TryGet(out var VoicesItem))
            {
                ((RaceVoicesBinaryWriteTranslation)((IBinaryItem)VoicesItem).BinaryWriteTranslator).Write(
                    item: VoicesItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.DefaultHair.TryGet(out var DefaultHairItem))
            {
                ((RaceHairBinaryWriteTranslation)((IBinaryItem)DefaultHairItem).BinaryWriteTranslator).Write(
                    item: DefaultHairItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultHairColor,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.CNAM_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenMainClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenFaceClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.UNAM_HEADER));
            if (item.RaceStats.TryGet(out var RaceStatsitem))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Race_Registration.ATTR_HEADER)))
                {
                    {
                        var Item = RaceStatsitem.Male;
                        ((RaceStatsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: writer,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                    {
                        var Item = RaceStatsitem.Female;
                        ((RaceStatsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: writer,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                }
            }
            using (HeaderExport.ExportHeader(writer, Race_Registration.NAM0_HEADER, ObjectType.Subrecord)) { }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFacePartGetter>.Instance.Write(
                writer: writer,
                items: item.FaceData,
                transl: (MutagenWriter subWriter, IFacePartGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((FacePartBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            if (item.BodyData.TryGet(out var BodyDataItem))
            {
                using (HeaderExport.ExportHeader(writer, Race_Registration.NAM1_HEADER, ObjectType.Subrecord)) { }
                ((GenderedBodyDataBinaryWriteTranslation)((IBinaryItem)BodyDataItem).BinaryWriteTranslator).Write(
                    item: BodyDataItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: Race_Registration.HNAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: Race_Registration.ENAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            if (item.FaceGenData.TryGet(out var FaceGenDataItem))
            {
                ((FaceGenDataBinaryWriteTranslation)((IBinaryItem)FaceGenDataItem).BinaryWriteTranslator).Write(
                    item: FaceGenDataItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Unknown_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown,
                    header: recordTypeConverter.ConvertToCustom(Race_Registration.SNAM_HEADER));
            }
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Race_Registration.RACE_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => RaceCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlySetList<IFormLinkGetter<ISpellGetter>> Spells { get; private set; } = EmptySetList<IFormLinkGetter<ISpellGetter>>.Instance;
        public IReadOnlySetList<IRaceRelationGetter> Relations { get; private set; } = EmptySetList<RaceRelationBinaryOverlay>.Instance;
        private int? _DATALocation;
        public Race.DATADataType DATADataTypeState { get; private set; }
        #region SkillBoost0
        private int _SkillBoost0Location => _DATALocation!.Value + 0x0;
        private bool _SkillBoost0_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost0 => _SkillBoost0_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost0Location)), _package) : default;
        public ISkillBoostGetter SkillBoost0 => _SkillBoost0 ?? new SkillBoost();
        #endregion
        #region SkillBoost1
        private int _SkillBoost1Location => _DATALocation!.Value + 0x2;
        private bool _SkillBoost1_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost1 => _SkillBoost1_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost1Location)), _package) : default;
        public ISkillBoostGetter SkillBoost1 => _SkillBoost1 ?? new SkillBoost();
        #endregion
        #region SkillBoost2
        private int _SkillBoost2Location => _DATALocation!.Value + 0x4;
        private bool _SkillBoost2_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost2 => _SkillBoost2_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost2Location)), _package) : default;
        public ISkillBoostGetter SkillBoost2 => _SkillBoost2 ?? new SkillBoost();
        #endregion
        #region SkillBoost3
        private int _SkillBoost3Location => _DATALocation!.Value + 0x6;
        private bool _SkillBoost3_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost3 => _SkillBoost3_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost3Location)), _package) : default;
        public ISkillBoostGetter SkillBoost3 => _SkillBoost3 ?? new SkillBoost();
        #endregion
        #region SkillBoost4
        private int _SkillBoost4Location => _DATALocation!.Value + 0x8;
        private bool _SkillBoost4_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost4 => _SkillBoost4_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost4Location)), _package) : default;
        public ISkillBoostGetter SkillBoost4 => _SkillBoost4 ?? new SkillBoost();
        #endregion
        #region SkillBoost5
        private int _SkillBoost5Location => _DATALocation!.Value + 0xA;
        private bool _SkillBoost5_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost5 => _SkillBoost5_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost5Location)), _package) : default;
        public ISkillBoostGetter SkillBoost5 => _SkillBoost5 ?? new SkillBoost();
        #endregion
        #region SkillBoost6
        private int _SkillBoost6Location => _DATALocation!.Value + 0xC;
        private bool _SkillBoost6_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost6 => _SkillBoost6_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(_SkillBoost6Location)), _package) : default;
        public ISkillBoostGetter SkillBoost6 => _SkillBoost6 ?? new SkillBoost();
        #endregion
        #region Fluff
        private int _FluffLocation => _DATALocation!.Value + 0xE;
        private bool _Fluff_IsSet => _DATALocation.HasValue;
        public ReadOnlySpan<Byte> Fluff => _Fluff_IsSet ? _data.Span.Slice(_FluffLocation, 4).ToArray() : default;
        public bool Fluff_IsSet => _Fluff_IsSet;
        #endregion
        #region MaleHeight
        private int _MaleHeightLocation => _DATALocation!.Value + 0x12;
        private bool _MaleHeight_IsSet => _DATALocation.HasValue;
        public Single MaleHeight => _MaleHeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MaleHeightLocation, 4)) : default;
        #endregion
        #region FemaleHeight
        private int _FemaleHeightLocation => _DATALocation!.Value + 0x16;
        private bool _FemaleHeight_IsSet => _DATALocation.HasValue;
        public Single FemaleHeight => _FemaleHeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FemaleHeightLocation, 4)) : default;
        #endregion
        #region MaleWeight
        private int _MaleWeightLocation => _DATALocation!.Value + 0x1A;
        private bool _MaleWeight_IsSet => _DATALocation.HasValue;
        public Single MaleWeight => _MaleWeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MaleWeightLocation, 4)) : default;
        #endregion
        #region FemaleWeight
        private int _FemaleWeightLocation => _DATALocation!.Value + 0x1E;
        private bool _FemaleWeight_IsSet => _DATALocation.HasValue;
        public Single FemaleWeight => _FemaleWeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FemaleWeightLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x22;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Race.Flag Flags => _Flags_IsSet ? (Race.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 2)) : default;
        #endregion
        #region Voices
        private RangeInt32? _VoicesLocation;
        private bool _Voices_IsSet => _VoicesLocation.HasValue;
        public IRaceVoicesGetter? Voices => _Voices_IsSet ? RaceVoicesBinaryOverlay.RaceVoicesFactory(new BinaryMemoryReadStream(_data.Slice(_VoicesLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Voices_IsSet => _VoicesLocation.HasValue;
        #endregion
        #region DefaultHair
        private RangeInt32? _DefaultHairLocation;
        private bool _DefaultHair_IsSet => _DefaultHairLocation.HasValue;
        public IRaceHairGetter? DefaultHair => _DefaultHair_IsSet ? RaceHairBinaryOverlay.RaceHairFactory(new BinaryMemoryReadStream(_data.Slice(_DefaultHairLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool DefaultHair_IsSet => _DefaultHairLocation.HasValue;
        #endregion
        #region DefaultHairColor
        private int? _DefaultHairColorLocation;
        public Byte? DefaultHairColor => _DefaultHairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DefaultHairColorLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        #region FaceGenMainClamp
        private int? _FaceGenMainClampLocation;
        public Int32? FaceGenMainClamp => _FaceGenMainClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FaceGenMainClampLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region FaceGenFaceClamp
        private int? _FaceGenFaceClampLocation;
        public Int32? FaceGenFaceClamp => _FaceGenFaceClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FaceGenFaceClampLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region RaceStats
        private int? _RaceStatsLocation;
        public IGenderedItemGetter<IRaceStatsGetter>? RaceStats
        {
            get
            {
                if (!_RaceStatsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _RaceStatsLocation.Value, _package.Meta);
                return new GenderedItem<IRaceStatsGetter>(
                    RaceStatsBinaryOverlay.RaceStatsFactory(new BinaryMemoryReadStream(data), _package),
                    RaceStatsBinaryOverlay.RaceStatsFactory(new BinaryMemoryReadStream(data.Slice(8)), _package));
            }
        }
        #endregion
        public IReadOnlySetList<IFacePartGetter> FaceData { get; private set; } = EmptySetList<FacePartBinaryOverlay>.Instance;
        #region BodyData
        public IGenderedBodyDataGetter? BodyData { get; private set; }
        public bool BodyData_IsSet => BodyData != null;
        #endregion
        public IReadOnlySetList<IFormLinkGetter<IHairGetter>> Hairs { get; private set; } = EmptySetList<IFormLinkGetter<IHairGetter>>.Instance;
        public IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; private set; } = EmptySetList<IFormLinkGetter<IEyeGetter>>.Instance;
        #region FaceGenData
        public IFaceGenDataGetter? FaceGenData { get; private set; }
        public bool FaceGenData_IsSet => FaceGenData != null;
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public bool Unknown_IsSet => _UnknownLocation.HasValue;
        public ReadOnlySpan<Byte> Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RaceBinaryOverlay RaceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new RaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryOverlaySetList<IFormLinkGetter<ISpellGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ISpellGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Spells);
                }
                case 0x4D414E58: // XNAM
                {
                    this.Relations = BinaryOverlaySetList<RaceRelationBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RaceRelationBinaryOverlay.RaceRelationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Race.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Flags);
                }
                case 0x4D414E56: // VNAM
                {
                    _VoicesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    _DefaultHairLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHair);
                }
                case 0x4D414E43: // CNAM
                {
                    _DefaultHairColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColor);
                }
                case 0x4D414E50: // PNAM
                {
                    _FaceGenMainClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    _FaceGenFaceClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenFaceClamp);
                }
                case 0x52545441: // ATTR
                {
                    _RaceStatsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.RaceStats);
                }
                case 0x304D414E: // NAM0
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.FaceData = this.ParseRepeatedTypelessSubrecord<FacePartBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: FacePart_Registration.TriggeringRecordTypes,
                        factory:  FacePartBinaryOverlay.FacePartFactory);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceData);
                }
                case 0x314D414E: // NAM1
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.BodyData = GenderedBodyDataBinaryOverlay.GenderedBodyDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Hairs = BinaryOverlaySetList<IFormLinkGetter<IHairGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IHairGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Eyes = BinaryOverlaySetList<IFormLinkGetter<IEyeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyeGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x53474746: // FGGS
                case 0x41474746: // FGGA
                case 0x53544746: // FGTS
                {
                    this.FaceGenData = FaceGenDataBinaryOverlay.FaceGenDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FaceGenData);
                }
                case 0x4D414E53: // SNAM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Unknown);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

