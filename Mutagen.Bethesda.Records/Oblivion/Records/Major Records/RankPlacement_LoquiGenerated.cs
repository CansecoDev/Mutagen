/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RankPlacement :
        IRankPlacement,
        ILoquiObjectSetter<RankPlacement>,
        ILinkSubContainer,
        IEquatable<RankPlacement>,
        IEqualsMask
    {
        #region Ctor
        public RankPlacement()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Faction
        public IFormIDLink<Faction> Faction_Property { get; } = new FormIDLink<Faction>();
        public Faction Faction { get => Faction_Property.Item; set => Faction_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLink<Faction> IRankPlacement.Faction_Property => this.Faction_Property;
        IFactionGetter IRankPlacementGetter.Faction => this.Faction_Property.Item;
        IFormIDLinkGetter<IFactionGetter> IRankPlacementGetter.Faction_Property => this.Faction_Property;
        #endregion
        #region Rank
        public Byte Rank { get; set; }
        #endregion
        #region Fluff
        private Byte[] _Fluff = new byte[3];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[3];
        }
        ReadOnlySpan<Byte> IRankPlacementGetter.Fluff => this.Fluff;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankPlacementGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RankPlacementMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRankPlacementGetter rhs)) return false;
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(RankPlacement obj)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RankPlacementCommon)((IRankPlacementGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => RankPlacementXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankPlacementXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RankPlacement CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RankPlacement CreateFromXml(
            XElement node,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RankPlacement CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RankPlacement() : null;
                    break;
                default:
                    break;
            }
            var ret = new RankPlacement();
            ((RankPlacementSetterCommon)((IRankPlacementGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RankPlacement CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RankPlacement CreateFromXml(
            string path,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RankPlacement CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RankPlacement CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RankPlacement CreateFromXml(
            Stream stream,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RankPlacement CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((RankPlacement_FieldIndex)index)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RankPlacement_Registration.TRIGGERING_RECORD_TYPE;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield return Faction_Property;
            yield break;
        }

        public void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
            Faction_Property.Link(package);
        }

        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => RankPlacementBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankPlacementBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RankPlacement CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RankPlacement CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RankPlacement CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RankPlacement();
            ((RankPlacementSetterCommon)((IRankPlacementGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IRankPlacement :
        IRankPlacementGetter,
        ILoquiObjectSetter<IRankPlacement>
    {
        new Faction Faction { get; set; }
        new IFormIDLink<Faction> Faction_Property { get; }
        new Byte Rank { get; set; }

        new Byte[] Fluff { get; set; }

    }

    public partial interface IRankPlacementGetter :
        ILoquiObject,
        ILoquiObject<IRankPlacementGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Faction
        IFactionGetter Faction { get; }
        IFormIDLinkGetter<IFactionGetter> Faction_Property { get; }

        #endregion
        #region Rank
        Byte Rank { get; }

        #endregion
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RankPlacementMixIn
    {
        public static void Clear(this IRankPlacement item)
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static RankPlacement_Mask<bool> GetEqualsMask(
            this IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankPlacementGetter item,
            string name = null,
            RankPlacement_Mask<bool> printMask = null)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankPlacementGetter item,
            FileGeneration fg,
            string name = null,
            RankPlacement_Mask<bool> printMask = null)
        {
            ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRankPlacementGetter item,
            RankPlacement_Mask<bool?> checkMask)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RankPlacement_Mask<bool> GetHasBeenSetMask(this IRankPlacementGetter item)
        {
            var ret = new RankPlacement_Mask<bool>();
            ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRankPlacementGetter item,
            IRankPlacementGetter rhs)
        {
            return ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            RankPlacement_TranslationMask copyMask,
            IRankPlacementGetter def = null)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask copyMask = null,
            IRankPlacementGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRankPlacement lhs,
            IRankPlacementGetter rhs,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask copyMask = null,
            IRankPlacementGetter def = null)
        {
            ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RankPlacement DeepCopy(
            this IRankPlacementGetter item,
            RankPlacement_TranslationMask copyMask = null,
            IRankPlacementGetter def = null)
        {
            return ((RankPlacementSetterTranslationCommon)((IRankPlacementGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRankPlacement item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRankPlacement item,
            XElement node,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            string path,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            string path,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            string path,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RankPlacement_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            Stream stream,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRankPlacement item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRankPlacement item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRankPlacement item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IRankPlacement item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankPlacementSetterCommon)((IRankPlacementGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RankPlacement_FieldIndex
    {
        Faction = 0,
        Rank = 1,
        Fluff = 2,
    }
    #endregion

    #region Registration
    public class RankPlacement_Registration : ILoquiRegistration
    {
        public static readonly RankPlacement_Registration Instance = new RankPlacement_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 85,
            version: 0);

        public const string GUID = "825729c0-9865-4e99-87a2-ea87f3fc373a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RankPlacement_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RankPlacement_ErrorMask);

        public static readonly Type ClassType = typeof(RankPlacement);

        public static readonly Type GetterType = typeof(IRankPlacementGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRankPlacement);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RankPlacement";

        public const string Name = "RankPlacement";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FACTION":
                    return (ushort)RankPlacement_FieldIndex.Faction;
                case "RANK":
                    return (ushort)RankPlacement_FieldIndex.Rank;
                case "FLUFF":
                    return (ushort)RankPlacement_FieldIndex.Fluff;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                    return "Faction";
                case RankPlacement_FieldIndex.Rank:
                    return "Rank";
                case RankPlacement_FieldIndex.Fluff:
                    return "Fluff";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                case RankPlacement_FieldIndex.Rank:
                case RankPlacement_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                    return typeof(IFormIDLink<Faction>);
                case RankPlacement_FieldIndex.Rank:
                    return typeof(Byte);
                case RankPlacement_FieldIndex.Fluff:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RankPlacementXmlWriteTranslation);
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RankPlacementBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RankPlacementSetterCommon
    {
        public static readonly RankPlacementSetterCommon Instance = new RankPlacementSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRankPlacement item)
        {
            ClearPartial();
            item.Faction = default(Faction);
            item.Rank = default(Byte);
            item.Fluff = default(Byte[]);
        }
        
        public RankPlacement GetNew()
        {
            return new RankPlacement();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IRankPlacement item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankPlacementXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRankPlacement item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                frame: frame,
                masterReferences: masterReferences,
                item: item.Faction_Property);
            item.Rank = frame.ReadUInt8();
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(3),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
        }
        
        public void CopyInFromBinary(
            IRankPlacement item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RankPlacement_Registration.SNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RankPlacementCommon
    {
        public static readonly RankPlacementCommon Instance = new RankPlacementCommon();

        public RankPlacement_Mask<bool> GetEqualsMask(
            IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RankPlacement_Mask<bool>();
            ((RankPlacementCommon)((IRankPlacementGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankPlacementGetter item,
            IRankPlacementGetter rhs,
            RankPlacement_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Faction = item.Faction_Property.FormKey == rhs.Faction_Property.FormKey;
            ret.Rank = item.Rank == rhs.Rank;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
        }
        
        public string ToString(
            IRankPlacementGetter item,
            string name = null,
            RankPlacement_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankPlacementGetter item,
            FileGeneration fg,
            string name = null,
            RankPlacement_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RankPlacement =>");
            }
            else
            {
                fg.AppendLine($"{name} (RankPlacement) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankPlacementGetter item,
            FileGeneration fg,
            RankPlacement_Mask<bool> printMask = null)
        {
            if (printMask?.Faction ?? true)
            {
                fg.AppendLine($"Faction => {item.Faction_Property}");
            }
            if (printMask?.Rank ?? true)
            {
                fg.AppendLine($"Rank => {item.Rank}");
            }
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
        }
        
        public bool HasBeenSet(
            IRankPlacementGetter item,
            RankPlacement_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRankPlacementGetter item,
            RankPlacement_Mask<bool> mask)
        {
            mask.Faction = true;
            mask.Rank = true;
            mask.Fluff = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankPlacementGetter lhs,
            IRankPlacementGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Faction_Property.Equals(rhs.Faction_Property)) return false;
            if (lhs.Rank != rhs.Rank) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRankPlacementGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Faction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Rank).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class RankPlacementSetterTranslationCommon
    {
        public static readonly RankPlacementSetterTranslationCommon Instance = new RankPlacementSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRankPlacement item,
            IRankPlacementGetter rhs,
            IRankPlacementGetter def,
            ErrorMaskBuilder errorMask,
            RankPlacement_TranslationMask copyMask)
        {
            if (copyMask?.Faction ?? true)
            {
                item.Faction_Property.FormKey = rhs.Faction_Property.FormKey;
            }
            if (copyMask?.Rank ?? true)
            {
                item.Rank = rhs.Rank;
            }
            if (copyMask?.Fluff ?? true)
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
        }
        
        #endregion
        
        public RankPlacement DeepCopy(
            IRankPlacementGetter item,
            RankPlacement_TranslationMask copyMask = null,
            IRankPlacementGetter def = null)
        {
            RankPlacement ret = RankPlacementSetterCommon.Instance.GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RankPlacement
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RankPlacement_Registration.Instance;
        public static RankPlacement_Registration Registration => RankPlacement_Registration.Instance;
        protected object CommonInstance()
        {
            return RankPlacementCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return RankPlacementSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return RankPlacementSetterTranslationCommon.Instance;
        }
        object IRankPlacementGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IRankPlacementGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IRankPlacementGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankPlacementXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RankPlacementXmlWriteTranslation Instance = new RankPlacementXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRankPlacementGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Faction) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Faction),
                    item: item.Faction_Property?.FormKey,
                    fieldIndex: (int)RankPlacement_FieldIndex.Faction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Rank) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Rank),
                    item: item.Rank,
                    fieldIndex: (int)RankPlacement_FieldIndex.Rank,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RankPlacement_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)RankPlacement_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRankPlacementGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RankPlacement");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RankPlacement");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRankPlacementGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRankPlacementGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRankPlacementGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RankPlacementXmlCreateTranslation
    {
        public readonly static RankPlacementXmlCreateTranslation Instance = new RankPlacementXmlCreateTranslation();

        public static void FillPublicXml(
            IRankPlacement item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankPlacementXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRankPlacement item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Faction":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Faction_Property,
                        fieldIndex: (int)RankPlacement_FieldIndex.Faction,
                        errorMask: errorMask);
                    break;
                case "Rank":
                    try
                    {
                        errorMask?.PushIndex((int)RankPlacement_FieldIndex.Rank);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte RankParse,
                            errorMask: errorMask))
                        {
                            item.Rank = RankParse;
                        }
                        else
                        {
                            item.Rank = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)RankPlacement_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RankPlacementXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRankPlacementGetter item,
            XElement node,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true,
            RankPlacement_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankPlacementXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            string path,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            Stream stream,
            out RankPlacement_ErrorMask errorMask,
            RankPlacement_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RankPlacementXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            XElement node,
            string name = null,
            RankPlacement_TranslationMask translationMask = null)
        {
            ((RankPlacementXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankPlacementXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankPlacementGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankPlacementXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class RankPlacement_Mask<T> : IMask<T>, IEquatable<RankPlacement_Mask<T>>
    {
        #region Ctors
        public RankPlacement_Mask()
        {
        }

        public RankPlacement_Mask(T initialValue)
        {
            this.Faction = initialValue;
            this.Rank = initialValue;
            this.Fluff = initialValue;
        }
        #endregion

        #region Members
        public T Faction;
        public T Rank;
        public T Fluff;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RankPlacement_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RankPlacement_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Faction, rhs.Faction)) return false;
            if (!object.Equals(this.Rank, rhs.Rank)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Faction?.GetHashCode());
            ret = ret.CombineHashCode(this.Rank?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Faction)) return false;
            if (!eval(this.Rank)) return false;
            if (!eval(this.Fluff)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RankPlacement_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RankPlacement_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RankPlacement_Mask<R> obj, Func<T, R> eval)
        {
            obj.Faction = eval(this.Faction);
            obj.Rank = eval(this.Rank);
            obj.Fluff = eval(this.Fluff);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RankPlacement_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RankPlacement_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RankPlacement_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Faction ?? true)
                {
                    fg.AppendLine($"Faction => {Faction}");
                }
                if (printMask?.Rank ?? true)
                {
                    fg.AppendLine($"Rank => {Rank}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RankPlacement_ErrorMask : IErrorMask, IErrorMask<RankPlacement_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Faction;
        public Exception Rank;
        public Exception Fluff;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                    return Faction;
                case RankPlacement_FieldIndex.Rank:
                    return Rank;
                case RankPlacement_FieldIndex.Fluff:
                    return Fluff;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                    this.Faction = ex;
                    break;
                case RankPlacement_FieldIndex.Rank:
                    this.Rank = ex;
                    break;
                case RankPlacement_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RankPlacement_FieldIndex enu = (RankPlacement_FieldIndex)index;
            switch (enu)
            {
                case RankPlacement_FieldIndex.Faction:
                    this.Faction = (Exception)obj;
                    break;
                case RankPlacement_FieldIndex.Rank:
                    this.Rank = (Exception)obj;
                    break;
                case RankPlacement_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Faction != null) return true;
            if (Rank != null) return true;
            if (Fluff != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RankPlacement_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Faction => {Faction}");
            fg.AppendLine($"Rank => {Rank}");
            fg.AppendLine($"Fluff => {Fluff}");
        }
        #endregion

        #region Combine
        public RankPlacement_ErrorMask Combine(RankPlacement_ErrorMask rhs)
        {
            var ret = new RankPlacement_ErrorMask();
            ret.Faction = this.Faction.Combine(rhs.Faction);
            ret.Rank = this.Rank.Combine(rhs.Rank);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            return ret;
        }
        public static RankPlacement_ErrorMask Combine(RankPlacement_ErrorMask lhs, RankPlacement_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RankPlacement_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RankPlacement_ErrorMask();
        }
        #endregion

    }
    public class RankPlacement_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Faction;
        public bool Rank;
        public bool Fluff;
        #endregion

        #region Ctors
        public RankPlacement_TranslationMask()
        {
        }

        public RankPlacement_TranslationMask(bool defaultOn)
        {
            this.Faction = defaultOn;
            this.Rank = defaultOn;
            this.Fluff = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Faction, null));
            ret.Add((Rank, null));
            ret.Add((Fluff, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankPlacementBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankPlacementBinaryWriteTranslation Instance = new RankPlacementBinaryWriteTranslation();

        public static void Write_Embedded(
            IRankPlacementGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Faction_Property,
                masterReferences: masterReferences);
            writer.Write(item.Rank);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
        }

        public void Write(
            MutagenWriter writer,
            IRankPlacementGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RankPlacement_Registration.SNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRankPlacementGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RankPlacementBinaryCreateTranslation
    {
        public readonly static RankPlacementBinaryCreateTranslation Instance = new RankPlacementBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RankPlacementBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankPlacementGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RankPlacement_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankPlacementBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RankPlacement_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRankPlacementGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RankPlacementBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRankPlacementGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RankPlacementBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankPlacementBinaryWrapper :
        BinaryWrapper,
        IRankPlacementGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RankPlacement_Registration.Instance;
        public static RankPlacement_Registration Registration => RankPlacement_Registration.Instance;
        protected object CommonInstance()
        {
            return RankPlacementCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return RankPlacementSetterTranslationCommon.Instance;
        }
        object IRankPlacementGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IRankPlacementGetter.CommonSetterInstance()
        {
            return null;
        }
        object IRankPlacementGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankPlacementGetter)rhs, include);

        protected object XmlWriteTranslator => RankPlacementXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankPlacementXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => RankPlacementBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankPlacementBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Faction
        public IFormIDLinkGetter<IFactionGetter> Faction_Property => new FormIDLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IFactionGetter Faction => default;
        #endregion
        public Byte Rank => _data.Span[4];
        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(5, 3).ToArray();
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected RankPlacementBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RankPlacementBinaryWrapper RankPlacementFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RankPlacementBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

