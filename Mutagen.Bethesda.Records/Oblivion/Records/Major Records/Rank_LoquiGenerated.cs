/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Rank :
        IRank,
        ILoquiObjectSetter<Rank>,
        IEquatable<Rank>,
        IEqualsMask
    {
        #region Ctor
        public Rank()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RankNumber
        public bool RankNumber_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.RankNumber];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.RankNumber] = value;
        }
        bool IRankGetter.RankNumber_IsSet => RankNumber_IsSet;
        private Int32 _RankNumber;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 RankNumber
        {
            get => this._RankNumber;
            set => RankNumber_Set(value);
        }
        Int32 IRankGetter.RankNumber => this.RankNumber;
        public void RankNumber_Set(
            Int32 value,
            bool markSet = true)
        {
            _RankNumber = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.RankNumber] = markSet;
        }
        public void RankNumber_Unset()
        {
            this.RankNumber_Set(default(Int32), false);
        }
        #endregion
        #region MaleName
        public bool MaleName_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.MaleName];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.MaleName] = value;
        }
        bool IRankGetter.MaleName_IsSet => MaleName_IsSet;
        private String _MaleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MaleName
        {
            get => this._MaleName;
            set => MaleName_Set(value);
        }
        String IRankGetter.MaleName => this.MaleName;
        public void MaleName_Set(
            String value,
            bool markSet = true)
        {
            _MaleName = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.MaleName] = markSet;
        }
        public void MaleName_Unset()
        {
            this.MaleName_Set(default(String), false);
        }
        #endregion
        #region FemaleName
        public bool FemaleName_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleName];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleName] = value;
        }
        bool IRankGetter.FemaleName_IsSet => FemaleName_IsSet;
        private String _FemaleName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String FemaleName
        {
            get => this._FemaleName;
            set => FemaleName_Set(value);
        }
        String IRankGetter.FemaleName => this.FemaleName;
        public void FemaleName_Set(
            String value,
            bool markSet = true)
        {
            _FemaleName = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleName] = markSet;
        }
        public void FemaleName_Unset()
        {
            this.FemaleName_Set(default(String), false);
        }
        #endregion
        #region Insignia
        public bool Insignia_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.Insignia];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.Insignia] = value;
        }
        bool IRankGetter.Insignia_IsSet => Insignia_IsSet;
        private String _Insignia;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Insignia
        {
            get => this._Insignia;
            set => Insignia_Set(value);
        }
        String IRankGetter.Insignia => this.Insignia;
        public void Insignia_Set(
            String value,
            bool markSet = true)
        {
            _Insignia = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.Insignia] = markSet;
        }
        public void Insignia_Unset()
        {
            this.Insignia_Set(default(String), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRankGetter rhs)) return false;
            return ((RankCommon)((IRankGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Rank obj)
        {
            return ((RankCommon)((IRankGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RankCommon)((IRankGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            out Rank_ErrorMask errorMask,
            bool doMasks = true,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Rank() : null;
                    break;
                default:
                    break;
            }
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Rank CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Rank CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Rank_FieldIndex)index)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Rank CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Rank CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Rank_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RankSetterCommon)((IRankGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Rank GetNew()
        {
            return new Rank();
        }

    }
    #endregion

    #region Interface
    public partial interface IRank :
        IRankGetter,
        ILoquiObjectSetter<IRank>
    {
        new Int32 RankNumber { get; set; }
        new bool RankNumber_IsSet { get; set; }
        void RankNumber_Set(Int32 value, bool hasBeenSet = true);
        void RankNumber_Unset();

        new String MaleName { get; set; }
        new bool MaleName_IsSet { get; set; }
        void MaleName_Set(String value, bool hasBeenSet = true);
        void MaleName_Unset();

        new String FemaleName { get; set; }
        new bool FemaleName_IsSet { get; set; }
        void FemaleName_Set(String value, bool hasBeenSet = true);
        void FemaleName_Unset();

        new String Insignia { get; set; }
        new bool Insignia_IsSet { get; set; }
        void Insignia_Set(String value, bool hasBeenSet = true);
        void Insignia_Unset();

    }

    public partial interface IRankGetter :
        ILoquiObject,
        ILoquiObject<IRankGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region RankNumber
        Int32 RankNumber { get; }
        bool RankNumber_IsSet { get; }

        #endregion
        #region MaleName
        String MaleName { get; }
        bool MaleName_IsSet { get; }

        #endregion
        #region FemaleName
        String FemaleName { get; }
        bool FemaleName_IsSet { get; }

        #endregion
        #region Insignia
        String Insignia { get; }
        bool Insignia_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RankMixIn
    {
        public static void Clear(this IRank item)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Rank_Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            ((RankCommon)((IRankGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Rank_Mask<bool> GetHasBeenSetMask(this IRankGetter item)
        {
            var ret = new Rank_Mask<bool>();
            ((RankCommon)((IRankGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRankGetter item,
            IRankGetter rhs)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            Rank_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            Rank_TranslationMask copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            out Rank_ErrorMask errorMask,
            bool doMasks = true,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Rank_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        RankNumber = 0,
        MaleName = 1,
        FemaleName = 2,
        Insignia = 3,
    }
    #endregion

    #region Registration
    public class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 24,
            version: 0);

        public const string GUID = "4945b664-16ac-4464-89b0-03534ffd5e18";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Rank_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank_ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RANKNUMBER":
                    return (ushort)Rank_FieldIndex.RankNumber;
                case "MALENAME":
                    return (ushort)Rank_FieldIndex.MaleName;
                case "FEMALENAME":
                    return (ushort)Rank_FieldIndex.FemaleName;
                case "INSIGNIA":
                    return (ushort)Rank_FieldIndex.Insignia;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return "RankNumber";
                case Rank_FieldIndex.MaleName:
                    return "MaleName";
                case Rank_FieldIndex.FemaleName:
                    return "FemaleName";
                case Rank_FieldIndex.Insignia:
                    return "Insignia";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return typeof(Int32);
                case Rank_FieldIndex.MaleName:
                    return typeof(String);
                case Rank_FieldIndex.FemaleName:
                    return typeof(String);
                case Rank_FieldIndex.Insignia:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RankXmlWriteTranslation);
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RNAM_HEADER,
                        MNAM_HEADER,
                        FNAM_HEADER,
                        INAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(RankBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RankSetterCommon
    {
        public static readonly RankSetterCommon Instance = new RankSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRank item)
        {
            ClearPartial();
            item.RankNumber_Unset();
            item.MaleName_Unset();
            item.FemaleName_Unset();
            item.Insignia_Unset();
        }
        
        public object GetNew() => Rank.GetNew();
        
        #region Xml Translation
        public void CopyInFromXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRank item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankNumber) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RankNumber = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankNumber);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleName) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MaleNameParse))
                    {
                        item.MaleName = MaleNameParse;
                    }
                    else
                    {
                        item.MaleName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleName);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleName) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String FemaleNameParse))
                    {
                        item.FemaleName = FemaleNameParse;
                    }
                    else
                    {
                        item.FemaleName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleName);
                }
                case 0x4D414E49: // INAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.Insignia) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String InsigniaParse))
                    {
                        item.Insignia = InsigniaParse;
                    }
                    else
                    {
                        item.Insignia = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.Insignia);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RankCommon
    {
        public static readonly RankCommon Instance = new RankCommon();

        public Rank_Mask<bool> GetEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Rank_Mask<bool>();
            ((RankCommon)((IRankGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RankNumber = item.RankNumber_IsSet == rhs.RankNumber_IsSet && item.RankNumber == rhs.RankNumber;
            ret.MaleName = item.MaleName_IsSet == rhs.MaleName_IsSet && string.Equals(item.MaleName, rhs.MaleName);
            ret.FemaleName = item.FemaleName_IsSet == rhs.FemaleName_IsSet && string.Equals(item.FemaleName, rhs.FemaleName);
            ret.Insignia = item.Insignia_IsSet == rhs.Insignia_IsSet && string.Equals(item.Insignia, rhs.Insignia);
        }
        
        public string ToString(
            IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Rank =>");
            }
            else
            {
                fg.AppendLine($"{name} (Rank) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankGetter item,
            FileGeneration fg,
            Rank_Mask<bool> printMask = null)
        {
            if (printMask?.RankNumber ?? true)
            {
                fg.AppendLine($"RankNumber => {item.RankNumber}");
            }
            if (printMask?.MaleName ?? true)
            {
                fg.AppendLine($"MaleName => {item.MaleName}");
            }
            if (printMask?.FemaleName ?? true)
            {
                fg.AppendLine($"FemaleName => {item.FemaleName}");
            }
            if (printMask?.Insignia ?? true)
            {
                fg.AppendLine($"Insignia => {item.Insignia}");
            }
        }
        
        public bool HasBeenSet(
            IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            if (checkMask.RankNumber.HasValue && checkMask.RankNumber.Value != item.RankNumber_IsSet) return false;
            if (checkMask.MaleName.HasValue && checkMask.MaleName.Value != item.MaleName_IsSet) return false;
            if (checkMask.FemaleName.HasValue && checkMask.FemaleName.Value != item.FemaleName_IsSet) return false;
            if (checkMask.Insignia.HasValue && checkMask.Insignia.Value != item.Insignia_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRankGetter item,
            Rank_Mask<bool> mask)
        {
            mask.RankNumber = item.RankNumber_IsSet;
            mask.MaleName = item.MaleName_IsSet;
            mask.FemaleName = item.FemaleName_IsSet;
            mask.Insignia = item.Insignia_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankGetter lhs,
            IRankGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.RankNumber_IsSet != rhs.RankNumber_IsSet) return false;
            if (lhs.RankNumber_IsSet)
            {
                if (lhs.RankNumber != rhs.RankNumber) return false;
            }
            if (lhs.MaleName_IsSet != rhs.MaleName_IsSet) return false;
            if (lhs.MaleName_IsSet)
            {
                if (!string.Equals(lhs.MaleName, rhs.MaleName)) return false;
            }
            if (lhs.FemaleName_IsSet != rhs.FemaleName_IsSet) return false;
            if (lhs.FemaleName_IsSet)
            {
                if (!string.Equals(lhs.FemaleName, rhs.FemaleName)) return false;
            }
            if (lhs.Insignia_IsSet != rhs.Insignia_IsSet) return false;
            if (lhs.Insignia_IsSet)
            {
                if (!string.Equals(lhs.Insignia, rhs.Insignia)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRankGetter item)
        {
            int ret = 0;
            if (item.RankNumber_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RankNumber).CombineHashCode(ret);
            }
            if (item.MaleName_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaleName).CombineHashCode(ret);
            }
            if (item.FemaleName_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FemaleName).CombineHashCode(ret);
            }
            if (item.Insignia_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Insignia).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class RankSetterTranslationCommon
    {
        public static readonly RankSetterTranslationCommon Instance = new RankSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRank item,
            IRankGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.RankNumber) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.RankNumber);
                try
                {
                    if (rhs.RankNumber_IsSet)
                    {
                        item.RankNumber = rhs.RankNumber;
                    }
                    else
                    {
                        item.RankNumber_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleName) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.MaleName);
                try
                {
                    if (rhs.MaleName_IsSet)
                    {
                        item.MaleName = rhs.MaleName;
                    }
                    else
                    {
                        item.MaleName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleName) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.FemaleName);
                try
                {
                    if (rhs.FemaleName_IsSet)
                    {
                        item.FemaleName = rhs.FemaleName;
                    }
                    else
                    {
                        item.FemaleName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.Insignia) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.Insignia);
                try
                {
                    if (rhs.Insignia_IsSet)
                    {
                        item.Insignia = rhs.Insignia;
                    }
                    else
                    {
                        item.Insignia_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Rank DeepCopy(
            IRankGetter item,
            Rank_TranslationMask copyMask = null)
        {
            Rank ret = (Rank)((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null)
        {
            Rank ret = (Rank)((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Rank ret = (Rank)((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Rank
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        protected object CommonInstance()
        {
            return RankCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return RankSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return RankSetterTranslationCommon.Instance;
        }
        object IRankGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IRankGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IRankGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RankXmlWriteTranslation Instance = new RankXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRankGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.RankNumber_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.RankNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RankNumber),
                    item: item.RankNumber,
                    fieldIndex: (int)Rank_FieldIndex.RankNumber,
                    errorMask: errorMask);
            }
            if (item.MaleName_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleName),
                    item: item.MaleName,
                    fieldIndex: (int)Rank_FieldIndex.MaleName,
                    errorMask: errorMask);
            }
            if (item.FemaleName_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleName),
                    item: item.FemaleName,
                    fieldIndex: (int)Rank_FieldIndex.FemaleName,
                    errorMask: errorMask);
            }
            if (item.Insignia_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.Insignia) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Insignia),
                    item: item.Insignia,
                    fieldIndex: (int)Rank_FieldIndex.Insignia,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Rank");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Rank");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRankGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRankGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RankXmlCreateTranslation
    {
        public readonly static RankXmlCreateTranslation Instance = new RankXmlCreateTranslation();

        public static void FillPublicXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRank item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "RankNumber":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.RankNumber);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 RankNumberParse,
                            errorMask: errorMask))
                        {
                            item.RankNumber = RankNumberParse;
                        }
                        else
                        {
                            item.RankNumber = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleName":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.MaleName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MaleNameParse,
                            errorMask: errorMask))
                        {
                            item.MaleName = MaleNameParse;
                        }
                        else
                        {
                            item.MaleName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleName":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.FemaleName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String FemaleNameParse,
                            errorMask: errorMask))
                        {
                            item.FemaleName = FemaleNameParse;
                        }
                        else
                        {
                            item.FemaleName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Insignia":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.Insignia);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String InsigniaParse,
                            errorMask: errorMask))
                        {
                            item.Insignia = InsigniaParse;
                        }
                        else
                        {
                            item.Insignia = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RankXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            out Rank_ErrorMask errorMask,
            bool doMasks = true,
            Rank_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            string name = null,
            Rank_TranslationMask translationMask = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Rank_Mask<T> : IMask<T>, IEquatable<Rank_Mask<T>>
    {
        #region Ctors
        public Rank_Mask()
        {
        }

        public Rank_Mask(T initialValue)
        {
            this.RankNumber = initialValue;
            this.MaleName = initialValue;
            this.FemaleName = initialValue;
            this.Insignia = initialValue;
        }
        #endregion

        #region Members
        public T RankNumber;
        public T MaleName;
        public T FemaleName;
        public T Insignia;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Rank_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RankNumber, rhs.RankNumber)) return false;
            if (!object.Equals(this.MaleName, rhs.MaleName)) return false;
            if (!object.Equals(this.FemaleName, rhs.FemaleName)) return false;
            if (!object.Equals(this.Insignia, rhs.Insignia)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RankNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.Insignia?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.RankNumber)) return false;
            if (!eval(this.MaleName)) return false;
            if (!eval(this.FemaleName)) return false;
            if (!eval(this.Insignia)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Rank_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Rank_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Rank_Mask<R> obj, Func<T, R> eval)
        {
            obj.RankNumber = eval(this.RankNumber);
            obj.MaleName = eval(this.MaleName);
            obj.FemaleName = eval(this.FemaleName);
            obj.Insignia = eval(this.Insignia);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Rank_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Rank_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankNumber ?? true)
                {
                    fg.AppendLine($"RankNumber => {RankNumber}");
                }
                if (printMask?.MaleName ?? true)
                {
                    fg.AppendLine($"MaleName => {MaleName}");
                }
                if (printMask?.FemaleName ?? true)
                {
                    fg.AppendLine($"FemaleName => {FemaleName}");
                }
                if (printMask?.Insignia ?? true)
                {
                    fg.AppendLine($"Insignia => {Insignia}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Rank_ErrorMask : IErrorMask, IErrorMask<Rank_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception RankNumber;
        public Exception MaleName;
        public Exception FemaleName;
        public Exception Insignia;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return RankNumber;
                case Rank_FieldIndex.MaleName:
                    return MaleName;
                case Rank_FieldIndex.FemaleName:
                    return FemaleName;
                case Rank_FieldIndex.Insignia:
                    return Insignia;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = ex;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = ex;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = ex;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = (Exception)obj;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (RankNumber != null) return true;
            if (MaleName != null) return true;
            if (FemaleName != null) return true;
            if (Insignia != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Rank_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"RankNumber => {RankNumber}");
            fg.AppendLine($"MaleName => {MaleName}");
            fg.AppendLine($"FemaleName => {FemaleName}");
            fg.AppendLine($"Insignia => {Insignia}");
        }
        #endregion

        #region Combine
        public Rank_ErrorMask Combine(Rank_ErrorMask rhs)
        {
            var ret = new Rank_ErrorMask();
            ret.RankNumber = this.RankNumber.Combine(rhs.RankNumber);
            ret.MaleName = this.MaleName.Combine(rhs.MaleName);
            ret.FemaleName = this.FemaleName.Combine(rhs.FemaleName);
            ret.Insignia = this.Insignia.Combine(rhs.Insignia);
            return ret;
        }
        public static Rank_ErrorMask Combine(Rank_ErrorMask lhs, Rank_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Rank_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Rank_ErrorMask();
        }
        #endregion

    }
    public class Rank_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool RankNumber;
        public bool MaleName;
        public bool FemaleName;
        public bool Insignia;
        #endregion

        #region Ctors
        public Rank_TranslationMask()
        {
        }

        public Rank_TranslationMask(bool defaultOn)
        {
            this.RankNumber = defaultOn;
            this.MaleName = defaultOn;
            this.FemaleName = defaultOn;
            this.Insignia = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((RankNumber, null));
            ret.Add((MaleName, null));
            ret.Add((FemaleName, null));
            ret.Add((Insignia, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankBinaryWriteTranslation Instance = new RankBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRankGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.RankNumber_IsSet)
            {
                Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RankNumber,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.RNAM_HEADER),
                    nullable: false);
            }
            if (item.MaleName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleName,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.MNAM_HEADER),
                    nullable: false);
            }
            if (item.FemaleName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleName,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.Insignia_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Insignia,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.INAM_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRankGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRankGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RankBinaryCreateTranslation
    {
        public readonly static RankBinaryCreateTranslation Instance = new RankBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RankBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Rank_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RankBinaryWrapper :
        BinaryWrapper,
        IRankGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        protected object CommonInstance()
        {
            return RankCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return RankSetterTranslationCommon.Instance;
        }
        object IRankGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IRankGetter.CommonSetterInstance()
        {
            return null;
        }
        object IRankGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region RankNumber
        private int? _RankNumberLocation;
        public bool RankNumber_IsSet => _RankNumberLocation.HasValue;
        public Int32 RankNumber => _RankNumberLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RankNumberLocation.Value, _package.Meta)) : default;
        #endregion
        #region MaleName
        private int? _MaleNameLocation;
        public bool MaleName_IsSet => _MaleNameLocation.HasValue;
        public String MaleName => _MaleNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MaleNameLocation.Value, _package.Meta)) : default;
        #endregion
        #region FemaleName
        private int? _FemaleNameLocation;
        public bool FemaleName_IsSet => _FemaleNameLocation.HasValue;
        public String FemaleName => _FemaleNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FemaleNameLocation.Value, _package.Meta)) : default;
        #endregion
        #region Insignia
        private int? _InsigniaLocation;
        public bool Insignia_IsSet => _InsigniaLocation.HasValue;
        public String Insignia => _InsigniaLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _InsigniaLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RankBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RankBinaryWrapper RankFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RankBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankNumber) return TryGet<int?>.Failure;
                    _RankNumberLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankNumber);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleName) return TryGet<int?>.Failure;
                    _MaleNameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleName);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleName) return TryGet<int?>.Failure;
                    _FemaleNameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleName);
                }
                case 0x4D414E49: // INAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.Insignia) return TryGet<int?>.Failure;
                    _InsigniaLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.Insignia);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

