/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataMapName :
        RegionData,
        IRegionDataMapNameInternal,
        ILoquiObjectSetter<RegionDataMapName>,
        IEquatable<RegionDataMapName>,
        IEqualsMask
    {
        #region Ctor
        public RegionDataMapName()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MapName
        public bool MapName_IsSet
        {
            get => _hasBeenSetTracker[(int)RegionDataMapName_FieldIndex.MapName];
            set => _hasBeenSetTracker[(int)RegionDataMapName_FieldIndex.MapName] = value;
        }
        bool IRegionDataMapNameGetter.MapName_IsSet => MapName_IsSet;
        private String _MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MapName
        {
            get => this._MapName;
            set => MapName_Set(value);
        }
        String IRegionDataMapNameGetter.MapName => this.MapName;
        public void MapName_Set(
            String value,
            bool markSet = true)
        {
            _MapName = value;
            _hasBeenSetTracker[(int)RegionDataMapName_FieldIndex.MapName] = markSet;
        }
        public void MapName_Unset()
        {
            this.MapName_Set(default(String), false);
        }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataMapNameMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRegionDataMapNameGetter rhs)) return false;
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(RegionDataMapName obj)
        {
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => RegionDataMapNameXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataMapNameXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataMapName CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataMapName CreateFromXml(
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataMapName CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataMapName() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataMapName();
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RegionDataMapName CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataMapName CreateFromXml(
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataMapName CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataMapName CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataMapName CreateFromXml(
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataMapName CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((RegionDataMapName_FieldIndex)index)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataMapName_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RegionDataMapNameBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataMapNameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataMapName CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataMapName CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataMapName CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataMapName();
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataMapNameGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static RegionDataMapName GetNew()
        {
            return new RegionDataMapName();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataMapName :
        IRegionDataMapNameGetter,
        IRegionData,
        ILoquiObjectSetter<IRegionDataMapNameInternal>
    {
        new String MapName { get; set; }
        new bool MapName_IsSet { get; set; }
        void MapName_Set(String value, bool hasBeenSet = true);
        void MapName_Unset();

    }

    public partial interface IRegionDataMapNameInternal :
        IRegionDataInternal,
        IRegionDataMapName,
        IRegionDataMapNameGetter
    {
    }

    public partial interface IRegionDataMapNameGetter :
        IRegionDataGetter,
        ILoquiObject<IRegionDataMapNameGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region MapName
        String MapName { get; }
        bool MapName_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionDataMapNameMixIn
    {
        public static void Clear(this IRegionDataMapNameInternal item)
        {
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static RegionDataMapName_Mask<bool> GetEqualsMask(
            this IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataMapNameGetter item,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataMapNameGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataMapNameGetter item,
            RegionDataMapName_Mask<bool?> checkMask)
        {
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionDataMapName_Mask<bool> GetHasBeenSetMask(this IRegionDataMapNameGetter item)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs)
        {
            return ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataMapNameInternal lhs,
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataMapNameInternal lhs,
            IRegionDataMapNameGetter rhs,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataMapNameSetterTranslationCommon)((IRegionDataMapNameGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataMapNameInternal lhs,
            IRegionDataMapNameGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((RegionDataMapNameSetterTranslationCommon)((IRegionDataMapNameGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RegionDataMapName DeepCopy(
            this IRegionDataMapNameGetter item,
            RegionDataMapName_TranslationMask copyMask = null)
        {
            return ((RegionDataMapNameSetterTranslationCommon)((IRegionDataMapNameGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionDataMapName DeepCopy(
            this IRegionDataMapNameGetter item,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask copyMask = null)
        {
            return ((RegionDataMapNameSetterTranslationCommon)((IRegionDataMapNameGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionDataMapName DeepCopy(
            this IRegionDataMapNameGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((RegionDataMapNameSetterTranslationCommon)((IRegionDataMapNameGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataMapName_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataMapNameInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataMapNameInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataMapNameInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IRegionDataMapNameInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataMapNameSetterCommon)((IRegionDataMapNameGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataMapName_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
        MapName = 4,
    }
    #endregion

    #region Registration
    public class RegionDataMapName_Registration : ILoquiRegistration
    {
        public static readonly RegionDataMapName_Registration Instance = new RegionDataMapName_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 111,
            version: 0);

        public const string GUID = "acca1023-9d99-47c2-82a4-d46ed90b087b";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(RegionDataMapName_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataMapName_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataMapName);

        public static readonly Type GetterType = typeof(IRegionDataMapNameGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionDataMapName);

        public static readonly Type InternalSetterType = typeof(IRegionDataMapNameInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataMapName";

        public const string Name = "RegionDataMapName";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAPNAME":
                    return (ushort)RegionDataMapName_FieldIndex.MapName;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return "MapName";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return typeof(String);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataMapNameXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMP_HEADER = new RecordType("RDMP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataMapNameBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataMapNameSetterCommon : RegionDataSetterCommon
    {
        public new static readonly RegionDataMapNameSetterCommon Instance = new RegionDataMapNameSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionDataMapNameInternal item)
        {
            ClearPartial();
            item.MapName_Unset();
            base.Clear(item);
        }
        
        public override void Clear(IRegionDataInternal item)
        {
            Clear(item: (IRegionDataMapNameInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionDataMapNameInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionDataSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IRegionDataMapNameInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataMapNameXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRegionDataMapNameInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            RegionDataSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionDataMapNameInternal item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x504D4452: // RDMP
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MapNameParse))
                    {
                        item.MapName = MapNameParse;
                    }
                    else
                    {
                        item.MapName = default(String);
                    }
                    return TryGet<int?>.Succeed((int)RegionDataMapName_FieldIndex.MapName);
                }
                default:
                    return RegionDataSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IRegionDataMapNameInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionDataMapNameCommon : RegionDataCommon
    {
        public new static readonly RegionDataMapNameCommon Instance = new RegionDataMapNameCommon();

        public RegionDataMapName_Mask<bool> GetEqualsMask(
            IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataMapName_Mask<bool>();
            ((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionDataMapNameGetter item,
            IRegionDataMapNameGetter rhs,
            RegionDataMapName_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MapName = item.MapName_IsSet == rhs.MapName_IsSet && string.Equals(item.MapName, rhs.MapName);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionDataMapNameGetter item,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionDataMapNameGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionDataMapName =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionDataMapName) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionDataMapNameGetter item,
            FileGeneration fg,
            RegionDataMapName_Mask<bool> printMask = null)
        {
            RegionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.MapName ?? true)
            {
                fg.AppendLine($"MapName => {item.MapName}");
            }
        }
        
        public bool HasBeenSet(
            IRegionDataMapNameGetter item,
            RegionDataMapName_Mask<bool?> checkMask)
        {
            if (checkMask.MapName.HasValue && checkMask.MapName.Value != item.MapName_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionDataMapNameGetter item,
            RegionDataMapName_Mask<bool> mask)
        {
            mask.MapName = item.MapName_IsSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static RegionDataMapName_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataMapName_FieldIndex)((int)index);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return (RegionDataMapName_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataMapNameGetter lhs,
            IRegionDataMapNameGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.MapName_IsSet != rhs.MapName_IsSet) return false;
            if (lhs.MapName_IsSet)
            {
                if (!string.Equals(lhs.MapName, rhs.MapName)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IRegionDataGetter lhs,
            IRegionDataGetter rhs)
        {
            return Equals(
                lhs: (IRegionDataMapNameGetter)lhs,
                rhs: rhs as IRegionDataMapNameGetter);
        }
        
        public virtual int GetHashCode(IRegionDataMapNameGetter item)
        {
            int ret = 0;
            if (item.MapName_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MapName).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IRegionDataGetter item)
        {
            return GetHashCode(item: (IRegionDataMapNameGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return RegionDataMapName.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRegionDataMapNameGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class RegionDataMapNameSetterTranslationCommon : RegionDataSetterTranslationCommon
    {
        public new static readonly RegionDataMapNameSetterTranslationCommon Instance = new RegionDataMapNameSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRegionDataMapNameInternal item,
            IRegionDataMapNameGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IRegionDataMapName item,
            IRegionDataMapNameGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)RegionDataMapName_FieldIndex.MapName) ?? true))
            {
                errorMask?.PushIndex((int)RegionDataMapName_FieldIndex.MapName);
                try
                {
                    if (rhs.MapName_IsSet)
                    {
                        item.MapName = rhs.MapName;
                    }
                    else
                    {
                        item.MapName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IRegionDataInternal item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IRegionDataMapNameInternal)item,
                rhs: (IRegionDataMapNameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IRegionData item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IRegionDataMapName)item,
                rhs: (IRegionDataMapNameGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public RegionDataMapName DeepCopy(
            IRegionDataMapNameGetter item,
            RegionDataMapName_TranslationMask copyMask = null)
        {
            RegionDataMapName ret = (RegionDataMapName)((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionDataMapName DeepCopy(
            IRegionDataMapNameGetter item,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask copyMask = null)
        {
            RegionDataMapName ret = (RegionDataMapName)((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionDataMapName DeepCopy(
            IRegionDataMapNameGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            RegionDataMapName ret = (RegionDataMapName)((RegionDataMapNameCommon)((IRegionDataMapNameGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RegionDataMapName
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataMapName_Registration.Instance;
        public new static RegionDataMapName_Registration Registration => RegionDataMapName_Registration.Instance;
        protected override object CommonInstance() => RegionDataMapNameCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return RegionDataMapNameSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => RegionDataMapNameSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataMapNameXmlWriteTranslation :
        RegionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionDataMapNameXmlWriteTranslation Instance = new RegionDataMapNameXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataMapNameGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.MapName_IsSet
                && (translationMask?.GetShouldTranslate((int)RegionDataMapName_FieldIndex.MapName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MapName),
                    item: item.MapName,
                    fieldIndex: (int)RegionDataMapName_FieldIndex.MapName,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRegionDataMapNameGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataMapName");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataMapNameGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataMapNameGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionDataMapNameXmlCreateTranslation : RegionDataXmlCreateTranslation
    {
        public new readonly static RegionDataMapNameXmlCreateTranslation Instance = new RegionDataMapNameXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataMapNameInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataMapNameXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataMapNameInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MapName":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataMapName_FieldIndex.MapName);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MapNameParse,
                            errorMask: errorMask))
                        {
                            item.MapName = MapNameParse;
                        }
                        else
                        {
                            item.MapName = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionDataMapNameXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataMapNameGetter item,
            XElement node,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataMapName_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataMapNameXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataMapNameGetter item,
            string path,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataMapNameGetter item,
            Stream stream,
            out RegionDataMapName_ErrorMask errorMask,
            RegionDataMapName_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class RegionDataMapName_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataMapName_Mask<T>>
    {
        #region Ctors
        public RegionDataMapName_Mask()
        {
        }

        public RegionDataMapName_Mask(T initialValue)
        {
            this.MapName = initialValue;
        }
        #endregion

        #region Members
        public T MapName;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataMapName_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataMapName_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MapName)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataMapName_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataMapName_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataMapName_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MapName = eval(this.MapName);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataMapName_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataMapName_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataMapName_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MapName ?? true)
                {
                    fg.AppendLine($"MapName => {MapName}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataMapName_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataMapName_ErrorMask>
    {
        #region Members
        public Exception MapName;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    return MapName;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataMapName_FieldIndex enu = (RegionDataMapName_FieldIndex)index;
            switch (enu)
            {
                case RegionDataMapName_FieldIndex.MapName:
                    this.MapName = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MapName != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataMapName_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MapName => {MapName}");
        }
        #endregion

        #region Combine
        public RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask rhs)
        {
            var ret = new RegionDataMapName_ErrorMask();
            ret.MapName = this.MapName.Combine(rhs.MapName);
            return ret;
        }
        public static RegionDataMapName_ErrorMask Combine(RegionDataMapName_ErrorMask lhs, RegionDataMapName_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataMapName_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataMapName_ErrorMask();
        }
        #endregion

    }
    public class RegionDataMapName_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public bool MapName;
        #endregion

        #region Ctors
        public RegionDataMapName_TranslationMask()
            : base()
        {
        }

        public RegionDataMapName_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.MapName = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((MapName, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataMapNameBinaryWriteTranslation :
        RegionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionDataMapNameBinaryWriteTranslation Instance = new RegionDataMapNameBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRegionDataMapNameGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.MapName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MapName,
                    header: recordTypeConverter.ConvertToCustom(RegionDataMapName_Registration.RDMP_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRegionDataMapNameGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataMapNameGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataMapNameGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionDataMapNameBinaryCreateTranslation : RegionDataBinaryCreateTranslation
    {
        public new readonly static RegionDataMapNameBinaryCreateTranslation Instance = new RegionDataMapNameBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionDataMapNameBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataMapNameGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataMapName_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataMapNameBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataMapName_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataMapNameBinaryWrapper :
        RegionDataBinaryWrapper,
        IRegionDataMapNameGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataMapName_Registration.Instance;
        public new static RegionDataMapName_Registration Registration => RegionDataMapName_Registration.Instance;
        protected override object CommonInstance() => RegionDataMapNameCommon.Instance;
        protected override object CommonSetterTranslationInstance() => RegionDataMapNameSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataMapNameGetter)rhs, include);

        protected override object XmlWriteTranslator => RegionDataMapNameXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataMapNameXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => RegionDataMapNameBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataMapNameBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region MapName
        private int? _MapNameLocation;
        public bool MapName_IsSet => _MapNameLocation.HasValue;
        public String MapName => _MapNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MapNameLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionDataMapNameBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionDataMapNameBinaryWrapper RegionDataMapNameFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RegionDataMapNameBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x504D4452: // RDMP
                {
                    _MapNameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)RegionDataMapName_FieldIndex.MapName);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

