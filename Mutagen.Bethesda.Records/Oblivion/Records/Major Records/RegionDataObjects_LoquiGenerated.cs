/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataObjects :
        RegionData,
        IRegionDataObjectsInternal,
        ILoquiObjectSetter<RegionDataObjects>,
        IEquatable<RegionDataObjects>,
        IEqualsMask
    {
        #region Ctor
        public RegionDataObjects()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<RegionDataObject> _Objects = new SetList<RegionDataObject>();
        public ISetList<RegionDataObject> Objects => _Objects;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RegionDataObject> IRegionDataObjects.Objects => _Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRegionDataObjectGetter> IRegionDataObjectsGetter.Objects => _Objects;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataObjectsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRegionDataObjectsGetter rhs)) return false;
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(RegionDataObjects obj)
        {
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => RegionDataObjectsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataObjectsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataObjects CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataObjects CreateFromXml(
            XElement node,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataObjects CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataObjects() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataObjects();
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RegionDataObjects CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataObjects CreateFromXml(
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataObjects CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataObjects CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataObjects CreateFromXml(
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataObjects CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataObjects_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            foreach (var item in Objects.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            foreach (var item in Objects)
            {
                item.Link(package: package);
            }
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RegionDataObjectsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataObjectsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataObjects CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataObjects CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataObjects CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataObjects();
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataObjectsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static RegionDataObjects GetNew()
        {
            return new RegionDataObjects();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataObjects :
        IRegionDataObjectsGetter,
        IRegionData,
        ILoquiObjectSetter<IRegionDataObjectsInternal>,
        ILinkSubContainer
    {
        new ISetList<RegionDataObject> Objects { get; }
    }

    public partial interface IRegionDataObjectsInternal :
        IRegionDataInternal,
        IRegionDataObjects,
        IRegionDataObjectsGetter
    {
    }

    public partial interface IRegionDataObjectsGetter :
        IRegionDataGetter,
        ILoquiObject<IRegionDataObjectsGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Objects
        IReadOnlySetList<IRegionDataObjectGetter> Objects { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionDataObjectsMixIn
    {
        public static void Clear(this IRegionDataObjectsInternal item)
        {
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static RegionDataObjects_Mask<bool> GetEqualsMask(
            this IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataObjectsGetter item,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataObjectsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataObjectsGetter item,
            RegionDataObjects_Mask<bool?> checkMask)
        {
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionDataObjects_Mask<bool> GetHasBeenSetMask(this IRegionDataObjectsGetter item)
        {
            var ret = new RegionDataObjects_Mask<bool>();
            ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs)
        {
            return ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataObjectsInternal lhs,
            IRegionDataObjectsGetter rhs,
            RegionDataObjects_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataObjectsInternal lhs,
            IRegionDataObjectsGetter rhs,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataObjectsSetterTranslationCommon)((IRegionDataObjectsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataObjectsInternal lhs,
            IRegionDataObjectsGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask copyMask = null)
        {
            ((RegionDataObjectsSetterTranslationCommon)((IRegionDataObjectsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RegionDataObjects DeepCopy(
            this IRegionDataObjectsGetter item,
            RegionDataObjects_TranslationMask copyMask = null)
        {
            return ((RegionDataObjectsSetterTranslationCommon)((IRegionDataObjectsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            XElement node,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataObjects_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataObjectsInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataObjectsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataObjectsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IRegionDataObjectsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataObjects_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
        Objects = 4,
    }
    #endregion

    #region Registration
    public class RegionDataObjects_Registration : ILoquiRegistration
    {
        public static readonly RegionDataObjects_Registration Instance = new RegionDataObjects_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 110,
            version: 0);

        public const string GUID = "6c1a729e-5137-4710-b72d-2f6a5a9f0b7e";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(RegionDataObjects_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataObjects_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataObjects);

        public static readonly Type GetterType = typeof(IRegionDataObjectsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionDataObjects);

        public static readonly Type InternalSetterType = typeof(IRegionDataObjectsInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataObjects";

        public const string Name = "RegionDataObjects";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTS":
                    return (ushort)RegionDataObjects_FieldIndex.Objects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return true;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return "Objects";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return typeof(ISetList<RegionDataObject>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataObjectsXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDOT_HEADER = new RecordType("RDOT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataObjectsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataObjectsSetterCommon : RegionDataSetterCommon
    {
        public new static readonly RegionDataObjectsSetterCommon Instance = new RegionDataObjectsSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRegionDataObjectsInternal item)
        {
            ClearPartial();
            item.Objects.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IRegionDataInternal item)
        {
            Clear(item: (IRegionDataObjectsInternal)item);
        }
        
        public override object GetNew() => RegionDataObjects.GetNew();
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionDataObjectsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionDataSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IRegionDataObjectsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataObjectsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRegionDataObjectsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            RegionDataSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionDataObjectsInternal item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x544F4452: // RDOT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionDataObject>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Objects,
                        fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RegionDataObject listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RegionDataObject>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)RegionDataObjects_FieldIndex.Objects);
                }
                default:
                    return RegionDataSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IRegionDataObjectsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionDataObjectsCommon : RegionDataCommon
    {
        public new static readonly RegionDataObjectsCommon Instance = new RegionDataObjectsCommon();

        public RegionDataObjects_Mask<bool> GetEqualsMask(
            IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataObjects_Mask<bool>();
            ((RegionDataObjectsCommon)((IRegionDataObjectsGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionDataObjectsGetter item,
            IRegionDataObjectsGetter rhs,
            RegionDataObjects_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Objects = item.Objects.CollectionEqualsHelper(
                rhs.Objects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionDataObjectsGetter item,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionDataObjectsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionDataObjects =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionDataObjects) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionDataObjectsGetter item,
            FileGeneration fg,
            RegionDataObjects_Mask<bool> printMask = null)
        {
            RegionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Objects?.Overall ?? true)
            {
                fg.AppendLine("Objects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Objects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IRegionDataObjectsGetter item,
            RegionDataObjects_Mask<bool?> checkMask)
        {
            if (checkMask.Objects.Overall.HasValue && checkMask.Objects.Overall.Value != item.Objects.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionDataObjectsGetter item,
            RegionDataObjects_Mask<bool> mask)
        {
            mask.Objects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionDataObject_Mask<bool>>>>(item.Objects.HasBeenSet, item.Objects.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionDataObject_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static RegionDataObjects_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataObjects_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataObjects_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataObjects_FieldIndex)((int)index);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return (RegionDataObjects_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataObjectsGetter lhs,
            IRegionDataObjectsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Objects.HasBeenSet != rhs.Objects.HasBeenSet) return false;
            if (lhs.Objects.HasBeenSet)
            {
                if (!lhs.Objects.SequenceEqual(rhs.Objects)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IRegionDataGetter lhs,
            IRegionDataGetter rhs)
        {
            return Equals(
                lhs: (IRegionDataObjectsGetter)lhs,
                rhs: rhs as IRegionDataObjectsGetter);
        }
        
        public virtual int GetHashCode(IRegionDataObjectsGetter item)
        {
            int ret = 0;
            if (item.Objects.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Objects).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IRegionDataGetter item)
        {
            return GetHashCode(item: (IRegionDataObjectsGetter)item);
        }
        
        #endregion
        
        
    }
    public partial class RegionDataObjectsSetterTranslationCommon : RegionDataSetterTranslationCommon
    {
        public new static readonly RegionDataObjectsSetterTranslationCommon Instance = new RegionDataObjectsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRegionDataObjects item,
            IRegionDataObjectsGetter rhs,
            ErrorMaskBuilder errorMask,
            RegionDataObjects_TranslationMask copyMask)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if (copyMask?.Objects.Overall ?? true)
            {
                errorMask?.PushIndex((int)RegionDataObjects_FieldIndex.Objects);
                try
                {
                    item.Objects.SetTo(
                        items: rhs.Objects,
                        converter: (r) =>
                        {
                            return r.DeepCopy(copyMask?.Objects?.Specific);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public new RegionDataObjects DeepCopy(
            IRegionDataObjectsGetter item,
            RegionDataObjects_TranslationMask copyMask = null)
        {
            RegionDataObjects ret = (RegionDataObjects)((RegionDataObjectsSetterCommon)((IRegionDataObjectsGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RegionDataObjects
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataObjects_Registration.Instance;
        public new static RegionDataObjects_Registration Registration => RegionDataObjects_Registration.Instance;
        protected override object CommonInstance()
        {
            return RegionDataObjectsCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return RegionDataObjectsSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return RegionDataObjectsSetterTranslationCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataObjectsXmlWriteTranslation :
        RegionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionDataObjectsXmlWriteTranslation Instance = new RegionDataObjectsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataObjectsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Objects.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)RegionDataObjects_FieldIndex.Objects) ?? true))
            {
                ListXmlTranslation<IRegionDataObjectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Objects),
                    item: item.Objects,
                    fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionDataObjects_FieldIndex.Objects),
                    transl: (XElement subNode, IRegionDataObjectGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RegionDataObjectXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRegionDataObjectsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataObjects");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataObjects");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataObjectsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataObjectsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionDataObjectsXmlCreateTranslation : RegionDataXmlCreateTranslation
    {
        public new readonly static RegionDataObjectsXmlCreateTranslation Instance = new RegionDataObjectsXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataObjectsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataObjectsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataObjectsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Objects":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataObjects_FieldIndex.Objects);
                        if (ListXmlTranslation<RegionDataObject>.Instance.Parse(
                            node: node,
                            enumer: out var ObjectsItem,
                            transl: LoquiXmlTranslation<RegionDataObject>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Objects.SetTo(ObjectsItem);
                        }
                        else
                        {
                            item.Objects.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionDataObjectsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataObjectsGetter item,
            XElement node,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataObjects_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataObjectsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataObjectsGetter item,
            string path,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataObjectsGetter item,
            Stream stream,
            out RegionDataObjects_ErrorMask errorMask,
            RegionDataObjects_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class RegionDataObjects_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataObjects_Mask<T>>
    {
        #region Ctors
        public RegionDataObjects_Mask()
        {
        }

        public RegionDataObjects_Mask(T initialValue)
        {
            this.Objects = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionDataObject_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionDataObject_Mask<T>>>> Objects;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataObjects_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataObjects_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Objects, rhs.Objects)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Objects?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (this.Objects != null)
            {
                if (!eval(this.Objects.Overall)) return false;
                if (this.Objects.Specific != null)
                {
                    foreach (var item in this.Objects.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataObjects_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataObjects_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataObjects_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Objects != null)
            {
                obj.Objects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionDataObject_Mask<R>>>>();
                obj.Objects.Overall = eval(this.Objects.Overall);
                if (Objects.Specific != null)
                {
                    List<MaskItemIndexed<R, RegionDataObject_Mask<R>>> l = new List<MaskItemIndexed<R, RegionDataObject_Mask<R>>>();
                    obj.Objects.Specific = l;
                    foreach (var item in Objects.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RegionDataObject_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RegionDataObject_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Objects.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataObjects_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataObjects_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataObjects_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Objects?.Overall ?? true)
                {
                    fg.AppendLine("Objects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Objects.Overall != null)
                        {
                            fg.AppendLine(Objects.Overall.ToString());
                        }
                        if (Objects.Specific != null)
                        {
                            foreach (var subItem in Objects.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataObjects_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataObjects_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>> Objects;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    return Objects;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    this.Objects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataObjects_FieldIndex enu = (RegionDataObjects_FieldIndex)index;
            switch (enu)
            {
                case RegionDataObjects_FieldIndex.Objects:
                    this.Objects = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Objects != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataObjects_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine("Objects =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Objects.Overall != null)
                {
                    fg.AppendLine(Objects.Overall.ToString());
                }
                if (Objects.Specific != null)
                {
                    foreach (var subItem in Objects.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataObjects_ErrorMask Combine(RegionDataObjects_ErrorMask rhs)
        {
            var ret = new RegionDataObjects_ErrorMask();
            ret.Objects = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionDataObject_ErrorMask>>>(this.Objects.Overall.Combine(rhs.Objects.Overall), new List<MaskItem<Exception, RegionDataObject_ErrorMask>>(this.Objects.Specific.And(rhs.Objects.Specific)));
            return ret;
        }
        public static RegionDataObjects_ErrorMask Combine(RegionDataObjects_ErrorMask lhs, RegionDataObjects_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataObjects_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataObjects_ErrorMask();
        }
        #endregion

    }
    public class RegionDataObjects_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public MaskItem<bool, RegionDataObject_TranslationMask> Objects;
        #endregion

        #region Ctors
        public RegionDataObjects_TranslationMask()
            : base()
        {
        }

        public RegionDataObjects_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Objects = new MaskItem<bool, RegionDataObject_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Objects?.Overall ?? true, Objects?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataObjectsBinaryWriteTranslation :
        RegionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionDataObjectsBinaryWriteTranslation Instance = new RegionDataObjectsBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRegionDataObjectsGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Objects.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionDataObjectGetter>.Instance.Write(
                    writer: writer,
                    items: item.Objects,
                    fieldIndex: (int)RegionDataObjects_FieldIndex.Objects,
                    recordType: RegionDataObjects_Registration.RDOT_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRegionDataObjectGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        {
                            var loquiItem = subItem;
                            ((RegionDataObjectBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                errorMask: listErrorMask,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IRegionDataObjectsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataObjectsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataObjectsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionDataObjectsBinaryCreateTranslation : RegionDataBinaryCreateTranslation
    {
        public new readonly static RegionDataObjectsBinaryCreateTranslation Instance = new RegionDataObjectsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionDataObjectsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataObjectsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataObjects_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataObjectsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataObjects_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataObjectsBinaryWrapper :
        RegionDataBinaryWrapper,
        IRegionDataObjectsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataObjects_Registration.Instance;
        public new static RegionDataObjects_Registration Registration => RegionDataObjects_Registration.Instance;
        protected override object CommonInstance()
        {
            return RegionDataObjectsCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return RegionDataObjectsSetterTranslationCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataObjectsGetter)rhs, include);

        protected override object XmlWriteTranslator => RegionDataObjectsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataObjectsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => RegionDataObjectsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataObjectsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public IReadOnlySetList<IRegionDataObjectGetter> Objects { get; private set; } = EmptySetList<RegionDataObjectBinaryWrapper>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionDataObjectsBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionDataObjectsBinaryWrapper RegionDataObjectsFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RegionDataObjectsBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x544F4452: // RDOT
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Objects = BinaryWrapperSetList<RegionDataObjectBinaryWrapper>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 52,
                        getter: (s, p) => RegionDataObjectBinaryWrapper.RegionDataObjectFactory(new BinaryMemoryReadStream(s), p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)RegionDataObjects_FieldIndex.Objects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

