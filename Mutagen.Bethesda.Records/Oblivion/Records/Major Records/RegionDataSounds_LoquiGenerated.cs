/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionDataSounds :
        RegionData,
        IRegionDataSoundsInternal,
        ILoquiObjectSetter<RegionDataSounds>,
        IEquatable<RegionDataSounds>,
        IEqualsMask
    {
        #region Ctor
        public RegionDataSounds()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MusicType
        public bool MusicType_IsSet
        {
            get => _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType];
            set => _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType] = value;
        }
        bool IRegionDataSoundsGetter.MusicType_IsSet => MusicType_IsSet;
        private MusicType _MusicType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MusicType MusicType
        {
            get => this._MusicType;
            set => MusicType_Set(value);
        }
        MusicType IRegionDataSoundsGetter.MusicType => this.MusicType;
        public void MusicType_Set(
            MusicType value,
            bool markSet = true)
        {
            _MusicType = value;
            _hasBeenSetTracker[(int)RegionDataSounds_FieldIndex.MusicType] = markSet;
        }
        public void MusicType_Unset()
        {
            this.MusicType_Set(default(MusicType), false);
        }
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<RegionSound> _Sounds = new SetList<RegionSound>();
        public ISetList<RegionSound> Sounds => _Sounds;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RegionSound> IRegionDataSounds.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRegionSoundGetter> IRegionDataSoundsGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionDataSoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRegionDataSoundsGetter rhs)) return false;
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(RegionDataSounds obj)
        {
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => RegionDataSoundsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataSoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionDataSounds CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionDataSounds CreateFromXml(
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataSounds CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RegionDataSounds() : null;
                    break;
                default:
                    break;
            }
            var ret = new RegionDataSounds();
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RegionDataSounds CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataSounds CreateFromXml(
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataSounds CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionDataSounds CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RegionDataSounds CreateFromXml(
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionDataSounds CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((RegionDataSounds_FieldIndex)index)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return _hasBeenSetTracker[index];
                case RegionDataSounds_FieldIndex.Sounds:
                    return Sounds.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionDataSounds_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILinkGetter> Links => RegionDataSoundsCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RegionDataSoundsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataSoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RegionDataSounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static RegionDataSounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionDataSounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new RegionDataSounds();
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataSoundsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static RegionDataSounds GetNew()
        {
            return new RegionDataSounds();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionDataSounds :
        IRegionDataSoundsGetter,
        IRegionData,
        ILoquiObjectSetter<IRegionDataSoundsInternal>
    {
        new MusicType MusicType { get; set; }
        new bool MusicType_IsSet { get; set; }
        void MusicType_Set(MusicType value, bool hasBeenSet = true);
        void MusicType_Unset();

        new ISetList<RegionSound> Sounds { get; }
    }

    public partial interface IRegionDataSoundsInternal :
        IRegionDataInternal,
        IRegionDataSounds,
        IRegionDataSoundsGetter
    {
    }

    public partial interface IRegionDataSoundsGetter :
        IRegionDataGetter,
        ILoquiObject<IRegionDataSoundsGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region MusicType
        MusicType MusicType { get; }
        bool MusicType_IsSet { get; }

        #endregion
        #region Sounds
        IReadOnlySetList<IRegionSoundGetter> Sounds { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionDataSoundsMixIn
    {
        public static void Clear(this IRegionDataSoundsInternal item)
        {
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static RegionDataSounds_Mask<bool> GetEqualsMask(
            this IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataSoundsGetter item,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataSoundsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataSoundsGetter item,
            RegionDataSounds_Mask<bool?> checkMask)
        {
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionDataSounds_Mask<bool> GetHasBeenSetMask(this IRegionDataSoundsGetter item)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs)
        {
            return ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataSoundsInternal lhs,
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataSoundsInternal lhs,
            IRegionDataSoundsGetter rhs,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataSoundsSetterTranslationCommon)((IRegionDataSoundsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionDataSoundsInternal lhs,
            IRegionDataSoundsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((RegionDataSoundsSetterTranslationCommon)((IRegionDataSoundsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RegionDataSounds DeepCopy(
            this IRegionDataSoundsGetter item,
            RegionDataSounds_TranslationMask copyMask = null)
        {
            return ((RegionDataSoundsSetterTranslationCommon)((IRegionDataSoundsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionDataSounds DeepCopy(
            this IRegionDataSoundsGetter item,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask copyMask = null)
        {
            return ((RegionDataSoundsSetterTranslationCommon)((IRegionDataSoundsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionDataSounds DeepCopy(
            this IRegionDataSoundsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((RegionDataSoundsSetterTranslationCommon)((IRegionDataSoundsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RegionDataSounds_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataSoundsInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataSoundsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataSoundsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IRegionDataSoundsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataSoundsSetterCommon)((IRegionDataSoundsGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionDataSounds_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
        MusicType = 4,
        Sounds = 5,
    }
    #endregion

    #region Registration
    public class RegionDataSounds_Registration : ILoquiRegistration
    {
        public static readonly RegionDataSounds_Registration Instance = new RegionDataSounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 114,
            version: 0);

        public const string GUID = "45ee0280-5f00-4126-9120-50ed00cc27c3";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(RegionDataSounds_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionDataSounds_ErrorMask);

        public static readonly Type ClassType = typeof(RegionDataSounds);

        public static readonly Type GetterType = typeof(IRegionDataSoundsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionDataSounds);

        public static readonly Type InternalSetterType = typeof(IRegionDataSoundsInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionDataSounds";

        public const string Name = "RegionDataSounds";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MUSICTYPE":
                    return (ushort)RegionDataSounds_FieldIndex.MusicType;
                case "SOUNDS":
                    return (ushort)RegionDataSounds_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.Sounds:
                    return true;
                case RegionDataSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return "MusicType";
                case RegionDataSounds_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                case RegionDataSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return typeof(MusicType);
                case RegionDataSounds_FieldIndex.Sounds:
                    return typeof(ISetList<RegionSound>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataSoundsXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMD_HEADER = new RecordType("RDMD");
        public static readonly RecordType RDSD_HEADER = new RecordType("RDSD");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataSoundsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataSoundsSetterCommon : RegionDataSetterCommon
    {
        public new static readonly RegionDataSoundsSetterCommon Instance = new RegionDataSoundsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionDataSoundsInternal item)
        {
            ClearPartial();
            item.MusicType_Unset();
            item.Sounds.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IRegionDataInternal item)
        {
            Clear(item: (IRegionDataSoundsInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionDataSoundsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    RegionDataSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IRegionDataSoundsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataSoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRegionDataSoundsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            RegionDataSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionDataSoundsInternal item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444D4452: // RDMD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<MusicType>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out MusicType MusicTypeParse))
                    {
                        item.MusicType = MusicTypeParse;
                    }
                    else
                    {
                        item.MusicType = default(MusicType);
                    }
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.MusicType);
                }
                case 0x44534452: // RDSD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.Sounds,
                        fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RegionSound listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RegionSound>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.Sounds);
                }
                default:
                    return RegionDataSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IRegionDataSoundsInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionDataSoundsCommon : RegionDataCommon
    {
        public new static readonly RegionDataSoundsCommon Instance = new RegionDataSoundsCommon();

        public RegionDataSounds_Mask<bool> GetEqualsMask(
            IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionDataSounds_Mask<bool>();
            ((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionDataSoundsGetter item,
            IRegionDataSoundsGetter rhs,
            RegionDataSounds_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MusicType = item.MusicType_IsSet == rhs.MusicType_IsSet && item.MusicType == rhs.MusicType;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionDataSoundsGetter item,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionDataSoundsGetter item,
            FileGeneration fg,
            string name = null,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionDataSounds =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionDataSounds) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionDataSoundsGetter item,
            FileGeneration fg,
            RegionDataSounds_Mask<bool> printMask = null)
        {
            RegionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.MusicType ?? true)
            {
                fg.AppendLine($"MusicType => {item.MusicType}");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Sounds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IRegionDataSoundsGetter item,
            RegionDataSounds_Mask<bool?> checkMask)
        {
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != item.MusicType_IsSet) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionDataSoundsGetter item,
            RegionDataSounds_Mask<bool> mask)
        {
            mask.MusicType = item.MusicType_IsSet;
            mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionSound_Mask<bool>>>>(item.Sounds.HasBeenSet, item.Sounds.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionSound_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static RegionDataSounds_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.DataType:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Flags:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.Priority:
                    return (RegionDataSounds_FieldIndex)((int)index);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return (RegionDataSounds_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataSoundsGetter lhs,
            IRegionDataSoundsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.MusicType_IsSet != rhs.MusicType_IsSet) return false;
            if (lhs.MusicType_IsSet)
            {
                if (lhs.MusicType != rhs.MusicType) return false;
            }
            if (lhs.Sounds.HasBeenSet != rhs.Sounds.HasBeenSet) return false;
            if (lhs.Sounds.HasBeenSet)
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IRegionDataGetter lhs,
            IRegionDataGetter rhs)
        {
            return Equals(
                lhs: (IRegionDataSoundsGetter)lhs,
                rhs: rhs as IRegionDataSoundsGetter);
        }
        
        public virtual int GetHashCode(IRegionDataSoundsGetter item)
        {
            int ret = 0;
            if (item.MusicType_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MusicType).CombineHashCode(ret);
            }
            if (item.Sounds.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IRegionDataGetter item)
        {
            return GetHashCode(item: (IRegionDataSoundsGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return RegionDataSounds.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRegionDataSoundsGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class RegionDataSoundsSetterTranslationCommon : RegionDataSetterTranslationCommon
    {
        public new static readonly RegionDataSoundsSetterTranslationCommon Instance = new RegionDataSoundsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRegionDataSoundsInternal item,
            IRegionDataSoundsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IRegionDataSounds item,
            IRegionDataSoundsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.MusicType) ?? true))
            {
                errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                try
                {
                    if (rhs.MusicType_IsSet)
                    {
                        item.MusicType = rhs.MusicType;
                    }
                    else
                    {
                        item.MusicType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        items: rhs.Sounds,
                        converter: (r) =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IRegionDataInternal item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IRegionDataSoundsInternal)item,
                rhs: (IRegionDataSoundsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IRegionData item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IRegionDataSounds)item,
                rhs: (IRegionDataSoundsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public RegionDataSounds DeepCopy(
            IRegionDataSoundsGetter item,
            RegionDataSounds_TranslationMask copyMask = null)
        {
            RegionDataSounds ret = (RegionDataSounds)((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionDataSounds DeepCopy(
            IRegionDataSoundsGetter item,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask copyMask = null)
        {
            RegionDataSounds ret = (RegionDataSounds)((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionDataSounds DeepCopy(
            IRegionDataSoundsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            RegionDataSounds ret = (RegionDataSounds)((RegionDataSoundsCommon)((IRegionDataSoundsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RegionDataSounds
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataSounds_Registration.Instance;
        public new static RegionDataSounds_Registration Registration => RegionDataSounds_Registration.Instance;
        protected override object CommonInstance() => RegionDataSoundsCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return RegionDataSoundsSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => RegionDataSoundsSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataSoundsXmlWriteTranslation :
        RegionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionDataSoundsXmlWriteTranslation Instance = new RegionDataSoundsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataSoundsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            RegionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.MusicType_IsSet
                && (translationMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)RegionDataSounds_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IRegionSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionDataSounds_FieldIndex.Sounds),
                    transl: (XElement subNode, IRegionSoundGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RegionSoundXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRegionDataSoundsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionDataSounds");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataSoundsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionDataSoundsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionDataSoundsXmlCreateTranslation : RegionDataXmlCreateTranslation
    {
        public new readonly static RegionDataSoundsXmlCreateTranslation Instance = new RegionDataSoundsXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataSoundsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataSoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataSoundsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MusicType":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.MusicType);
                        if (EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            item: out MusicType MusicTypeParse,
                            errorMask: errorMask))
                        {
                            item.MusicType = MusicTypeParse;
                        }
                        else
                        {
                            item.MusicType = default(MusicType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)RegionDataSounds_FieldIndex.Sounds);
                        if (ListXmlTranslation<RegionSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<RegionSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionDataSoundsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataSoundsGetter item,
            XElement node,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true,
            RegionDataSounds_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataSoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataSoundsGetter item,
            string path,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataSoundsGetter item,
            Stream stream,
            out RegionDataSounds_ErrorMask errorMask,
            RegionDataSounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class RegionDataSounds_Mask<T> : RegionData_Mask<T>, IMask<T>, IEquatable<RegionDataSounds_Mask<T>>
    {
        #region Ctors
        public RegionDataSounds_Mask()
        {
        }

        public RegionDataSounds_Mask(T initialValue)
        {
            this.MusicType = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionSound_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T MusicType;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionSound_Mask<T>>>> Sounds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RegionDataSounds_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RegionDataSounds_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MusicType?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.MusicType)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new RegionDataSounds_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RegionDataSounds_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RegionDataSounds_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.MusicType = eval(this.MusicType);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionSound_Mask<R>>>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (Sounds.Specific != null)
                {
                    List<MaskItemIndexed<R, RegionSound_Mask<R>>> l = new List<MaskItemIndexed<R, RegionSound_Mask<R>>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RegionSound_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RegionSound_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Sounds.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RegionDataSounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RegionDataSounds_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RegionDataSounds_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MusicType ?? true)
                {
                    fg.AppendLine($"MusicType => {MusicType}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds.Overall != null)
                        {
                            fg.AppendLine(Sounds.Overall.ToString());
                        }
                        if (Sounds.Specific != null)
                        {
                            foreach (var subItem in Sounds.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RegionDataSounds_ErrorMask : RegionData_ErrorMask, IErrorMask<RegionDataSounds_ErrorMask>
    {
        #region Members
        public Exception MusicType;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    return MusicType;
                case RegionDataSounds_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = ex;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RegionDataSounds_FieldIndex enu = (RegionDataSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionDataSounds_FieldIndex.MusicType:
                    this.MusicType = (Exception)obj;
                    break;
                case RegionDataSounds_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (MusicType != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RegionDataSounds_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"MusicType => {MusicType}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds.Overall != null)
                {
                    fg.AppendLine(Sounds.Overall.ToString());
                }
                if (Sounds.Specific != null)
                {
                    foreach (var subItem in Sounds.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask rhs)
        {
            var ret = new RegionDataSounds_ErrorMask();
            ret.MusicType = this.MusicType.Combine(rhs.MusicType);
            ret.Sounds = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionSound_ErrorMask>>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), new List<MaskItem<Exception, RegionSound_ErrorMask>>(this.Sounds.Specific.And(rhs.Sounds.Specific)));
            return ret;
        }
        public static RegionDataSounds_ErrorMask Combine(RegionDataSounds_ErrorMask lhs, RegionDataSounds_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RegionDataSounds_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RegionDataSounds_ErrorMask();
        }
        #endregion

    }
    public class RegionDataSounds_TranslationMask : RegionData_TranslationMask
    {
        #region Members
        public bool MusicType;
        public MaskItem<bool, RegionSound_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public RegionDataSounds_TranslationMask()
            : base()
        {
        }

        public RegionDataSounds_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.MusicType = defaultOn;
            this.Sounds = new MaskItem<bool, RegionSound_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((MusicType, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataSoundsBinaryWriteTranslation :
        RegionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionDataSoundsBinaryWriteTranslation Instance = new RegionDataSoundsBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRegionDataSoundsGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            RegionDataBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.MusicType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.Write(
                    writer,
                    item.MusicType,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(RegionDataSounds_Registration.RDMD_HEADER),
                    nullable: false);
            }
            if (item.Sounds.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionSoundGetter>.Instance.Write(
                    writer: writer,
                    items: item.Sounds,
                    fieldIndex: (int)RegionDataSounds_FieldIndex.Sounds,
                    recordType: RegionDataSounds_Registration.RDSD_HEADER,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRegionSoundGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        {
                            var loquiItem = subItem;
                            ((RegionSoundBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                errorMask: listErrorMask,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IRegionDataSoundsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            RegionDataBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataSoundsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionDataSoundsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionDataSoundsBinaryCreateTranslation : RegionDataBinaryCreateTranslation
    {
        public new readonly static RegionDataSoundsBinaryCreateTranslation Instance = new RegionDataSoundsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionDataSoundsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataSoundsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out RegionDataSounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionDataSoundsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = RegionDataSounds_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataSoundsBinaryWrapper :
        RegionDataBinaryWrapper,
        IRegionDataSoundsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionDataSounds_Registration.Instance;
        public new static RegionDataSounds_Registration Registration => RegionDataSounds_Registration.Instance;
        protected override object CommonInstance() => RegionDataSoundsCommon.Instance;
        protected override object CommonSetterTranslationInstance() => RegionDataSoundsSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataSoundsGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => RegionDataSoundsCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => RegionDataSoundsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionDataSoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => RegionDataSoundsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionDataSoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region MusicType
        private int? _MusicTypeLocation;
        public bool MusicType_IsSet => _MusicTypeLocation.HasValue;
        public MusicType MusicType => (MusicType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MusicTypeLocation.Value, _package.Meta));
        #endregion
        public IReadOnlySetList<IRegionSoundGetter> Sounds { get; private set; } = EmptySetList<RegionSoundBinaryWrapper>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionDataSoundsBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionDataSoundsBinaryWrapper RegionDataSoundsFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RegionDataSoundsBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444D4452: // RDMD
                {
                    _MusicTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.MusicType);
                }
                case 0x44534452: // RDSD
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Sounds = BinaryWrapperSetList<RegionSoundBinaryWrapper>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 12,
                        getter: (s, p) => RegionSoundBinaryWrapper.RegionSoundFactory(new BinaryMemoryReadStream(s), p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)RegionDataSounds_FieldIndex.Sounds);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

