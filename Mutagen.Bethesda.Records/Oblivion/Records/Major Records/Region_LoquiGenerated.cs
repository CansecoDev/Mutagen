/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using DynamicData;
using CSharpExt.Rx;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Region :
        OblivionMajorRecord,
        IRegionInternal,
        ILoquiObjectSetter<Region>,
        ILinkSubContainer,
        IEquatable<Region>,
        IEqualsMask
    {
        #region Ctor
        protected Region()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        public bool Icon_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Icon];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.Icon] = value;
        }
        bool IRegionGetter.Icon_IsSet => Icon_IsSet;
        private String _Icon;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Icon
        {
            get => this._Icon;
            set => Icon_Set(value);
        }
        String IRegionGetter.Icon => this.Icon;
        public void Icon_Set(
            String value,
            bool markSet = true)
        {
            _Icon = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.Icon] = markSet;
        }
        public void Icon_Unset()
        {
            this.Icon_Set(default(String), false);
        }
        #endregion
        #region MapColor
        public bool MapColor_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.MapColor];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.MapColor] = value;
        }
        bool IRegionGetter.MapColor_IsSet => MapColor_IsSet;
        private Color _MapColor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Color MapColor
        {
            get => this._MapColor;
            set => MapColor_Set(value);
        }
        Color IRegionGetter.MapColor => this.MapColor;
        public void MapColor_Set(
            Color value,
            bool markSet = true)
        {
            _MapColor = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.MapColor] = markSet;
        }
        public void MapColor_Unset()
        {
            this.MapColor_Set(default(Color), false);
        }
        #endregion
        #region Worldspace
        public IFormIDSetLink<Worldspace> Worldspace_Property { get; } = new FormIDSetLink<Worldspace>();
        public Worldspace Worldspace { get => Worldspace_Property.Item; set => Worldspace_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Worldspace> IRegion.Worldspace_Property => this.Worldspace_Property;
        IWorldspaceGetter IRegionGetter.Worldspace => this.Worldspace_Property.Item;
        IFormIDSetLinkGetter<IWorldspaceGetter> IRegionGetter.Worldspace_Property => this.Worldspace_Property;
        #endregion
        #region Areas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<RegionArea> _Areas = new SetList<RegionArea>();
        public ISetList<RegionArea> Areas => _Areas;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<RegionArea> IRegion.Areas => _Areas;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRegionAreaGetter> IRegionGetter.Areas => _Areas;
        #endregion

        #endregion
        #region Objects
        public bool Objects_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Objects];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.Objects] = value;
        }
        bool IRegionGetter.Objects_IsSet => Objects_IsSet;
        private RegionDataObjects _Objects;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataObjects Objects
        {
            get => _Objects;
            set => Objects_Set(value);
        }
        public void Objects_Set(
            RegionDataObjects value,
            bool hasBeenSet = true)
        {
            _Objects = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.Objects] = hasBeenSet;
        }
        public void Objects_Unset()
        {
            this.Objects_Set(default(RegionDataObjects), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataObjectsGetter IRegionGetter.Objects => this.Objects;
        #endregion
        #region Weather
        public bool Weather_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Weather];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.Weather] = value;
        }
        bool IRegionGetter.Weather_IsSet => Weather_IsSet;
        private RegionDataWeather _Weather;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataWeather Weather
        {
            get => _Weather;
            set => Weather_Set(value);
        }
        public void Weather_Set(
            RegionDataWeather value,
            bool hasBeenSet = true)
        {
            _Weather = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.Weather] = hasBeenSet;
        }
        public void Weather_Unset()
        {
            this.Weather_Set(default(RegionDataWeather), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataWeatherGetter IRegionGetter.Weather => this.Weather;
        #endregion
        #region MapName
        public bool MapName_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.MapName];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.MapName] = value;
        }
        bool IRegionGetter.MapName_IsSet => MapName_IsSet;
        private RegionDataMapName _MapName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataMapName MapName
        {
            get => _MapName;
            set => MapName_Set(value);
        }
        public void MapName_Set(
            RegionDataMapName value,
            bool hasBeenSet = true)
        {
            _MapName = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.MapName] = hasBeenSet;
        }
        public void MapName_Unset()
        {
            this.MapName_Set(default(RegionDataMapName), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataMapNameGetter IRegionGetter.MapName => this.MapName;
        #endregion
        #region Grasses
        public bool Grasses_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Grasses];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.Grasses] = value;
        }
        bool IRegionGetter.Grasses_IsSet => Grasses_IsSet;
        private RegionDataGrasses _Grasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataGrasses Grasses
        {
            get => _Grasses;
            set => Grasses_Set(value);
        }
        public void Grasses_Set(
            RegionDataGrasses value,
            bool hasBeenSet = true)
        {
            _Grasses = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.Grasses] = hasBeenSet;
        }
        public void Grasses_Unset()
        {
            this.Grasses_Set(default(RegionDataGrasses), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataGrassesGetter IRegionGetter.Grasses => this.Grasses;
        #endregion
        #region Sounds
        public bool Sounds_IsSet
        {
            get => _hasBeenSetTracker[(int)Region_FieldIndex.Sounds];
            set => _hasBeenSetTracker[(int)Region_FieldIndex.Sounds] = value;
        }
        bool IRegionGetter.Sounds_IsSet => Sounds_IsSet;
        private RegionDataSounds _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RegionDataSounds Sounds
        {
            get => _Sounds;
            set => Sounds_Set(value);
        }
        public void Sounds_Set(
            RegionDataSounds value,
            bool hasBeenSet = true)
        {
            _Sounds = value;
            _hasBeenSetTracker[(int)Region_FieldIndex.Sounds] = hasBeenSet;
        }
        public void Sounds_Unset()
        {
            this.Sounds_Set(default(RegionDataSounds), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataSoundsGetter IRegionGetter.Sounds => this.Sounds;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RegionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRegionGetter rhs)) return false;
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Region obj)
        {
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionCommon)((IRegionGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => RegionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Region CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Region CreateFromXml(
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Region CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Region() : null;
                    break;
                default:
                    break;
            }
            var ret = new Region();
            ((RegionSetterCommon)((IRegionGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Region CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            string path,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Region CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            Stream stream,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Region_FieldIndex)index)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return _hasBeenSetTracker[index];
                case Region_FieldIndex.Worldspace:
                    return Worldspace_Property.HasBeenSet;
                case Region_FieldIndex.Areas:
                    return Areas.HasBeenSet;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Region_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Worldspace_Property;
            if (Objects != null)
            {
                foreach (var item in Objects.Links)
                {
                    yield return item;
                }
            }
            if (Weather != null)
            {
                foreach (var item in Weather.Links)
                {
                    yield return item;
                }
            }
            if (Grasses != null)
            {
                foreach (var item in Grasses.Links)
                {
                    yield return item;
                }
            }
            if (Sounds != null)
            {
                foreach (var item in Sounds.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            Worldspace_Property.Link(package);
            if (Objects != null)
            {
                Objects?.Link(package: package);
            }
            if (Weather != null)
            {
                Weather?.Link(package: package);
            }
            if (Grasses != null)
            {
                Grasses?.Link(package: package);
            }
            if (Sounds != null)
            {
                Sounds?.Link(package: package);
            }
        }

        public Region(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Region(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Region CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Region CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Region CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Region();
            ((RegionSetterCommon)((IRegionGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionSetterCommon)((IRegionGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Region GetNew()
        {
            return new Region();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegion :
        IRegionGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IRegionInternal>
    {
        new String Icon { get; set; }
        new bool Icon_IsSet { get; set; }
        void Icon_Set(String value, bool hasBeenSet = true);
        void Icon_Unset();

        new Color MapColor { get; set; }
        new bool MapColor_IsSet { get; set; }
        void MapColor_Set(Color value, bool hasBeenSet = true);
        void MapColor_Unset();

        new Worldspace Worldspace { get; set; }
        new IFormIDSetLink<Worldspace> Worldspace_Property { get; }
        new ISetList<RegionArea> Areas { get; }
        new RegionDataObjects Objects { get; set; }
        new bool Objects_IsSet { get; set; }
        void Objects_Set(RegionDataObjects value, bool hasBeenSet = true);
        void Objects_Unset();

        new RegionDataWeather Weather { get; set; }
        new bool Weather_IsSet { get; set; }
        void Weather_Set(RegionDataWeather value, bool hasBeenSet = true);
        void Weather_Unset();

        new RegionDataMapName MapName { get; set; }
        new bool MapName_IsSet { get; set; }
        void MapName_Set(RegionDataMapName value, bool hasBeenSet = true);
        void MapName_Unset();

        new RegionDataGrasses Grasses { get; set; }
        new bool Grasses_IsSet { get; set; }
        void Grasses_Set(RegionDataGrasses value, bool hasBeenSet = true);
        void Grasses_Unset();

        new RegionDataSounds Sounds { get; set; }
        new bool Sounds_IsSet { get; set; }
        void Sounds_Set(RegionDataSounds value, bool hasBeenSet = true);
        void Sounds_Unset();

    }

    public partial interface IRegionInternal :
        IOblivionMajorRecordInternal,
        IRegion,
        IRegionGetter
    {
    }

    public partial interface IRegionGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IRegionGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Icon
        String Icon { get; }
        bool Icon_IsSet { get; }

        #endregion
        #region MapColor
        Color MapColor { get; }
        bool MapColor_IsSet { get; }

        #endregion
        #region Worldspace
        IWorldspaceGetter Worldspace { get; }
        IFormIDSetLinkGetter<IWorldspaceGetter> Worldspace_Property { get; }

        #endregion
        #region Areas
        IReadOnlySetList<IRegionAreaGetter> Areas { get; }
        #endregion
        #region Objects
        IRegionDataObjectsGetter Objects { get; }
        bool Objects_IsSet { get; }

        #endregion
        #region Weather
        IRegionDataWeatherGetter Weather { get; }
        bool Weather_IsSet { get; }

        #endregion
        #region MapName
        IRegionDataMapNameGetter MapName { get; }
        bool MapName_IsSet { get; }

        #endregion
        #region Grasses
        IRegionDataGrassesGetter Grasses { get; }
        bool Grasses_IsSet { get; }

        #endregion
        #region Sounds
        IRegionDataSoundsGetter Sounds { get; }
        bool Sounds_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RegionMixIn
    {
        public static void Clear(this IRegionInternal item)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Region_Mask<bool> GetEqualsMask(
            this IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionGetter item,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionGetter item,
            FileGeneration fg,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            ((RegionCommon)((IRegionGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionGetter item,
            Region_Mask<bool?> checkMask)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Region_Mask<bool> GetHasBeenSetMask(this IRegionGetter item)
        {
            var ret = new Region_Mask<bool>();
            ((RegionCommon)((IRegionGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionGetter item,
            IRegionGetter rhs)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            Region_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            out Region_ErrorMask errorMask,
            Region_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask copyMask = null)
        {
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            Region_TranslationMask copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Region_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Region_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        MapColor = 6,
        Worldspace = 7,
        Areas = 8,
        Objects = 9,
        Weather = 10,
        MapName = 11,
        Grasses = 12,
        Sounds = 13,
    }
    #endregion

    #region Registration
    public class Region_Registration : ILoquiRegistration
    {
        public static readonly Region_Registration Instance = new Region_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 107,
            version: 0);

        public const string GUID = "638d02e0-687a-49ad-a934-6f2ed1e05c3a";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Region_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Region_ErrorMask);

        public static readonly Type ClassType = typeof(Region);

        public static readonly Type GetterType = typeof(IRegionGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegion);

        public static readonly Type InternalSetterType = typeof(IRegionInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Region";

        public const string Name = "Region";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)Region_FieldIndex.Icon;
                case "MAPCOLOR":
                    return (ushort)Region_FieldIndex.MapColor;
                case "WORLDSPACE":
                    return (ushort)Region_FieldIndex.Worldspace;
                case "AREAS":
                    return (ushort)Region_FieldIndex.Areas;
                case "OBJECTS":
                    return (ushort)Region_FieldIndex.Objects;
                case "WEATHER":
                    return (ushort)Region_FieldIndex.Weather;
                case "MAPNAME":
                    return (ushort)Region_FieldIndex.MapName;
                case "GRASSES":
                    return (ushort)Region_FieldIndex.Grasses;
                case "SOUNDS":
                    return (ushort)Region_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return "Icon";
                case Region_FieldIndex.MapColor:
                    return "MapColor";
                case Region_FieldIndex.Worldspace:
                    return "Worldspace";
                case Region_FieldIndex.Areas:
                    return "Areas";
                case Region_FieldIndex.Objects:
                    return "Objects";
                case Region_FieldIndex.Weather:
                    return "Weather";
                case Region_FieldIndex.MapName:
                    return "MapName";
                case Region_FieldIndex.Grasses:
                    return "Grasses";
                case Region_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return typeof(String);
                case Region_FieldIndex.MapColor:
                    return typeof(Color);
                case Region_FieldIndex.Worldspace:
                    return typeof(IFormIDSetLink<Worldspace>);
                case Region_FieldIndex.Areas:
                    return typeof(ISetList<RegionArea>);
                case Region_FieldIndex.Objects:
                    return typeof(RegionDataObjects);
                case Region_FieldIndex.Weather:
                    return typeof(RegionDataWeather);
                case Region_FieldIndex.MapName:
                    return typeof(RegionDataMapName);
                case Region_FieldIndex.Grasses:
                    return typeof(RegionDataGrasses);
                case Region_FieldIndex.Sounds:
                    return typeof(RegionDataSounds);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionXmlWriteTranslation);
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType RCLR_HEADER = new RecordType("RCLR");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType RPLI_HEADER = new RecordType("RPLI");
        public static readonly RecordType RPLD_HEADER = new RecordType("RPLD");
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REGN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(RegionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RegionSetterCommon Instance = new RegionSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRegionInternal item)
        {
            ClearPartial();
            item.Icon_Unset();
            item.MapColor_Unset();
            item.Worldspace_Property.Unset();
            item.Areas.Unset();
            item.Objects_Unset();
            item.Weather_Unset();
            item.MapName_Unset();
            item.Grasses_Unset();
            item.Sounds_Unset();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        public override object GetNew() => Region.GetNew();
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public new void CopyInFromXml(
            IRegionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Region_Registration.REGN_HEADER;
        protected static void FillBinaryStructs(
            IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String IconParse))
                    {
                        item.Icon = IconParse;
                    }
                    else
                    {
                        item.Icon = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Icon);
                }
                case 0x524C4352: // RCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true,
                        item: out Color MapColorParse))
                    {
                        item.MapColor = MapColorParse;
                    }
                    else
                    {
                        item.MapColor = default(Color);
                    }
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.MapColor);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Worldspace_Property);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Worldspace);
                }
                case 0x494C5052: // RPLI
                case 0x444C5052: // RPLD
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: RegionArea_Registration.TriggeringRecordTypes,
                        item: item.Areas,
                        fieldIndex: (int)Region_FieldIndex.Areas,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out RegionArea listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<RegionArea>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Areas);
                }
                case 0x54414452: // RDAT
                {
                    RegionBinaryCreateTranslation.FillBinaryRegionAreaLogicCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }
        
        public new void CopyInFromBinary(
            IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.MajorRecordParse<IRegionInternal>(
                record: item,
                frame: frame,
                errorMask: errorMask,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionCommon : OblivionMajorRecordCommon
    {
        public new static readonly RegionCommon Instance = new RegionCommon();

        public Region_Mask<bool> GetEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Region_Mask<bool>();
            ((RegionCommon)((IRegionGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            Region_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = item.Icon_IsSet == rhs.Icon_IsSet && string.Equals(item.Icon, rhs.Icon);
            ret.MapColor = item.MapColor_IsSet == rhs.MapColor_IsSet && item.MapColor.ColorOnlyEquals(rhs.MapColor);
            ret.Worldspace = item.Worldspace_Property.FormKey == rhs.Worldspace_Property.FormKey;
            ret.Areas = item.Areas.CollectionEqualsHelper(
                rhs.Areas,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objects = EqualsMaskHelper.EqualsHelper(
                item.Objects_IsSet,
                rhs.Objects_IsSet,
                item.Objects,
                rhs.Objects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Weather = EqualsMaskHelper.EqualsHelper(
                item.Weather_IsSet,
                rhs.Weather_IsSet,
                item.Weather,
                rhs.Weather,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MapName = EqualsMaskHelper.EqualsHelper(
                item.MapName_IsSet,
                rhs.MapName_IsSet,
                item.MapName,
                rhs.MapName,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Grasses = EqualsMaskHelper.EqualsHelper(
                item.Grasses_IsSet,
                rhs.Grasses_IsSet,
                item.Grasses,
                rhs.Grasses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Sounds = EqualsMaskHelper.EqualsHelper(
                item.Sounds_IsSet,
                rhs.Sounds_IsSet,
                item.Sounds,
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionGetter item,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionGetter item,
            FileGeneration fg,
            string name = null,
            Region_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Region =>");
            }
            else
            {
                fg.AppendLine($"{name} (Region) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionGetter item,
            FileGeneration fg,
            Region_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.MapColor ?? true)
            {
                fg.AppendLine($"MapColor => {item.MapColor}");
            }
            if (printMask?.Worldspace ?? true)
            {
                fg.AppendLine($"Worldspace => {item.Worldspace_Property}");
            }
            if (printMask?.Areas?.Overall ?? true)
            {
                fg.AppendLine("Areas =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Areas)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Objects?.Overall ?? true)
            {
                item.Objects?.ToString(fg, "Objects");
            }
            if (printMask?.Weather?.Overall ?? true)
            {
                item.Weather?.ToString(fg, "Weather");
            }
            if (printMask?.MapName?.Overall ?? true)
            {
                item.MapName?.ToString(fg, "MapName");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                item.Sounds?.ToString(fg, "Sounds");
            }
        }
        
        public bool HasBeenSet(
            IRegionGetter item,
            Region_Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_IsSet) return false;
            if (checkMask.MapColor.HasValue && checkMask.MapColor.Value != item.MapColor_IsSet) return false;
            if (checkMask.Worldspace.HasValue && checkMask.Worldspace.Value != item.Worldspace_Property.HasBeenSet) return false;
            if (checkMask.Areas.Overall.HasValue && checkMask.Areas.Overall.Value != item.Areas.HasBeenSet) return false;
            if (checkMask.Objects.Overall.HasValue && checkMask.Objects.Overall.Value != item.Objects_IsSet) return false;
            if (checkMask.Objects.Specific != null && (item.Objects == null || !item.Objects.HasBeenSet(checkMask.Objects.Specific))) return false;
            if (checkMask.Weather.Overall.HasValue && checkMask.Weather.Overall.Value != item.Weather_IsSet) return false;
            if (checkMask.Weather.Specific != null && (item.Weather == null || !item.Weather.HasBeenSet(checkMask.Weather.Specific))) return false;
            if (checkMask.MapName.Overall.HasValue && checkMask.MapName.Overall.Value != item.MapName_IsSet) return false;
            if (checkMask.MapName.Specific != null && (item.MapName == null || !item.MapName.HasBeenSet(checkMask.MapName.Specific))) return false;
            if (checkMask.Grasses.Overall.HasValue && checkMask.Grasses.Overall.Value != item.Grasses_IsSet) return false;
            if (checkMask.Grasses.Specific != null && (item.Grasses == null || !item.Grasses.HasBeenSet(checkMask.Grasses.Specific))) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds_IsSet) return false;
            if (checkMask.Sounds.Specific != null && (item.Sounds == null || !item.Sounds.HasBeenSet(checkMask.Sounds.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionGetter item,
            Region_Mask<bool> mask)
        {
            mask.Icon = item.Icon_IsSet;
            mask.MapColor = item.MapColor_IsSet;
            mask.Worldspace = item.Worldspace_Property.HasBeenSet;
            mask.Areas = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionArea_Mask<bool>>>>(item.Areas.HasBeenSet, item.Areas.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionArea_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Objects = new MaskItem<bool, RegionDataObjects_Mask<bool>>(item.Objects_IsSet, item.Objects.GetHasBeenSetMask());
            mask.Weather = new MaskItem<bool, RegionDataWeather_Mask<bool>>(item.Weather_IsSet, item.Weather.GetHasBeenSetMask());
            mask.MapName = new MaskItem<bool, RegionDataMapName_Mask<bool>>(item.MapName_IsSet, item.MapName.GetHasBeenSetMask());
            mask.Grasses = new MaskItem<bool, RegionDataGrasses_Mask<bool>>(item.Grasses_IsSet, item.Grasses.GetHasBeenSetMask());
            mask.Sounds = new MaskItem<bool, RegionDataSounds_Mask<bool>>(item.Sounds_IsSet, item.Sounds.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Region_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Region_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionGetter lhs,
            IRegionGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Icon_IsSet != rhs.Icon_IsSet) return false;
            if (lhs.Icon_IsSet)
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if (lhs.MapColor_IsSet != rhs.MapColor_IsSet) return false;
            if (lhs.MapColor_IsSet)
            {
                if (!lhs.MapColor.ColorOnlyEquals(rhs.MapColor)) return false;
            }
            if (lhs.Worldspace_Property.HasBeenSet != rhs.Worldspace_Property.HasBeenSet) return false;
            if (lhs.Worldspace_Property.HasBeenSet)
            {
                if (!lhs.Worldspace_Property.Equals(rhs.Worldspace_Property)) return false;
            }
            if (lhs.Areas.HasBeenSet != rhs.Areas.HasBeenSet) return false;
            if (lhs.Areas.HasBeenSet)
            {
                if (!lhs.Areas.SequenceEqual(rhs.Areas)) return false;
            }
            if (lhs.Objects_IsSet != rhs.Objects_IsSet) return false;
            if (lhs.Objects_IsSet)
            {
                if (!object.Equals(lhs.Objects, rhs.Objects)) return false;
            }
            if (lhs.Weather_IsSet != rhs.Weather_IsSet) return false;
            if (lhs.Weather_IsSet)
            {
                if (!object.Equals(lhs.Weather, rhs.Weather)) return false;
            }
            if (lhs.MapName_IsSet != rhs.MapName_IsSet) return false;
            if (lhs.MapName_IsSet)
            {
                if (!object.Equals(lhs.MapName, rhs.MapName)) return false;
            }
            if (lhs.Grasses_IsSet != rhs.Grasses_IsSet) return false;
            if (lhs.Grasses_IsSet)
            {
                if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            }
            if (lhs.Sounds_IsSet != rhs.Sounds_IsSet) return false;
            if (lhs.Sounds_IsSet)
            {
                if (!object.Equals(lhs.Sounds, rhs.Sounds)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IRegionGetter)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IRegionGetter)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public virtual int GetHashCode(IRegionGetter item)
        {
            int ret = 0;
            if (item.Icon_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Icon).CombineHashCode(ret);
            }
            if (item.MapColor_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MapColor).CombineHashCode(ret);
            }
            if (item.Worldspace_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Worldspace).CombineHashCode(ret);
            }
            if (item.Areas.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Areas).CombineHashCode(ret);
            }
            if (item.Objects_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Objects).CombineHashCode(ret);
            }
            if (item.Weather_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Weather).CombineHashCode(ret);
            }
            if (item.MapName_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MapName).CombineHashCode(ret);
            }
            if (item.Grasses_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Grasses).CombineHashCode(ret);
            }
            if (item.Sounds_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Sounds).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Region obj, Region rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Region(getNextFormKey());
            ret.DeepCopyFieldsFrom((Region)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Region)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RegionSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RegionSetterTranslationCommon Instance = new RegionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRegion item,
            IRegionGetter rhs,
            ErrorMaskBuilder errorMask,
            Region_TranslationMask copyMask)
        {
            ((OblivionMajorRecordSetterTranslationCommon)((IOblivionMajorRecordGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if (copyMask?.Icon ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Icon);
                try
                {
                    if (rhs.Icon_IsSet)
                    {
                        item.Icon = rhs.Icon;
                    }
                    else
                    {
                        item.Icon_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapColor ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.MapColor);
                try
                {
                    if (rhs.MapColor_IsSet)
                    {
                        item.MapColor = rhs.MapColor;
                    }
                    else
                    {
                        item.MapColor_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Worldspace ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Worldspace);
                try
                {
                    item.Worldspace_Property.SetToFormKey(rhs: rhs.Worldspace_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Areas.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                try
                {
                    item.Areas.SetTo(
                        items: rhs.Areas,
                        converter: (r) =>
                        {
                            return r.DeepCopy(copyMask?.Areas?.Specific);
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Objects.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                try
                {
                    if(rhs.Objects_IsSet)
                    {
                        item.Objects = rhs.Objects.DeepCopy(copyMask?.Objects?.Specific);
                    }
                    else
                    {
                        item.Objects_Set(
                            value: default(RegionDataObjects),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Weather.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                try
                {
                    if(rhs.Weather_IsSet)
                    {
                        item.Weather = rhs.Weather.DeepCopy(copyMask?.Weather?.Specific);
                    }
                    else
                    {
                        item.Weather_Set(
                            value: default(RegionDataWeather),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MapName.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                try
                {
                    if(rhs.MapName_IsSet)
                    {
                        item.MapName = rhs.MapName.DeepCopy(copyMask?.MapName?.Specific);
                    }
                    else
                    {
                        item.MapName_Set(
                            value: default(RegionDataMapName),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Grasses.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                try
                {
                    if(rhs.Grasses_IsSet)
                    {
                        item.Grasses = rhs.Grasses.DeepCopy(copyMask?.Grasses?.Specific);
                    }
                    else
                    {
                        item.Grasses_Set(
                            value: default(RegionDataGrasses),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sounds.Overall ?? true)
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                try
                {
                    if(rhs.Sounds_IsSet)
                    {
                        item.Sounds = rhs.Sounds.DeepCopy(copyMask?.Sounds?.Specific);
                    }
                    else
                    {
                        item.Sounds_Set(
                            value: default(RegionDataSounds),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public new Region DeepCopy(
            IRegionGetter item,
            Region_TranslationMask copyMask = null)
        {
            Region ret = (Region)((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Region
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        protected override object CommonInstance()
        {
            return RegionCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return RegionSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return RegionSetterTranslationCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionXmlWriteTranslation Instance = new RegionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Icon_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Region_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.MapColor_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MapColor),
                    item: item.MapColor,
                    fieldIndex: (int)Region_FieldIndex.MapColor,
                    errorMask: errorMask);
            }
            if (item.Worldspace_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Worldspace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Worldspace),
                    item: item.Worldspace_Property?.FormKey,
                    fieldIndex: (int)Region_FieldIndex.Worldspace,
                    errorMask: errorMask);
            }
            if (item.Areas.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Areas) ?? true))
            {
                ListXmlTranslation<IRegionAreaGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Areas),
                    item: item.Areas,
                    fieldIndex: (int)Region_FieldIndex.Areas,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Areas),
                    transl: (XElement subNode, IRegionAreaGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RegionAreaXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.Objects_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Objects) ?? true))
            {
                var loquiItem = item.Objects;
                ((RegionDataObjectsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Objects),
                    fieldIndex: (int)Region_FieldIndex.Objects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
            }
            if (item.Weather_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Weather) ?? true))
            {
                var loquiItem = item.Weather;
                ((RegionDataWeatherXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Weather),
                    fieldIndex: (int)Region_FieldIndex.Weather,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
            }
            if (item.MapName_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapName) ?? true))
            {
                var loquiItem = item.MapName;
                ((RegionDataMapNameXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MapName),
                    fieldIndex: (int)Region_FieldIndex.MapName,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName));
            }
            if (item.Grasses_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Grasses) ?? true))
            {
                var loquiItem = item.Grasses;
                ((RegionDataGrassesXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)Region_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
            }
            if (item.Sounds_IsSet
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Sounds) ?? true))
            {
                var loquiItem = item.Sounds;
                ((RegionDataSoundsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Sounds),
                    fieldIndex: (int)Region_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
            }
        }

        public void Write(
            XElement node,
            IRegionGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Region");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Region");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static RegionXmlCreateTranslation Instance = new RegionXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Icon);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String IconParse,
                            errorMask: errorMask))
                        {
                            item.Icon = IconParse;
                        }
                        else
                        {
                            item.Icon = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapColor":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.MapColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color MapColorParse,
                            errorMask: errorMask))
                        {
                            item.MapColor = MapColorParse;
                        }
                        else
                        {
                            item.MapColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspace":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Worldspace_Property,
                        fieldIndex: (int)Region_FieldIndex.Worldspace,
                        errorMask: errorMask);
                    break;
                case "Areas":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                        if (ListXmlTranslation<RegionArea>.Instance.Parse(
                            node: node,
                            enumer: out var AreasItem,
                            transl: LoquiXmlTranslation<RegionArea>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Areas.SetTo(AreasItem);
                        }
                        else
                        {
                            item.Areas.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Objects":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                        if (LoquiXmlTranslation<RegionDataObjects>.Instance.Parse(
                            node: node,
                            item: out RegionDataObjects ObjectsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects)))
                        {
                            item.Objects = ObjectsParse;
                        }
                        else
                        {
                            item.Objects = default(RegionDataObjects);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weather":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                        if (LoquiXmlTranslation<RegionDataWeather>.Instance.Parse(
                            node: node,
                            item: out RegionDataWeather WeatherParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather)))
                        {
                            item.Weather = WeatherParse;
                        }
                        else
                        {
                            item.Weather = default(RegionDataWeather);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapName":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                        if (LoquiXmlTranslation<RegionDataMapName>.Instance.Parse(
                            node: node,
                            item: out RegionDataMapName MapNameParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName)))
                        {
                            item.MapName = MapNameParse;
                        }
                        else
                        {
                            item.MapName = default(RegionDataMapName);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                        if (LoquiXmlTranslation<RegionDataGrasses>.Instance.Parse(
                            node: node,
                            item: out RegionDataGrasses GrassesParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses)))
                        {
                            item.Grasses = GrassesParse;
                        }
                        else
                        {
                            item.Grasses = default(RegionDataGrasses);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                        if (LoquiXmlTranslation<RegionDataSounds>.Instance.Parse(
                            node: node,
                            item: out RegionDataSounds SoundsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds)))
                        {
                            item.Sounds = SoundsParse;
                        }
                        else
                        {
                            item.Sounds = default(RegionDataSounds);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionGetter item,
            XElement node,
            out Region_ErrorMask errorMask,
            bool doMasks = true,
            Region_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionGetter item,
            string path,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionGetter item,
            Stream stream,
            out Region_ErrorMask errorMask,
            Region_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Region_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Region_Mask<T>>
    {
        #region Ctors
        public Region_Mask()
        {
        }

        public Region_Mask(T initialValue)
        {
            this.Icon = initialValue;
            this.MapColor = initialValue;
            this.Worldspace = initialValue;
            this.Areas = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea_Mask<T>>>>(initialValue, null);
            this.Objects = new MaskItem<T, RegionDataObjects_Mask<T>>(initialValue, new RegionDataObjects_Mask<T>(initialValue));
            this.Weather = new MaskItem<T, RegionDataWeather_Mask<T>>(initialValue, new RegionDataWeather_Mask<T>(initialValue));
            this.MapName = new MaskItem<T, RegionDataMapName_Mask<T>>(initialValue, new RegionDataMapName_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, RegionDataGrasses_Mask<T>>(initialValue, new RegionDataGrasses_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, RegionDataSounds_Mask<T>>(initialValue, new RegionDataSounds_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Icon;
        public T MapColor;
        public T Worldspace;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea_Mask<T>>>> Areas;
        public MaskItem<T, RegionDataObjects_Mask<T>> Objects { get; set; }
        public MaskItem<T, RegionDataWeather_Mask<T>> Weather { get; set; }
        public MaskItem<T, RegionDataMapName_Mask<T>> MapName { get; set; }
        public MaskItem<T, RegionDataGrasses_Mask<T>> Grasses { get; set; }
        public MaskItem<T, RegionDataSounds_Mask<T>> Sounds { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Region_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Region_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.MapColor, rhs.MapColor)) return false;
            if (!object.Equals(this.Worldspace, rhs.Worldspace)) return false;
            if (!object.Equals(this.Areas, rhs.Areas)) return false;
            if (!object.Equals(this.Objects, rhs.Objects)) return false;
            if (!object.Equals(this.Weather, rhs.Weather)) return false;
            if (!object.Equals(this.MapName, rhs.MapName)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.MapColor?.GetHashCode());
            ret = ret.CombineHashCode(this.Worldspace?.GetHashCode());
            ret = ret.CombineHashCode(this.Areas?.GetHashCode());
            ret = ret.CombineHashCode(this.Objects?.GetHashCode());
            ret = ret.CombineHashCode(this.Weather?.GetHashCode());
            ret = ret.CombineHashCode(this.MapName?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Icon)) return false;
            if (!eval(this.MapColor)) return false;
            if (!eval(this.Worldspace)) return false;
            if (this.Areas != null)
            {
                if (!eval(this.Areas.Overall)) return false;
                if (this.Areas.Specific != null)
                {
                    foreach (var item in this.Areas.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (Objects != null)
            {
                if (!eval(this.Objects.Overall)) return false;
                if (this.Objects.Specific != null && !this.Objects.Specific.AllEqual(eval)) return false;
            }
            if (Weather != null)
            {
                if (!eval(this.Weather.Overall)) return false;
                if (this.Weather.Specific != null && !this.Weather.Specific.AllEqual(eval)) return false;
            }
            if (MapName != null)
            {
                if (!eval(this.MapName.Overall)) return false;
                if (this.MapName.Specific != null && !this.MapName.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Region_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Region_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Region_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Icon = eval(this.Icon);
            obj.MapColor = eval(this.MapColor);
            obj.Worldspace = eval(this.Worldspace);
            if (Areas != null)
            {
                obj.Areas = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionArea_Mask<R>>>>();
                obj.Areas.Overall = eval(this.Areas.Overall);
                if (Areas.Specific != null)
                {
                    List<MaskItemIndexed<R, RegionArea_Mask<R>>> l = new List<MaskItemIndexed<R, RegionArea_Mask<R>>>();
                    obj.Areas.Specific = l;
                    foreach (var item in Areas.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, RegionArea_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, RegionArea_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Objects != null)
            {
                obj.Objects = new MaskItem<R, RegionDataObjects_Mask<R>>();
                obj.Objects.Overall = eval(this.Objects.Overall);
                if (this.Objects.Specific != null)
                {
                    obj.Objects.Specific = this.Objects.Specific.Translate(eval);
                }
            }
            if (this.Weather != null)
            {
                obj.Weather = new MaskItem<R, RegionDataWeather_Mask<R>>();
                obj.Weather.Overall = eval(this.Weather.Overall);
                if (this.Weather.Specific != null)
                {
                    obj.Weather.Specific = this.Weather.Specific.Translate(eval);
                }
            }
            if (this.MapName != null)
            {
                obj.MapName = new MaskItem<R, RegionDataMapName_Mask<R>>();
                obj.MapName.Overall = eval(this.MapName.Overall);
                if (this.MapName.Specific != null)
                {
                    obj.MapName.Specific = this.MapName.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, RegionDataGrasses_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, RegionDataSounds_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Areas.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Region_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Region_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Region_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.MapColor ?? true)
                {
                    fg.AppendLine($"MapColor => {MapColor}");
                }
                if (printMask?.Worldspace ?? true)
                {
                    fg.AppendLine($"Worldspace => {Worldspace}");
                }
                if (printMask?.Areas?.Overall ?? true)
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Areas.Overall != null)
                        {
                            fg.AppendLine(Areas.Overall.ToString());
                        }
                        if (Areas.Specific != null)
                        {
                            foreach (var subItem in Areas.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Objects?.Overall ?? true)
                {
                    Objects?.ToString(fg);
                }
                if (printMask?.Weather?.Overall ?? true)
                {
                    Weather?.ToString(fg);
                }
                if (printMask?.MapName?.Overall ?? true)
                {
                    MapName?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Region_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Region_ErrorMask>
    {
        #region Members
        public Exception Icon;
        public Exception MapColor;
        public Exception Worldspace;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>> Areas;
        public MaskItem<Exception, RegionDataObjects_ErrorMask> Objects;
        public MaskItem<Exception, RegionDataWeather_ErrorMask> Weather;
        public MaskItem<Exception, RegionDataMapName_ErrorMask> MapName;
        public MaskItem<Exception, RegionDataGrasses_ErrorMask> Grasses;
        public MaskItem<Exception, RegionDataSounds_ErrorMask> Sounds;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return Icon;
                case Region_FieldIndex.MapColor:
                    return MapColor;
                case Region_FieldIndex.Worldspace:
                    return Worldspace;
                case Region_FieldIndex.Areas:
                    return Areas;
                case Region_FieldIndex.Objects:
                    return Objects;
                case Region_FieldIndex.Weather:
                    return Weather;
                case Region_FieldIndex.MapName:
                    return MapName;
                case Region_FieldIndex.Grasses:
                    return Grasses;
                case Region_FieldIndex.Sounds:
                    return Sounds;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = ex;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = ex;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(ex, null);
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(ex, null);
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Region_FieldIndex.MapColor:
                    this.MapColor = (Exception)obj;
                    break;
                case Region_FieldIndex.Worldspace:
                    this.Worldspace = (Exception)obj;
                    break;
                case Region_FieldIndex.Areas:
                    this.Areas = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>)obj;
                    break;
                case Region_FieldIndex.Objects:
                    this.Objects = (MaskItem<Exception, RegionDataObjects_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Weather:
                    this.Weather = (MaskItem<Exception, RegionDataWeather_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.MapName:
                    this.MapName = (MaskItem<Exception, RegionDataMapName_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, RegionDataGrasses_ErrorMask>)obj;
                    break;
                case Region_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, RegionDataSounds_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Icon != null) return true;
            if (MapColor != null) return true;
            if (Worldspace != null) return true;
            if (Areas != null) return true;
            if (Objects != null) return true;
            if (Weather != null) return true;
            if (MapName != null) return true;
            if (Grasses != null) return true;
            if (Sounds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Region_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"MapColor => {MapColor}");
            fg.AppendLine($"Worldspace => {Worldspace}");
            fg.AppendLine("Areas =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Areas.Overall != null)
                {
                    fg.AppendLine(Areas.Overall.ToString());
                }
                if (Areas.Specific != null)
                {
                    foreach (var subItem in Areas.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Objects?.ToString(fg);
            Weather?.ToString(fg);
            MapName?.ToString(fg);
            Grasses?.ToString(fg);
            Sounds?.ToString(fg);
        }
        #endregion

        #region Combine
        public Region_ErrorMask Combine(Region_ErrorMask rhs)
        {
            var ret = new Region_ErrorMask();
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.MapColor = this.MapColor.Combine(rhs.MapColor);
            ret.Worldspace = this.Worldspace.Combine(rhs.Worldspace);
            ret.Areas = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RegionArea_ErrorMask>>>(this.Areas.Overall.Combine(rhs.Areas.Overall), new List<MaskItem<Exception, RegionArea_ErrorMask>>(this.Areas.Specific.And(rhs.Areas.Specific)));
            ret.Objects = new MaskItem<Exception, RegionDataObjects_ErrorMask>(this.Objects.Overall.Combine(rhs.Objects.Overall), ((IErrorMask<RegionDataObjects_ErrorMask>)this.Objects.Specific).Combine(rhs.Objects.Specific));
            ret.Weather = new MaskItem<Exception, RegionDataWeather_ErrorMask>(this.Weather.Overall.Combine(rhs.Weather.Overall), ((IErrorMask<RegionDataWeather_ErrorMask>)this.Weather.Specific).Combine(rhs.Weather.Specific));
            ret.MapName = new MaskItem<Exception, RegionDataMapName_ErrorMask>(this.MapName.Overall.Combine(rhs.MapName.Overall), ((IErrorMask<RegionDataMapName_ErrorMask>)this.MapName.Specific).Combine(rhs.MapName.Specific));
            ret.Grasses = new MaskItem<Exception, RegionDataGrasses_ErrorMask>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<RegionDataGrasses_ErrorMask>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Sounds = new MaskItem<Exception, RegionDataSounds_ErrorMask>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<RegionDataSounds_ErrorMask>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            return ret;
        }
        public static Region_ErrorMask Combine(Region_ErrorMask lhs, Region_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Region_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Region_ErrorMask();
        }
        #endregion

    }
    public class Region_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Icon;
        public bool MapColor;
        public bool Worldspace;
        public MaskItem<bool, RegionArea_TranslationMask> Areas;
        public MaskItem<bool, RegionDataObjects_TranslationMask> Objects;
        public MaskItem<bool, RegionDataWeather_TranslationMask> Weather;
        public MaskItem<bool, RegionDataMapName_TranslationMask> MapName;
        public MaskItem<bool, RegionDataGrasses_TranslationMask> Grasses;
        public MaskItem<bool, RegionDataSounds_TranslationMask> Sounds;
        #endregion

        #region Ctors
        public Region_TranslationMask()
            : base()
        {
        }

        public Region_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Icon = defaultOn;
            this.MapColor = defaultOn;
            this.Worldspace = defaultOn;
            this.Areas = new MaskItem<bool, RegionArea_TranslationMask>(defaultOn, null);
            this.Objects = new MaskItem<bool, RegionDataObjects_TranslationMask>(defaultOn, null);
            this.Weather = new MaskItem<bool, RegionDataWeather_TranslationMask>(defaultOn, null);
            this.MapName = new MaskItem<bool, RegionDataMapName_TranslationMask>(defaultOn, null);
            this.Grasses = new MaskItem<bool, RegionDataGrasses_TranslationMask>(defaultOn, null);
            this.Sounds = new MaskItem<bool, RegionDataSounds_TranslationMask>(defaultOn, null);
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Icon, null));
            ret.Add((MapColor, null));
            ret.Add((Worldspace, null));
            ret.Add((Areas?.Overall ?? true, Areas?.Specific?.GetCrystal()));
            ret.Add((Objects?.Overall ?? true, Objects?.Specific?.GetCrystal()));
            ret.Add((Weather?.Overall ?? true, Weather?.Specific?.GetCrystal()));
            ret.Add((MapName?.Overall ?? true, MapName?.Specific?.GetCrystal()));
            ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionBinaryWriteTranslation Instance = new RegionBinaryWriteTranslation();

        static partial void WriteBinaryRegionAreaLogicCustom(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryRegionAreaLogic(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryRegionAreaLogicCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_RecordTypes(
            IRegionGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Icon_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.ICON_HEADER),
                    nullable: false);
            }
            if (item.MapColor_IsSet)
            {
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MapColor,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.RCLR_HEADER),
                    nullable: false,
                    extraByte: true);
            }
            if (item.Worldspace_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Worldspace_Property,
                    header: recordTypeConverter.ConvertToCustom(Region_Registration.WNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Areas.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionAreaGetter>.Instance.Write(
                    writer: writer,
                    items: item.Areas,
                    fieldIndex: (int)Region_FieldIndex.Areas,
                    errorMask: errorMask,
                    transl: (MutagenWriter subWriter, IRegionAreaGetter subItem, ErrorMaskBuilder listErrorMask) =>
                    {
                        var loquiItem = subItem;
                        ((RegionAreaBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            RegionBinaryWriteTranslation.WriteBinaryRegionAreaLogic(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Region_Registration.REGN_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class RegionBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static RegionBinaryCreateTranslation Instance = new RegionBinaryCreateTranslation();

        static partial void FillBinaryRegionAreaLogicCustom(
            MutagenFrame frame,
            IRegionInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryRegionAreaLogicCustomPublic(
            MutagenFrame frame,
            IRegionInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryRegionAreaLogicCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Region_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RegionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Region_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IRegionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        protected override object CommonInstance()
        {
            return RegionCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance()
        {
            return RegionSetterTranslationCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionGetter)rhs, include);

        protected override object XmlWriteTranslator => RegionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RegionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Icon
        partial void IconCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public bool Icon_IsSet => GetIconIsSetCustom();
        public String Icon => GetIconCustom();
        #endregion
        #region MapColor
        private int? _MapColorLocation;
        public bool MapColor_IsSet => _MapColorLocation.HasValue;
        public Color MapColor => _MapColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _MapColorLocation.Value, _package.Meta).ReadColor() : default;
        #endregion
        #region Worldspace
        private int? _WorldspaceLocation;
        public bool Worldspace_IsSet => _WorldspaceLocation.HasValue;
        public IFormIDSetLinkGetter<IWorldspaceGetter> Worldspace_Property => _WorldspaceLocation.HasValue ? new FormIDSetLink<IWorldspaceGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WorldspaceLocation.Value, _package.Meta)))) : FormIDSetLink<IWorldspaceGetter>.Empty;
        public IWorldspaceGetter Worldspace => default;
        #endregion
        public IReadOnlySetList<IRegionAreaGetter> Areas { get; private set; } = EmptySetList<RegionAreaBinaryWrapper>.Instance;
        #region RegionAreaLogic
        partial void RegionAreaLogicCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionBinaryWrapper RegionFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new RegionBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    IconCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Icon);
                }
                case 0x524C4352: // RCLR
                {
                    _MapColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.MapColor);
                }
                case 0x4D414E57: // WNAM
                {
                    _WorldspaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Worldspace);
                }
                case 0x494C5052: // RPLI
                case 0x444C5052: // RPLD
                {
                    this.Areas = this.ParseRepeatedTypelessSubrecord<RegionAreaBinaryWrapper>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: RegionArea_Registration.TriggeringRecordTypes,
                        factory:  RegionAreaBinaryWrapper.RegionAreaFactory);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Areas);
                }
                case 0x54414452: // RDAT
                {
                    RegionAreaLogicCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

