/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RelatedWaters :
        IRelatedWaters,
        ILoquiObjectSetter<RelatedWaters>,
        IEquatable<RelatedWaters>,
        IEqualsMask
    {
        #region Ctor
        public RelatedWaters()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RelatedWaterDaytime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<Water> _RelatedWaterDaytime = new FormIDLink<Water>();
        public IFormIDLink<Water> RelatedWaterDaytime => this._RelatedWaterDaytime;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IWaterGetter> IRelatedWatersGetter.RelatedWaterDaytime => this.RelatedWaterDaytime;
        #endregion
        #region RelatedWaterNighttime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<Water> _RelatedWaterNighttime = new FormIDLink<Water>();
        public IFormIDLink<Water> RelatedWaterNighttime => this._RelatedWaterNighttime;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IWaterGetter> IRelatedWatersGetter.RelatedWaterNighttime => this.RelatedWaterNighttime;
        #endregion
        #region RelatedWaterUnderwater
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<Water> _RelatedWaterUnderwater = new FormIDLink<Water>();
        public IFormIDLink<Water> RelatedWaterUnderwater => this._RelatedWaterUnderwater;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IWaterGetter> IRelatedWatersGetter.RelatedWaterUnderwater => this.RelatedWaterUnderwater;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RelatedWatersMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRelatedWatersGetter rhs)) return false;
            return ((RelatedWatersCommon)((IRelatedWatersGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RelatedWaters obj)
        {
            return ((RelatedWatersCommon)((IRelatedWatersGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RelatedWatersCommon)((IRelatedWatersGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RelatedWatersXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelatedWatersXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RelatedWaters CreateFromXml(
            XElement node,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RelatedWaters CreateFromXml(
            XElement node,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RelatedWaters.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RelatedWaters CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new RelatedWaters();
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RelatedWaters CreateFromXml(
            string path,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            string path,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RelatedWaters CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<T> :
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            {
                this.RelatedWaterDaytime = initialValue;
                this.RelatedWaterNighttime = initialValue;
                this.RelatedWaterUnderwater = initialValue;
            }

            public Mask(
                T RelatedWaterDaytime,
                T RelatedWaterNighttime,
                T RelatedWaterUnderwater)
            {
                this.RelatedWaterDaytime = RelatedWaterDaytime;
                this.RelatedWaterNighttime = RelatedWaterNighttime;
                this.RelatedWaterUnderwater = RelatedWaterUnderwater;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T RelatedWaterDaytime;
            public T RelatedWaterNighttime;
            public T RelatedWaterUnderwater;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.RelatedWaterDaytime, rhs.RelatedWaterDaytime)) return false;
                if (!object.Equals(this.RelatedWaterNighttime, rhs.RelatedWaterNighttime)) return false;
                if (!object.Equals(this.RelatedWaterUnderwater, rhs.RelatedWaterUnderwater)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.RelatedWaterDaytime?.GetHashCode());
                ret = ret.CombineHashCode(this.RelatedWaterNighttime?.GetHashCode());
                ret = ret.CombineHashCode(this.RelatedWaterUnderwater?.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public bool AllEqual(Func<T, bool> eval)
            {
                if (!eval(this.RelatedWaterDaytime)) return false;
                if (!eval(this.RelatedWaterNighttime)) return false;
                if (!eval(this.RelatedWaterUnderwater)) return false;
                return true;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new RelatedWaters.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                obj.RelatedWaterDaytime = eval(this.RelatedWaterDaytime);
                obj.RelatedWaterNighttime = eval(this.RelatedWaterNighttime);
                obj.RelatedWaterUnderwater = eval(this.RelatedWaterUnderwater);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RelatedWaters.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RelatedWaters.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RelatedWaters.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.RelatedWaterDaytime ?? true)
                    {
                        fg.AppendLine($"RelatedWaterDaytime => {RelatedWaterDaytime}");
                    }
                    if (printMask?.RelatedWaterNighttime ?? true)
                    {
                        fg.AppendLine($"RelatedWaterNighttime => {RelatedWaterNighttime}");
                    }
                    if (printMask?.RelatedWaterUnderwater ?? true)
                    {
                        fg.AppendLine($"RelatedWaterUnderwater => {RelatedWaterUnderwater}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? RelatedWaterDaytime;
            public Exception? RelatedWaterNighttime;
            public Exception? RelatedWaterUnderwater;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
                switch (enu)
                {
                    case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                        return RelatedWaterDaytime;
                    case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                        return RelatedWaterNighttime;
                    case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                        return RelatedWaterUnderwater;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
                switch (enu)
                {
                    case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                        this.RelatedWaterDaytime = ex;
                        break;
                    case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                        this.RelatedWaterNighttime = ex;
                        break;
                    case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                        this.RelatedWaterUnderwater = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
                switch (enu)
                {
                    case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                        this.RelatedWaterDaytime = (Exception)obj;
                        break;
                    case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                        this.RelatedWaterNighttime = (Exception)obj;
                        break;
                    case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                        this.RelatedWaterUnderwater = (Exception)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (RelatedWaterDaytime != null) return true;
                if (RelatedWaterNighttime != null) return true;
                if (RelatedWaterUnderwater != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendLine($"RelatedWaterDaytime => {RelatedWaterDaytime}");
                fg.AppendLine($"RelatedWaterNighttime => {RelatedWaterNighttime}");
                fg.AppendLine($"RelatedWaterUnderwater => {RelatedWaterUnderwater}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.RelatedWaterDaytime = this.RelatedWaterDaytime.Combine(rhs.RelatedWaterDaytime);
                ret.RelatedWaterNighttime = this.RelatedWaterNighttime.Combine(rhs.RelatedWaterNighttime);
                ret.RelatedWaterUnderwater = this.RelatedWaterUnderwater.Combine(rhs.RelatedWaterUnderwater);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool RelatedWaterDaytime;
            public bool RelatedWaterNighttime;
            public bool RelatedWaterUnderwater;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.RelatedWaterDaytime = defaultOn;
                this.RelatedWaterNighttime = defaultOn;
                this.RelatedWaterUnderwater = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((RelatedWaterDaytime, null));
                ret.Add((RelatedWaterNighttime, null));
                ret.Add((RelatedWaterUnderwater, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RelatedWaters_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => RelatedWatersCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RelatedWatersBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RelatedWatersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RelatedWaters CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static RelatedWaters CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new RelatedWaters();
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelatedWatersGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RelatedWaters GetNew()
        {
            return new RelatedWaters();
        }

    }
    #endregion

    #region Interface
    public partial interface IRelatedWaters :
        IRelatedWatersGetter,
        ILoquiObjectSetter<IRelatedWaters>
    {
        new IFormIDLink<Water> RelatedWaterDaytime { get; }
        new IFormIDLink<Water> RelatedWaterNighttime { get; }
        new IFormIDLink<Water> RelatedWaterUnderwater { get; }
    }

    public partial interface IRelatedWatersGetter :
        ILoquiObject,
        ILoquiObject<IRelatedWatersGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormIDLinkGetter<IWaterGetter> RelatedWaterDaytime { get; }
        IFormIDLinkGetter<IWaterGetter> RelatedWaterNighttime { get; }
        IFormIDLinkGetter<IWaterGetter> RelatedWaterUnderwater { get; }

    }

    #endregion

    #region Common MixIn
    public static class RelatedWatersMixIn
    {
        public static void Clear(this IRelatedWaters item)
        {
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RelatedWaters.Mask<bool> GetEqualsMask(
            this IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRelatedWatersGetter item,
            string? name = null,
            RelatedWaters.Mask<bool>? printMask = null)
        {
            return ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRelatedWatersGetter item,
            FileGeneration fg,
            string? name = null,
            RelatedWaters.Mask<bool>? printMask = null)
        {
            ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRelatedWatersGetter item,
            RelatedWaters.Mask<bool?> checkMask)
        {
            return ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RelatedWaters.Mask<bool> GetHasBeenSetMask(this IRelatedWatersGetter item)
        {
            var ret = new RelatedWaters.Mask<bool>(false);
            ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRelatedWatersGetter item,
            IRelatedWatersGetter rhs)
        {
            return ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRelatedWaters lhs,
            IRelatedWatersGetter rhs,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRelatedWaters lhs,
            IRelatedWatersGetter rhs,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RelatedWaters.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRelatedWaters lhs,
            IRelatedWatersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RelatedWaters DeepCopy(
            this IRelatedWatersGetter item,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            return ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RelatedWaters DeepCopy(
            this IRelatedWatersGetter item,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            return ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RelatedWaters DeepCopy(
            this IRelatedWatersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RelatedWatersSetterTranslationCommon)((IRelatedWatersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelatedWaters item,
            XElement node,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelatedWaters item,
            XElement node,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RelatedWaters.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            string path,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            string path,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            string path,
            ErrorMaskBuilder? errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            Stream stream,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            Stream stream,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelatedWaters item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRelatedWaters item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRelatedWaters item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RelatedWatersSetterCommon)((IRelatedWatersGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RelatedWaters_FieldIndex
    {
        RelatedWaterDaytime = 0,
        RelatedWaterNighttime = 1,
        RelatedWaterUnderwater = 2,
    }
    #endregion

    #region Registration
    public partial class RelatedWaters_Registration : ILoquiRegistration
    {
        public static readonly RelatedWaters_Registration Instance = new RelatedWaters_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 166,
            version: 0);

        public const string GUID = "3ec1f551-bac0-408e-a3ee-2efd4c2f159a";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RelatedWaters.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RelatedWaters.ErrorMask);

        public static readonly Type ClassType = typeof(RelatedWaters);

        public static readonly Type GetterType = typeof(IRelatedWatersGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRelatedWaters);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RelatedWaters";

        public const string Name = "RelatedWaters";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RELATEDWATERDAYTIME":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterDaytime;
                case "RELATEDWATERNIGHTTIME":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterNighttime;
                case "RELATEDWATERUNDERWATER":
                    return (ushort)RelatedWaters_FieldIndex.RelatedWaterUnderwater;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    return "RelatedWaterDaytime";
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    return "RelatedWaterNighttime";
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return "RelatedWaterUnderwater";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RelatedWaters_FieldIndex enu = (RelatedWaters_FieldIndex)index;
            switch (enu)
            {
                case RelatedWaters_FieldIndex.RelatedWaterDaytime:
                    return typeof(IFormIDLink<Water>);
                case RelatedWaters_FieldIndex.RelatedWaterNighttime:
                    return typeof(IFormIDLink<Water>);
                case RelatedWaters_FieldIndex.RelatedWaterUnderwater:
                    return typeof(IFormIDLink<Water>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RelatedWatersXmlWriteTranslation);
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RelatedWatersBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RelatedWatersSetterCommon
    {
        public static readonly RelatedWatersSetterCommon Instance = new RelatedWatersSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRelatedWaters item)
        {
            ClearPartial();
            item.RelatedWaterDaytime.Unset();
            item.RelatedWaterNighttime.Unset();
            item.RelatedWaterUnderwater.Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IRelatedWaters item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelatedWatersXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRelatedWaters item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.RelatedWaterDaytime.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
            item.RelatedWaterNighttime.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
            item.RelatedWaterUnderwater.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
        }
        
        public void CopyInFromBinary(
            IRelatedWaters item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RelatedWaters_Registration.GNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RelatedWatersCommon
    {
        public static readonly RelatedWatersCommon Instance = new RelatedWatersCommon();

        public RelatedWaters.Mask<bool> GetEqualsMask(
            IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RelatedWaters.Mask<bool>(false);
            ((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRelatedWatersGetter item,
            IRelatedWatersGetter rhs,
            RelatedWaters.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RelatedWaterDaytime = object.Equals(item.RelatedWaterDaytime, rhs.RelatedWaterDaytime);
            ret.RelatedWaterNighttime = object.Equals(item.RelatedWaterNighttime, rhs.RelatedWaterNighttime);
            ret.RelatedWaterUnderwater = object.Equals(item.RelatedWaterUnderwater, rhs.RelatedWaterUnderwater);
        }
        
        public string ToString(
            IRelatedWatersGetter item,
            string? name = null,
            RelatedWaters.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRelatedWatersGetter item,
            FileGeneration fg,
            string? name = null,
            RelatedWaters.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RelatedWaters =>");
            }
            else
            {
                fg.AppendLine($"{name} (RelatedWaters) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRelatedWatersGetter item,
            FileGeneration fg,
            RelatedWaters.Mask<bool>? printMask = null)
        {
            if (printMask?.RelatedWaterDaytime ?? true)
            {
                fg.AppendLine($"RelatedWaterDaytime => {item.RelatedWaterDaytime}");
            }
            if (printMask?.RelatedWaterNighttime ?? true)
            {
                fg.AppendLine($"RelatedWaterNighttime => {item.RelatedWaterNighttime}");
            }
            if (printMask?.RelatedWaterUnderwater ?? true)
            {
                fg.AppendLine($"RelatedWaterUnderwater => {item.RelatedWaterUnderwater}");
            }
        }
        
        public bool HasBeenSet(
            IRelatedWatersGetter item,
            RelatedWaters.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRelatedWatersGetter item,
            RelatedWaters.Mask<bool> mask)
        {
            mask.RelatedWaterDaytime = true;
            mask.RelatedWaterNighttime = true;
            mask.RelatedWaterUnderwater = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRelatedWatersGetter? lhs,
            IRelatedWatersGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.RelatedWaterDaytime.Equals(rhs.RelatedWaterDaytime)) return false;
            if (!lhs.RelatedWaterNighttime.Equals(rhs.RelatedWaterNighttime)) return false;
            if (!lhs.RelatedWaterUnderwater.Equals(rhs.RelatedWaterUnderwater)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRelatedWatersGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.RelatedWaterDaytime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RelatedWaterNighttime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RelatedWaterUnderwater).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RelatedWaters.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRelatedWatersGetter obj)
        {
            yield return obj.RelatedWaterDaytime;
            yield return obj.RelatedWaterNighttime;
            yield return obj.RelatedWaterUnderwater;
            yield break;
        }
        
        #endregion
        
    }
    public partial class RelatedWatersSetterTranslationCommon
    {
        public static readonly RelatedWatersSetterTranslationCommon Instance = new RelatedWatersSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRelatedWaters item,
            IRelatedWatersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterDaytime) ?? true))
            {
                item.RelatedWaterDaytime.FormKey = rhs.RelatedWaterDaytime.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterNighttime) ?? true))
            {
                item.RelatedWaterNighttime.FormKey = rhs.RelatedWaterNighttime.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterUnderwater) ?? true))
            {
                item.RelatedWaterUnderwater.FormKey = rhs.RelatedWaterUnderwater.FormKey;
            }
        }
        
        #endregion
        
        public RelatedWaters DeepCopy(
            IRelatedWatersGetter item,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            RelatedWaters ret = (RelatedWaters)((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RelatedWaters DeepCopy(
            IRelatedWatersGetter item,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? copyMask = null)
        {
            RelatedWaters ret = (RelatedWaters)((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RelatedWaters DeepCopy(
            IRelatedWatersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RelatedWaters ret = (RelatedWaters)((RelatedWatersCommon)((IRelatedWatersGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RelatedWaters
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RelatedWaters_Registration.Instance;
        public static RelatedWaters_Registration Registration => RelatedWaters_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RelatedWatersCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RelatedWatersSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RelatedWatersSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRelatedWatersGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRelatedWatersGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRelatedWatersGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RelatedWatersXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RelatedWatersXmlWriteTranslation Instance = new RelatedWatersXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRelatedWatersGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterDaytime) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterDaytime),
                    item: item.RelatedWaterDaytime?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterDaytime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterNighttime) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterNighttime),
                    item: item.RelatedWaterNighttime?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterNighttime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RelatedWaters_FieldIndex.RelatedWaterUnderwater) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelatedWaterUnderwater),
                    item: item.RelatedWaterUnderwater?.FormKey,
                    fieldIndex: (int)RelatedWaters_FieldIndex.RelatedWaterUnderwater,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRelatedWatersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RelatedWaters");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RelatedWaters");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRelatedWatersGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRelatedWatersGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRelatedWatersGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RelatedWatersXmlCreateTranslation
    {
        public readonly static RelatedWatersXmlCreateTranslation Instance = new RelatedWatersXmlCreateTranslation();

        public static void FillPublicXml(
            IRelatedWaters item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelatedWatersXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRelatedWaters item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "RelatedWaterDaytime":
                    try
                    {
                        errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterDaytime);
                        item.RelatedWaterDaytime.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedWaterNighttime":
                    try
                    {
                        errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterNighttime);
                        item.RelatedWaterNighttime.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedWaterUnderwater":
                    try
                    {
                        errorMask?.PushIndex((int)RelatedWaters_FieldIndex.RelatedWaterUnderwater);
                        item.RelatedWaterUnderwater.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RelatedWatersXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RelatedWaters.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            out RelatedWaters.ErrorMask errorMask,
            RelatedWaters.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            XElement node,
            string? name = null,
            RelatedWaters.TranslationMask? translationMask = null)
        {
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelatedWatersGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RelatedWatersXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RelatedWatersBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RelatedWatersBinaryWriteTranslation Instance = new RelatedWatersBinaryWriteTranslation();

        public static void Write_Embedded(
            IRelatedWatersGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterDaytime,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterNighttime,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RelatedWaterUnderwater,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IRelatedWatersGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RelatedWaters_Registration.GNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRelatedWatersGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RelatedWatersBinaryCreateTranslation
    {
        public readonly static RelatedWatersBinaryCreateTranslation Instance = new RelatedWatersBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RelatedWatersBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRelatedWatersGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RelatedWatersBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RelatedWatersBinaryOverlay :
        BinaryOverlay,
        IRelatedWatersGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RelatedWaters_Registration.Instance;
        public static RelatedWaters_Registration Registration => RelatedWaters_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RelatedWatersCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RelatedWatersSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRelatedWatersGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRelatedWatersGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRelatedWatersGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelatedWatersGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => RelatedWatersCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RelatedWatersXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelatedWatersXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RelatedWatersBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RelatedWatersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormIDLinkGetter<IWaterGetter> RelatedWaterDaytime => new FormIDLink<IWaterGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IFormIDLinkGetter<IWaterGetter> RelatedWaterNighttime => new FormIDLink<IWaterGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        public IFormIDLinkGetter<IWaterGetter> RelatedWaterUnderwater => new FormIDLink<IWaterGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(8, 4))));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RelatedWatersBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RelatedWatersBinaryOverlay RelatedWatersFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RelatedWatersBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

