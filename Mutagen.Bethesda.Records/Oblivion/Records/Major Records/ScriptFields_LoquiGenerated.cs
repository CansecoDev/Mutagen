/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptFields :
        IScriptFields,
        ILoquiObjectSetter<ScriptFields>,
        IEquatable<ScriptFields>,
        IEqualsMask
    {
        #region Ctor
        public ScriptFields()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MetadataSummary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ScriptMetaSummary _MetadataSummary_Object = new ScriptMetaSummary();
        public ScriptMetaSummary MetadataSummary => _MetadataSummary_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptMetaSummaryGetter IScriptFieldsGetter.MetadataSummary => _MetadataSummary_Object;
        #endregion
        #region SourceCode
        public bool SourceCode_IsSet
        {
            get => _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode];
            set => _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IScriptFieldsGetter.SourceCode_IsSet => SourceCode_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _SourceCode;
        public String SourceCode
        {
            get => this._SourceCode;
            set => SourceCode_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IScriptFieldsGetter.SourceCode => this.SourceCode;
        public void SourceCode_Set(
            String value,
            bool markSet = true)
        {
            _SourceCode = value;
            _hasBeenSetTracker[(int)ScriptFields_FieldIndex.SourceCode] = markSet;
        }
        public void SourceCode_Unset()
        {
            this.SourceCode_Set(default(String), false);
        }
        #endregion
        #region LocalVariables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<LocalVariable> _LocalVariables = new SetList<LocalVariable>();
        public ISetList<LocalVariable> LocalVariables => _LocalVariables;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<LocalVariable> IScriptFields.LocalVariables => _LocalVariables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<ILocalVariableGetter> IScriptFieldsGetter.LocalVariables => _LocalVariables;
        #endregion

        #endregion
        #region References
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<ScriptReference> _References = new SetList<ScriptReference>();
        public ISetList<ScriptReference> References => _References;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<ScriptReference> IScriptFields.References => _References;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IScriptReferenceGetter> IScriptFieldsGetter.References => _References;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptFieldsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptFieldsGetter rhs)) return false;
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ScriptFields obj)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ScriptFieldsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptFieldsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptFields CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptFields CreateFromXml(
            XElement node,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptFields CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptFields() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptFields();
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ScriptFields CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptFields CreateFromXml(
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptFields CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptFields CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptFields CreateFromXml(
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptFields CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptFields_FieldIndex)index)
            {
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                    return _hasBeenSetTracker[index];
                case ScriptFields_FieldIndex.LocalVariables:
                    return LocalVariables.HasBeenSet;
                case ScriptFields_FieldIndex.References:
                    return References.HasBeenSet;
                case ScriptFields_FieldIndex.MetadataSummary:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => ScriptFieldsCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFieldsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((ScriptFieldsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptFields CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static ScriptFields CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new ScriptFields();
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptFieldsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static ScriptFields GetNew()
        {
            return new ScriptFields();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptFields :
        IScriptFieldsGetter,
        ILoquiObjectSetter<IScriptFields>
    {
        new ScriptMetaSummary MetadataSummary { get; }
        new Byte[] CompiledScript { get; set; }
        new bool CompiledScript_IsSet { get; set; }
        void CompiledScript_Set(Byte[] value, bool hasBeenSet = true);
        void CompiledScript_Unset();

        new String SourceCode { get; set; }
        new bool SourceCode_IsSet { get; set; }
        void SourceCode_Set(String value, bool hasBeenSet = true);
        void SourceCode_Unset();

        new ISetList<LocalVariable> LocalVariables { get; }
        new ISetList<ScriptReference> References { get; }
    }

    public partial interface IScriptFieldsGetter :
        ILoquiObject,
        ILoquiObject<IScriptFieldsGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region MetadataSummary
        IScriptMetaSummaryGetter MetadataSummary { get; }
        #endregion
        #region CompiledScript
        ReadOnlySpan<Byte> CompiledScript { get; }
        bool CompiledScript_IsSet { get; }

        #endregion
        #region SourceCode
        String SourceCode { get; }
        bool SourceCode_IsSet { get; }

        #endregion
        #region LocalVariables
        IReadOnlySetList<ILocalVariableGetter> LocalVariables { get; }
        #endregion
        #region References
        IReadOnlySetList<IScriptReferenceGetter> References { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ScriptFieldsMixIn
    {
        public static void Clear(this IScriptFields item)
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ScriptFields_Mask<bool> GetEqualsMask(
            this IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptFieldsGetter item,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptFieldsGetter item,
            FileGeneration fg,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptFieldsGetter item,
            ScriptFields_Mask<bool?> checkMask)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptFields_Mask<bool> GetHasBeenSetMask(this IScriptFieldsGetter item)
        {
            var ret = new ScriptFields_Mask<bool>();
            ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptFieldsGetter item,
            IScriptFieldsGetter rhs)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            ScriptFields_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            ScriptFields_TranslationMask copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptFields item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptFields item,
            XElement node,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            string path,
            ErrorMaskBuilder errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptFields_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptFields item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptFields_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptFields item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IScriptFields item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptFields_FieldIndex
    {
        MetadataSummary = 0,
        CompiledScript = 1,
        SourceCode = 2,
        LocalVariables = 3,
        References = 4,
    }
    #endregion

    #region Registration
    public partial class ScriptFields_Registration : ILoquiRegistration
    {
        public static readonly ScriptFields_Registration Instance = new ScriptFields_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 152,
            version: 0);

        public const string GUID = "9b6e1edf-a601-4625-be5c-90b106975b45";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptFields_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptFields_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptFields);

        public static readonly Type GetterType = typeof(IScriptFieldsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptFields);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptFields";

        public const string Name = "ScriptFields";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "METADATASUMMARY":
                    return (ushort)ScriptFields_FieldIndex.MetadataSummary;
                case "COMPILEDSCRIPT":
                    return (ushort)ScriptFields_FieldIndex.CompiledScript;
                case "SOURCECODE":
                    return (ushort)ScriptFields_FieldIndex.SourceCode;
                case "LOCALVARIABLES":
                    return (ushort)ScriptFields_FieldIndex.LocalVariables;
                case "REFERENCES":
                    return (ushort)ScriptFields_FieldIndex.References;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return true;
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return "MetadataSummary";
                case ScriptFields_FieldIndex.CompiledScript:
                    return "CompiledScript";
                case ScriptFields_FieldIndex.SourceCode:
                    return "SourceCode";
                case ScriptFields_FieldIndex.LocalVariables:
                    return "LocalVariables";
                case ScriptFields_FieldIndex.References:
                    return "References";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return true;
                case ScriptFields_FieldIndex.CompiledScript:
                case ScriptFields_FieldIndex.SourceCode:
                case ScriptFields_FieldIndex.LocalVariables:
                case ScriptFields_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return typeof(ScriptMetaSummary);
                case ScriptFields_FieldIndex.CompiledScript:
                    return typeof(Byte[]);
                case ScriptFields_FieldIndex.SourceCode:
                    return typeof(String);
                case ScriptFields_FieldIndex.LocalVariables:
                    return typeof(ISetList<LocalVariable>);
                case ScriptFields_FieldIndex.References:
                    return typeof(ISetList<ScriptReference>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptFieldsXmlWriteTranslation);
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static readonly RecordType SCDA_HEADER = new RecordType("SCDA");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType SLSD_HEADER = new RecordType("SLSD");
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SCHR_HEADER,
                        SCHD_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptFieldsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptFieldsSetterCommon
    {
        public static readonly ScriptFieldsSetterCommon Instance = new ScriptFieldsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptFields item)
        {
            ClearPartial();
            item.CompiledScript_Unset();
            item.SourceCode_Unset();
            item.LocalVariables.Unset();
            item.References.Unset();
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IScriptFields item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MetadataSummary":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary);
                        item.MetadataSummary.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            IScriptFields item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ScriptFieldsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IScriptFields item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IScriptFields item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x52484353: // SCHR
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.MetadataSummary) return TryGet<int?>.Failure;
                    item.MetadataSummary.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.MetadataSummary);
                }
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.CompiledScript) return TryGet<int?>.Failure;
                    ScriptFieldsBinaryCreateTranslation.FillBinaryMetadataSummaryOldCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x41444353: // SCDA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CompiledScript = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.CompiledScript);
                }
                case 0x58544353: // SCTX
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SourceCode = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.SourceCode);
                }
                case 0x44534C53: // SLSD
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<LocalVariable>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ScriptFields_Registration.SLSD_HEADER,
                        item: item.LocalVariables,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out LocalVariable listSubItem) =>
                        {
                            return LoquiBinaryTranslation<LocalVariable>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.LocalVariables);
                }
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ScriptReference>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ScriptReference_Registration.TriggeringRecordTypes,
                        item: item.References,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, RecordType header, out ScriptReference listSubItem) =>
                        {
                            switch (header.TypeInt)
                            {
                                case 0x56524353: // SCRV
                                    return LoquiBinaryTranslation<ScriptVariableReference>.Instance.Parse(
                                        frame: r,
                                        item: out listSubItem,
                                        masterReferences: masterReferences);
                                case 0x4F524353: // SCRO
                                    return LoquiBinaryTranslation<ScriptObjectReference>.Instance.Parse(
                                        frame: r,
                                        item: out listSubItem,
                                        masterReferences: masterReferences);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.References);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IScriptFields item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ScriptFieldsCommon
    {
        public static readonly ScriptFieldsCommon Instance = new ScriptFieldsCommon();

        public ScriptFields_Mask<bool> GetEqualsMask(
            IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptFields_Mask<bool>();
            ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            ScriptFields_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MetadataSummary = MaskItemExt.Factory(item.MetadataSummary.GetEqualsMask(rhs.MetadataSummary, include), include);
            ret.CompiledScript = item.CompiledScript_IsSet == rhs.CompiledScript_IsSet && MemoryExtensions.SequenceEqual(item.CompiledScript, rhs.CompiledScript);
            ret.SourceCode = item.SourceCode_IsSet == rhs.SourceCode_IsSet && string.Equals(item.SourceCode, rhs.SourceCode);
            ret.LocalVariables = item.LocalVariables.CollectionEqualsHelper(
                rhs.LocalVariables,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.References = item.References.CollectionEqualsHelper(
                rhs.References,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IScriptFieldsGetter item,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptFieldsGetter item,
            FileGeneration fg,
            string name = null,
            ScriptFields_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptFields =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptFields) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptFieldsGetter item,
            FileGeneration fg,
            ScriptFields_Mask<bool> printMask = null)
        {
            if (printMask?.MetadataSummary?.Overall ?? true)
            {
                item.MetadataSummary?.ToString(fg, "MetadataSummary");
            }
            if (printMask?.CompiledScript ?? true)
            {
                fg.AppendLine($"CompiledScript => {SpanExt.ToHexString(item.CompiledScript)}");
            }
            if (printMask?.SourceCode ?? true)
            {
                fg.AppendLine($"SourceCode => {item.SourceCode}");
            }
            if (printMask?.LocalVariables?.Overall ?? true)
            {
                fg.AppendLine("LocalVariables =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LocalVariables)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.References?.Overall ?? true)
            {
                fg.AppendLine("References =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.References)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IScriptFieldsGetter item,
            ScriptFields_Mask<bool?> checkMask)
        {
            if (checkMask.CompiledScript.HasValue && checkMask.CompiledScript.Value != item.CompiledScript_IsSet) return false;
            if (checkMask.SourceCode.HasValue && checkMask.SourceCode.Value != item.SourceCode_IsSet) return false;
            if (checkMask.LocalVariables.Overall.HasValue && checkMask.LocalVariables.Overall.Value != item.LocalVariables.HasBeenSet) return false;
            if (checkMask.References.Overall.HasValue && checkMask.References.Overall.Value != item.References.HasBeenSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IScriptFieldsGetter item,
            ScriptFields_Mask<bool> mask)
        {
            mask.MetadataSummary = new MaskItem<bool, ScriptMetaSummary_Mask<bool>>(true, item.MetadataSummary.GetHasBeenSetMask());
            mask.CompiledScript = item.CompiledScript_IsSet;
            mask.SourceCode = item.SourceCode_IsSet;
            mask.LocalVariables = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LocalVariable_Mask<bool>>>>(item.LocalVariables.HasBeenSet, item.LocalVariables.WithIndex().Select((i) => new MaskItemIndexed<bool, LocalVariable_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.References = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ScriptReference_Mask<bool>>>>(item.References.HasBeenSet, item.References.WithIndex().Select((i) => new MaskItemIndexed<bool, ScriptReference_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptFieldsGetter lhs,
            IScriptFieldsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.MetadataSummary, rhs.MetadataSummary)) return false;
            if (lhs.CompiledScript_IsSet != rhs.CompiledScript_IsSet) return false;
            if (lhs.CompiledScript_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.CompiledScript, rhs.CompiledScript)) return false;
            }
            if (lhs.SourceCode_IsSet != rhs.SourceCode_IsSet) return false;
            if (lhs.SourceCode_IsSet)
            {
                if (!string.Equals(lhs.SourceCode, rhs.SourceCode)) return false;
            }
            if (lhs.LocalVariables.HasBeenSet != rhs.LocalVariables.HasBeenSet) return false;
            if (lhs.LocalVariables.HasBeenSet)
            {
                if (!lhs.LocalVariables.SequenceEqual(rhs.LocalVariables)) return false;
            }
            if (lhs.References.HasBeenSet != rhs.References.HasBeenSet) return false;
            if (lhs.References.HasBeenSet)
            {
                if (!lhs.References.SequenceEqual(rhs.References)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IScriptFieldsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.MetadataSummary).CombineHashCode(ret);
            if (item.CompiledScript_IsSet)
            {
                ret = HashHelper.GetHashCode(item.CompiledScript).CombineHashCode(ret);
            }
            if (item.SourceCode_IsSet)
            {
                ret = HashHelper.GetHashCode(item.SourceCode).CombineHashCode(ret);
            }
            if (item.LocalVariables.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.LocalVariables).CombineHashCode(ret);
            }
            if (item.References.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.References).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScriptFields.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IScriptFieldsGetter obj)
        {
            foreach (var item in obj.References.WhereCastable<IScriptReferenceGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptFieldsSetterTranslationCommon
    {
        public static readonly ScriptFieldsSetterTranslationCommon Instance = new ScriptFieldsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IScriptFields item,
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.MetadataSummary) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary);
                try
                {
                    item.MetadataSummary.DeepCopyFieldsFrom(
                        rhs: rhs.MetadataSummary,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)ScriptFields_FieldIndex.MetadataSummary));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.CompiledScript) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.CompiledScript);
                try
                {
                    if(rhs.CompiledScript_IsSet)
                    {
                        item.CompiledScript = rhs.CompiledScript.ToArray();
                    }
                    else
                    {
                        item.CompiledScript_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.SourceCode) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.SourceCode);
                try
                {
                    if (rhs.SourceCode_IsSet)
                    {
                        item.SourceCode = rhs.SourceCode;
                    }
                    else
                    {
                        item.SourceCode_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.LocalVariables) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.LocalVariables);
                try
                {
                    if (rhs.LocalVariables.HasBeenSet)
                    {
                        item.LocalVariables.SetTo(
                            items: rhs.LocalVariables,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.LocalVariables.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.References) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.References);
                try
                {
                    if (rhs.References.HasBeenSet)
                    {
                        item.References.SetTo(
                            items: rhs.References,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.References.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            ScriptFields_TranslationMask copyMask = null)
        {
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask copyMask = null)
        {
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptFields
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFields_Registration.Instance;
        public static ScriptFields_Registration Registration => ScriptFields_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFieldsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScriptFieldsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFieldsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptFieldsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ScriptFieldsXmlWriteTranslation Instance = new ScriptFieldsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptFieldsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.MetadataSummary) ?? true))
            {
                var loquiItem = item.MetadataSummary;
                ((ScriptMetaSummaryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MetadataSummary),
                    fieldIndex: (int)ScriptFields_FieldIndex.MetadataSummary,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ScriptFields_FieldIndex.MetadataSummary));
            }
            if (item.CompiledScript_IsSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.CompiledScript) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CompiledScript),
                    item: item.CompiledScript,
                    fieldIndex: (int)ScriptFields_FieldIndex.CompiledScript,
                    errorMask: errorMask);
            }
            if (item.SourceCode_IsSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.SourceCode) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SourceCode),
                    item: item.SourceCode,
                    fieldIndex: (int)ScriptFields_FieldIndex.SourceCode,
                    errorMask: errorMask);
            }
            if (item.LocalVariables.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.LocalVariables) ?? true))
            {
                ListXmlTranslation<ILocalVariableGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.LocalVariables),
                    item: item.LocalVariables,
                    fieldIndex: (int)ScriptFields_FieldIndex.LocalVariables,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ScriptFields_FieldIndex.LocalVariables),
                    transl: (XElement subNode, ILocalVariableGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((LocalVariableXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.References.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.References) ?? true))
            {
                ListXmlTranslation<IScriptReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.References),
                    item: item.References,
                    fieldIndex: (int)ScriptFields_FieldIndex.References,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ScriptFields_FieldIndex.References),
                    transl: (XElement subNode, IScriptReferenceGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((ScriptReferenceXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IScriptFieldsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptFields");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptFields");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptFieldsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptFieldsGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IScriptFieldsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ScriptFieldsXmlCreateTranslation
    {
        public readonly static ScriptFieldsXmlCreateTranslation Instance = new ScriptFieldsXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptFields item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptFieldsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptFields item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "CompiledScript":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.CompiledScript);
                        item.CompiledScript = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SourceCode":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.SourceCode);
                        item.SourceCode = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocalVariables":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.LocalVariables);
                        if (ListXmlTranslation<LocalVariable>.Instance.Parse(
                            node: node,
                            enumer: out var LocalVariablesItem,
                            transl: LoquiXmlTranslation<LocalVariable>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LocalVariables.SetTo(LocalVariablesItem);
                        }
                        else
                        {
                            item.LocalVariables.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "References":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptFields_FieldIndex.References);
                        if (ListXmlTranslation<ScriptReference>.Instance.Parse(
                            node: node,
                            enumer: out var ReferencesItem,
                            transl: LoquiXmlTranslation<ScriptReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.References.SetTo(ReferencesItem);
                        }
                        else
                        {
                            item.References.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptFieldsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptFieldsGetter item,
            XElement node,
            out ScriptFields_ErrorMask errorMask,
            bool doMasks = true,
            ScriptFields_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptFieldsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptFields_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            string path,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            Stream stream,
            out ScriptFields_ErrorMask errorMask,
            ScriptFields_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ScriptFieldsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            XElement node,
            string name = null,
            ScriptFields_TranslationMask translationMask = null)
        {
            ((ScriptFieldsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptFieldsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptFieldsGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptFieldsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ScriptFields_Mask<T> : IMask<T>, IEquatable<ScriptFields_Mask<T>>
    {
        #region Ctors
        public ScriptFields_Mask()
        {
        }

        public ScriptFields_Mask(T initialValue)
        {
            this.MetadataSummary = new MaskItem<T, ScriptMetaSummary_Mask<T>>(initialValue, new ScriptMetaSummary_Mask<T>(initialValue));
            this.CompiledScript = initialValue;
            this.SourceCode = initialValue;
            this.LocalVariables = new MaskItem<T, IEnumerable<MaskItemIndexed<T, LocalVariable_Mask<T>>>>(initialValue, null);
            this.References = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ScriptReference_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, ScriptMetaSummary_Mask<T>> MetadataSummary { get; set; }
        public T CompiledScript;
        public T SourceCode;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, LocalVariable_Mask<T>>>> LocalVariables;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, ScriptReference_Mask<T>>>> References;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptFields_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptFields_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MetadataSummary, rhs.MetadataSummary)) return false;
            if (!object.Equals(this.CompiledScript, rhs.CompiledScript)) return false;
            if (!object.Equals(this.SourceCode, rhs.SourceCode)) return false;
            if (!object.Equals(this.LocalVariables, rhs.LocalVariables)) return false;
            if (!object.Equals(this.References, rhs.References)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MetadataSummary?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledScript?.GetHashCode());
            ret = ret.CombineHashCode(this.SourceCode?.GetHashCode());
            ret = ret.CombineHashCode(this.LocalVariables?.GetHashCode());
            ret = ret.CombineHashCode(this.References?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (MetadataSummary != null)
            {
                if (!eval(this.MetadataSummary.Overall)) return false;
                if (this.MetadataSummary.Specific != null && !this.MetadataSummary.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.CompiledScript)) return false;
            if (!eval(this.SourceCode)) return false;
            if (this.LocalVariables != null)
            {
                if (!eval(this.LocalVariables.Overall)) return false;
                if (this.LocalVariables.Specific != null)
                {
                    foreach (var item in this.LocalVariables.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.References != null)
            {
                if (!eval(this.References.Overall)) return false;
                if (this.References.Specific != null)
                {
                    foreach (var item in this.References.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public ScriptFields_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptFields_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptFields_Mask<R> obj, Func<T, R> eval)
        {
            if (this.MetadataSummary != null)
            {
                obj.MetadataSummary = new MaskItem<R, ScriptMetaSummary_Mask<R>>(eval(this.MetadataSummary.Overall), this.MetadataSummary.Specific?.Translate(eval));
            }
            obj.CompiledScript = eval(this.CompiledScript);
            obj.SourceCode = eval(this.SourceCode);
            if (LocalVariables != null)
            {
                obj.LocalVariables = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocalVariable_Mask<R>>>>(eval(this.LocalVariables.Overall), default);
                if (LocalVariables.Specific != null)
                {
                    List<MaskItemIndexed<R, LocalVariable_Mask<R>>> l = new List<MaskItemIndexed<R, LocalVariable_Mask<R>>>();
                    obj.LocalVariables.Specific = l;
                    foreach (var item in LocalVariables.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, LocalVariable_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, LocalVariable_Mask<R>>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                        }
                        l.Add(mask);
                    }
                }
            }
            if (References != null)
            {
                obj.References = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScriptReference_Mask<R>>>>(eval(this.References.Overall), default);
                if (References.Specific != null)
                {
                    List<MaskItemIndexed<R, ScriptReference_Mask<R>>> l = new List<MaskItemIndexed<R, ScriptReference_Mask<R>>>();
                    obj.References.Specific = l;
                    foreach (var item in References.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, ScriptReference_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, ScriptReference_Mask<R>>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.LocalVariables.Specific = null;
            this.References.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptFields_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptFields_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptFields_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MetadataSummary?.Overall ?? true)
                {
                    MetadataSummary?.ToString(fg);
                }
                if (printMask?.CompiledScript ?? true)
                {
                    fg.AppendLine($"CompiledScript => {CompiledScript}");
                }
                if (printMask?.SourceCode ?? true)
                {
                    fg.AppendLine($"SourceCode => {SourceCode}");
                }
                if (printMask?.LocalVariables?.Overall ?? true)
                {
                    fg.AppendLine("LocalVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (LocalVariables.Overall != null)
                        {
                            fg.AppendLine(LocalVariables.Overall.ToString());
                        }
                        if (LocalVariables.Specific != null)
                        {
                            foreach (var subItem in LocalVariables.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.References?.Overall ?? true)
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (References.Overall != null)
                        {
                            fg.AppendLine(References.Overall.ToString());
                        }
                        if (References.Specific != null)
                        {
                            foreach (var subItem in References.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptFields_ErrorMask : IErrorMask, IErrorMask<ScriptFields_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, ScriptMetaSummary_ErrorMask> MetadataSummary;
        public Exception CompiledScript;
        public Exception SourceCode;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>> LocalVariables;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>> References;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    return MetadataSummary;
                case ScriptFields_FieldIndex.CompiledScript:
                    return CompiledScript;
                case ScriptFields_FieldIndex.SourceCode:
                    return SourceCode;
                case ScriptFields_FieldIndex.LocalVariables:
                    return LocalVariables;
                case ScriptFields_FieldIndex.References:
                    return References;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    this.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(ex, null);
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    this.CompiledScript = ex;
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    this.SourceCode = ex;
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    this.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(ex, null);
                    break;
                case ScriptFields_FieldIndex.References:
                    this.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
            switch (enu)
            {
                case ScriptFields_FieldIndex.MetadataSummary:
                    this.MetadataSummary = (MaskItem<Exception, ScriptMetaSummary_ErrorMask>)obj;
                    break;
                case ScriptFields_FieldIndex.CompiledScript:
                    this.CompiledScript = (Exception)obj;
                    break;
                case ScriptFields_FieldIndex.SourceCode:
                    this.SourceCode = (Exception)obj;
                    break;
                case ScriptFields_FieldIndex.LocalVariables:
                    this.LocalVariables = (MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>)obj;
                    break;
                case ScriptFields_FieldIndex.References:
                    this.References = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (MetadataSummary != null) return true;
            if (CompiledScript != null) return true;
            if (SourceCode != null) return true;
            if (LocalVariables != null) return true;
            if (References != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptFields_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            MetadataSummary?.ToString(fg);
            fg.AppendLine($"CompiledScript => {CompiledScript}");
            fg.AppendLine($"SourceCode => {SourceCode}");
            fg.AppendLine("LocalVariables =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (LocalVariables.Overall != null)
                {
                    fg.AppendLine(LocalVariables.Overall.ToString());
                }
                if (LocalVariables.Specific != null)
                {
                    foreach (var subItem in LocalVariables.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("References =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (References.Overall != null)
                {
                    fg.AppendLine(References.Overall.ToString());
                }
                if (References.Specific != null)
                {
                    foreach (var subItem in References.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public ScriptFields_ErrorMask Combine(ScriptFields_ErrorMask rhs)
        {
            var ret = new ScriptFields_ErrorMask();
            ret.MetadataSummary = new MaskItem<Exception, ScriptMetaSummary_ErrorMask>(this.MetadataSummary.Overall.Combine(rhs.MetadataSummary.Overall), ((IErrorMask<ScriptMetaSummary_ErrorMask>)this.MetadataSummary.Specific).Combine(rhs.MetadataSummary.Specific));
            ret.CompiledScript = this.CompiledScript.Combine(rhs.CompiledScript);
            ret.SourceCode = this.SourceCode.Combine(rhs.SourceCode);
            ret.LocalVariables = new MaskItem<Exception, IEnumerable<MaskItem<Exception, LocalVariable_ErrorMask>>>(this.LocalVariables.Overall.Combine(rhs.LocalVariables.Overall), new List<MaskItem<Exception, LocalVariable_ErrorMask>>(this.LocalVariables.Specific.And(rhs.LocalVariables.Specific)));
            ret.References = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ScriptReference_ErrorMask>>>(this.References.Overall.Combine(rhs.References.Overall), new List<MaskItem<Exception, ScriptReference_ErrorMask>>(this.References.Specific.And(rhs.References.Specific)));
            return ret;
        }
        public static ScriptFields_ErrorMask Combine(ScriptFields_ErrorMask lhs, ScriptFields_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptFields_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptFields_ErrorMask();
        }
        #endregion

    }
    public class ScriptFields_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, ScriptMetaSummary_TranslationMask> MetadataSummary;
        public bool CompiledScript;
        public bool SourceCode;
        public MaskItem<bool, LocalVariable_TranslationMask> LocalVariables;
        public MaskItem<bool, ScriptReference_TranslationMask> References;
        #endregion

        #region Ctors
        public ScriptFields_TranslationMask()
        {
        }

        public ScriptFields_TranslationMask(bool defaultOn)
        {
            this.MetadataSummary = new MaskItem<bool, ScriptMetaSummary_TranslationMask>(defaultOn, null);
            this.CompiledScript = defaultOn;
            this.SourceCode = defaultOn;
            this.LocalVariables = new MaskItem<bool, LocalVariable_TranslationMask>(defaultOn, null);
            this.References = new MaskItem<bool, ScriptReference_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal(ret.ToArray());
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MetadataSummary?.Overall ?? true, MetadataSummary?.Specific?.GetCrystal()));
            ret.Add((CompiledScript, null));
            ret.Add((SourceCode, null));
            ret.Add((LocalVariables?.Overall ?? true, LocalVariables?.Specific?.GetCrystal()));
            ret.Add((References?.Overall ?? true, References?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptFieldsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScriptFieldsBinaryWriteTranslation Instance = new ScriptFieldsBinaryWriteTranslation();

        static partial void WriteBinaryMetadataSummaryOldCustom(
            MutagenWriter writer,
            IScriptFieldsGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryMetadataSummaryOld(
            MutagenWriter writer,
            IScriptFieldsGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryMetadataSummaryOldCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IScriptFieldsGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            {
                var loquiItem = item.MetadataSummary;
                ((ScriptMetaSummaryBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            ScriptFieldsBinaryWriteTranslation.WriteBinaryMetadataSummaryOld(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
            if (item.CompiledScript_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CompiledScript,
                    header: recordTypeConverter.ConvertToCustom(ScriptFields_Registration.SCDA_HEADER),
                    nullable: false);
            }
            if (item.SourceCode_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SourceCode,
                    header: recordTypeConverter.ConvertToCustom(ScriptFields_Registration.SCTX_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.Plain);
            }
            if (item.LocalVariables.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ILocalVariableGetter>.Instance.Write(
                    writer: writer,
                    items: item.LocalVariables,
                    transl: (MutagenWriter subWriter, ILocalVariableGetter subItem) =>
                    {
                        var loquiItem = subItem;
                        ((LocalVariableBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
            if (item.References.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IScriptReferenceGetter>.Instance.Write(
                    writer: writer,
                    items: item.References,
                    transl: (MutagenWriter subWriter, IScriptReferenceGetter subItem) =>
                    {
                        var loquiItem = subItem;
                        ((ScriptReferenceBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    });
            }
        }

        public void Write(
            MutagenWriter writer,
            IScriptFieldsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IScriptFieldsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScriptFieldsBinaryCreateTranslation
    {
        public readonly static ScriptFieldsBinaryCreateTranslation Instance = new ScriptFieldsBinaryCreateTranslation();

        static partial void FillBinaryMetadataSummaryOldCustom(
            MutagenFrame frame,
            IScriptFields item,
            MasterReferences masterReferences);

        public static void FillBinaryMetadataSummaryOldCustomPublic(
            MutagenFrame frame,
            IScriptFields item,
            MasterReferences masterReferences)
        {
            FillBinaryMetadataSummaryOldCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptFieldsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptFieldsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ScriptFieldsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptFieldsBinaryOverlay :
        BinaryOverlay,
        IScriptFieldsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFields_Registration.Instance;
        public static ScriptFields_Registration Registration => ScriptFields_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFieldsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFieldsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptFieldsGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => ScriptFieldsCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ScriptFieldsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptFieldsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFieldsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((ScriptFieldsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region MetadataSummary
        private RangeInt32? _MetadataSummaryLocation;
        private bool _MetadataSummary_IsSet => _MetadataSummaryLocation.HasValue;
        private IScriptMetaSummaryGetter _MetadataSummary => _MetadataSummary_IsSet ? ScriptMetaSummaryBinaryOverlay.ScriptMetaSummaryFactory(new BinaryMemoryReadStream(_data.Slice(_MetadataSummaryLocation.Value.Min)), _package) : default;
        public IScriptMetaSummaryGetter MetadataSummary => _MetadataSummary ?? new ScriptMetaSummary();
        #endregion
        #region MetadataSummaryOld
        partial void MetadataSummaryOldCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region CompiledScript
        private int? _CompiledScriptLocation;
        public bool CompiledScript_IsSet => _CompiledScriptLocation.HasValue;
        public ReadOnlySpan<Byte> CompiledScript => _CompiledScriptLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _CompiledScriptLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region SourceCode
        private int? _SourceCodeLocation;
        public bool SourceCode_IsSet => _SourceCodeLocation.HasValue;
        public String SourceCode => _SourceCodeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _SourceCodeLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlySetList<ILocalVariableGetter> LocalVariables { get; private set; } = EmptySetList<LocalVariableBinaryOverlay>.Instance;
        public IReadOnlySetList<IScriptReferenceGetter> References { get; private set; } = EmptySetList<ScriptReferenceBinaryOverlay>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ScriptFieldsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScriptFieldsBinaryOverlay ScriptFieldsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ScriptFieldsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x52484353: // SCHR
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.MetadataSummary) return TryGet<int?>.Failure;
                    _MetadataSummaryLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.MetadataSummary);
                }
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptFields_FieldIndex.CompiledScript) return TryGet<int?>.Failure;
                    MetadataSummaryOldCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x41444353: // SCDA
                {
                    _CompiledScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.CompiledScript);
                }
                case 0x58544353: // SCTX
                {
                    _SourceCodeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.SourceCode);
                }
                case 0x44534C53: // SLSD
                {
                    this.LocalVariables = this.ParseRepeatedTypelessSubrecord<LocalVariableBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: ScriptFields_Registration.SLSD_HEADER,
                        factory:  LocalVariableBinaryOverlay.LocalVariableFactory);
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.LocalVariables);
                }
                case 0x56524353: // SCRV
                case 0x4F524353: // SCRO
                {
                    this.References = this.ParseRepeatedTypelessSubrecord<ScriptReferenceBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: ScriptReference_Registration.TriggeringRecordTypes,
                        factory: (s, r, p, recConv) =>
                        {
                            switch (r.TypeInt)
                            {
                                case 0x56524353: // SCRV
                                    return ScriptVariableReferenceBinaryOverlay.ScriptVariableReferenceFactory(s, p);
                                case 0x4F524353: // SCRO
                                    return ScriptObjectReferenceBinaryOverlay.ScriptObjectReferenceFactory(s, p);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return TryGet<int?>.Succeed((int)ScriptFields_FieldIndex.References);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

