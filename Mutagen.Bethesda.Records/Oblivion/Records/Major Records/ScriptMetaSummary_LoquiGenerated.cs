/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptMetaSummary :
        IScriptMetaSummary,
        ILoquiObjectSetter<ScriptMetaSummary>,
        IEquatable<ScriptMetaSummary>,
        IEqualsMask
    {
        #region Ctor
        public ScriptMetaSummary()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        private Byte[] _Fluff = new byte[4];
        public Byte[] Fluff
        {
            get => _Fluff;
            set => this._Fluff = value ?? new byte[4];
        }
        ReadOnlySpan<Byte> IScriptMetaSummaryGetter.Fluff => this.Fluff;
        #endregion
        #region RefCount
        public UInt32 RefCount { get; set; }
        #endregion
        #region CompiledSize
        public Int32 CompiledSize { get; protected set; }
        #endregion
        #region VariableCount
        public UInt32 VariableCount { get; set; }
        #endregion
        #region Type
        public ScriptFields.ScriptType Type { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptMetaSummaryGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptMetaSummaryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptMetaSummaryGetter rhs)) return false;
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ScriptMetaSummary obj)
        {
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ScriptMetaSummaryXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptMetaSummaryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptMetaSummary() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptMetaSummary();
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptMetaSummary CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptMetaSummary_FieldIndex)index)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptMetaSummary_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ScriptMetaSummaryBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptMetaSummaryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptMetaSummary CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptMetaSummary();
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static ScriptMetaSummary GetNew()
        {
            return new ScriptMetaSummary();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptMetaSummary :
        IScriptMetaSummaryGetter,
        ILoquiObjectSetter<IScriptMetaSummary>
    {
        new Byte[] Fluff { get; set; }

        new UInt32 RefCount { get; set; }

        new UInt32 VariableCount { get; set; }

        new ScriptFields.ScriptType Type { get; set; }

    }

    public partial interface IScriptMetaSummaryGetter :
        ILoquiObject,
        ILoquiObject<IScriptMetaSummaryGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Fluff
        ReadOnlySpan<Byte> Fluff { get; }

        #endregion
        #region RefCount
        UInt32 RefCount { get; }

        #endregion
        #region CompiledSize
        Int32 CompiledSize { get; }

        #endregion
        #region VariableCount
        UInt32 VariableCount { get; }

        #endregion
        #region Type
        ScriptFields.ScriptType Type { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ScriptMetaSummaryMixIn
    {
        public static void Clear(this IScriptMetaSummary item)
        {
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ScriptMetaSummary_Mask<bool> GetEqualsMask(
            this IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptMetaSummaryGetter item,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptMetaSummaryGetter item,
            FileGeneration fg,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptMetaSummaryGetter item,
            ScriptMetaSummary_Mask<bool?> checkMask)
        {
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptMetaSummary_Mask<bool> GetHasBeenSetMask(this IScriptMetaSummaryGetter item)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs)
        {
            return ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptMetaSummary lhs,
            IScriptMetaSummaryGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptMetaSummary lhs,
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptMetaSummary lhs,
            IScriptMetaSummaryGetter rhs,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptMetaSummarySetterTranslationCommon)((IScriptMetaSummaryGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptMetaSummary lhs,
            IScriptMetaSummaryGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask copyMask = null)
        {
            ((ScriptMetaSummarySetterTranslationCommon)((IScriptMetaSummaryGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptMetaSummary DeepCopy(
            this IScriptMetaSummaryGetter item,
            ScriptMetaSummary_TranslationMask copyMask = null)
        {
            return ((ScriptMetaSummarySetterTranslationCommon)((IScriptMetaSummaryGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            string path,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptMetaSummary item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptMetaSummarySetterCommon)((IScriptMetaSummaryGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptMetaSummary_FieldIndex
    {
        Fluff = 0,
        RefCount = 1,
        CompiledSize = 2,
        VariableCount = 3,
        Type = 4,
    }
    #endregion

    #region Registration
    public class ScriptMetaSummary_Registration : ILoquiRegistration
    {
        public static readonly ScriptMetaSummary_Registration Instance = new ScriptMetaSummary_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 47,
            version: 0);

        public const string GUID = "80c1bfa2-bdf3-4bc9-aeb7-306536cdbc91";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptMetaSummary_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptMetaSummary_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptMetaSummary);

        public static readonly Type GetterType = typeof(IScriptMetaSummaryGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptMetaSummary);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptMetaSummary";

        public const string Name = "ScriptMetaSummary";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)ScriptMetaSummary_FieldIndex.Fluff;
                case "REFCOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.RefCount;
                case "COMPILEDSIZE":
                    return (ushort)ScriptMetaSummary_FieldIndex.CompiledSize;
                case "VARIABLECOUNT":
                    return (ushort)ScriptMetaSummary_FieldIndex.VariableCount;
                case "TYPE":
                    return (ushort)ScriptMetaSummary_FieldIndex.Type;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return "Fluff";
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return "RefCount";
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return "CompiledSize";
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return "VariableCount";
                case ScriptMetaSummary_FieldIndex.Type:
                    return "Type";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return true;
                case ScriptMetaSummary_FieldIndex.Fluff:
                case ScriptMetaSummary_FieldIndex.RefCount:
                case ScriptMetaSummary_FieldIndex.VariableCount:
                case ScriptMetaSummary_FieldIndex.Type:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return typeof(Int32);
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return typeof(UInt32);
                case ScriptMetaSummary_FieldIndex.Type:
                    return typeof(ScriptFields.ScriptType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptMetaSummaryXmlWriteTranslation);
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCHR_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptMetaSummaryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptMetaSummarySetterCommon
    {
        public static readonly ScriptMetaSummarySetterCommon Instance = new ScriptMetaSummarySetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IScriptMetaSummary item)
        {
            ClearPartial();
            item.Fluff = default(Byte[]);
            item.RefCount = default(UInt32);
            item.VariableCount = default(UInt32);
            item.Type = default(ScriptFields.ScriptType);
        }
        
        public ScriptMetaSummary GetNew() => ScriptMetaSummary.GetNew();
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IScriptMetaSummary item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            IScriptMetaSummary item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ScriptMetaSummaryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out Byte[] FluffParse))
            {
                item.Fluff = FluffParse;
            }
            else
            {
                item.Fluff = default(Byte[]);
            }
            item.RefCount = frame.ReadUInt32();
            ScriptMetaSummaryBinaryCreateTranslation.FillBinaryCompiledSizeCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            item.VariableCount = frame.ReadUInt32();
            if (EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out ScriptFields.ScriptType TypeParse))
            {
                item.Type = TypeParse;
            }
            else
            {
                item.Type = default(ScriptFields.ScriptType);
            }
        }
        
        public void CopyInFromBinary(
            IScriptMetaSummary item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ScriptMetaSummary_Registration.SCHR_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ScriptMetaSummaryCommon
    {
        public static readonly ScriptMetaSummaryCommon Instance = new ScriptMetaSummaryCommon();

        public ScriptMetaSummary_Mask<bool> GetEqualsMask(
            IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptMetaSummary_Mask<bool>();
            ((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptMetaSummaryGetter item,
            IScriptMetaSummaryGetter rhs,
            ScriptMetaSummary_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Fluff = MemoryExtensions.SequenceEqual(item.Fluff, rhs.Fluff);
            ret.RefCount = item.RefCount == rhs.RefCount;
            ret.CompiledSize = item.CompiledSize == rhs.CompiledSize;
            ret.VariableCount = item.VariableCount == rhs.VariableCount;
            ret.Type = item.Type == rhs.Type;
        }
        
        public string ToString(
            IScriptMetaSummaryGetter item,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptMetaSummaryGetter item,
            FileGeneration fg,
            string name = null,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptMetaSummary =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptMetaSummary) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptMetaSummaryGetter item,
            FileGeneration fg,
            ScriptMetaSummary_Mask<bool> printMask = null)
        {
            if (printMask?.Fluff ?? true)
            {
                fg.AppendLine($"Fluff => {SpanExt.ToHexString(item.Fluff)}");
            }
            if (printMask?.RefCount ?? true)
            {
                fg.AppendLine($"RefCount => {item.RefCount}");
            }
            if (printMask?.CompiledSize ?? true)
            {
                fg.AppendLine($"CompiledSize => {item.CompiledSize}");
            }
            if (printMask?.VariableCount ?? true)
            {
                fg.AppendLine($"VariableCount => {item.VariableCount}");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendLine($"Type => {item.Type}");
            }
        }
        
        public bool HasBeenSet(
            IScriptMetaSummaryGetter item,
            ScriptMetaSummary_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IScriptMetaSummaryGetter item,
            ScriptMetaSummary_Mask<bool> mask)
        {
            mask.Fluff = true;
            mask.RefCount = true;
            mask.CompiledSize = true;
            mask.VariableCount = true;
            mask.Type = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptMetaSummaryGetter lhs,
            IScriptMetaSummaryGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Fluff, rhs.Fluff)) return false;
            if (lhs.RefCount != rhs.RefCount) return false;
            if (lhs.CompiledSize != rhs.CompiledSize) return false;
            if (lhs.VariableCount != rhs.VariableCount) return false;
            if (lhs.Type != rhs.Type) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScriptMetaSummaryGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RefCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CompiledSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.VariableCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class ScriptMetaSummarySetterTranslationCommon
    {
        public static readonly ScriptMetaSummarySetterTranslationCommon Instance = new ScriptMetaSummarySetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IScriptMetaSummary item,
            IScriptMetaSummaryGetter rhs,
            ErrorMaskBuilder errorMask,
            ScriptMetaSummary_TranslationMask copyMask)
        {
            if (copyMask?.Fluff ?? true)
            {
                item.Fluff = rhs.Fluff.ToArray();
            }
            if (copyMask?.RefCount ?? true)
            {
                item.RefCount = rhs.RefCount;
            }
            if (copyMask?.VariableCount ?? true)
            {
                item.VariableCount = rhs.VariableCount;
            }
            if (copyMask?.Type ?? true)
            {
                item.Type = rhs.Type;
            }
        }
        
        #endregion
        
        public ScriptMetaSummary DeepCopy(
            IScriptMetaSummaryGetter item,
            ScriptMetaSummary_TranslationMask copyMask = null)
        {
            ScriptMetaSummary ret = ScriptMetaSummarySetterCommon.Instance.GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptMetaSummary
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptMetaSummary_Registration.Instance;
        public static ScriptMetaSummary_Registration Registration => ScriptMetaSummary_Registration.Instance;
        protected object CommonInstance()
        {
            return ScriptMetaSummaryCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return ScriptMetaSummarySetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return ScriptMetaSummarySetterTranslationCommon.Instance;
        }
        object IScriptMetaSummaryGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptMetaSummaryGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IScriptMetaSummaryGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptMetaSummaryXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ScriptMetaSummaryXmlWriteTranslation Instance = new ScriptMetaSummaryXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptMetaSummaryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Fluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Fluff),
                    item: item.Fluff,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Fluff,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.RefCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RefCount),
                    item: item.RefCount,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.RefCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.VariableCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VariableCount),
                    item: item.VariableCount,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.VariableCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptMetaSummary_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)ScriptMetaSummary_FieldIndex.Type,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptMetaSummaryGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptMetaSummary");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptMetaSummaryGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptMetaSummaryGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IScriptMetaSummaryGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ScriptMetaSummaryXmlCreateTranslation
    {
        public readonly static ScriptMetaSummaryXmlCreateTranslation Instance = new ScriptMetaSummaryXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptMetaSummary item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptMetaSummaryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptMetaSummary item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Fluff":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Fluff);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] FluffParse,
                            errorMask: errorMask))
                        {
                            item.Fluff = FluffParse;
                        }
                        else
                        {
                            item.Fluff = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RefCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.RefCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 RefCountParse,
                            errorMask: errorMask))
                        {
                            item.RefCount = RefCountParse;
                        }
                        else
                        {
                            item.RefCount = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VariableCount":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.VariableCount);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 VariableCountParse,
                            errorMask: errorMask))
                        {
                            item.VariableCount = VariableCountParse;
                        }
                        else
                        {
                            item.VariableCount = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptMetaSummary_FieldIndex.Type);
                        if (EnumXmlTranslation<ScriptFields.ScriptType>.Instance.Parse(
                            node: node,
                            item: out ScriptFields.ScriptType TypeParse,
                            errorMask: errorMask))
                        {
                            item.Type = TypeParse;
                        }
                        else
                        {
                            item.Type = default(ScriptFields.ScriptType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptMetaSummaryXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true,
            ScriptMetaSummary_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptMetaSummaryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            out ScriptMetaSummary_ErrorMask errorMask,
            ScriptMetaSummary_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ScriptMetaSummaryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            XElement node,
            string name = null,
            ScriptMetaSummary_TranslationMask translationMask = null)
        {
            ((ScriptMetaSummaryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptMetaSummaryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptMetaSummaryGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptMetaSummaryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ScriptMetaSummary_Mask<T> : IMask<T>, IEquatable<ScriptMetaSummary_Mask<T>>
    {
        #region Ctors
        public ScriptMetaSummary_Mask()
        {
        }

        public ScriptMetaSummary_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.RefCount = initialValue;
            this.CompiledSize = initialValue;
            this.VariableCount = initialValue;
            this.Type = initialValue;
        }
        #endregion

        #region Members
        public T Fluff;
        public T RefCount;
        public T CompiledSize;
        public T VariableCount;
        public T Type;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptMetaSummary_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptMetaSummary_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.RefCount, rhs.RefCount)) return false;
            if (!object.Equals(this.CompiledSize, rhs.CompiledSize)) return false;
            if (!object.Equals(this.VariableCount, rhs.VariableCount)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.RefCount?.GetHashCode());
            ret = ret.CombineHashCode(this.CompiledSize?.GetHashCode());
            ret = ret.CombineHashCode(this.VariableCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (!eval(this.RefCount)) return false;
            if (!eval(this.CompiledSize)) return false;
            if (!eval(this.VariableCount)) return false;
            if (!eval(this.Type)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ScriptMetaSummary_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptMetaSummary_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptMetaSummary_Mask<R> obj, Func<T, R> eval)
        {
            obj.Fluff = eval(this.Fluff);
            obj.RefCount = eval(this.RefCount);
            obj.CompiledSize = eval(this.CompiledSize);
            obj.VariableCount = eval(this.VariableCount);
            obj.Type = eval(this.Type);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptMetaSummary_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptMetaSummary_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptMetaSummary_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff}");
                }
                if (printMask?.RefCount ?? true)
                {
                    fg.AppendLine($"RefCount => {RefCount}");
                }
                if (printMask?.CompiledSize ?? true)
                {
                    fg.AppendLine($"CompiledSize => {CompiledSize}");
                }
                if (printMask?.VariableCount ?? true)
                {
                    fg.AppendLine($"VariableCount => {VariableCount}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptMetaSummary_ErrorMask : IErrorMask, IErrorMask<ScriptMetaSummary_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public Exception RefCount;
        public Exception CompiledSize;
        public Exception VariableCount;
        public Exception Type;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    return Fluff;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    return RefCount;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    return CompiledSize;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    return VariableCount;
                case ScriptMetaSummary_FieldIndex.Type:
                    return Type;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = ex;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ScriptMetaSummary_FieldIndex enu = (ScriptMetaSummary_FieldIndex)index;
            switch (enu)
            {
                case ScriptMetaSummary_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.RefCount:
                    this.RefCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.CompiledSize:
                    this.CompiledSize = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.VariableCount:
                    this.VariableCount = (Exception)obj;
                    break;
                case ScriptMetaSummary_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Fluff != null) return true;
            if (RefCount != null) return true;
            if (CompiledSize != null) return true;
            if (VariableCount != null) return true;
            if (Type != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptMetaSummary_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Fluff => {Fluff}");
            fg.AppendLine($"RefCount => {RefCount}");
            fg.AppendLine($"CompiledSize => {CompiledSize}");
            fg.AppendLine($"VariableCount => {VariableCount}");
            fg.AppendLine($"Type => {Type}");
        }
        #endregion

        #region Combine
        public ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask rhs)
        {
            var ret = new ScriptMetaSummary_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.RefCount = this.RefCount.Combine(rhs.RefCount);
            ret.CompiledSize = this.CompiledSize.Combine(rhs.CompiledSize);
            ret.VariableCount = this.VariableCount.Combine(rhs.VariableCount);
            ret.Type = this.Type.Combine(rhs.Type);
            return ret;
        }
        public static ScriptMetaSummary_ErrorMask Combine(ScriptMetaSummary_ErrorMask lhs, ScriptMetaSummary_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptMetaSummary_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptMetaSummary_ErrorMask();
        }
        #endregion

    }
    public class ScriptMetaSummary_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Fluff;
        public bool RefCount;
        public bool CompiledSize;
        public bool VariableCount;
        public bool Type;
        #endregion

        #region Ctors
        public ScriptMetaSummary_TranslationMask()
        {
        }

        public ScriptMetaSummary_TranslationMask(bool defaultOn)
        {
            this.Fluff = defaultOn;
            this.RefCount = defaultOn;
            this.CompiledSize = defaultOn;
            this.VariableCount = defaultOn;
            this.Type = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Fluff, null));
            ret.Add((RefCount, null));
            ret.Add((CompiledSize, null));
            ret.Add((VariableCount, null));
            ret.Add((Type, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptMetaSummaryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScriptMetaSummaryBinaryWriteTranslation Instance = new ScriptMetaSummaryBinaryWriteTranslation();

        static partial void WriteBinaryCompiledSizeCustom(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryCompiledSize(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryCompiledSizeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff);
            writer.Write(item.RefCount);
            ScriptMetaSummaryBinaryWriteTranslation.WriteBinaryCompiledSize(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            writer.Write(item.VariableCount);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptFields.ScriptType>.Instance.Write(
                writer,
                item.Type,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IScriptMetaSummaryGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ScriptMetaSummary_Registration.SCHR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptMetaSummaryGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ScriptMetaSummaryBinaryCreateTranslation
    {
        public readonly static ScriptMetaSummaryBinaryCreateTranslation Instance = new ScriptMetaSummaryBinaryCreateTranslation();

        static partial void FillBinaryCompiledSizeCustom(
            MutagenFrame frame,
            IScriptMetaSummary item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryCompiledSizeCustomPublic(
            MutagenFrame frame,
            IScriptMetaSummary item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryCompiledSizeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptMetaSummaryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptMetaSummary_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptMetaSummaryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptMetaSummary_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptMetaSummaryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IScriptMetaSummaryGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ScriptMetaSummaryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptMetaSummaryBinaryWrapper :
        BinaryWrapper,
        IScriptMetaSummaryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptMetaSummary_Registration.Instance;
        public static ScriptMetaSummary_Registration Registration => ScriptMetaSummary_Registration.Instance;
        protected object CommonInstance()
        {
            return ScriptMetaSummaryCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return ScriptMetaSummarySetterTranslationCommon.Instance;
        }
        object IScriptMetaSummaryGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptMetaSummaryGetter.CommonSetterInstance()
        {
            return null;
        }
        object IScriptMetaSummaryGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptMetaSummaryGetter)rhs, include);

        protected object XmlWriteTranslator => ScriptMetaSummaryXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptMetaSummaryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => ScriptMetaSummaryBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptMetaSummaryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public ReadOnlySpan<Byte> Fluff => _data.Span.Slice(0, 4).ToArray();
        public UInt32 RefCount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4));
        public Int32 CompiledSize => GetCompiledSizeCustom(location: 8);
        public UInt32 VariableCount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(12, 4));
        public ScriptFields.ScriptType Type => (ScriptFields.ScriptType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(16, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ScriptMetaSummaryBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScriptMetaSummaryBinaryWrapper ScriptMetaSummaryFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ScriptMetaSummaryBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x14 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

