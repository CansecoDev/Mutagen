/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptObjectReference :
        ScriptReference,
        IScriptObjectReference,
        ILoquiObjectSetter<ScriptObjectReference>,
        IEquatable<ScriptObjectReference>,
        IEqualsMask
    {
        #region Ctor
        public ScriptObjectReference()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Reference
        protected IFormIDLink<OblivionMajorRecord> _Reference = new FormIDLink<OblivionMajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IFormIDLink<OblivionMajorRecord> Reference => this._Reference;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IOblivionMajorRecordGetter> IScriptObjectReferenceGetter.Reference => this.Reference;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptObjectReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptObjectReferenceGetter rhs)) return false;
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ScriptObjectReference obj)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => ScriptObjectReferenceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptObjectReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ScriptObjectReference CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptObjectReference CreateFromXml(
            XElement node,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ScriptObjectReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ScriptObjectReference() : null;
                    break;
                default:
                    break;
            }
            var ret = new ScriptObjectReference();
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ScriptObjectReference CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptObjectReference CreateFromXml(
            string path,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptObjectReference CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptObjectReference CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptObjectReference CreateFromXml(
            Stream stream,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptObjectReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ScriptObjectReference_FieldIndex)index)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptObjectReference_Registration.TRIGGERING_RECORD_TYPE;
        public override IEnumerable<ILinkGetter> Links => ScriptObjectReferenceCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => ScriptObjectReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptObjectReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new ScriptObjectReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ScriptObjectReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ScriptObjectReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ScriptObjectReference();
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptObjectReferenceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new ScriptObjectReference GetNew()
        {
            return new ScriptObjectReference();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptObjectReference :
        IScriptObjectReferenceGetter,
        IScriptReference,
        ILoquiObjectSetter<IScriptObjectReference>
    {
        new IFormIDLink<OblivionMajorRecord> Reference { get; }
    }

    public partial interface IScriptObjectReferenceGetter :
        IScriptReferenceGetter,
        ILoquiObject<IScriptObjectReferenceGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Reference
        IFormIDLinkGetter<IOblivionMajorRecordGetter> Reference { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ScriptObjectReferenceMixIn
    {
        public static void Clear(this IScriptObjectReference item)
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ScriptObjectReference_Mask<bool> GetEqualsMask(
            this IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptObjectReferenceGetter item,
            string name = null,
            ScriptObjectReference_Mask<bool> printMask = null)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptObjectReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptObjectReference_Mask<bool> printMask = null)
        {
            ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptObjectReferenceGetter item,
            ScriptObjectReference_Mask<bool?> checkMask)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptObjectReference_Mask<bool> GetHasBeenSetMask(this IScriptObjectReferenceGetter item)
        {
            var ret = new ScriptObjectReference_Mask<bool>();
            ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs)
        {
            return ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptObjectReference lhs,
            IScriptObjectReferenceGetter rhs,
            ScriptObjectReference_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptObjectReference lhs,
            IScriptObjectReferenceGetter rhs,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IScriptObjectReference lhs,
            IScriptObjectReferenceGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            ScriptObjectReference_TranslationMask copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptObjectReference DeepCopy(
            this IScriptObjectReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((ScriptObjectReferenceSetterTranslationCommon)((IScriptObjectReferenceGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptObjectReference item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptObjectReference item,
            XElement node,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            string path,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            string path,
            ErrorMaskBuilder errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptObjectReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            Stream stream,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptObjectReference item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptObjectReference item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptObjectReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IScriptObjectReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptObjectReferenceSetterCommon)((IScriptObjectReferenceGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptObjectReference_FieldIndex
    {
        Reference = 0,
    }
    #endregion

    #region Registration
    public class ScriptObjectReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptObjectReference_Registration Instance = new ScriptObjectReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 61,
            version: 0);

        public const string GUID = "a00d44e0-398b-45a6-9e45-facc1da7a2b2";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ScriptObjectReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptObjectReference_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptObjectReference);

        public static readonly Type GetterType = typeof(IScriptObjectReferenceGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptObjectReference);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptObjectReference";

        public const string Name = "ScriptObjectReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REFERENCE":
                    return (ushort)ScriptObjectReference_FieldIndex.Reference;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return "Reference";
                default:
                    return ScriptReference_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return false;
                default:
                    return ScriptReference_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return false;
                default:
                    return ScriptReference_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return typeof(IFormIDLink<OblivionMajorRecord>);
                default:
                    return ScriptReference_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptObjectReferenceXmlWriteTranslation);
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCRO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptObjectReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptObjectReferenceSetterCommon : ScriptReferenceSetterCommon
    {
        public new static readonly ScriptObjectReferenceSetterCommon Instance = new ScriptObjectReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptObjectReference item)
        {
            ClearPartial();
            item.Reference.Unset();
            base.Clear(item);
        }
        
        public override void Clear(IScriptReference item)
        {
            Clear(item: (IScriptObjectReference)item);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IScriptObjectReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptObjectReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IScriptObjectReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IScriptObjectReference item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4F524353: // SCRO
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptObjectReference_FieldIndex.Reference) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey ReferenceParse))
                    {
                        item.Reference.FormKey = ReferenceParse;
                    }
                    else
                    {
                        item.Reference.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)ScriptObjectReference_FieldIndex.Reference);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IScriptObjectReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ScriptObjectReferenceCommon : ScriptReferenceCommon
    {
        public new static readonly ScriptObjectReferenceCommon Instance = new ScriptObjectReferenceCommon();

        public ScriptObjectReference_Mask<bool> GetEqualsMask(
            IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptObjectReference_Mask<bool>();
            ((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptObjectReferenceGetter item,
            IScriptObjectReferenceGetter rhs,
            ScriptObjectReference_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Reference = object.Equals(item.Reference, rhs.Reference);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptObjectReferenceGetter item,
            string name = null,
            ScriptObjectReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptObjectReferenceGetter item,
            FileGeneration fg,
            string name = null,
            ScriptObjectReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptObjectReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptObjectReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptObjectReferenceGetter item,
            FileGeneration fg,
            ScriptObjectReference_Mask<bool> printMask = null)
        {
            ScriptReferenceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Reference ?? true)
            {
                fg.AppendLine($"Reference => {item.Reference}");
            }
        }
        
        public bool HasBeenSet(
            IScriptObjectReferenceGetter item,
            ScriptObjectReference_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IScriptObjectReferenceGetter item,
            ScriptObjectReference_Mask<bool> mask)
        {
            mask.Reference = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ScriptObjectReference_FieldIndex ConvertFieldIndex(ScriptReference_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptObjectReferenceGetter lhs,
            IScriptObjectReferenceGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Reference.Equals(rhs.Reference)) return false;
            return true;
        }
        
        public override bool Equals(
            IScriptReferenceGetter lhs,
            IScriptReferenceGetter rhs)
        {
            return Equals(
                lhs: (IScriptObjectReferenceGetter)lhs,
                rhs: rhs as IScriptObjectReferenceGetter);
        }
        
        public virtual int GetHashCode(IScriptObjectReferenceGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Reference).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IScriptReferenceGetter item)
        {
            return GetHashCode(item: (IScriptObjectReferenceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptObjectReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IScriptObjectReferenceGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Reference;
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptObjectReferenceSetterTranslationCommon : ScriptReferenceSetterTranslationCommon
    {
        public new static readonly ScriptObjectReferenceSetterTranslationCommon Instance = new ScriptObjectReferenceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IScriptObjectReference item,
            IScriptObjectReferenceGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ScriptObjectReference_FieldIndex.Reference) ?? true))
            {
                item.Reference.FormKey = rhs.Reference.FormKey;
            }
        }
        
        
        public override void DeepCopyFieldsFrom(
            IScriptReference item,
            IScriptReferenceGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IScriptObjectReference)item,
                rhs: (IScriptObjectReferenceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            ScriptObjectReference_TranslationMask copyMask = null)
        {
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask copyMask = null)
        {
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptObjectReference DeepCopy(
            IScriptObjectReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            ScriptObjectReference ret = (ScriptObjectReference)((ScriptObjectReferenceCommon)((IScriptObjectReferenceGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptObjectReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectReference_Registration.Instance;
        public new static ScriptObjectReference_Registration Registration => ScriptObjectReference_Registration.Instance;
        protected override object CommonInstance() => ScriptObjectReferenceCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return ScriptObjectReferenceSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => ScriptObjectReferenceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptObjectReferenceXmlWriteTranslation :
        ScriptReferenceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ScriptObjectReferenceXmlWriteTranslation Instance = new ScriptObjectReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptObjectReferenceGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ScriptReferenceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)ScriptObjectReference_FieldIndex.Reference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Reference),
                    item: item.Reference?.FormKey,
                    fieldIndex: (int)ScriptObjectReference_FieldIndex.Reference,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptObjectReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptObjectReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptObjectReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IScriptReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ScriptObjectReferenceXmlCreateTranslation : ScriptReferenceXmlCreateTranslation
    {
        public new readonly static ScriptObjectReferenceXmlCreateTranslation Instance = new ScriptObjectReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptObjectReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptObjectReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptObjectReference item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Reference":
                    try
                    {
                        errorMask?.PushIndex((int)ScriptObjectReference_FieldIndex.Reference);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey ReferenceParse,
                            errorMask: errorMask))
                        {
                            item.Reference.FormKey = ReferenceParse;
                        }
                        else
                        {
                            item.Reference.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ScriptReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptObjectReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptObjectReferenceGetter item,
            XElement node,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptObjectReference_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptObjectReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptObjectReferenceGetter item,
            string path,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptObjectReferenceGetter item,
            Stream stream,
            out ScriptObjectReference_ErrorMask errorMask,
            ScriptObjectReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ScriptObjectReference_Mask<T> : ScriptReference_Mask<T>, IMask<T>, IEquatable<ScriptObjectReference_Mask<T>>
    {
        #region Ctors
        public ScriptObjectReference_Mask()
        {
        }

        public ScriptObjectReference_Mask(T initialValue)
        {
            this.Reference = initialValue;
        }
        #endregion

        #region Members
        public T Reference;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptObjectReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptObjectReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Reference, rhs.Reference)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Reference?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Reference)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new ScriptObjectReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptObjectReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptObjectReference_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Reference = eval(this.Reference);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptObjectReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptObjectReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptObjectReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Reference ?? true)
                {
                    fg.AppendLine($"Reference => {Reference}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptObjectReference_ErrorMask : ScriptReference_ErrorMask, IErrorMask<ScriptObjectReference_ErrorMask>
    {
        #region Members
        public Exception Reference;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    return Reference;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    this.Reference = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            ScriptObjectReference_FieldIndex enu = (ScriptObjectReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptObjectReference_FieldIndex.Reference:
                    this.Reference = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Reference != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptObjectReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Reference => {Reference}");
        }
        #endregion

        #region Combine
        public ScriptObjectReference_ErrorMask Combine(ScriptObjectReference_ErrorMask rhs)
        {
            var ret = new ScriptObjectReference_ErrorMask();
            ret.Reference = this.Reference.Combine(rhs.Reference);
            return ret;
        }
        public static ScriptObjectReference_ErrorMask Combine(ScriptObjectReference_ErrorMask lhs, ScriptObjectReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new ScriptObjectReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptObjectReference_ErrorMask();
        }
        #endregion

    }
    public class ScriptObjectReference_TranslationMask : ScriptReference_TranslationMask
    {
        #region Members
        public bool Reference;
        #endregion

        #region Ctors
        public ScriptObjectReference_TranslationMask()
            : base()
        {
        }

        public ScriptObjectReference_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Reference = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Reference, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptObjectReferenceBinaryWriteTranslation :
        ScriptReferenceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptObjectReferenceBinaryWriteTranslation Instance = new ScriptObjectReferenceBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IScriptObjectReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference,
                header: recordTypeConverter.ConvertToCustom(ScriptObjectReference_Registration.SCRO_HEADER),
                nullable: false,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IScriptObjectReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptObjectReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ScriptObjectReferenceBinaryCreateTranslation : ScriptReferenceBinaryCreateTranslation
    {
        public new readonly static ScriptObjectReferenceBinaryCreateTranslation Instance = new ScriptObjectReferenceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptObjectReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptObjectReferenceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptObjectReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptObjectReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptObjectReference_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptObjectReferenceBinaryWrapper :
        ScriptReferenceBinaryWrapper,
        IScriptObjectReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectReference_Registration.Instance;
        public new static ScriptObjectReference_Registration Registration => ScriptObjectReference_Registration.Instance;
        protected override object CommonInstance() => ScriptObjectReferenceCommon.Instance;
        protected override object CommonSetterTranslationInstance() => ScriptObjectReferenceSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptObjectReferenceGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ScriptObjectReferenceCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => ScriptObjectReferenceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptObjectReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => ScriptObjectReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptObjectReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Reference
        private int? _ReferenceLocation;
        public bool Reference_IsSet => _ReferenceLocation.HasValue;
        public IFormIDLinkGetter<IOblivionMajorRecordGetter> Reference => _ReferenceLocation.HasValue ? new FormIDLink<IOblivionMajorRecordGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ReferenceLocation.Value, _package.Meta)))) : FormIDLink<IOblivionMajorRecordGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ScriptObjectReferenceBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScriptObjectReferenceBinaryWrapper ScriptObjectReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ScriptObjectReferenceBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4F524353: // SCRO
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptObjectReference_FieldIndex.Reference) return TryGet<int?>.Failure;
                    _ReferenceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptObjectReference_FieldIndex.Reference);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

