/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class ScriptReference :
        LoquiNotifyingObject,
        IScriptReferenceInternal,
        ILoquiObjectSetter<ScriptReference>,
        ILinkSubContainer,
        IEquatable<ScriptReference>,
        IEqualsMask
    {
        #region Ctor
        public ScriptReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptReferenceInternalGetter)rhs, include);
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            ScriptReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptReferenceInternalGetter rhs)) return false;
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ScriptReference obj)
        {
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected virtual object XmlWriteTranslator => ScriptReferenceXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptReference CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ScriptReference_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptReference CreateFromXml(
            XElement node,
            out ScriptReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ScriptReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            ScriptReference ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown ScriptReference subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static ScriptReference CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ScriptReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptReference CreateFromXml(
            string path,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptReference CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ScriptReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptReference CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ScriptReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ScriptReference CreateFromXml(
            Stream stream,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ScriptReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public virtual IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield break;
        }

        public virtual void Link<M>(LinkingPackage<M> package)
            where M : IMod
        {
        }

        #endregion

        #region Binary Translation
        protected virtual object BinaryWriteTranslator => ScriptReferenceBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #endregion

        public ScriptReference Copy(
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null)
        {
            return ScriptReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ScriptReference Copy(
            ScriptReference item,
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null)
        {
            ScriptReference ret = (ScriptReference)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ScriptReference Copy_ToLoqui(
            ScriptReference item,
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null)
        {
            ScriptReference ret = (ScriptReference)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public virtual void CopyFieldsFrom(ScriptReference rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ScriptReference rhs,
            ScriptReference_CopyMask copyMask,
            ScriptReference def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ScriptReference rhs,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptReferenceSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ScriptReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ScriptReference rhs,
            ErrorMaskBuilder errorMask,
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null)
        {
            ScriptReferenceSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected virtual void SetNthObject(ushort index, object obj)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void Clear()
        {
            ScriptReferenceSetterCommon.Instance.Clear(this);
        }

        protected static void CopyInInternal_ScriptReference(ScriptReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ScriptReference_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IScriptReference :
        IScriptReferenceInternalGetter,
        ILoquiObjectSetter<IScriptReferenceInternal>
    {
        void CopyFieldsFrom(
            ScriptReference rhs,
            ErrorMaskBuilder errorMask = null,
            ScriptReference_CopyMask copyMask = null,
            ScriptReference def = null);
    }

    public partial interface IScriptReferenceInternal :
        IScriptReference,
        IScriptReferenceInternalGetter
    {
    }

    public partial interface IScriptReferenceGetter :
        ILoquiObject,
        ILoquiObject<IScriptReferenceInternalGetter>,
        IXmlItem,
        IBinaryItem
    {

    }

    public partial interface IScriptReferenceInternalGetter : IScriptReferenceGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class ScriptReferenceMixIn
    {
        public static void Clear(this IScriptReferenceInternal item)
        {
            ((ScriptReferenceSetterCommon)((IScriptReferenceInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ScriptReference_Mask<bool> GetEqualsMask(
            this IScriptReferenceInternalGetter item,
            IScriptReferenceInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptReferenceInternalGetter item,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptReferenceInternalGetter item,
            FileGeneration fg,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptReferenceInternalGetter item,
            ScriptReference_Mask<bool?> checkMask)
        {
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptReference_Mask<bool> GetHasBeenSetMask(this IScriptReferenceInternalGetter item)
        {
            var ret = new ScriptReference_Mask<bool>();
            ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptReferenceInternalGetter item,
            IScriptReferenceInternalGetter rhs)
        {
            return ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptReference_FieldIndex
    {
    }
    #endregion

    #region Registration
    public class ScriptReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptReference_Registration Instance = new ScriptReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 50,
            version: 0);

        public const string GUID = "5eb6ddcc-5ba8-4da7-87f5-99b6038a61c7";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 0;

        public static readonly Type MaskType = typeof(ScriptReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptReference_ErrorMask);

        public static readonly Type ClassType = typeof(ScriptReference);

        public static readonly Type GetterType = typeof(IScriptReferenceGetter);

        public static readonly Type InternalGetterType = typeof(IScriptReferenceInternalGetter);

        public static readonly Type SetterType = typeof(IScriptReference);

        public static readonly Type InternalSetterType = typeof(IScriptReferenceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptReference";

        public const string Name = "ScriptReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptReferenceXmlWriteTranslation);
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType SCRO_HEADER = new RecordType("SCRO");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SCRV_HEADER,
                        SCRO_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptReferenceSetterCommon
    {
        public static readonly ScriptReferenceSetterCommon Instance = new ScriptReferenceSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IScriptReferenceInternal item)
        {
            ClearPartial();
        }
        
    }
    public partial class ScriptReferenceCommon
    {
        public static readonly ScriptReferenceCommon Instance = new ScriptReferenceCommon();

        public ScriptReference_Mask<bool> GetEqualsMask(
            IScriptReferenceInternalGetter item,
            IScriptReferenceInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptReference_Mask<bool>();
            ((ScriptReferenceCommon)((IScriptReferenceInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptReferenceInternalGetter item,
            IScriptReferenceInternalGetter rhs,
            ScriptReference_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
        }
        
        public string ToString(
            IScriptReferenceInternalGetter item,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptReferenceInternalGetter item,
            FileGeneration fg,
            string name = null,
            ScriptReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptReferenceInternalGetter item,
            FileGeneration fg,
            ScriptReference_Mask<bool> printMask = null)
        {
        }
        
        public bool HasBeenSet(
            IScriptReferenceInternalGetter item,
            ScriptReference_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IScriptReferenceInternalGetter item,
            ScriptReference_Mask<bool> mask)
        {
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptReferenceInternalGetter lhs,
            IScriptReferenceInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScriptReferenceInternalGetter item)
        {
            int ret = 0;
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class ScriptReferenceSetterCopyCommon
    {
        public static readonly ScriptReferenceSetterCopyCommon Instance = new ScriptReferenceSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ScriptReference item,
            ScriptReference rhs,
            ScriptReference def,
            ErrorMaskBuilder errorMask,
            ScriptReference_CopyMask copyMask)
        {
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptReference_Registration.Instance;
        public static ScriptReference_Registration Registration => ScriptReference_Registration.Instance;
        protected virtual object CommonInstance()
        {
            return ScriptReferenceCommon.Instance;
        }
        protected virtual object CommonSetterInstance()
        {
            return ScriptReferenceSetterCommon.Instance;
        }
        protected virtual object CommonSetterCopyInstance()
        {
            return ScriptReferenceSetterCopyCommon.Instance;
        }
        object IScriptReferenceInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptReferenceInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IScriptReferenceInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptReferenceXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ScriptReferenceXmlWriteTranslation Instance = new ScriptReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptReferenceInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
        }

        public virtual void Write(
            XElement node,
            IScriptReferenceInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IScriptReferenceInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptReferenceInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IScriptReferenceInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ScriptReferenceXmlCreateTranslation
    {
        public readonly static ScriptReferenceXmlCreateTranslation Instance = new ScriptReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptReferenceInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptReferenceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            XElement node,
            out ScriptReference_ErrorMask errorMask,
            bool doMasks = true,
            ScriptReference_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            string path,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            Stream stream,
            out ScriptReference_ErrorMask errorMask,
            ScriptReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ScriptReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            XElement node,
            string name = null,
            ScriptReference_TranslationMask translationMask = null)
        {
            ((ScriptReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptReferenceInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ScriptReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ScriptReference_Mask<T> : IMask<T>, IEquatable<ScriptReference_Mask<T>>
    {
        #region Ctors
        public ScriptReference_Mask()
        {
        }

        public ScriptReference_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ScriptReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ScriptReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            return true;
        }
        #endregion

        #region Translate
        public ScriptReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ScriptReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ScriptReference_Mask<R> obj, Func<T, R> eval)
        {
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ScriptReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ScriptReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ScriptReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ScriptReference_ErrorMask : IErrorMask, IErrorMask<ScriptReference_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            ScriptReference_FieldIndex enu = (ScriptReference_FieldIndex)index;
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("ScriptReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
        }
        #endregion

        #region Combine
        public ScriptReference_ErrorMask Combine(ScriptReference_ErrorMask rhs)
        {
            var ret = new ScriptReference_ErrorMask();
            return ret;
        }
        public static ScriptReference_ErrorMask Combine(ScriptReference_ErrorMask lhs, ScriptReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ScriptReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ScriptReference_ErrorMask();
        }
        #endregion

    }
    public class ScriptReference_CopyMask
    {
        public ScriptReference_CopyMask()
        {
        }

        public ScriptReference_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
        }

    }

    public class ScriptReference_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        #endregion

        #region Ctors
        public ScriptReference_TranslationMask()
        {
        }

        public ScriptReference_TranslationMask(bool defaultOn)
        {
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScriptReferenceBinaryWriteTranslation Instance = new ScriptReferenceBinaryWriteTranslation();

        public virtual void Write(
            MutagenWriter writer,
            IScriptReferenceInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IScriptReferenceInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ScriptReferenceBinaryCreateTranslation
    {
        public readonly static ScriptReferenceBinaryCreateTranslation Instance = new ScriptReferenceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptReferenceInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ScriptReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ScriptReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ScriptReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IScriptReferenceInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IScriptReferenceInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ScriptReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptReferenceBinaryWrapper :
        BinaryWrapper,
        IScriptReferenceInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptReference_Registration.Instance;
        public static ScriptReference_Registration Registration => ScriptReference_Registration.Instance;
        protected virtual object CommonInstance()
        {
            return ScriptReferenceCommon.Instance;
        }
        object IScriptReferenceInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IScriptReferenceInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IScriptReferenceInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptReferenceInternalGetter)rhs, include);

        protected virtual object XmlWriteTranslator => ScriptReferenceXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ScriptReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected virtual object BinaryWriteTranslator => ScriptReferenceBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ScriptReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ScriptReferenceBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

    }

}
#endregion

#endregion

