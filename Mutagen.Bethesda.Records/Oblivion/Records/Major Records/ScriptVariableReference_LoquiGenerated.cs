/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptVariableReference :
        ScriptReference,
        IScriptVariableReference,
        ILoquiObjectSetter<ScriptVariableReference>,
        IEquatable<ScriptVariableReference>,
        IEqualsMask
    {
        #region Ctor
        public ScriptVariableReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VariableIndex
        public Int32 VariableIndex { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptVariableReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IScriptVariableReferenceGetter rhs)) return false;
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ScriptVariableReference obj)
        {
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ScriptVariableReferenceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScriptVariableReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ScriptVariableReference CreateFromXml(
            XElement node,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptVariableReference CreateFromXml(
            XElement node,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptVariableReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ScriptVariableReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ScriptVariableReference();
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptVariableReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            ScriptReference.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T VariableIndex)
            : base()
            {
                this.VariableIndex = VariableIndex;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T VariableIndex;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VariableIndex, rhs.VariableIndex)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.VariableIndex?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.VariableIndex)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new ScriptVariableReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VariableIndex = eval(this.VariableIndex);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptVariableReference.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptVariableReference.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptVariableReference.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VariableIndex ?? true)
                    {
                        fg.AppendLine($"VariableIndex => {VariableIndex}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ScriptReference.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? VariableIndex;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptVariableReference_FieldIndex.VariableIndex:
                        return VariableIndex;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptVariableReference_FieldIndex.VariableIndex:
                        this.VariableIndex = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
                switch (enu)
                {
                    case ScriptVariableReference_FieldIndex.VariableIndex:
                        this.VariableIndex = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VariableIndex != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"VariableIndex => {VariableIndex}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VariableIndex = this.VariableIndex.Combine(rhs.VariableIndex);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ScriptReference.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool VariableIndex;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VariableIndex = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VariableIndex, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ScriptVariableReference_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptVariableReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ScriptVariableReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new ScriptVariableReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static ScriptVariableReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new ScriptVariableReference();
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptVariableReferenceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ScriptVariableReference GetNew()
        {
            return new ScriptVariableReference();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptVariableReference :
        IScriptVariableReferenceGetter,
        IScriptReference,
        ILoquiObjectSetter<IScriptVariableReference>
    {
        new Int32 VariableIndex { get; set; }
    }

    public partial interface IScriptVariableReferenceGetter :
        IScriptReferenceGetter,
        ILoquiObject<IScriptVariableReferenceGetter>,
        IXmlItem,
        IBinaryItem
    {
        Int32 VariableIndex { get; }

    }

    #endregion

    #region Common MixIn
    public static class ScriptVariableReferenceMixIn
    {
        public static void Clear(this IScriptVariableReference item)
        {
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptVariableReference.Mask<bool> GetEqualsMask(
            this IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptVariableReferenceGetter item,
            string? name = null,
            ScriptVariableReference.Mask<bool>? printMask = null)
        {
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptVariableReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptVariableReference.Mask<bool>? printMask = null)
        {
            ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptVariableReferenceGetter item,
            ScriptVariableReference.Mask<bool?> checkMask)
        {
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptVariableReference.Mask<bool> GetHasBeenSetMask(this IScriptVariableReferenceGetter item)
        {
            var ret = new ScriptVariableReference.Mask<bool>(false);
            ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs)
        {
            return ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScriptVariableReference lhs,
            IScriptVariableReferenceGetter rhs,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptVariableReferenceSetterTranslationCommon)((IScriptVariableReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ScriptVariableReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptVariableReference lhs,
            IScriptVariableReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptVariableReferenceSetterTranslationCommon)((IScriptVariableReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptVariableReference DeepCopy(
            this IScriptVariableReferenceGetter item,
            ScriptVariableReference.TranslationMask? copyMask = null)
        {
            return ((ScriptVariableReferenceSetterTranslationCommon)((IScriptVariableReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptVariableReference DeepCopy(
            this IScriptVariableReferenceGetter item,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? copyMask = null)
        {
            return ((ScriptVariableReferenceSetterTranslationCommon)((IScriptVariableReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptVariableReference DeepCopy(
            this IScriptVariableReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptVariableReferenceSetterTranslationCommon)((IScriptVariableReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptVariableReference item,
            XElement node,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptVariableReference item,
            XElement node,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptVariableReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            string path,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            string path,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            string path,
            ErrorMaskBuilder? errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            Stream stream,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            Stream stream,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptVariableReference item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptVariableReference item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IScriptVariableReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ScriptVariableReferenceSetterCommon)((IScriptVariableReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptVariableReference_FieldIndex
    {
        VariableIndex = 0,
    }
    #endregion

    #region Registration
    public partial class ScriptVariableReference_Registration : ILoquiRegistration
    {
        public static readonly ScriptVariableReference_Registration Instance = new ScriptVariableReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 60,
            version: 0);

        public const string GUID = "fb87f678-c078-4acb-b943-fe3d2142a7be";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(ScriptVariableReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptVariableReference.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptVariableReference);

        public static readonly Type GetterType = typeof(IScriptVariableReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptVariableReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptVariableReference";

        public const string Name = "ScriptVariableReference";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VARIABLEINDEX":
                    return (ushort)ScriptVariableReference_FieldIndex.VariableIndex;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return "VariableIndex";
                default:
                    return ScriptReference_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return false;
                default:
                    return ScriptReference_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptVariableReference_FieldIndex enu = (ScriptVariableReference_FieldIndex)index;
            switch (enu)
            {
                case ScriptVariableReference_FieldIndex.VariableIndex:
                    return typeof(Int32);
                default:
                    return ScriptReference_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptVariableReferenceXmlWriteTranslation);
        public static readonly RecordType SCRV_HEADER = new RecordType("SCRV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SCRV_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptVariableReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptVariableReferenceSetterCommon : ScriptReferenceSetterCommon
    {
        public new static readonly ScriptVariableReferenceSetterCommon Instance = new ScriptVariableReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptVariableReference item)
        {
            ClearPartial();
            item.VariableIndex = default;
            base.Clear(item);
        }
        
        public override void Clear(IScriptReference item)
        {
            Clear(item: (IScriptVariableReference)item);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IScriptVariableReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptVariableReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IScriptVariableReference item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IScriptVariableReference item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x56524353: // SCRV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptVariableReference_FieldIndex.VariableIndex) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VariableIndex = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)ScriptVariableReference_FieldIndex.VariableIndex);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IScriptVariableReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ScriptVariableReferenceCommon : ScriptReferenceCommon
    {
        public new static readonly ScriptVariableReferenceCommon Instance = new ScriptVariableReferenceCommon();

        public ScriptVariableReference.Mask<bool> GetEqualsMask(
            IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptVariableReference.Mask<bool>(false);
            ((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptVariableReferenceGetter item,
            IScriptVariableReferenceGetter rhs,
            ScriptVariableReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VariableIndex = item.VariableIndex == rhs.VariableIndex;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptVariableReferenceGetter item,
            string? name = null,
            ScriptVariableReference.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptVariableReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptVariableReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptVariableReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptVariableReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptVariableReferenceGetter item,
            FileGeneration fg,
            ScriptVariableReference.Mask<bool>? printMask = null)
        {
            ScriptReferenceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.VariableIndex ?? true)
            {
                fg.AppendLine($"VariableIndex => {item.VariableIndex}");
            }
        }
        
        public bool HasBeenSet(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference.Mask<bool> mask)
        {
            mask.VariableIndex = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ScriptVariableReference_FieldIndex ConvertFieldIndex(ScriptReference_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptVariableReferenceGetter? lhs,
            IScriptVariableReferenceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.VariableIndex != rhs.VariableIndex) return false;
            return true;
        }
        
        public override bool Equals(
            IScriptReferenceGetter? lhs,
            IScriptReferenceGetter? rhs)
        {
            return Equals(
                lhs: (IScriptVariableReferenceGetter?)lhs,
                rhs: rhs as IScriptVariableReferenceGetter);
        }
        
        public virtual int GetHashCode(IScriptVariableReferenceGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.VariableIndex).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IScriptReferenceGetter item)
        {
            return GetHashCode(item: (IScriptVariableReferenceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptVariableReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IScriptVariableReferenceGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptVariableReferenceSetterTranslationCommon : ScriptReferenceSetterTranslationCommon
    {
        public new static readonly ScriptVariableReferenceSetterTranslationCommon Instance = new ScriptVariableReferenceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IScriptVariableReference item,
            IScriptVariableReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ScriptVariableReference_FieldIndex.VariableIndex) ?? true))
            {
                item.VariableIndex = rhs.VariableIndex;
            }
        }
        
        
        public override void DeepCopyIn(
            IScriptReference item,
            IScriptReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IScriptVariableReference)item,
                rhs: (IScriptVariableReferenceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ScriptVariableReference DeepCopy(
            IScriptVariableReferenceGetter item,
            ScriptVariableReference.TranslationMask? copyMask = null)
        {
            ScriptVariableReference ret = (ScriptVariableReference)((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptVariableReference DeepCopy(
            IScriptVariableReferenceGetter item,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? copyMask = null)
        {
            ScriptVariableReference ret = (ScriptVariableReference)((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptVariableReference DeepCopy(
            IScriptVariableReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptVariableReference ret = (ScriptVariableReference)((ScriptVariableReferenceCommon)((IScriptVariableReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptVariableReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptVariableReference_Registration.Instance;
        public new static ScriptVariableReference_Registration Registration => ScriptVariableReference_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptVariableReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScriptVariableReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptVariableReferenceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptVariableReferenceXmlWriteTranslation :
        ScriptReferenceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ScriptVariableReferenceXmlWriteTranslation Instance = new ScriptVariableReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptVariableReferenceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ScriptReferenceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)ScriptVariableReference_FieldIndex.VariableIndex) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VariableIndex),
                    item: item.VariableIndex,
                    fieldIndex: (int)ScriptVariableReference_FieldIndex.VariableIndex,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptVariableReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptVariableReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IScriptReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ScriptVariableReferenceXmlCreateTranslation : ScriptReferenceXmlCreateTranslation
    {
        public new readonly static ScriptVariableReferenceXmlCreateTranslation Instance = new ScriptVariableReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptVariableReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptVariableReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptVariableReference item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VariableIndex":
                    errorMask?.PushIndex((int)ScriptVariableReference_FieldIndex.VariableIndex);
                    try
                    {
                        item.VariableIndex = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ScriptReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptVariableReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            XElement node,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptVariableReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptVariableReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            string path,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptVariableReferenceGetter item,
            Stream stream,
            out ScriptVariableReference.ErrorMask errorMask,
            ScriptVariableReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptVariableReferenceBinaryWriteTranslation :
        ScriptReferenceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptVariableReferenceBinaryWriteTranslation Instance = new ScriptVariableReferenceBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IScriptVariableReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VariableIndex,
                header: recordTypeConverter.ConvertToCustom(ScriptVariableReference_Registration.SCRV_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IScriptVariableReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IScriptVariableReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScriptVariableReferenceBinaryCreateTranslation : ScriptReferenceBinaryCreateTranslation
    {
        public new readonly static ScriptVariableReferenceBinaryCreateTranslation Instance = new ScriptVariableReferenceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptVariableReferenceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptVariableReferenceBinaryOverlay :
        ScriptReferenceBinaryOverlay,
        IScriptVariableReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptVariableReference_Registration.Instance;
        public new static ScriptVariableReference_Registration Registration => ScriptVariableReference_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptVariableReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptVariableReferenceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptVariableReferenceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ScriptVariableReferenceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScriptVariableReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptVariableReferenceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ScriptVariableReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region VariableIndex
        private int? _VariableIndexLocation;
        public Int32 VariableIndex => _VariableIndexLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _VariableIndexLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ScriptVariableReferenceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScriptVariableReferenceBinaryOverlay ScriptVariableReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptVariableReferenceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x56524353: // SCRV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScriptVariableReference_FieldIndex.VariableIndex) return TryGet<int?>.Failure;
                    _VariableIndexLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ScriptVariableReference_FieldIndex.VariableIndex);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

