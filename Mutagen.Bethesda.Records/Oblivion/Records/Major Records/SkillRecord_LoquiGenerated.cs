/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SkillRecord :
        OblivionMajorRecord,
        ISkillRecordInternal,
        ILoquiObjectSetter<SkillRecord>,
        IEquatable<SkillRecord>,
        IEqualsMask
    {
        #region Ctor
        protected SkillRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Skill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue? _Skill;
        public ActorValue? Skill
        {
            get => this._Skill;
            set => this._Skill = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ActorValue? ISkillRecordGetter.Skill => this.Skill;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.Description => this.Description;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.Icon => this.Icon;
        #endregion
        #region Action
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue _Action;
        public ActorValue Action
        {
            get => this._Action;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Action = value;
            }
        }
        #endregion
        #region Attribute
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue _Attribute;
        public ActorValue Attribute
        {
            get => this._Attribute;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Attribute = value;
            }
        }
        #endregion
        #region Specialization
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Specialization _Specialization;
        public Specialization Specialization
        {
            get => this._Specialization;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Specialization = value;
            }
        }
        #endregion
        #region UseValueFirst
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _UseValueFirst;
        public Single UseValueFirst
        {
            get => this._UseValueFirst;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._UseValueFirst = value;
            }
        }
        #endregion
        #region UseValueSecond
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _UseValueSecond;
        public Single UseValueSecond
        {
            get => this._UseValueSecond;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._UseValueSecond = value;
            }
        }
        #endregion
        #region ApprenticeText
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _ApprenticeText;
        public String? ApprenticeText
        {
            get => this._ApprenticeText;
            set => this._ApprenticeText = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.ApprenticeText => this.ApprenticeText;
        #endregion
        #region JourneymanText
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _JourneymanText;
        public String? JourneymanText
        {
            get => this._JourneymanText;
            set => this._JourneymanText = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.JourneymanText => this.JourneymanText;
        #endregion
        #region ExpertText
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _ExpertText;
        public String? ExpertText
        {
            get => this._ExpertText;
            set => this._ExpertText = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.ExpertText => this.ExpertText;
        #endregion
        #region MasterText
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MasterText;
        public String? MasterText
        {
            get => this._MasterText;
            set => this._MasterText = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.MasterText => this.MasterText;
        #endregion
        #region DATADataTypeState
        public SkillRecord.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkillRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISkillRecordGetter rhs)) return false;
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkillRecord obj)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SkillRecordXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkillRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SkillRecord CreateFromXml(
            XElement node,
            SkillRecord.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkillRecord CreateFromXml(
            XElement node,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SkillRecord CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SkillRecord();
            ((SkillRecordSetterCommon)((ISkillRecordGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkillRecord CreateFromXml(
            string path,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            string path,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillRecord CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            OblivionMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Skill = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Action = initialValue;
                this.Attribute = initialValue;
                this.Specialization = initialValue;
                this.UseValueFirst = initialValue;
                this.UseValueSecond = initialValue;
                this.ApprenticeText = initialValue;
                this.JourneymanText = initialValue;
                this.ExpertText = initialValue;
                this.MasterText = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Skill,
                T Description,
                T Icon,
                T Action,
                T Attribute,
                T Specialization,
                T UseValueFirst,
                T UseValueSecond,
                T ApprenticeText,
                T JourneymanText,
                T ExpertText,
                T MasterText,
                T DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Skill = Skill;
                this.Description = Description;
                this.Icon = Icon;
                this.Action = Action;
                this.Attribute = Attribute;
                this.Specialization = Specialization;
                this.UseValueFirst = UseValueFirst;
                this.UseValueSecond = UseValueSecond;
                this.ApprenticeText = ApprenticeText;
                this.JourneymanText = JourneymanText;
                this.ExpertText = ExpertText;
                this.MasterText = MasterText;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Skill;
            public T Description;
            public T Icon;
            public T Action;
            public T Attribute;
            public T Specialization;
            public T UseValueFirst;
            public T UseValueSecond;
            public T ApprenticeText;
            public T JourneymanText;
            public T ExpertText;
            public T MasterText;
            public T DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Skill, rhs.Skill)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.Attribute, rhs.Attribute)) return false;
                if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
                if (!object.Equals(this.UseValueFirst, rhs.UseValueFirst)) return false;
                if (!object.Equals(this.UseValueSecond, rhs.UseValueSecond)) return false;
                if (!object.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
                if (!object.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
                if (!object.Equals(this.ExpertText, rhs.ExpertText)) return false;
                if (!object.Equals(this.MasterText, rhs.MasterText)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Skill?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Action?.GetHashCode());
                ret = ret.CombineHashCode(this.Attribute?.GetHashCode());
                ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
                ret = ret.CombineHashCode(this.UseValueFirst?.GetHashCode());
                ret = ret.CombineHashCode(this.UseValueSecond?.GetHashCode());
                ret = ret.CombineHashCode(this.ApprenticeText?.GetHashCode());
                ret = ret.CombineHashCode(this.JourneymanText?.GetHashCode());
                ret = ret.CombineHashCode(this.ExpertText?.GetHashCode());
                ret = ret.CombineHashCode(this.MasterText?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Skill)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.Action)) return false;
                if (!eval(this.Attribute)) return false;
                if (!eval(this.Specialization)) return false;
                if (!eval(this.UseValueFirst)) return false;
                if (!eval(this.UseValueSecond)) return false;
                if (!eval(this.ApprenticeText)) return false;
                if (!eval(this.JourneymanText)) return false;
                if (!eval(this.ExpertText)) return false;
                if (!eval(this.MasterText)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new SkillRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Skill = eval(this.Skill);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Action = eval(this.Action);
                obj.Attribute = eval(this.Attribute);
                obj.Specialization = eval(this.Specialization);
                obj.UseValueFirst = eval(this.UseValueFirst);
                obj.UseValueSecond = eval(this.UseValueSecond);
                obj.ApprenticeText = eval(this.ApprenticeText);
                obj.JourneymanText = eval(this.JourneymanText);
                obj.ExpertText = eval(this.ExpertText);
                obj.MasterText = eval(this.MasterText);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SkillRecord.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SkillRecord.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SkillRecord.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Skill ?? true)
                    {
                        fg.AppendLine($"Skill => {Skill}");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendLine($"Description => {Description}");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendLine($"Icon => {Icon}");
                    }
                    if (printMask?.Action ?? true)
                    {
                        fg.AppendLine($"Action => {Action}");
                    }
                    if (printMask?.Attribute ?? true)
                    {
                        fg.AppendLine($"Attribute => {Attribute}");
                    }
                    if (printMask?.Specialization ?? true)
                    {
                        fg.AppendLine($"Specialization => {Specialization}");
                    }
                    if (printMask?.UseValueFirst ?? true)
                    {
                        fg.AppendLine($"UseValueFirst => {UseValueFirst}");
                    }
                    if (printMask?.UseValueSecond ?? true)
                    {
                        fg.AppendLine($"UseValueSecond => {UseValueSecond}");
                    }
                    if (printMask?.ApprenticeText ?? true)
                    {
                        fg.AppendLine($"ApprenticeText => {ApprenticeText}");
                    }
                    if (printMask?.JourneymanText ?? true)
                    {
                        fg.AppendLine($"JourneymanText => {JourneymanText}");
                    }
                    if (printMask?.ExpertText ?? true)
                    {
                        fg.AppendLine($"ExpertText => {ExpertText}");
                    }
                    if (printMask?.MasterText ?? true)
                    {
                        fg.AppendLine($"MasterText => {MasterText}");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Skill;
            public Exception? Description;
            public Exception? Icon;
            public Exception? Action;
            public Exception? Attribute;
            public Exception? Specialization;
            public Exception? UseValueFirst;
            public Exception? UseValueSecond;
            public Exception? ApprenticeText;
            public Exception? JourneymanText;
            public Exception? ExpertText;
            public Exception? MasterText;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        return Skill;
                    case SkillRecord_FieldIndex.Description:
                        return Description;
                    case SkillRecord_FieldIndex.Icon:
                        return Icon;
                    case SkillRecord_FieldIndex.Action:
                        return Action;
                    case SkillRecord_FieldIndex.Attribute:
                        return Attribute;
                    case SkillRecord_FieldIndex.Specialization:
                        return Specialization;
                    case SkillRecord_FieldIndex.UseValueFirst:
                        return UseValueFirst;
                    case SkillRecord_FieldIndex.UseValueSecond:
                        return UseValueSecond;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        return ApprenticeText;
                    case SkillRecord_FieldIndex.JourneymanText:
                        return JourneymanText;
                    case SkillRecord_FieldIndex.ExpertText:
                        return ExpertText;
                    case SkillRecord_FieldIndex.MasterText:
                        return MasterText;
                    case SkillRecord_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        this.Skill = ex;
                        break;
                    case SkillRecord_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case SkillRecord_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case SkillRecord_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case SkillRecord_FieldIndex.Attribute:
                        this.Attribute = ex;
                        break;
                    case SkillRecord_FieldIndex.Specialization:
                        this.Specialization = ex;
                        break;
                    case SkillRecord_FieldIndex.UseValueFirst:
                        this.UseValueFirst = ex;
                        break;
                    case SkillRecord_FieldIndex.UseValueSecond:
                        this.UseValueSecond = ex;
                        break;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        this.ApprenticeText = ex;
                        break;
                    case SkillRecord_FieldIndex.JourneymanText:
                        this.JourneymanText = ex;
                        break;
                    case SkillRecord_FieldIndex.ExpertText:
                        this.ExpertText = ex;
                        break;
                    case SkillRecord_FieldIndex.MasterText:
                        this.MasterText = ex;
                        break;
                    case SkillRecord_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        this.Skill = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Attribute:
                        this.Attribute = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Specialization:
                        this.Specialization = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.UseValueFirst:
                        this.UseValueFirst = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.UseValueSecond:
                        this.UseValueSecond = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        this.ApprenticeText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.JourneymanText:
                        this.JourneymanText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.ExpertText:
                        this.ExpertText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.MasterText:
                        this.MasterText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Skill != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Action != null) return true;
                if (Attribute != null) return true;
                if (Specialization != null) return true;
                if (UseValueFirst != null) return true;
                if (UseValueSecond != null) return true;
                if (ApprenticeText != null) return true;
                if (JourneymanText != null) return true;
                if (ExpertText != null) return true;
                if (MasterText != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Skill => {Skill}");
                fg.AppendLine($"Description => {Description}");
                fg.AppendLine($"Icon => {Icon}");
                fg.AppendLine($"Action => {Action}");
                fg.AppendLine($"Attribute => {Attribute}");
                fg.AppendLine($"Specialization => {Specialization}");
                fg.AppendLine($"UseValueFirst => {UseValueFirst}");
                fg.AppendLine($"UseValueSecond => {UseValueSecond}");
                fg.AppendLine($"ApprenticeText => {ApprenticeText}");
                fg.AppendLine($"JourneymanText => {JourneymanText}");
                fg.AppendLine($"ExpertText => {ExpertText}");
                fg.AppendLine($"MasterText => {MasterText}");
                fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Skill = this.Skill.Combine(rhs.Skill);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Action = this.Action.Combine(rhs.Action);
                ret.Attribute = this.Attribute.Combine(rhs.Attribute);
                ret.Specialization = this.Specialization.Combine(rhs.Specialization);
                ret.UseValueFirst = this.UseValueFirst.Combine(rhs.UseValueFirst);
                ret.UseValueSecond = this.UseValueSecond.Combine(rhs.UseValueSecond);
                ret.ApprenticeText = this.ApprenticeText.Combine(rhs.ApprenticeText);
                ret.JourneymanText = this.JourneymanText.Combine(rhs.JourneymanText);
                ret.ExpertText = this.ExpertText.Combine(rhs.ExpertText);
                ret.MasterText = this.MasterText.Combine(rhs.MasterText);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Skill;
            public bool Description;
            public bool Icon;
            public bool Action;
            public bool Attribute;
            public bool Specialization;
            public bool UseValueFirst;
            public bool UseValueSecond;
            public bool ApprenticeText;
            public bool JourneymanText;
            public bool ExpertText;
            public bool MasterText;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Skill = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.Action = defaultOn;
                this.Attribute = defaultOn;
                this.Specialization = defaultOn;
                this.UseValueFirst = defaultOn;
                this.UseValueSecond = defaultOn;
                this.ApprenticeText = defaultOn;
                this.JourneymanText = defaultOn;
                this.ExpertText = defaultOn;
                this.MasterText = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Skill, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Action, null));
                ret.Add((Attribute, null));
                ret.Add((Specialization, null));
                ret.Add((UseValueFirst, null));
                ret.Add((UseValueSecond, null));
                ret.Add((ApprenticeText, null));
                ret.Add((JourneymanText, null));
                ret.Add((ExpertText, null));
                ret.Add((MasterText, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SkillRecord_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public SkillRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SkillRecord(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkillRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkillRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new SkillRecord CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static SkillRecord CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new SkillRecord();
            ((SkillRecordSetterCommon)((ISkillRecordGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkillRecordGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SkillRecord GetNew()
        {
            return new SkillRecord();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkillRecord :
        ISkillRecordGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ISkillRecordInternal>
    {
        new ActorValue? Skill { get; set; }
        new String? Description { get; set; }
        new String? Icon { get; set; }
        new ActorValue Action { get; set; }
        new ActorValue Attribute { get; set; }
        new Specialization Specialization { get; set; }
        new Single UseValueFirst { get; set; }
        new Single UseValueSecond { get; set; }
        new String? ApprenticeText { get; set; }
        new String? JourneymanText { get; set; }
        new String? ExpertText { get; set; }
        new String? MasterText { get; set; }
        new SkillRecord.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface ISkillRecordInternal :
        IOblivionMajorRecordInternal,
        ISkillRecord,
        ISkillRecordGetter
    {
    }

    public partial interface ISkillRecordGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ISkillRecordGetter>,
        IXmlItem,
        IBinaryItem
    {
        ActorValue? Skill { get; }
        String? Description { get; }
        String? Icon { get; }
        ActorValue Action { get; }
        ActorValue Attribute { get; }
        Specialization Specialization { get; }
        Single UseValueFirst { get; }
        Single UseValueSecond { get; }
        String? ApprenticeText { get; }
        String? JourneymanText { get; }
        String? ExpertText { get; }
        String? MasterText { get; }
        SkillRecord.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class SkillRecordMixIn
    {
        public static void Clear(this ISkillRecordInternal item)
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkillRecord.Mask<bool> GetEqualsMask(
            this ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkillRecordGetter item,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkillRecordGetter item,
            FileGeneration fg,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkillRecordGetter item,
            SkillRecord.Mask<bool?> checkMask)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkillRecord.Mask<bool> GetHasBeenSetMask(this ISkillRecordGetter item)
        {
            var ret = new SkillRecord.Mask<bool>(false);
            ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkillRecordGetter item,
            ISkillRecordGetter rhs)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkillRecordInternal lhs,
            ISkillRecordGetter rhs,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkillRecordInternal lhs,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            SkillRecord.TranslationMask? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            XElement node,
            SkillRecord.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            XElement node,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            string path,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            string path,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            Stream stream,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            Stream stream,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillRecordInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkillRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISkillRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISkillRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SkillRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Skill = 5,
        Description = 6,
        Icon = 7,
        Action = 8,
        Attribute = 9,
        Specialization = 10,
        UseValueFirst = 11,
        UseValueSecond = 12,
        ApprenticeText = 13,
        JourneymanText = 14,
        ExpertText = 15,
        MasterText = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class SkillRecord_Registration : ILoquiRegistration
    {
        public static readonly SkillRecord_Registration Instance = new SkillRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 42,
            version: 0);

        public const string GUID = "d6afa219-e0d6-4f44-83d4-2d0298897f4d";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(SkillRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillRecord.ErrorMask);

        public static readonly Type ClassType = typeof(SkillRecord);

        public static readonly Type GetterType = typeof(ISkillRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkillRecord);

        public static readonly Type? InternalSetterType = typeof(ISkillRecordInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SkillRecord";

        public const string Name = "SkillRecord";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILL":
                    return (ushort)SkillRecord_FieldIndex.Skill;
                case "DESCRIPTION":
                    return (ushort)SkillRecord_FieldIndex.Description;
                case "ICON":
                    return (ushort)SkillRecord_FieldIndex.Icon;
                case "ACTION":
                    return (ushort)SkillRecord_FieldIndex.Action;
                case "ATTRIBUTE":
                    return (ushort)SkillRecord_FieldIndex.Attribute;
                case "SPECIALIZATION":
                    return (ushort)SkillRecord_FieldIndex.Specialization;
                case "USEVALUEFIRST":
                    return (ushort)SkillRecord_FieldIndex.UseValueFirst;
                case "USEVALUESECOND":
                    return (ushort)SkillRecord_FieldIndex.UseValueSecond;
                case "APPRENTICETEXT":
                    return (ushort)SkillRecord_FieldIndex.ApprenticeText;
                case "JOURNEYMANTEXT":
                    return (ushort)SkillRecord_FieldIndex.JourneymanText;
                case "EXPERTTEXT":
                    return (ushort)SkillRecord_FieldIndex.ExpertText;
                case "MASTERTEXT":
                    return (ushort)SkillRecord_FieldIndex.MasterText;
                case "DATADATATYPESTATE":
                    return (ushort)SkillRecord_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return "Skill";
                case SkillRecord_FieldIndex.Description:
                    return "Description";
                case SkillRecord_FieldIndex.Icon:
                    return "Icon";
                case SkillRecord_FieldIndex.Action:
                    return "Action";
                case SkillRecord_FieldIndex.Attribute:
                    return "Attribute";
                case SkillRecord_FieldIndex.Specialization:
                    return "Specialization";
                case SkillRecord_FieldIndex.UseValueFirst:
                    return "UseValueFirst";
                case SkillRecord_FieldIndex.UseValueSecond:
                    return "UseValueSecond";
                case SkillRecord_FieldIndex.ApprenticeText:
                    return "ApprenticeText";
                case SkillRecord_FieldIndex.JourneymanText:
                    return "JourneymanText";
                case SkillRecord_FieldIndex.ExpertText:
                    return "ExpertText";
                case SkillRecord_FieldIndex.MasterText:
                    return "MasterText";
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                case SkillRecord_FieldIndex.Description:
                case SkillRecord_FieldIndex.Icon:
                case SkillRecord_FieldIndex.Action:
                case SkillRecord_FieldIndex.Attribute:
                case SkillRecord_FieldIndex.Specialization:
                case SkillRecord_FieldIndex.UseValueFirst:
                case SkillRecord_FieldIndex.UseValueSecond:
                case SkillRecord_FieldIndex.ApprenticeText:
                case SkillRecord_FieldIndex.JourneymanText:
                case SkillRecord_FieldIndex.ExpertText:
                case SkillRecord_FieldIndex.MasterText:
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
            switch (enu)
            {
                case SkillRecord_FieldIndex.Skill:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Description:
                    return typeof(String);
                case SkillRecord_FieldIndex.Icon:
                    return typeof(String);
                case SkillRecord_FieldIndex.Action:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Attribute:
                    return typeof(ActorValue);
                case SkillRecord_FieldIndex.Specialization:
                    return typeof(Specialization);
                case SkillRecord_FieldIndex.UseValueFirst:
                    return typeof(Single);
                case SkillRecord_FieldIndex.UseValueSecond:
                    return typeof(Single);
                case SkillRecord_FieldIndex.ApprenticeText:
                    return typeof(String);
                case SkillRecord_FieldIndex.JourneymanText:
                    return typeof(String);
                case SkillRecord_FieldIndex.ExpertText:
                    return typeof(String);
                case SkillRecord_FieldIndex.MasterText:
                    return typeof(String);
                case SkillRecord_FieldIndex.DATADataTypeState:
                    return typeof(SkillRecord.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkillRecordXmlWriteTranslation);
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType JNAM_HEADER = new RecordType("JNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SKIL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(SkillRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkillRecordSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly SkillRecordSetterCommon Instance = new SkillRecordSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkillRecordInternal item)
        {
            ClearPartial();
            item.Skill = default;
            item.Description = default;
            item.Icon = default;
            item.Action = default;
            item.Attribute = default;
            item.Specialization = default;
            item.UseValueFirst = default;
            item.UseValueSecond = default;
            item.ApprenticeText = default;
            item.JourneymanText = default;
            item.ExpertText = default;
            item.MasterText = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISkillRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= SkillRecord.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ISkillRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkillRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => SkillRecord_Registration.SKIL_HEADER;
        protected static void FillBinaryStructs(
            ISkillRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISkillRecordInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Skill = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Skill);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = SkillRecord.DATADataType.Has;
                    }
                    item.Action = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Attribute = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Specialization = EnumBinaryTranslation<Specialization>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.UseValueFirst = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.UseValueSecond = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.UseValueSecond);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ApprenticeText = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ApprenticeText);
                }
                case 0x4D414E4A: // JNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.JourneymanText = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.JourneymanText);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ExpertText = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ExpertText);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MasterText = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.MasterText);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ISkillRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ISkillRecordInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SkillRecordCommon : OblivionMajorRecordCommon
    {
        public new static readonly SkillRecordCommon Instance = new SkillRecordCommon();

        public SkillRecord.Mask<bool> GetEqualsMask(
            ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkillRecord.Mask<bool>(false);
            ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            SkillRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Skill = item.Skill == rhs.Skill;
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Action = item.Action == rhs.Action;
            ret.Attribute = item.Attribute == rhs.Attribute;
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.UseValueFirst = item.UseValueFirst.EqualsWithin(rhs.UseValueFirst);
            ret.UseValueSecond = item.UseValueSecond.EqualsWithin(rhs.UseValueSecond);
            ret.ApprenticeText = string.Equals(item.ApprenticeText, rhs.ApprenticeText);
            ret.JourneymanText = string.Equals(item.JourneymanText, rhs.JourneymanText);
            ret.ExpertText = string.Equals(item.ExpertText, rhs.ExpertText);
            ret.MasterText = string.Equals(item.MasterText, rhs.MasterText);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISkillRecordGetter item,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkillRecordGetter item,
            FileGeneration fg,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkillRecord =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkillRecord) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkillRecordGetter item,
            FileGeneration fg,
            SkillRecord.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Skill ?? true)
            {
                fg.AppendLine($"Skill => {item.Skill}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Action ?? true)
            {
                fg.AppendLine($"Action => {item.Action}");
            }
            if (printMask?.Attribute ?? true)
            {
                fg.AppendLine($"Attribute => {item.Attribute}");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendLine($"Specialization => {item.Specialization}");
            }
            if (printMask?.UseValueFirst ?? true)
            {
                fg.AppendLine($"UseValueFirst => {item.UseValueFirst}");
            }
            if (printMask?.UseValueSecond ?? true)
            {
                fg.AppendLine($"UseValueSecond => {item.UseValueSecond}");
            }
            if (printMask?.ApprenticeText ?? true)
            {
                fg.AppendLine($"ApprenticeText => {item.ApprenticeText}");
            }
            if (printMask?.JourneymanText ?? true)
            {
                fg.AppendLine($"JourneymanText => {item.JourneymanText}");
            }
            if (printMask?.ExpertText ?? true)
            {
                fg.AppendLine($"ExpertText => {item.ExpertText}");
            }
            if (printMask?.MasterText ?? true)
            {
                fg.AppendLine($"MasterText => {item.MasterText}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            ISkillRecordGetter item,
            SkillRecord.Mask<bool?> checkMask)
        {
            if (checkMask.Skill.HasValue && checkMask.Skill.Value != (item.Skill != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.ApprenticeText.HasValue && checkMask.ApprenticeText.Value != (item.ApprenticeText != null)) return false;
            if (checkMask.JourneymanText.HasValue && checkMask.JourneymanText.Value != (item.JourneymanText != null)) return false;
            if (checkMask.ExpertText.HasValue && checkMask.ExpertText.Value != (item.ExpertText != null)) return false;
            if (checkMask.MasterText.HasValue && checkMask.MasterText.Value != (item.MasterText != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISkillRecordGetter item,
            SkillRecord.Mask<bool> mask)
        {
            mask.Skill = (item.Skill != null);
            mask.Description = (item.Description != null);
            mask.Icon = (item.Icon != null);
            mask.Action = true;
            mask.Attribute = true;
            mask.Specialization = true;
            mask.UseValueFirst = true;
            mask.UseValueSecond = true;
            mask.ApprenticeText = (item.ApprenticeText != null);
            mask.JourneymanText = (item.JourneymanText != null);
            mask.ExpertText = (item.ExpertText != null);
            mask.MasterText = (item.MasterText != null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SkillRecord_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SkillRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkillRecordGetter? lhs,
            ISkillRecordGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Skill != rhs.Skill) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (lhs.Action != rhs.Action) return false;
            if (lhs.Attribute != rhs.Attribute) return false;
            if (lhs.Specialization != rhs.Specialization) return false;
            if (!lhs.UseValueFirst.EqualsWithin(rhs.UseValueFirst)) return false;
            if (!lhs.UseValueSecond.EqualsWithin(rhs.UseValueSecond)) return false;
            if (!string.Equals(lhs.ApprenticeText, rhs.ApprenticeText)) return false;
            if (!string.Equals(lhs.JourneymanText, rhs.JourneymanText)) return false;
            if (!string.Equals(lhs.ExpertText, rhs.ExpertText)) return false;
            if (!string.Equals(lhs.MasterText, rhs.MasterText)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISkillRecordGetter?)lhs,
                rhs: rhs as ISkillRecordGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISkillRecordGetter?)lhs,
                rhs: rhs as ISkillRecordGetter);
        }
        
        public virtual int GetHashCode(ISkillRecordGetter item)
        {
            int ret = 0;
            if (item.Skill.TryGet(out var Skillitem))
            {
                ret = HashHelper.GetHashCode(Skillitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Action).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Attribute).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UseValueFirst).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UseValueSecond).CombineHashCode(ret);
            if (item.ApprenticeText.TryGet(out var ApprenticeTextitem))
            {
                ret = HashHelper.GetHashCode(ApprenticeTextitem).CombineHashCode(ret);
            }
            if (item.JourneymanText.TryGet(out var JourneymanTextitem))
            {
                ret = HashHelper.GetHashCode(JourneymanTextitem).CombineHashCode(ret);
            }
            if (item.ExpertText.TryGet(out var ExpertTextitem))
            {
                ret = HashHelper.GetHashCode(ExpertTextitem).CombineHashCode(ret);
            }
            if (item.MasterText.TryGet(out var MasterTextitem))
            {
                ret = HashHelper.GetHashCode(MasterTextitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ISkillRecordGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISkillRecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SkillRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISkillRecordGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(SkillRecord obj, SkillRecord rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new SkillRecord(getNextFormKey());
            ret.DeepCopyIn((SkillRecord)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (SkillRecord)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class SkillRecordSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly SkillRecordSetterTranslationCommon Instance = new SkillRecordSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISkillRecordInternal item,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ISkillRecord item,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Skill) ?? true))
            {
                item.Skill = rhs.Skill;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Action) ?? true))
            {
                item.Action = rhs.Action;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Attribute) ?? true))
            {
                item.Attribute = rhs.Attribute;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Specialization) ?? true))
            {
                item.Specialization = rhs.Specialization;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueFirst) ?? true))
            {
                item.UseValueFirst = rhs.UseValueFirst;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueSecond) ?? true))
            {
                item.UseValueSecond = rhs.UseValueSecond;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ApprenticeText) ?? true))
            {
                item.ApprenticeText = rhs.ApprenticeText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.JourneymanText) ?? true))
            {
                item.JourneymanText = rhs.JourneymanText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ExpertText) ?? true))
            {
                item.ExpertText = rhs.ExpertText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.MasterText) ?? true))
            {
                item.MasterText = rhs.MasterText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkillRecordInternal)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkillRecord)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkillRecordInternal)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkillRecord)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            SkillRecord.TranslationMask? copyMask = null)
        {
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SkillRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static SkillRecord_Registration Registration => SkillRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkillRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SkillRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkillRecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillRecordXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SkillRecordXmlWriteTranslation Instance = new SkillRecordXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkillRecordGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Skill != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Skill) ?? true))
            {
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.Skill),
                    item: item.Skill,
                    fieldIndex: (int)SkillRecord_FieldIndex.Skill,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)SkillRecord_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)SkillRecord_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(SkillRecord.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Action) ?? true))
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.Action),
                        item: item.Action,
                        fieldIndex: (int)SkillRecord_FieldIndex.Action,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Attribute) ?? true))
                {
                    EnumXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.Attribute),
                        item: item.Attribute,
                        fieldIndex: (int)SkillRecord_FieldIndex.Attribute,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Specialization) ?? true))
                {
                    EnumXmlTranslation<Specialization>.Instance.Write(
                        node: node,
                        name: nameof(item.Specialization),
                        item: item.Specialization,
                        fieldIndex: (int)SkillRecord_FieldIndex.Specialization,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueFirst) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UseValueFirst),
                        item: item.UseValueFirst,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueFirst,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.UseValueSecond) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UseValueSecond),
                        item: item.UseValueSecond,
                        fieldIndex: (int)SkillRecord_FieldIndex.UseValueSecond,
                        errorMask: errorMask);
                }
            }
            if ((item.ApprenticeText != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ApprenticeText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ApprenticeText),
                    item: item.ApprenticeText,
                    fieldIndex: (int)SkillRecord_FieldIndex.ApprenticeText,
                    errorMask: errorMask);
            }
            if ((item.JourneymanText != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.JourneymanText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.JourneymanText),
                    item: item.JourneymanText,
                    fieldIndex: (int)SkillRecord_FieldIndex.JourneymanText,
                    errorMask: errorMask);
            }
            if ((item.ExpertText != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ExpertText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExpertText),
                    item: item.ExpertText,
                    fieldIndex: (int)SkillRecord_FieldIndex.ExpertText,
                    errorMask: errorMask);
            }
            if ((item.MasterText != null)
                && (translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.MasterText) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MasterText),
                    item: item.MasterText,
                    fieldIndex: (int)SkillRecord_FieldIndex.MasterText,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<SkillRecord.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)SkillRecord_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISkillRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SkillRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SkillRecord");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkillRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkillRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkillRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SkillRecordXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static SkillRecordXmlCreateTranslation Instance = new SkillRecordXmlCreateTranslation();

        public static void FillPublicXml(
            ISkillRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkillRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkillRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Skill":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Skill);
                    try
                    {
                        item.Skill = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Action":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Action);
                    try
                    {
                        item.Action = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= SkillRecord.DATADataType.Has;
                    break;
                case "Attribute":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Attribute);
                    try
                    {
                        item.Attribute = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Specialization":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.Specialization);
                    try
                    {
                        item.Specialization = EnumXmlTranslation<Specialization>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueFirst":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueFirst);
                    try
                    {
                        item.UseValueFirst = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueSecond":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.UseValueSecond);
                    try
                    {
                        item.UseValueSecond = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ApprenticeText":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.ApprenticeText);
                    try
                    {
                        item.ApprenticeText = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "JourneymanText":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.JourneymanText);
                    try
                    {
                        item.JourneymanText = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExpertText":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.ExpertText);
                    try
                    {
                        item.ExpertText = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterText":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.MasterText);
                    try
                    {
                        item.MasterText = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)SkillRecord_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<SkillRecord.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SkillRecordXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkillRecordGetter item,
            XElement node,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkillRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkillRecordGetter item,
            string path,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkillRecordGetter item,
            Stream stream,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillRecordBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SkillRecordBinaryWriteTranslation Instance = new SkillRecordBinaryWriteTranslation();

        public static void Write_Embedded(
            ISkillRecordGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ISkillRecordGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.WriteNullable(
                writer,
                item.Skill,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.INDX_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.DATADataTypeState.HasFlag(SkillRecord.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SkillRecord_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        writer,
                        item.Action,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        writer,
                        item.Attribute,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Specialization>.Instance.Write(
                        writer,
                        item.Specialization,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UseValueFirst);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.UseValueSecond);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ApprenticeText,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ANAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JourneymanText,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.JNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExpertText,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.ENAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MasterText,
                header: recordTypeConverter.ConvertToCustom(SkillRecord_Registration.MNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ISkillRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SkillRecord_Registration.SKIL_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISkillRecordGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISkillRecordGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISkillRecordGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkillRecordBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static SkillRecordBinaryCreateTranslation Instance = new SkillRecordBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SkillRecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillRecordBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ISkillRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static SkillRecord_Registration Registration => SkillRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkillRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkillRecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkillRecordGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SkillRecordXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkillRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkillRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkillRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Skill
        private int? _SkillLocation;
        private bool Skill_IsSet => _SkillLocation.HasValue;
        public ActorValue? Skill => Skill_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SkillLocation!.Value, _package.Meta)) : default(ActorValue?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _DATALocation;
        public SkillRecord.DATADataType DATADataTypeState { get; private set; }
        #region Action
        private int _ActionLocation => _DATALocation!.Value + 0x0;
        private bool _Action_IsSet => _DATALocation.HasValue;
        public ActorValue Action => _Action_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ActionLocation, 4)) : default;
        #endregion
        #region Attribute
        private int _AttributeLocation => _DATALocation!.Value + 0x4;
        private bool _Attribute_IsSet => _DATALocation.HasValue;
        public ActorValue Attribute => _Attribute_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_AttributeLocation, 4)) : default;
        #endregion
        #region Specialization
        private int _SpecializationLocation => _DATALocation!.Value + 0x8;
        private bool _Specialization_IsSet => _DATALocation.HasValue;
        public Specialization Specialization => _Specialization_IsSet ? (Specialization)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SpecializationLocation, 4)) : default;
        #endregion
        #region UseValueFirst
        private int _UseValueFirstLocation => _DATALocation!.Value + 0xC;
        private bool _UseValueFirst_IsSet => _DATALocation.HasValue;
        public Single UseValueFirst => _UseValueFirst_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_UseValueFirstLocation, 4)) : default;
        #endregion
        #region UseValueSecond
        private int _UseValueSecondLocation => _DATALocation!.Value + 0x10;
        private bool _UseValueSecond_IsSet => _DATALocation.HasValue;
        public Single UseValueSecond => _UseValueSecond_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_UseValueSecondLocation, 4)) : default;
        #endregion
        #region ApprenticeText
        private int? _ApprenticeTextLocation;
        public String? ApprenticeText => _ApprenticeTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ApprenticeTextLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region JourneymanText
        private int? _JourneymanTextLocation;
        public String? JourneymanText => _JourneymanTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _JourneymanTextLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region ExpertText
        private int? _ExpertTextLocation;
        public String? ExpertText => _ExpertTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ExpertTextLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region MasterText
        private int? _MasterTextLocation;
        public String? MasterText => _MasterTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MasterTextLocation.Value, _package.Meta)) : default(string?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SkillRecordBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SkillRecordBinaryOverlay SkillRecordFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new SkillRecordBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    _SkillLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Skill);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = SkillRecord.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.UseValueSecond);
                }
                case 0x4D414E41: // ANAM
                {
                    _ApprenticeTextLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ApprenticeText);
                }
                case 0x4D414E4A: // JNAM
                {
                    _JourneymanTextLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.JourneymanText);
                }
                case 0x4D414E45: // ENAM
                {
                    _ExpertTextLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.ExpertText);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MasterTextLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SkillRecord_FieldIndex.MasterText);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

