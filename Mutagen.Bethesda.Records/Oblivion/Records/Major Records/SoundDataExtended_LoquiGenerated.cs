/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoundDataExtended :
        SoundData,
        ISoundDataExtendedInternal,
        ILoquiObjectSetter<SoundDataExtended>,
        IEquatable<SoundDataExtended>,
        IEqualsMask
    {
        #region Ctor
        public SoundDataExtended()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StaticAttenuation
        public Single StaticAttenuation { get; set; }
        public static RangeFloat StaticAttenuation_Range = new RangeFloat(0f, 655.35f);
        #endregion
        #region StopTime
        public Single StopTime { get; set; }
        public static RangeFloat StopTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion
        #region StartTime
        public Single StartTime { get; set; }
        public static RangeFloat StartTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundDataExtendedMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISoundDataExtendedInternalGetter rhs)) return false;
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(SoundDataExtended obj)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => SoundDataExtendedXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundDataExtendedXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SoundDataExtended CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoundDataExtended CreateFromXml(
            XElement node,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoundDataExtended CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SoundDataExtended() : null;
                    break;
                default:
                    break;
            }
            var ret = new SoundDataExtended();
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoundDataExtended CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundDataExtended CreateFromXml(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundDataExtended CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoundDataExtended CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundDataExtended CreateFromXml(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundDataExtended CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SoundDataExtended_FieldIndex)index)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SoundDataExtended_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => SoundDataExtendedBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataExtendedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SoundDataExtended CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoundDataExtended CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new SoundDataExtended();
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundDataExtendedInternalGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static SoundDataExtended GetNew()
        {
            return new SoundDataExtended();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundDataExtended :
        ISoundDataExtendedInternalGetter,
        ISoundData,
        ILoquiObjectSetter<ISoundDataExtendedInternal>
    {
        new Single StaticAttenuation { get; set; }

        new Single StopTime { get; set; }

        new Single StartTime { get; set; }

    }

    public partial interface ISoundDataExtendedInternal :
        ISoundDataInternal,
        ISoundDataExtended,
        ISoundDataExtendedInternalGetter
    {
    }

    public partial interface ISoundDataExtendedGetter :
        ISoundDataGetter,
        ILoquiObject<ISoundDataExtendedInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region StaticAttenuation
        Single StaticAttenuation { get; }

        #endregion
        #region StopTime
        Single StopTime { get; }

        #endregion
        #region StartTime
        Single StartTime { get; }

        #endregion

    }

    public partial interface ISoundDataExtendedInternalGetter :
        ISoundDataInternalGetter,
        ISoundDataExtendedGetter
    {


    }
    #endregion

    #region Common MixIn
    public static class SoundDataExtendedMixIn
    {
        public static void Clear(this ISoundDataExtendedInternal item)
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static SoundDataExtended_Mask<bool> GetEqualsMask(
            this ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundDataExtendedInternalGetter item,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundDataExtendedInternalGetter item,
            FileGeneration fg,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoundDataExtendedInternalGetter item,
            SoundDataExtended_Mask<bool?> checkMask)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoundDataExtended_Mask<bool> GetHasBeenSetMask(this ISoundDataExtendedInternalGetter item)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataExtendedInternal lhs,
            ISoundDataExtendedInternalGetter rhs,
            SoundDataExtended_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataExtendedInternal lhs,
            ISoundDataExtendedInternalGetter rhs,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataExtendedInternal lhs,
            ISoundDataExtendedInternalGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            SoundDataExtended_TranslationMask copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            XElement node,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundDataExtended_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataExtendedInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundDataExtendedInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundDataExtendedInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this ISoundDataExtendedInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoundDataExtended_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Flags = 3,
        StaticAttenuation = 4,
        StopTime = 5,
        StartTime = 6,
    }
    #endregion

    #region Registration
    public class SoundDataExtended_Registration : ILoquiRegistration
    {
        public static readonly SoundDataExtended_Registration Instance = new SoundDataExtended_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 41,
            version: 0);

        public const string GUID = "3af22aab-9cdf-4fac-a210-9c06331d2180";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(SoundDataExtended_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDataExtended_ErrorMask);

        public static readonly Type ClassType = typeof(SoundDataExtended);

        public static readonly Type GetterType = typeof(ISoundDataExtendedGetter);

        public static readonly Type InternalGetterType = typeof(ISoundDataExtendedInternalGetter);

        public static readonly Type SetterType = typeof(ISoundDataExtended);

        public static readonly Type InternalSetterType = typeof(ISoundDataExtendedInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoundDataExtended";

        public const string Name = "SoundDataExtended";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STATICATTENUATION":
                    return (ushort)SoundDataExtended_FieldIndex.StaticAttenuation;
                case "STOPTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StopTime;
                case "STARTTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StartTime;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return "StaticAttenuation";
                case SoundDataExtended_FieldIndex.StopTime:
                    return "StopTime";
                case SoundDataExtended_FieldIndex.StartTime:
                    return "StartTime";
                default:
                    return SoundData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return typeof(Single);
                case SoundDataExtended_FieldIndex.StopTime:
                    return typeof(Single);
                case SoundDataExtended_FieldIndex.StartTime:
                    return typeof(Single);
                default:
                    return SoundData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoundDataExtendedXmlWriteTranslation);
        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNDX_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SoundDataExtendedBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundDataExtendedSetterCommon : SoundDataSetterCommon
    {
        public new static readonly SoundDataExtendedSetterCommon Instance = new SoundDataExtendedSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISoundDataExtendedInternal item)
        {
            ClearPartial();
            item.StaticAttenuation = default(Single);
            item.StopTime = default(Single);
            item.StartTime = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(ISoundDataInternal item)
        {
            Clear(item: (ISoundDataExtendedInternal)item);
        }
        
        public override object GetNew() => SoundDataExtended.GetNew();
        
        #region Xml Translation
        public new void CopyInFromXml(
            ISoundDataExtendedInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataExtendedXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISoundDataExtendedInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            SoundDataSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryCreateTranslation.FillBinaryStaticAttenuationCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryCreateTranslation.FillBinaryStopTimeCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryCreateTranslation.FillBinaryStartTimeCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        public new void CopyInFromBinary(
            ISoundDataExtendedInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(SoundDataExtended_Registration.SNDX_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SoundDataExtendedCommon : SoundDataCommon
    {
        public new static readonly SoundDataExtendedCommon Instance = new SoundDataExtendedCommon();

        public SoundDataExtended_Mask<bool> GetEqualsMask(
            ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            SoundDataExtended_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            ret.StopTime = item.StopTime.EqualsWithin(rhs.StopTime);
            ret.StartTime = item.StartTime.EqualsWithin(rhs.StartTime);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoundDataExtendedInternalGetter item,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundDataExtendedInternalGetter item,
            FileGeneration fg,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundDataExtended =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundDataExtended) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundDataExtendedInternalGetter item,
            FileGeneration fg,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            SoundDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.StaticAttenuation ?? true)
            {
                fg.AppendLine($"StaticAttenuation => {item.StaticAttenuation}");
            }
            if (printMask?.StopTime ?? true)
            {
                fg.AppendLine($"StopTime => {item.StopTime}");
            }
            if (printMask?.StartTime ?? true)
            {
                fg.AppendLine($"StartTime => {item.StartTime}");
            }
        }
        
        public bool HasBeenSet(
            ISoundDataExtendedInternalGetter item,
            SoundDataExtended_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISoundDataExtendedInternalGetter item,
            SoundDataExtended_Mask<bool> mask)
        {
            mask.StaticAttenuation = true;
            mask.StopTime = true;
            mask.StartTime = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SoundDataExtended_FieldIndex ConvertFieldIndex(SoundData_FieldIndex index)
        {
            switch (index)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.Flags:
                    return (SoundDataExtended_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDataExtendedInternalGetter lhs,
            ISoundDataExtendedInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            if (!lhs.StopTime.EqualsWithin(rhs.StopTime)) return false;
            if (!lhs.StartTime.EqualsWithin(rhs.StartTime)) return false;
            return true;
        }
        
        public override bool Equals(
            ISoundDataInternalGetter lhs,
            ISoundDataInternalGetter rhs)
        {
            return Equals(
                lhs: (ISoundDataExtendedInternalGetter)lhs,
                rhs: rhs as ISoundDataExtendedInternalGetter);
        }
        
        public virtual int GetHashCode(ISoundDataExtendedInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.StaticAttenuation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.StopTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.StartTime).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISoundDataInternalGetter item)
        {
            return GetHashCode(item: (ISoundDataExtendedInternalGetter)item);
        }
        
        #endregion
        
        
    }
    public partial class SoundDataExtendedSetterTranslationCommon : SoundDataSetterTranslationCommon
    {
        public new static readonly SoundDataExtendedSetterTranslationCommon Instance = new SoundDataExtendedSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StopTime) ?? true))
            {
                item.StopTime = rhs.StopTime;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StartTime) ?? true))
            {
                item.StartTime = rhs.StartTime;
            }
        }
        
        #endregion
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            SoundDataExtended_TranslationMask copyMask = null)
        {
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask copyMask = null)
        {
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SoundDataExtended
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static SoundDataExtended_Registration Registration => SoundDataExtended_Registration.Instance;
        protected override object CommonInstance() => SoundDataExtendedCommon.Instance;
        protected override object CommonSetterInstance()
        {
            return SoundDataExtendedSetterCommon.Instance;
        }
        protected override object CommonSetterTranslationInstance() => SoundDataExtendedSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataExtendedXmlWriteTranslation :
        SoundDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SoundDataExtendedXmlWriteTranslation Instance = new SoundDataExtendedXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoundDataExtendedInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SoundDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StaticAttenuation) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StaticAttenuation),
                    item: item.StaticAttenuation,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StopTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StopTime),
                    item: item.StopTime,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StopTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.StartTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartTime),
                    item: item.StartTime,
                    fieldIndex: (int)SoundDataExtended_FieldIndex.StartTime,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoundDataExtended");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoundDataExtended");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISoundDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SoundDataExtendedXmlCreateTranslation : SoundDataXmlCreateTranslation
    {
        public new readonly static SoundDataExtendedXmlCreateTranslation Instance = new SoundDataExtendedXmlCreateTranslation();

        public static void FillPublicXml(
            ISoundDataExtendedInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataExtendedXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoundDataExtendedInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "StaticAttenuation":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StaticAttenuation);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StaticAttenuationParse,
                            errorMask: errorMask))
                        {
                            item.StaticAttenuation = StaticAttenuationParse;
                        }
                        else
                        {
                            item.StaticAttenuation = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StopTime":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StopTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StopTimeParse,
                            errorMask: errorMask))
                        {
                            item.StopTime = StopTimeParse;
                        }
                        else
                        {
                            item.StopTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StartTime":
                    try
                    {
                        errorMask?.PushIndex((int)SoundDataExtended_FieldIndex.StartTime);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single StartTimeParse,
                            errorMask: errorMask))
                        {
                            item.StartTime = StartTimeParse;
                        }
                        else
                        {
                            item.StartTime = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SoundDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SoundDataExtendedXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoundDataExtendedInternalGetter item,
            XElement node,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true,
            SoundDataExtended_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataExtendedXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoundDataExtendedInternalGetter item,
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundDataExtendedInternalGetter item,
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class SoundDataExtended_Mask<T> : SoundData_Mask<T>, IMask<T>, IEquatable<SoundDataExtended_Mask<T>>
    {
        #region Ctors
        public SoundDataExtended_Mask()
        {
        }

        public SoundDataExtended_Mask(T initialValue)
        {
            this.StaticAttenuation = initialValue;
            this.StopTime = initialValue;
            this.StartTime = initialValue;
        }
        #endregion

        #region Members
        public T StaticAttenuation;
        public T StopTime;
        public T StartTime;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundDataExtended_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundDataExtended_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
            if (!object.Equals(this.StopTime, rhs.StopTime)) return false;
            if (!object.Equals(this.StartTime, rhs.StartTime)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.StaticAttenuation?.GetHashCode());
            ret = ret.CombineHashCode(this.StopTime?.GetHashCode());
            ret = ret.CombineHashCode(this.StartTime?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.StaticAttenuation)) return false;
            if (!eval(this.StopTime)) return false;
            if (!eval(this.StartTime)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SoundDataExtended_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundDataExtended_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundDataExtended_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.StaticAttenuation = eval(this.StaticAttenuation);
            obj.StopTime = eval(this.StopTime);
            obj.StartTime = eval(this.StartTime);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundDataExtended_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundDataExtended_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StaticAttenuation ?? true)
                {
                    fg.AppendLine($"StaticAttenuation => {StaticAttenuation}");
                }
                if (printMask?.StopTime ?? true)
                {
                    fg.AppendLine($"StopTime => {StopTime}");
                }
                if (printMask?.StartTime ?? true)
                {
                    fg.AppendLine($"StartTime => {StartTime}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundDataExtended_ErrorMask : SoundData_ErrorMask, IErrorMask<SoundDataExtended_ErrorMask>
    {
        #region Members
        public Exception StaticAttenuation;
        public Exception StopTime;
        public Exception StartTime;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return StaticAttenuation;
                case SoundDataExtended_FieldIndex.StopTime:
                    return StopTime;
                case SoundDataExtended_FieldIndex.StartTime:
                    return StartTime;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = ex;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = ex;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (StaticAttenuation != null) return true;
            if (StopTime != null) return true;
            if (StartTime != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundDataExtended_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"StaticAttenuation => {StaticAttenuation}");
            fg.AppendLine($"StopTime => {StopTime}");
            fg.AppendLine($"StartTime => {StartTime}");
        }
        #endregion

        #region Combine
        public SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask rhs)
        {
            var ret = new SoundDataExtended_ErrorMask();
            ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
            ret.StopTime = this.StopTime.Combine(rhs.StopTime);
            ret.StartTime = this.StartTime.Combine(rhs.StartTime);
            return ret;
        }
        public static SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask lhs, SoundDataExtended_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SoundDataExtended_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SoundDataExtended_ErrorMask();
        }
        #endregion

    }
    public class SoundDataExtended_TranslationMask : SoundData_TranslationMask
    {
        #region Members
        public bool StaticAttenuation;
        public bool StopTime;
        public bool StartTime;
        #endregion

        #region Ctors
        public SoundDataExtended_TranslationMask()
            : base()
        {
        }

        public SoundDataExtended_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.StaticAttenuation = defaultOn;
            this.StopTime = defaultOn;
            this.StartTime = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((StaticAttenuation, null));
            ret.Add((StopTime, null));
            ret.Add((StartTime, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataExtendedBinaryWriteTranslation :
        SoundDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoundDataExtendedBinaryWriteTranslation Instance = new SoundDataExtendedBinaryWriteTranslation();

        static partial void WriteBinaryStaticAttenuationCustom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryStaticAttenuation(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryStaticAttenuationCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryStopTimeCustom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryStopTime(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryStopTimeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryStartTimeCustom(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryStartTime(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryStartTimeCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            ISoundDataExtendedInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            SoundDataBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            SoundDataExtendedBinaryWriteTranslation.WriteBinaryStaticAttenuation(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryWriteTranslation.WriteBinaryStopTime(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataExtendedBinaryWriteTranslation.WriteBinaryStartTime(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SoundDataExtended_Registration.SNDX_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SoundDataExtendedBinaryCreateTranslation : SoundDataBinaryCreateTranslation
    {
        public new readonly static SoundDataExtendedBinaryCreateTranslation Instance = new SoundDataExtendedBinaryCreateTranslation();

        static partial void FillBinaryStaticAttenuationCustom(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryStaticAttenuationCustomPublic(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryStaticAttenuationCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryStopTimeCustom(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryStopTimeCustomPublic(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryStopTimeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryStartTimeCustom(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryStartTimeCustomPublic(
            MutagenFrame frame,
            ISoundDataExtendedInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryStartTimeCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SoundDataExtendedBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundDataExtendedInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoundDataExtended_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataExtendedBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundDataExtended_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataExtendedBinaryWrapper :
        SoundDataBinaryWrapper,
        ISoundDataExtendedInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static SoundDataExtended_Registration Registration => SoundDataExtended_Registration.Instance;
        protected override object CommonInstance() => SoundDataExtendedCommon.Instance;
        protected override object CommonSetterTranslationInstance() => SoundDataExtendedSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundDataExtendedInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => SoundDataExtendedXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundDataExtendedXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => SoundDataExtendedBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataExtendedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Single StaticAttenuation => GetStaticAttenuationCustom(location: 8);
        public Single StopTime => GetStopTimeCustom(location: 10);
        public Single StartTime => GetStartTimeCustom(location: 11);
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SoundDataExtendedBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SoundDataExtendedBinaryWrapper SoundDataExtendedFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new SoundDataExtendedBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

