/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoundData :
        ISoundDataInternal,
        ILoquiObjectSetter<SoundData>,
        IEquatable<SoundData>,
        IEqualsMask
    {
        #region Ctor
        public SoundData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MinimumAttenuationDistance
        public UInt16 MinimumAttenuationDistance { get; set; }
        #endregion
        #region MaximumAttenuationDistance
        public UInt16 MaximumAttenuationDistance { get; set; }
        #endregion
        #region FrequencyAdjustment
        public SByte FrequencyAdjustment { get; set; }
        #endregion
        #region Flags
        public SoundData.Flag Flags { get; set; }
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISoundDataInternalGetter rhs)) return false;
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(SoundData obj)
        {
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected virtual object XmlWriteTranslator => SoundDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SoundData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoundData CreateFromXml(
            XElement node,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoundData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SoundData() : null;
                    break;
                default:
                    break;
            }
            var ret = new SoundData();
            ((SoundDataSetterCommon)((ISoundDataGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoundData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundData CreateFromXml(
            string path,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoundData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundData CreateFromXml(
            Stream stream,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected virtual bool GetHasBeenSet(int index)
        {
            switch ((SoundData_FieldIndex)index)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected virtual object BinaryWriteTranslator => SoundDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SoundData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SoundData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoundData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new SoundData();
            ((SoundDataSetterCommon)((ISoundDataGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundDataInternalGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static SoundData GetNew()
        {
            return new SoundData();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundData :
        ISoundDataInternalGetter,
        ILoquiObjectSetter<ISoundDataInternal>
    {
        new UInt16 MinimumAttenuationDistance { get; set; }

        new UInt16 MaximumAttenuationDistance { get; set; }

        new SByte FrequencyAdjustment { get; set; }

        new SoundData.Flag Flags { get; set; }

    }

    public partial interface ISoundDataInternal :
        ISoundData,
        ISoundDataInternalGetter
    {
    }

    public partial interface ISoundDataGetter :
        ILoquiObject,
        ILoquiObject<ISoundDataInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region MinimumAttenuationDistance
        UInt16 MinimumAttenuationDistance { get; }

        #endregion
        #region MaximumAttenuationDistance
        UInt16 MaximumAttenuationDistance { get; }

        #endregion
        #region FrequencyAdjustment
        SByte FrequencyAdjustment { get; }

        #endregion
        #region Flags
        SoundData.Flag Flags { get; }

        #endregion

    }

    public partial interface ISoundDataInternalGetter : ISoundDataGetter
    {


    }
    #endregion

    #region Common MixIn
    public static class SoundDataMixIn
    {
        public static void Clear(this ISoundDataInternal item)
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static SoundData_Mask<bool> GetEqualsMask(
            this ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundDataInternalGetter item,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoundDataInternalGetter item,
            SoundData_Mask<bool?> checkMask)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoundData_Mask<bool> GetHasBeenSetMask(this ISoundDataInternalGetter item)
        {
            var ret = new SoundData_Mask<bool>();
            ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            SoundData_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            SoundData_TranslationMask copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundDataInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundDataInternal item,
            XElement node,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            string path,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            Stream stream,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundDataInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this ISoundDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoundData_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Flags = 3,
    }
    #endregion

    #region Registration
    public class SoundData_Registration : ILoquiRegistration
    {
        public static readonly SoundData_Registration Instance = new SoundData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 40,
            version: 0);

        public const string GUID = "4849cf00-7d46-4b82-bec2-e7eb7f54e563";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SoundData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundData_ErrorMask);

        public static readonly Type ClassType = typeof(SoundData);

        public static readonly Type GetterType = typeof(ISoundDataGetter);

        public static readonly Type InternalGetterType = typeof(ISoundDataInternalGetter);

        public static readonly Type SetterType = typeof(ISoundData);

        public static readonly Type InternalSetterType = typeof(ISoundDataInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoundData";

        public const string Name = "SoundData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MINIMUMATTENUATIONDISTANCE":
                    return (ushort)SoundData_FieldIndex.MinimumAttenuationDistance;
                case "MAXIMUMATTENUATIONDISTANCE":
                    return (ushort)SoundData_FieldIndex.MaximumAttenuationDistance;
                case "FREQUENCYADJUSTMENT":
                    return (ushort)SoundData_FieldIndex.FrequencyAdjustment;
                case "FLAGS":
                    return (ushort)SoundData_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return "MinimumAttenuationDistance";
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return "MaximumAttenuationDistance";
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return "FrequencyAdjustment";
                case SoundData_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                case SoundData_FieldIndex.FrequencyAdjustment:
                case SoundData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return typeof(UInt16);
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return typeof(UInt16);
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return typeof(SByte);
                case SoundData_FieldIndex.Flags:
                    return typeof(SoundData.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoundDataXmlWriteTranslation);
        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        SNDD_HEADER,
                        SNDX_HEADER
                    })
            );
        });
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SoundDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundDataSetterCommon
    {
        public static readonly SoundDataSetterCommon Instance = new SoundDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISoundDataInternal item)
        {
            ClearPartial();
            item.MinimumAttenuationDistance = default(UInt16);
            item.MaximumAttenuationDistance = default(UInt16);
            item.FrequencyAdjustment = default(SByte);
            item.Flags = default(SoundData.Flag);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ISoundDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISoundDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            SoundDataBinaryCreateTranslation.FillBinaryMinimumAttenuationDistanceCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataBinaryCreateTranslation.FillBinaryMaximumAttenuationDistanceCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            item.FrequencyAdjustment = frame.ReadInt8();
            frame.Position += 1;
            if (EnumBinaryTranslation<SoundData.Flag>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out SoundData.Flag FlagsParse))
            {
                item.Flags = FlagsParse;
            }
            else
            {
                item.Flags = default(SoundData.Flag);
            }
        }
        
        public void CopyInFromBinary(
            ISoundDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(SoundData_Registration.SNDD_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SoundDataCommon
    {
        public static readonly SoundDataCommon Instance = new SoundDataCommon();

        public SoundData_Mask<bool> GetEqualsMask(
            ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundData_Mask<bool>();
            ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            SoundData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MinimumAttenuationDistance = item.MinimumAttenuationDistance == rhs.MinimumAttenuationDistance;
            ret.MaximumAttenuationDistance = item.MaximumAttenuationDistance == rhs.MaximumAttenuationDistance;
            ret.FrequencyAdjustment = item.FrequencyAdjustment == rhs.FrequencyAdjustment;
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string ToString(
            ISoundDataInternalGetter item,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundDataInternalGetter item,
            FileGeneration fg,
            string name = null,
            SoundData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundData =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundDataInternalGetter item,
            FileGeneration fg,
            SoundData_Mask<bool> printMask = null)
        {
            if (printMask?.MinimumAttenuationDistance ?? true)
            {
                fg.AppendLine($"MinimumAttenuationDistance => {item.MinimumAttenuationDistance}");
            }
            if (printMask?.MaximumAttenuationDistance ?? true)
            {
                fg.AppendLine($"MaximumAttenuationDistance => {item.MaximumAttenuationDistance}");
            }
            if (printMask?.FrequencyAdjustment ?? true)
            {
                fg.AppendLine($"FrequencyAdjustment => {item.FrequencyAdjustment}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
        }
        
        public bool HasBeenSet(
            ISoundDataInternalGetter item,
            SoundData_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISoundDataInternalGetter item,
            SoundData_Mask<bool> mask)
        {
            mask.MinimumAttenuationDistance = true;
            mask.MaximumAttenuationDistance = true;
            mask.FrequencyAdjustment = true;
            mask.Flags = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDataInternalGetter lhs,
            ISoundDataInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.MinimumAttenuationDistance != rhs.MinimumAttenuationDistance) return false;
            if (lhs.MaximumAttenuationDistance != rhs.MaximumAttenuationDistance) return false;
            if (lhs.FrequencyAdjustment != rhs.FrequencyAdjustment) return false;
            if (lhs.Flags != rhs.Flags) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISoundDataInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.MinimumAttenuationDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumAttenuationDistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FrequencyAdjustment).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return SoundData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISoundDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class SoundDataSetterTranslationCommon
    {
        public static readonly SoundDataSetterTranslationCommon Instance = new SoundDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyFieldsFrom(
            ISoundDataInternal item,
            ISoundDataInternalGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            DeepCopyFieldsFrom(
                (ISoundData)item,
                (ISoundDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public virtual void DeepCopyFieldsFrom(
            ISoundData item,
            ISoundDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.MinimumAttenuationDistance) ?? true))
            {
                item.MinimumAttenuationDistance = rhs.MinimumAttenuationDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.MaximumAttenuationDistance) ?? true))
            {
                item.MaximumAttenuationDistance = rhs.MaximumAttenuationDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.FrequencyAdjustment) ?? true))
            {
                item.FrequencyAdjustment = rhs.FrequencyAdjustment;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            SoundData_TranslationMask copyMask = null)
        {
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask copyMask = null)
        {
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SoundData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundData_Registration.Instance;
        public static SoundData_Registration Registration => SoundData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SoundDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return SoundDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SoundDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SoundDataXmlWriteTranslation Instance = new SoundDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoundDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SoundData_FieldIndex.MinimumAttenuationDistance) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinimumAttenuationDistance),
                    item: item.MinimumAttenuationDistance,
                    fieldIndex: (int)SoundData_FieldIndex.MinimumAttenuationDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundData_FieldIndex.MaximumAttenuationDistance) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaximumAttenuationDistance),
                    item: item.MaximumAttenuationDistance,
                    fieldIndex: (int)SoundData_FieldIndex.MaximumAttenuationDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundData_FieldIndex.FrequencyAdjustment) ?? true))
            {
                Int8XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FrequencyAdjustment),
                    item: item.FrequencyAdjustment,
                    fieldIndex: (int)SoundData_FieldIndex.FrequencyAdjustment,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoundData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<SoundData.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)SoundData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            ISoundDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoundData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoundData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISoundDataInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISoundDataInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ISoundDataInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SoundDataXmlCreateTranslation
    {
        public readonly static SoundDataXmlCreateTranslation Instance = new SoundDataXmlCreateTranslation();

        public static void FillPublicXml(
            ISoundDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoundDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MinimumAttenuationDistance":
                    try
                    {
                        errorMask?.PushIndex((int)SoundData_FieldIndex.MinimumAttenuationDistance);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 MinimumAttenuationDistanceParse,
                            errorMask: errorMask))
                        {
                            item.MinimumAttenuationDistance = MinimumAttenuationDistanceParse;
                        }
                        else
                        {
                            item.MinimumAttenuationDistance = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumAttenuationDistance":
                    try
                    {
                        errorMask?.PushIndex((int)SoundData_FieldIndex.MaximumAttenuationDistance);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 MaximumAttenuationDistanceParse,
                            errorMask: errorMask))
                        {
                            item.MaximumAttenuationDistance = MaximumAttenuationDistanceParse;
                        }
                        else
                        {
                            item.MaximumAttenuationDistance = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FrequencyAdjustment":
                    try
                    {
                        errorMask?.PushIndex((int)SoundData_FieldIndex.FrequencyAdjustment);
                        if (Int8XmlTranslation.Instance.Parse(
                            node: node,
                            item: out SByte FrequencyAdjustmentParse,
                            errorMask: errorMask))
                        {
                            item.FrequencyAdjustment = FrequencyAdjustmentParse;
                        }
                        else
                        {
                            item.FrequencyAdjustment = default(SByte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)SoundData_FieldIndex.Flags);
                        if (EnumXmlTranslation<SoundData.Flag>.Instance.Parse(
                            node: node,
                            item: out SoundData.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(SoundData.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SoundDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            XElement node,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true,
            SoundData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            string path,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            Stream stream,
            out SoundData_ErrorMask errorMask,
            SoundData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((SoundDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            XElement node,
            string name = null,
            SoundData_TranslationMask translationMask = null)
        {
            ((SoundDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SoundDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundDataInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SoundDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class SoundData_Mask<T> : IMask<T>, IEquatable<SoundData_Mask<T>>
    {
        #region Ctors
        public SoundData_Mask()
        {
        }

        public SoundData_Mask(T initialValue)
        {
            this.MinimumAttenuationDistance = initialValue;
            this.MaximumAttenuationDistance = initialValue;
            this.FrequencyAdjustment = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public T MinimumAttenuationDistance;
        public T MaximumAttenuationDistance;
        public T FrequencyAdjustment;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MinimumAttenuationDistance, rhs.MinimumAttenuationDistance)) return false;
            if (!object.Equals(this.MaximumAttenuationDistance, rhs.MaximumAttenuationDistance)) return false;
            if (!object.Equals(this.FrequencyAdjustment, rhs.FrequencyAdjustment)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MinimumAttenuationDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumAttenuationDistance?.GetHashCode());
            ret = ret.CombineHashCode(this.FrequencyAdjustment?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MinimumAttenuationDistance)) return false;
            if (!eval(this.MaximumAttenuationDistance)) return false;
            if (!eval(this.FrequencyAdjustment)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public SoundData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundData_Mask<R> obj, Func<T, R> eval)
        {
            obj.MinimumAttenuationDistance = eval(this.MinimumAttenuationDistance);
            obj.MaximumAttenuationDistance = eval(this.MaximumAttenuationDistance);
            obj.FrequencyAdjustment = eval(this.FrequencyAdjustment);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MinimumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MinimumAttenuationDistance => {MinimumAttenuationDistance}");
                }
                if (printMask?.MaximumAttenuationDistance ?? true)
                {
                    fg.AppendLine($"MaximumAttenuationDistance => {MaximumAttenuationDistance}");
                }
                if (printMask?.FrequencyAdjustment ?? true)
                {
                    fg.AppendLine($"FrequencyAdjustment => {FrequencyAdjustment}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundData_ErrorMask : IErrorMask, IErrorMask<SoundData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MinimumAttenuationDistance;
        public Exception MaximumAttenuationDistance;
        public Exception FrequencyAdjustment;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return MinimumAttenuationDistance;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return MaximumAttenuationDistance;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return FrequencyAdjustment;
                case SoundData_FieldIndex.Flags:
                    return Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    this.MinimumAttenuationDistance = ex;
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    this.MaximumAttenuationDistance = ex;
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    this.FrequencyAdjustment = ex;
                    break;
                case SoundData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
            switch (enu)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    this.MinimumAttenuationDistance = (Exception)obj;
                    break;
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    this.MaximumAttenuationDistance = (Exception)obj;
                    break;
                case SoundData_FieldIndex.FrequencyAdjustment:
                    this.FrequencyAdjustment = (Exception)obj;
                    break;
                case SoundData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (MinimumAttenuationDistance != null) return true;
            if (MaximumAttenuationDistance != null) return true;
            if (FrequencyAdjustment != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MinimumAttenuationDistance => {MinimumAttenuationDistance}");
            fg.AppendLine($"MaximumAttenuationDistance => {MaximumAttenuationDistance}");
            fg.AppendLine($"FrequencyAdjustment => {FrequencyAdjustment}");
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public SoundData_ErrorMask Combine(SoundData_ErrorMask rhs)
        {
            var ret = new SoundData_ErrorMask();
            ret.MinimumAttenuationDistance = this.MinimumAttenuationDistance.Combine(rhs.MinimumAttenuationDistance);
            ret.MaximumAttenuationDistance = this.MaximumAttenuationDistance.Combine(rhs.MaximumAttenuationDistance);
            ret.FrequencyAdjustment = this.FrequencyAdjustment.Combine(rhs.FrequencyAdjustment);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static SoundData_ErrorMask Combine(SoundData_ErrorMask lhs, SoundData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SoundData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SoundData_ErrorMask();
        }
        #endregion

    }
    public class SoundData_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool MinimumAttenuationDistance;
        public bool MaximumAttenuationDistance;
        public bool FrequencyAdjustment;
        public bool Flags;
        #endregion

        #region Ctors
        public SoundData_TranslationMask()
        {
        }

        public SoundData_TranslationMask(bool defaultOn)
        {
            this.MinimumAttenuationDistance = defaultOn;
            this.MaximumAttenuationDistance = defaultOn;
            this.FrequencyAdjustment = defaultOn;
            this.Flags = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MinimumAttenuationDistance, null));
            ret.Add((MaximumAttenuationDistance, null));
            ret.Add((FrequencyAdjustment, null));
            ret.Add((Flags, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SoundDataBinaryWriteTranslation Instance = new SoundDataBinaryWriteTranslation();

        static partial void WriteBinaryMinimumAttenuationDistanceCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryMinimumAttenuationDistance(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryMinimumAttenuationDistanceCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryMaximumAttenuationDistanceCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryMaximumAttenuationDistance(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryMaximumAttenuationDistanceCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            ISoundDataInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            SoundDataBinaryWriteTranslation.WriteBinaryMinimumAttenuationDistance(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            SoundDataBinaryWriteTranslation.WriteBinaryMaximumAttenuationDistance(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            writer.Write(item.FrequencyAdjustment);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Marker);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundData.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
        }

        public virtual void Write(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SoundData_Registration.SNDD_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISoundDataInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SoundDataBinaryCreateTranslation
    {
        public readonly static SoundDataBinaryCreateTranslation Instance = new SoundDataBinaryCreateTranslation();

        static partial void FillBinaryMinimumAttenuationDistanceCustom(
            MutagenFrame frame,
            ISoundDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryMinimumAttenuationDistanceCustomPublic(
            MutagenFrame frame,
            ISoundDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryMinimumAttenuationDistanceCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryMaximumAttenuationDistanceCustom(
            MutagenFrame frame,
            ISoundDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryMaximumAttenuationDistanceCustomPublic(
            MutagenFrame frame,
            ISoundDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryMaximumAttenuationDistanceCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SoundDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoundData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ISoundDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ISoundDataInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((SoundDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundDataBinaryWrapper :
        BinaryWrapper,
        ISoundDataInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundData_Registration.Instance;
        public static SoundData_Registration Registration => SoundData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SoundDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SoundDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundDataInternalGetter)rhs, include);

        protected virtual object XmlWriteTranslator => SoundDataXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected virtual object BinaryWriteTranslator => SoundDataBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public UInt16 MinimumAttenuationDistance => GetMinimumAttenuationDistanceCustom(location: 0);
        public UInt16 MaximumAttenuationDistance => GetMaximumAttenuationDistanceCustom(location: 1);
        public SByte FrequencyAdjustment => (sbyte)_data.Span.Slice(2, 1)[0];
        public SoundData.Flag Flags => (SoundData.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SoundDataBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SoundDataBinaryWrapper SoundDataFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new SoundDataBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

