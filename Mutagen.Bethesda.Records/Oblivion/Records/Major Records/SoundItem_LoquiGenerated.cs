/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoundItem :
        ISoundItem,
        ILoquiObjectSetter<SoundItem>,
        IEquatable<SoundItem>,
        IEqualsMask
    {
        #region Ctor
        public SoundItem()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Sound> _Sound = new FormIDSetLink<Sound>();
        public IFormIDSetLink<Sound> Sound => this._Sound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<ISoundGetter> ISoundItemGetter.Sound => this.Sound;
        #endregion
        #region Chance
        public bool Chance_IsSet
        {
            get => _hasBeenSetTracker[(int)SoundItem_FieldIndex.Chance];
            set => _hasBeenSetTracker[(int)SoundItem_FieldIndex.Chance] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ISoundItemGetter.Chance_IsSet => Chance_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Chance;
        public Byte Chance
        {
            get => this._Chance;
            set => Chance_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte ISoundItemGetter.Chance => this.Chance;
        public void Chance_Set(
            Byte value,
            bool markSet = true)
        {
            _Chance = value;
            _hasBeenSetTracker[(int)SoundItem_FieldIndex.Chance] = markSet;
        }
        public void Chance_Unset()
        {
            this.Chance_Set(default(Byte), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISoundItemGetter rhs)) return false;
            return ((SoundItemCommon)((ISoundItemGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(SoundItem obj)
        {
            return ((SoundItemCommon)((ISoundItemGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundItemCommon)((ISoundItemGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SoundItemXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundItemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SoundItem CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoundItem CreateFromXml(
            XElement node,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoundItem CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SoundItem() : null;
                    break;
                default:
                    break;
            }
            var ret = new SoundItem();
            ((SoundItemSetterCommon)((ISoundItemGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoundItem CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundItem CreateFromXml(
            string path,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundItem CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoundItem CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SoundItem CreateFromXml(
            Stream stream,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundItem CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((SoundItem_FieldIndex)index)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => SoundItemCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SoundItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static SoundItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SoundItem CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new SoundItem();
            ((SoundItemSetterCommon)((ISoundItemGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundItemGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoundItemSetterCommon)((ISoundItemGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static SoundItem GetNew()
        {
            return new SoundItem();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundItem :
        ISoundItemGetter,
        ILoquiObjectSetter<ISoundItem>
    {
        new IFormIDSetLink<Sound> Sound { get; }
        new Byte Chance { get; set; }
        new bool Chance_IsSet { get; set; }
        void Chance_Set(Byte value, bool hasBeenSet = true);
        void Chance_Unset();

    }

    public partial interface ISoundItemGetter :
        ILoquiObject,
        ILoquiObject<ISoundItemGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Sound
        IFormIDSetLinkGetter<ISoundGetter> Sound { get; }
        #endregion
        #region Chance
        Byte Chance { get; }
        bool Chance_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class SoundItemMixIn
    {
        public static void Clear(this ISoundItem item)
        {
            ((SoundItemSetterCommon)((ISoundItemGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static SoundItem_Mask<bool> GetEqualsMask(
            this ISoundItemGetter item,
            ISoundItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundItemGetter item,
            string name = null,
            SoundItem_Mask<bool> printMask = null)
        {
            return ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundItemGetter item,
            FileGeneration fg,
            string name = null,
            SoundItem_Mask<bool> printMask = null)
        {
            ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoundItemGetter item,
            SoundItem_Mask<bool?> checkMask)
        {
            return ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoundItem_Mask<bool> GetHasBeenSetMask(this ISoundItemGetter item)
        {
            var ret = new SoundItem_Mask<bool>();
            ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoundItemGetter item,
            ISoundItemGetter rhs)
        {
            return ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundItem lhs,
            ISoundItemGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundItem lhs,
            ISoundItemGetter rhs,
            SoundItem_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundItem lhs,
            ISoundItemGetter rhs,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundItemSetterTranslationCommon)((ISoundItemGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ISoundItem lhs,
            ISoundItemGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((SoundItemSetterTranslationCommon)((ISoundItemGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoundItem DeepCopy(
            this ISoundItemGetter item,
            SoundItem_TranslationMask copyMask = null)
        {
            return ((SoundItemSetterTranslationCommon)((ISoundItemGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundItem DeepCopy(
            this ISoundItemGetter item,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask copyMask = null)
        {
            return ((SoundItemSetterTranslationCommon)((ISoundItemGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundItem DeepCopy(
            this ISoundItemGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((SoundItemSetterTranslationCommon)((ISoundItemGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundItem item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundItem item,
            XElement node,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((SoundItemSetterCommon)((ISoundItemGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            string path,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            string path,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            string path,
            ErrorMaskBuilder errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SoundItem_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            Stream stream,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundItem item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            SoundItem_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundItem item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundItem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this ISoundItem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundItemSetterCommon)((ISoundItemGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoundItem_FieldIndex
    {
        Sound = 0,
        Chance = 1,
    }
    #endregion

    #region Registration
    public class SoundItem_Registration : ILoquiRegistration
    {
        public static readonly SoundItem_Registration Instance = new SoundItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 91,
            version: 0);

        public const string GUID = "bed98725-1f58-4853-aba1-311221e7aa4e";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(SoundItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundItem_ErrorMask);

        public static readonly Type ClassType = typeof(SoundItem);

        public static readonly Type GetterType = typeof(ISoundItemGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundItem);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoundItem";

        public const string Name = "SoundItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SOUND":
                    return (ushort)SoundItem_FieldIndex.Sound;
                case "CHANCE":
                    return (ushort)SoundItem_FieldIndex.Chance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                    return "Sound";
                case SoundItem_FieldIndex.Chance:
                    return "Chance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                case SoundItem_FieldIndex.Chance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                    return typeof(IFormIDSetLink<Sound>);
                case SoundItem_FieldIndex.Chance:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoundItemXmlWriteTranslation);
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        CSDI_HEADER,
                        CSDC_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(SoundItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundItemSetterCommon
    {
        public static readonly SoundItemSetterCommon Instance = new SoundItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundItem item)
        {
            ClearPartial();
            item.Sound.Unset();
            item.Chance_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ISoundItem item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISoundItem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISoundItem item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x49445343: // CSDI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SoundItem_FieldIndex.Sound) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: out FormKey SoundParse))
                    {
                        item.Sound.FormKey = SoundParse;
                    }
                    else
                    {
                        item.Sound.FormKey = FormKey.NULL;
                    }
                    return TryGet<int?>.Succeed((int)SoundItem_FieldIndex.Sound);
                }
                case 0x43445343: // CSDC
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SoundItem_FieldIndex.Chance) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Chance = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)SoundItem_FieldIndex.Chance);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ISoundItem item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SoundItemCommon
    {
        public static readonly SoundItemCommon Instance = new SoundItemCommon();

        public SoundItem_Mask<bool> GetEqualsMask(
            ISoundItemGetter item,
            ISoundItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundItem_Mask<bool>();
            ((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundItemGetter item,
            ISoundItemGetter rhs,
            SoundItem_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sound = object.Equals(item.Sound, rhs.Sound);
            ret.Chance = item.Chance_IsSet == rhs.Chance_IsSet && item.Chance == rhs.Chance;
        }
        
        public string ToString(
            ISoundItemGetter item,
            string name = null,
            SoundItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundItemGetter item,
            FileGeneration fg,
            string name = null,
            SoundItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundItem =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundItem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundItemGetter item,
            FileGeneration fg,
            SoundItem_Mask<bool> printMask = null)
        {
            if (printMask?.Sound ?? true)
            {
                fg.AppendLine($"Sound => {item.Sound}");
            }
            if (printMask?.Chance ?? true)
            {
                fg.AppendLine($"Chance => {item.Chance}");
            }
        }
        
        public bool HasBeenSet(
            ISoundItemGetter item,
            SoundItem_Mask<bool?> checkMask)
        {
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != item.Sound.HasBeenSet) return false;
            if (checkMask.Chance.HasValue && checkMask.Chance.Value != item.Chance_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISoundItemGetter item,
            SoundItem_Mask<bool> mask)
        {
            mask.Sound = item.Sound.HasBeenSet;
            mask.Chance = item.Chance_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundItemGetter lhs,
            ISoundItemGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Sound.HasBeenSet != rhs.Sound.HasBeenSet) return false;
            if (lhs.Sound.HasBeenSet)
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if (lhs.Chance_IsSet != rhs.Chance_IsSet) return false;
            if (lhs.Chance_IsSet)
            {
                if (lhs.Chance != rhs.Chance) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISoundItemGetter item)
        {
            int ret = 0;
            if (item.Sound.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Sound).CombineHashCode(ret);
            }
            if (item.Chance_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Chance).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISoundItemGetter obj)
        {
            yield return obj.Sound;
            yield break;
        }
        
        #endregion
        
    }
    public partial class SoundItemSetterTranslationCommon
    {
        public static readonly SoundItemSetterTranslationCommon Instance = new SoundItemSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ISoundItem item,
            ISoundItemGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundItem_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)SoundItem_FieldIndex.Sound);
                try
                {
                    item.Sound.SetToFormKey(rhs: rhs.Sound);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundItem_FieldIndex.Chance) ?? true))
            {
                errorMask?.PushIndex((int)SoundItem_FieldIndex.Chance);
                try
                {
                    if (rhs.Chance_IsSet)
                    {
                        item.Chance = rhs.Chance;
                    }
                    else
                    {
                        item.Chance_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SoundItem DeepCopy(
            ISoundItemGetter item,
            SoundItem_TranslationMask copyMask = null)
        {
            SoundItem ret = (SoundItem)((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundItem DeepCopy(
            ISoundItemGetter item,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask copyMask = null)
        {
            SoundItem ret = (SoundItem)((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundItem DeepCopy(
            ISoundItemGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            SoundItem ret = (SoundItem)((SoundItemCommon)((ISoundItemGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SoundItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundItem_Registration.Instance;
        public static SoundItem_Registration Registration => SoundItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundItemXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SoundItemXmlWriteTranslation Instance = new SoundItemXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoundItemGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Sound.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)SoundItem_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound?.FormKey,
                    fieldIndex: (int)SoundItem_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if (item.Chance_IsSet
                && (translationMask?.GetShouldTranslate((int)SoundItem_FieldIndex.Chance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Chance),
                    item: item.Chance,
                    fieldIndex: (int)SoundItem_FieldIndex.Chance,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISoundItemGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoundItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoundItem");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISoundItemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISoundItemGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ISoundItemGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SoundItemXmlCreateTranslation
    {
        public readonly static SoundItemXmlCreateTranslation Instance = new SoundItemXmlCreateTranslation();

        public static void FillPublicXml(
            ISoundItem item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoundItem item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Sound":
                    try
                    {
                        errorMask?.PushIndex((int)SoundItem_FieldIndex.Sound);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey SoundParse,
                            errorMask: errorMask))
                        {
                            item.Sound.FormKey = SoundParse;
                        }
                        else
                        {
                            item.Sound.FormKey = FormKey.NULL;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Chance":
                    try
                    {
                        errorMask?.PushIndex((int)SoundItem_FieldIndex.Chance);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ChanceParse,
                            errorMask: errorMask))
                        {
                            item.Chance = ChanceParse;
                        }
                        else
                        {
                            item.Chance = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SoundItemXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoundItemGetter item,
            XElement node,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true,
            SoundItem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            string path,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            Stream stream,
            out SoundItem_ErrorMask errorMask,
            SoundItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((SoundItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            XElement node,
            string name = null,
            SoundItem_TranslationMask translationMask = null)
        {
            ((SoundItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SoundItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundItemGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SoundItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class SoundItem_Mask<T> : IMask<T>, IEquatable<SoundItem_Mask<T>>
    {
        #region Ctors
        public SoundItem_Mask()
        {
        }

        public SoundItem_Mask(T initialValue)
        {
            this.Sound = initialValue;
            this.Chance = initialValue;
        }
        #endregion

        #region Members
        public T Sound;
        public T Chance;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.Chance, rhs.Chance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.Chance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sound)) return false;
            if (!eval(this.Chance)) return false;
            return true;
        }
        #endregion

        #region Translate
        public SoundItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundItem_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sound = eval(this.Sound);
            obj.Chance = eval(this.Chance);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.Chance ?? true)
                {
                    fg.AppendLine($"Chance => {Chance}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundItem_ErrorMask : IErrorMask, IErrorMask<SoundItem_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sound;
        public Exception Chance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                    return Sound;
                case SoundItem_FieldIndex.Chance:
                    return Chance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case SoundItem_FieldIndex.Chance:
                    this.Chance = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            SoundItem_FieldIndex enu = (SoundItem_FieldIndex)index;
            switch (enu)
            {
                case SoundItem_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case SoundItem_FieldIndex.Chance:
                    this.Chance = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sound != null) return true;
            if (Chance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"Chance => {Chance}");
        }
        #endregion

        #region Combine
        public SoundItem_ErrorMask Combine(SoundItem_ErrorMask rhs)
        {
            var ret = new SoundItem_ErrorMask();
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.Chance = this.Chance.Combine(rhs.Chance);
            return ret;
        }
        public static SoundItem_ErrorMask Combine(SoundItem_ErrorMask lhs, SoundItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SoundItem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SoundItem_ErrorMask();
        }
        #endregion

    }
    public class SoundItem_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Sound;
        public bool Chance;
        #endregion

        #region Ctors
        public SoundItem_TranslationMask()
        {
        }

        public SoundItem_TranslationMask(bool defaultOn)
        {
            this.Sound = defaultOn;
            this.Chance = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Sound, null));
            ret.Add((Chance, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SoundItemBinaryWriteTranslation Instance = new SoundItemBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ISoundItemGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Sound.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound,
                    header: recordTypeConverter.ConvertToCustom(SoundItem_Registration.CSDI_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.Chance_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Chance,
                    header: recordTypeConverter.ConvertToCustom(SoundItem_Registration.CSDC_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundItemGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISoundItemGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SoundItemBinaryCreateTranslation
    {
        public readonly static SoundItemBinaryCreateTranslation Instance = new SoundItemBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SoundItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundItemGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SoundItem_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SoundItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SoundItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ISoundItemGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((SoundItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ISoundItemGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((SoundItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoundItemBinaryOverlay :
        BinaryOverlay,
        ISoundItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundItem_Registration.Instance;
        public static SoundItem_Registration Registration => SoundItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundItemGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => SoundItemCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SoundItemXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SoundItemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((SoundItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Sound
        private int? _SoundLocation;
        public bool Sound_IsSet => _SoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> Sound => _SoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        #endregion
        #region Chance
        private int? _ChanceLocation;
        public bool Chance_IsSet => _ChanceLocation.HasValue;
        public Byte Chance => _ChanceLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _ChanceLocation.Value, _package.Meta)[0] : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SoundItemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SoundItemBinaryOverlay SoundItemFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new SoundItemBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x49445343: // CSDI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SoundItem_FieldIndex.Sound) return TryGet<int?>.Failure;
                    _SoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoundItem_FieldIndex.Sound);
                }
                case 0x43445343: // CSDC
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SoundItem_FieldIndex.Chance) return TryGet<int?>.Failure;
                    _ChanceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoundItem_FieldIndex.Chance);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

