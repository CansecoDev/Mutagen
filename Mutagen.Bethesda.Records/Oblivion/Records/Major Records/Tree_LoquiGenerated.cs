/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Tree :
        OblivionMajorRecord,
        ITreeInternal,
        ILoquiObjectSetter<Tree>,
        IEquatable<Tree>,
        IEqualsMask
    {
        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITreeGetter.Model => this.Model;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITreeGetter.Icon => this.Icon;
        #endregion
        #region SpeedTreeSeeds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt32>? _SpeedTreeSeeds;
        public ExtendedList<UInt32>? SpeedTreeSeeds
        {
            get => this._SpeedTreeSeeds;
            set => this._SpeedTreeSeeds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt32>? ITreeGetter.SpeedTreeSeeds => _SpeedTreeSeeds;
        #endregion

        #endregion
        #region LeafCurvature
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LeafCurvature;
        public Single LeafCurvature
        {
            get => this._LeafCurvature;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._LeafCurvature = value;
            }
        }
        #endregion
        #region MinimumLeafAngle
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _MinimumLeafAngle;
        public Single MinimumLeafAngle
        {
            get => this._MinimumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._MinimumLeafAngle = value;
            }
        }
        #endregion
        #region MaximumLeafAngle
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _MaximumLeafAngle;
        public Single MaximumLeafAngle
        {
            get => this._MaximumLeafAngle;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._MaximumLeafAngle = value;
            }
        }
        #endregion
        #region BranchDimmingValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BranchDimmingValue;
        public Single BranchDimmingValue
        {
            get => this._BranchDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._BranchDimmingValue = value;
            }
        }
        #endregion
        #region LeafDimmingValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LeafDimmingValue;
        public Single LeafDimmingValue
        {
            get => this._LeafDimmingValue;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._LeafDimmingValue = value;
            }
        }
        #endregion
        #region ShadowRadius
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32 _ShadowRadius;
        public Int32 ShadowRadius
        {
            get => this._ShadowRadius;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._ShadowRadius = value;
            }
        }
        #endregion
        #region RockingSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RockingSpeed;
        public Single RockingSpeed
        {
            get => this._RockingSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._RockingSpeed = value;
            }
        }
        #endregion
        #region RustleSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RustleSpeed;
        public Single RustleSpeed
        {
            get => this._RustleSpeed;
            set
            {
                this.CNAMDataTypeState |= CNAMDataType.Has;
                this._RustleSpeed = value;
            }
        }
        #endregion
        #region BillboardWidth
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BillboardWidth;
        public Single BillboardWidth
        {
            get => this._BillboardWidth;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this._BillboardWidth = value;
            }
        }
        #endregion
        #region BillboardHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BillboardHeight;
        public Single BillboardHeight
        {
            get => this._BillboardHeight;
            set
            {
                this.BNAMDataTypeState |= BNAMDataType.Has;
                this._BillboardHeight = value;
            }
        }
        #endregion
        #region CNAMDataTypeState
        public Tree.CNAMDataType CNAMDataTypeState { get; set; } = default;
        #endregion
        #region BNAMDataTypeState
        public Tree.BNAMDataType BNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeGetter rhs)) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Tree obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Tree CreateFromXml(
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Tree CreateFromXml(
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Tree CreateFromXml(
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Tree CreateFromXml(
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icon = initialValue;
                this.SpeedTreeSeeds = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LeafCurvature = initialValue;
                this.MinimumLeafAngle = initialValue;
                this.MaximumLeafAngle = initialValue;
                this.BranchDimmingValue = initialValue;
                this.LeafDimmingValue = initialValue;
                this.ShadowRadius = initialValue;
                this.RockingSpeed = initialValue;
                this.RustleSpeed = initialValue;
                this.BillboardWidth = initialValue;
                this.BillboardHeight = initialValue;
                this.CNAMDataTypeState = initialValue;
                this.BNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Model,
                TItem Icon,
                TItem SpeedTreeSeeds,
                TItem LeafCurvature,
                TItem MinimumLeafAngle,
                TItem MaximumLeafAngle,
                TItem BranchDimmingValue,
                TItem LeafDimmingValue,
                TItem ShadowRadius,
                TItem RockingSpeed,
                TItem RustleSpeed,
                TItem BillboardWidth,
                TItem BillboardHeight,
                TItem CNAMDataTypeState,
                TItem BNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icon = Icon;
                this.SpeedTreeSeeds = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SpeedTreeSeeds, Enumerable.Empty<(int Index, TItem Value)>());
                this.LeafCurvature = LeafCurvature;
                this.MinimumLeafAngle = MinimumLeafAngle;
                this.MaximumLeafAngle = MaximumLeafAngle;
                this.BranchDimmingValue = BranchDimmingValue;
                this.LeafDimmingValue = LeafDimmingValue;
                this.ShadowRadius = ShadowRadius;
                this.RockingSpeed = RockingSpeed;
                this.RustleSpeed = RustleSpeed;
                this.BillboardWidth = BillboardWidth;
                this.BillboardHeight = BillboardHeight;
                this.CNAMDataTypeState = CNAMDataTypeState;
                this.BNAMDataTypeState = BNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Icon;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SpeedTreeSeeds;
            public TItem LeafCurvature;
            public TItem MinimumLeafAngle;
            public TItem MaximumLeafAngle;
            public TItem BranchDimmingValue;
            public TItem LeafDimmingValue;
            public TItem ShadowRadius;
            public TItem RockingSpeed;
            public TItem RustleSpeed;
            public TItem BillboardWidth;
            public TItem BillboardHeight;
            public TItem CNAMDataTypeState;
            public TItem BNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.SpeedTreeSeeds, rhs.SpeedTreeSeeds)) return false;
                if (!object.Equals(this.LeafCurvature, rhs.LeafCurvature)) return false;
                if (!object.Equals(this.MinimumLeafAngle, rhs.MinimumLeafAngle)) return false;
                if (!object.Equals(this.MaximumLeafAngle, rhs.MaximumLeafAngle)) return false;
                if (!object.Equals(this.BranchDimmingValue, rhs.BranchDimmingValue)) return false;
                if (!object.Equals(this.LeafDimmingValue, rhs.LeafDimmingValue)) return false;
                if (!object.Equals(this.ShadowRadius, rhs.ShadowRadius)) return false;
                if (!object.Equals(this.RockingSpeed, rhs.RockingSpeed)) return false;
                if (!object.Equals(this.RustleSpeed, rhs.RustleSpeed)) return false;
                if (!object.Equals(this.BillboardWidth, rhs.BillboardWidth)) return false;
                if (!object.Equals(this.BillboardHeight, rhs.BillboardHeight)) return false;
                if (!object.Equals(this.CNAMDataTypeState, rhs.CNAMDataTypeState)) return false;
                if (!object.Equals(this.BNAMDataTypeState, rhs.BNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.SpeedTreeSeeds?.GetHashCode());
                ret = ret.CombineHashCode(this.LeafCurvature?.GetHashCode());
                ret = ret.CombineHashCode(this.MinimumLeafAngle?.GetHashCode());
                ret = ret.CombineHashCode(this.MaximumLeafAngle?.GetHashCode());
                ret = ret.CombineHashCode(this.BranchDimmingValue?.GetHashCode());
                ret = ret.CombineHashCode(this.LeafDimmingValue?.GetHashCode());
                ret = ret.CombineHashCode(this.ShadowRadius?.GetHashCode());
                ret = ret.CombineHashCode(this.RockingSpeed?.GetHashCode());
                ret = ret.CombineHashCode(this.RustleSpeed?.GetHashCode());
                ret = ret.CombineHashCode(this.BillboardWidth?.GetHashCode());
                ret = ret.CombineHashCode(this.BillboardHeight?.GetHashCode());
                ret = ret.CombineHashCode(this.CNAMDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(this.BNAMDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Icon)) return false;
                if (this.SpeedTreeSeeds != null)
                {
                    if (!eval(this.SpeedTreeSeeds.Overall)) return false;
                    if (this.SpeedTreeSeeds.Specific != null)
                    {
                        foreach (var item in this.SpeedTreeSeeds.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LeafCurvature)) return false;
                if (!eval(this.MinimumLeafAngle)) return false;
                if (!eval(this.MaximumLeafAngle)) return false;
                if (!eval(this.BranchDimmingValue)) return false;
                if (!eval(this.LeafDimmingValue)) return false;
                if (!eval(this.ShadowRadius)) return false;
                if (!eval(this.RockingSpeed)) return false;
                if (!eval(this.RustleSpeed)) return false;
                if (!eval(this.BillboardWidth)) return false;
                if (!eval(this.BillboardHeight)) return false;
                if (!eval(this.CNAMDataTypeState)) return false;
                if (!eval(this.BNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Icon)) return true;
                if (this.SpeedTreeSeeds != null)
                {
                    if (eval(this.SpeedTreeSeeds.Overall)) return true;
                    if (this.SpeedTreeSeeds.Specific != null)
                    {
                        foreach (var item in this.SpeedTreeSeeds.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LeafCurvature)) return true;
                if (eval(this.MinimumLeafAngle)) return true;
                if (eval(this.MaximumLeafAngle)) return true;
                if (eval(this.BranchDimmingValue)) return true;
                if (eval(this.LeafDimmingValue)) return true;
                if (eval(this.ShadowRadius)) return true;
                if (eval(this.RockingSpeed)) return true;
                if (eval(this.RustleSpeed)) return true;
                if (eval(this.BillboardWidth)) return true;
                if (eval(this.BillboardHeight)) return true;
                if (eval(this.CNAMDataTypeState)) return true;
                if (eval(this.BNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Tree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icon = eval(this.Icon);
                if (SpeedTreeSeeds != null)
                {
                    obj.SpeedTreeSeeds = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SpeedTreeSeeds.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SpeedTreeSeeds.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SpeedTreeSeeds.Specific = l;
                        foreach (var item in SpeedTreeSeeds.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LeafCurvature = eval(this.LeafCurvature);
                obj.MinimumLeafAngle = eval(this.MinimumLeafAngle);
                obj.MaximumLeafAngle = eval(this.MaximumLeafAngle);
                obj.BranchDimmingValue = eval(this.BranchDimmingValue);
                obj.LeafDimmingValue = eval(this.LeafDimmingValue);
                obj.ShadowRadius = eval(this.ShadowRadius);
                obj.RockingSpeed = eval(this.RockingSpeed);
                obj.RustleSpeed = eval(this.RustleSpeed);
                obj.BillboardWidth = eval(this.BillboardWidth);
                obj.BillboardHeight = eval(this.BillboardHeight);
                obj.CNAMDataTypeState = eval(this.CNAMDataTypeState);
                obj.BNAMDataTypeState = eval(this.BNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Tree.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Tree.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Tree.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if ((printMask?.SpeedTreeSeeds?.Overall ?? true)
                        && SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
                    {
                        fg.AppendLine("SpeedTreeSeeds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpeedTreeSeedsItem.Overall);
                            if (SpeedTreeSeedsItem.Specific != null)
                            {
                                foreach (var subItem in SpeedTreeSeedsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LeafCurvature ?? true)
                    {
                        fg.AppendItem(LeafCurvature, "LeafCurvature");
                    }
                    if (printMask?.MinimumLeafAngle ?? true)
                    {
                        fg.AppendItem(MinimumLeafAngle, "MinimumLeafAngle");
                    }
                    if (printMask?.MaximumLeafAngle ?? true)
                    {
                        fg.AppendItem(MaximumLeafAngle, "MaximumLeafAngle");
                    }
                    if (printMask?.BranchDimmingValue ?? true)
                    {
                        fg.AppendItem(BranchDimmingValue, "BranchDimmingValue");
                    }
                    if (printMask?.LeafDimmingValue ?? true)
                    {
                        fg.AppendItem(LeafDimmingValue, "LeafDimmingValue");
                    }
                    if (printMask?.ShadowRadius ?? true)
                    {
                        fg.AppendItem(ShadowRadius, "ShadowRadius");
                    }
                    if (printMask?.RockingSpeed ?? true)
                    {
                        fg.AppendItem(RockingSpeed, "RockingSpeed");
                    }
                    if (printMask?.RustleSpeed ?? true)
                    {
                        fg.AppendItem(RustleSpeed, "RustleSpeed");
                    }
                    if (printMask?.BillboardWidth ?? true)
                    {
                        fg.AppendItem(BillboardWidth, "BillboardWidth");
                    }
                    if (printMask?.BillboardHeight ?? true)
                    {
                        fg.AppendItem(BillboardHeight, "BillboardHeight");
                    }
                    if (printMask?.CNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
                    }
                    if (printMask?.BNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(BNAMDataTypeState, "BNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Icon;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SpeedTreeSeeds;
            public Exception? LeafCurvature;
            public Exception? MinimumLeafAngle;
            public Exception? MaximumLeafAngle;
            public Exception? BranchDimmingValue;
            public Exception? LeafDimmingValue;
            public Exception? ShadowRadius;
            public Exception? RockingSpeed;
            public Exception? RustleSpeed;
            public Exception? BillboardWidth;
            public Exception? BillboardHeight;
            public Exception? CNAMDataTypeState;
            public Exception? BNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        return Model;
                    case Tree_FieldIndex.Icon:
                        return Icon;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        return SpeedTreeSeeds;
                    case Tree_FieldIndex.LeafCurvature:
                        return LeafCurvature;
                    case Tree_FieldIndex.MinimumLeafAngle:
                        return MinimumLeafAngle;
                    case Tree_FieldIndex.MaximumLeafAngle:
                        return MaximumLeafAngle;
                    case Tree_FieldIndex.BranchDimmingValue:
                        return BranchDimmingValue;
                    case Tree_FieldIndex.LeafDimmingValue:
                        return LeafDimmingValue;
                    case Tree_FieldIndex.ShadowRadius:
                        return ShadowRadius;
                    case Tree_FieldIndex.RockingSpeed:
                        return RockingSpeed;
                    case Tree_FieldIndex.RustleSpeed:
                        return RustleSpeed;
                    case Tree_FieldIndex.BillboardWidth:
                        return BillboardWidth;
                    case Tree_FieldIndex.BillboardHeight:
                        return BillboardHeight;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        return CNAMDataTypeState;
                    case Tree_FieldIndex.BNAMDataTypeState:
                        return BNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        this.SpeedTreeSeeds = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Tree_FieldIndex.LeafCurvature:
                        this.LeafCurvature = ex;
                        break;
                    case Tree_FieldIndex.MinimumLeafAngle:
                        this.MinimumLeafAngle = ex;
                        break;
                    case Tree_FieldIndex.MaximumLeafAngle:
                        this.MaximumLeafAngle = ex;
                        break;
                    case Tree_FieldIndex.BranchDimmingValue:
                        this.BranchDimmingValue = ex;
                        break;
                    case Tree_FieldIndex.LeafDimmingValue:
                        this.LeafDimmingValue = ex;
                        break;
                    case Tree_FieldIndex.ShadowRadius:
                        this.ShadowRadius = ex;
                        break;
                    case Tree_FieldIndex.RockingSpeed:
                        this.RockingSpeed = ex;
                        break;
                    case Tree_FieldIndex.RustleSpeed:
                        this.RustleSpeed = ex;
                        break;
                    case Tree_FieldIndex.BillboardWidth:
                        this.BillboardWidth = ex;
                        break;
                    case Tree_FieldIndex.BillboardHeight:
                        this.BillboardHeight = ex;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = ex;
                        break;
                    case Tree_FieldIndex.BNAMDataTypeState:
                        this.BNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        this.SpeedTreeSeeds = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Tree_FieldIndex.LeafCurvature:
                        this.LeafCurvature = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.MinimumLeafAngle:
                        this.MinimumLeafAngle = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.MaximumLeafAngle:
                        this.MaximumLeafAngle = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BranchDimmingValue:
                        this.BranchDimmingValue = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafDimmingValue:
                        this.LeafDimmingValue = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.ShadowRadius:
                        this.ShadowRadius = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.RockingSpeed:
                        this.RockingSpeed = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.RustleSpeed:
                        this.RustleSpeed = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BillboardWidth:
                        this.BillboardWidth = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BillboardHeight:
                        this.BillboardHeight = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BNAMDataTypeState:
                        this.BNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Icon != null) return true;
                if (SpeedTreeSeeds != null) return true;
                if (LeafCurvature != null) return true;
                if (MinimumLeafAngle != null) return true;
                if (MaximumLeafAngle != null) return true;
                if (BranchDimmingValue != null) return true;
                if (LeafDimmingValue != null) return true;
                if (ShadowRadius != null) return true;
                if (RockingSpeed != null) return true;
                if (RustleSpeed != null) return true;
                if (BillboardWidth != null) return true;
                if (BillboardHeight != null) return true;
                if (CNAMDataTypeState != null) return true;
                if (BNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                fg.AppendItem(Icon, "Icon");
                if (SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpeedTreeSeedsItem.Overall);
                        if (SpeedTreeSeedsItem.Specific != null)
                        {
                            foreach (var subItem in SpeedTreeSeedsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(LeafCurvature, "LeafCurvature");
                fg.AppendItem(MinimumLeafAngle, "MinimumLeafAngle");
                fg.AppendItem(MaximumLeafAngle, "MaximumLeafAngle");
                fg.AppendItem(BranchDimmingValue, "BranchDimmingValue");
                fg.AppendItem(LeafDimmingValue, "LeafDimmingValue");
                fg.AppendItem(ShadowRadius, "ShadowRadius");
                fg.AppendItem(RockingSpeed, "RockingSpeed");
                fg.AppendItem(RustleSpeed, "RustleSpeed");
                fg.AppendItem(BillboardWidth, "BillboardWidth");
                fg.AppendItem(BillboardHeight, "BillboardHeight");
                fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
                fg.AppendItem(BNAMDataTypeState, "BNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.SpeedTreeSeeds = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SpeedTreeSeeds?.Overall, rhs.SpeedTreeSeeds?.Overall), ExceptionExt.Combine(this.SpeedTreeSeeds?.Specific, rhs.SpeedTreeSeeds?.Specific));
                ret.LeafCurvature = this.LeafCurvature.Combine(rhs.LeafCurvature);
                ret.MinimumLeafAngle = this.MinimumLeafAngle.Combine(rhs.MinimumLeafAngle);
                ret.MaximumLeafAngle = this.MaximumLeafAngle.Combine(rhs.MaximumLeafAngle);
                ret.BranchDimmingValue = this.BranchDimmingValue.Combine(rhs.BranchDimmingValue);
                ret.LeafDimmingValue = this.LeafDimmingValue.Combine(rhs.LeafDimmingValue);
                ret.ShadowRadius = this.ShadowRadius.Combine(rhs.ShadowRadius);
                ret.RockingSpeed = this.RockingSpeed.Combine(rhs.RockingSpeed);
                ret.RustleSpeed = this.RustleSpeed.Combine(rhs.RustleSpeed);
                ret.BillboardWidth = this.BillboardWidth.Combine(rhs.BillboardWidth);
                ret.BillboardHeight = this.BillboardHeight.Combine(rhs.BillboardHeight);
                ret.CNAMDataTypeState = this.CNAMDataTypeState.Combine(rhs.CNAMDataTypeState);
                ret.BNAMDataTypeState = this.BNAMDataTypeState.Combine(rhs.BNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Icon;
            public bool SpeedTreeSeeds;
            public bool LeafCurvature;
            public bool MinimumLeafAngle;
            public bool MaximumLeafAngle;
            public bool BranchDimmingValue;
            public bool LeafDimmingValue;
            public bool ShadowRadius;
            public bool RockingSpeed;
            public bool RustleSpeed;
            public bool BillboardWidth;
            public bool BillboardHeight;
            public bool CNAMDataTypeState;
            public bool BNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icon = defaultOn;
                this.SpeedTreeSeeds = defaultOn;
                this.LeafCurvature = defaultOn;
                this.MinimumLeafAngle = defaultOn;
                this.MaximumLeafAngle = defaultOn;
                this.BranchDimmingValue = defaultOn;
                this.LeafDimmingValue = defaultOn;
                this.ShadowRadius = defaultOn;
                this.RockingSpeed = defaultOn;
                this.RustleSpeed = defaultOn;
                this.BillboardWidth = defaultOn;
                this.BillboardHeight = defaultOn;
                this.CNAMDataTypeState = defaultOn;
                this.BNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icon, null));
                ret.Add((SpeedTreeSeeds, null));
                ret.Add((LeafCurvature, null));
                ret.Add((MinimumLeafAngle, null));
                ret.Add((MaximumLeafAngle, null));
                ret.Add((BranchDimmingValue, null));
                ret.Add((LeafDimmingValue, null));
                ret.Add((ShadowRadius, null));
                ret.Add((RockingSpeed, null));
                ret.Add((RustleSpeed, null));
                ret.Add((BillboardWidth, null));
                ret.Add((BillboardHeight, null));
                ret.Add((CNAMDataTypeState, null));
                ret.Add((BNAMDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Tree_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum CNAMDataType
        {
            Has = 1
        }
        [Flags]
        public enum BNAMDataType
        {
            Has = 1
        }
        public Tree(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Tree(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Tree CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TreeSetterCommon)((ITreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Tree GetNew()
        {
            return new Tree();
        }

    }
    #endregion

    #region Interface
    public partial interface ITree :
        ITreeGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ITreeInternal>
    {
        new Model? Model { get; set; }
        new String? Icon { get; set; }
        new ExtendedList<UInt32>? SpeedTreeSeeds { get; set; }
        new Single LeafCurvature { get; set; }
        new Single MinimumLeafAngle { get; set; }
        new Single MaximumLeafAngle { get; set; }
        new Single BranchDimmingValue { get; set; }
        new Single LeafDimmingValue { get; set; }
        new Int32 ShadowRadius { get; set; }
        new Single RockingSpeed { get; set; }
        new Single RustleSpeed { get; set; }
        new Single BillboardWidth { get; set; }
        new Single BillboardHeight { get; set; }
        new Tree.CNAMDataType CNAMDataTypeState { get; set; }
        new Tree.BNAMDataType BNAMDataTypeState { get; set; }
    }

    public partial interface ITreeInternal :
        IOblivionMajorRecordInternal,
        ITree,
        ITreeGetter
    {
    }

    public partial interface ITreeGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ITreeGetter>,
        IXmlItem,
        IBinaryItem
    {
        IModelGetter? Model { get; }
        String? Icon { get; }
        IReadOnlyList<UInt32>? SpeedTreeSeeds { get; }
        Single LeafCurvature { get; }
        Single MinimumLeafAngle { get; }
        Single MaximumLeafAngle { get; }
        Single BranchDimmingValue { get; }
        Single LeafDimmingValue { get; }
        Int32 ShadowRadius { get; }
        Single RockingSpeed { get; }
        Single RustleSpeed { get; }
        Single BillboardWidth { get; }
        Single BillboardHeight { get; }
        Tree.CNAMDataType CNAMDataTypeState { get; }
        Tree.BNAMDataType BNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Tree.Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Tree.Mask<bool> GetHasBeenSetMask(this ITreeGetter item)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITreeGetter item,
            ITreeGetter rhs)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Icon = 6,
        SpeedTreeSeeds = 7,
        LeafCurvature = 8,
        MinimumLeafAngle = 9,
        MaximumLeafAngle = 10,
        BranchDimmingValue = 11,
        LeafDimmingValue = 12,
        ShadowRadius = 13,
        RockingSpeed = 14,
        RustleSpeed = 15,
        BillboardWidth = 16,
        BillboardHeight = 17,
        CNAMDataTypeState = 18,
        BNAMDataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "82606775-b1a1-4c44-9052-b021c5ccc13a";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Tree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree.ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type? InternalSetterType = typeof(ITreeInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "ICON":
                    return (ushort)Tree_FieldIndex.Icon;
                case "SPEEDTREESEEDS":
                    return (ushort)Tree_FieldIndex.SpeedTreeSeeds;
                case "LEAFCURVATURE":
                    return (ushort)Tree_FieldIndex.LeafCurvature;
                case "MINIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MinimumLeafAngle;
                case "MAXIMUMLEAFANGLE":
                    return (ushort)Tree_FieldIndex.MaximumLeafAngle;
                case "BRANCHDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.BranchDimmingValue;
                case "LEAFDIMMINGVALUE":
                    return (ushort)Tree_FieldIndex.LeafDimmingValue;
                case "SHADOWRADIUS":
                    return (ushort)Tree_FieldIndex.ShadowRadius;
                case "ROCKINGSPEED":
                    return (ushort)Tree_FieldIndex.RockingSpeed;
                case "RUSTLESPEED":
                    return (ushort)Tree_FieldIndex.RustleSpeed;
                case "BILLBOARDWIDTH":
                    return (ushort)Tree_FieldIndex.BillboardWidth;
                case "BILLBOARDHEIGHT":
                    return (ushort)Tree_FieldIndex.BillboardHeight;
                case "CNAMDATATYPESTATE":
                    return (ushort)Tree_FieldIndex.CNAMDataTypeState;
                case "BNAMDATATYPESTATE":
                    return (ushort)Tree_FieldIndex.BNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return true;
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return true;
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Icon:
                    return "Icon";
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return "SpeedTreeSeeds";
                case Tree_FieldIndex.LeafCurvature:
                    return "LeafCurvature";
                case Tree_FieldIndex.MinimumLeafAngle:
                    return "MinimumLeafAngle";
                case Tree_FieldIndex.MaximumLeafAngle:
                    return "MaximumLeafAngle";
                case Tree_FieldIndex.BranchDimmingValue:
                    return "BranchDimmingValue";
                case Tree_FieldIndex.LeafDimmingValue:
                    return "LeafDimmingValue";
                case Tree_FieldIndex.ShadowRadius:
                    return "ShadowRadius";
                case Tree_FieldIndex.RockingSpeed:
                    return "RockingSpeed";
                case Tree_FieldIndex.RustleSpeed:
                    return "RustleSpeed";
                case Tree_FieldIndex.BillboardWidth:
                    return "BillboardWidth";
                case Tree_FieldIndex.BillboardHeight:
                    return "BillboardHeight";
                case Tree_FieldIndex.CNAMDataTypeState:
                    return "CNAMDataTypeState";
                case Tree_FieldIndex.BNAMDataTypeState:
                    return "BNAMDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.LeafCurvature:
                case Tree_FieldIndex.MinimumLeafAngle:
                case Tree_FieldIndex.MaximumLeafAngle:
                case Tree_FieldIndex.BranchDimmingValue:
                case Tree_FieldIndex.LeafDimmingValue:
                case Tree_FieldIndex.ShadowRadius:
                case Tree_FieldIndex.RockingSpeed:
                case Tree_FieldIndex.RustleSpeed:
                case Tree_FieldIndex.BillboardWidth:
                case Tree_FieldIndex.BillboardHeight:
                case Tree_FieldIndex.CNAMDataTypeState:
                case Tree_FieldIndex.BNAMDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Icon:
                    return typeof(String);
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return typeof(ExtendedList<UInt32>);
                case Tree_FieldIndex.LeafCurvature:
                    return typeof(Single);
                case Tree_FieldIndex.MinimumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.MaximumLeafAngle:
                    return typeof(Single);
                case Tree_FieldIndex.BranchDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.LeafDimmingValue:
                    return typeof(Single);
                case Tree_FieldIndex.ShadowRadius:
                    return typeof(Int32);
                case Tree_FieldIndex.RockingSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.RustleSpeed:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardWidth:
                    return typeof(Single);
                case Tree_FieldIndex.BillboardHeight:
                    return typeof(Single);
                case Tree_FieldIndex.CNAMDataTypeState:
                    return typeof(Tree.CNAMDataType);
                case Tree_FieldIndex.BNAMDataTypeState:
                    return typeof(Tree.BNAMDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TreeXmlWriteTranslation);
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly TreeSetterCommon Instance = new TreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Icon = default;
            item.SpeedTreeSeeds = null;
            item.LeafCurvature = default;
            item.MinimumLeafAngle = default;
            item.MaximumLeafAngle = default;
            item.BranchDimmingValue = default;
            item.LeafDimmingValue = default;
            item.ShadowRadius = default;
            item.RockingSpeed = default;
            item.RustleSpeed = default;
            item.BillboardWidth = default;
            item.BillboardHeight = default;
            item.CNAMDataTypeState = default;
            item.BNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasCNAMDataType":
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "HasBNAMDataType":
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Tree_Registration.TREE_HEADER;
        protected static void FillBinaryStructs(
            ITreeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITreeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SpeedTreeSeeds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.ParseRepeatedItem(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: UInt32BinaryTranslation.Instance.Parse)
                        .ToExtendedList<UInt32>();
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.CNAMDataTypeState = Tree.CNAMDataType.Has;
                    }
                    item.LeafCurvature = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MinimumLeafAngle = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MaximumLeafAngle = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BranchDimmingValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.LeafDimmingValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ShadowRadius = dataFrame.ReadInt32();
                    item.RockingSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RustleSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.RustleSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BNAMDataTypeState = Tree.BNAMDataType.Has;
                    }
                    item.BillboardWidth = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BillboardHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardHeight);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ITreeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ITreeInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TreeCommon : OblivionMajorRecordCommon
    {
        public new static readonly TreeCommon Instance = new TreeCommon();

        public Tree.Mask<bool> GetEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.SpeedTreeSeeds = item.SpeedTreeSeeds.CollectionEqualsHelper(
                rhs.SpeedTreeSeeds,
                (l, r) => l == r,
                include);
            ret.LeafCurvature = item.LeafCurvature.EqualsWithin(rhs.LeafCurvature);
            ret.MinimumLeafAngle = item.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle);
            ret.MaximumLeafAngle = item.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle);
            ret.BranchDimmingValue = item.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue);
            ret.LeafDimmingValue = item.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue);
            ret.ShadowRadius = item.ShadowRadius == rhs.ShadowRadius;
            ret.RockingSpeed = item.RockingSpeed.EqualsWithin(rhs.RockingSpeed);
            ret.RustleSpeed = item.RustleSpeed.EqualsWithin(rhs.RustleSpeed);
            ret.BillboardWidth = item.BillboardWidth.EqualsWithin(rhs.BillboardWidth);
            ret.BillboardHeight = item.BillboardHeight.EqualsWithin(rhs.BillboardHeight);
            ret.CNAMDataTypeState = item.CNAMDataTypeState == rhs.CNAMDataTypeState;
            ret.BNAMDataTypeState = item.BNAMDataTypeState == rhs.BNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Tree =>");
            }
            else
            {
                fg.AppendLine($"{name} (Tree) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeGetter item,
            FileGeneration fg,
            Tree.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.SpeedTreeSeeds?.Overall ?? true)
                && item.SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
            {
                fg.AppendLine("SpeedTreeSeeds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SpeedTreeSeedsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LeafCurvature ?? true)
            {
                fg.AppendItem(item.LeafCurvature, "LeafCurvature");
            }
            if (printMask?.MinimumLeafAngle ?? true)
            {
                fg.AppendItem(item.MinimumLeafAngle, "MinimumLeafAngle");
            }
            if (printMask?.MaximumLeafAngle ?? true)
            {
                fg.AppendItem(item.MaximumLeafAngle, "MaximumLeafAngle");
            }
            if (printMask?.BranchDimmingValue ?? true)
            {
                fg.AppendItem(item.BranchDimmingValue, "BranchDimmingValue");
            }
            if (printMask?.LeafDimmingValue ?? true)
            {
                fg.AppendItem(item.LeafDimmingValue, "LeafDimmingValue");
            }
            if (printMask?.ShadowRadius ?? true)
            {
                fg.AppendItem(item.ShadowRadius, "ShadowRadius");
            }
            if (printMask?.RockingSpeed ?? true)
            {
                fg.AppendItem(item.RockingSpeed, "RockingSpeed");
            }
            if (printMask?.RustleSpeed ?? true)
            {
                fg.AppendItem(item.RustleSpeed, "RustleSpeed");
            }
            if (printMask?.BillboardWidth ?? true)
            {
                fg.AppendItem(item.BillboardWidth, "BillboardWidth");
            }
            if (printMask?.BillboardHeight ?? true)
            {
                fg.AppendItem(item.BillboardHeight, "BillboardHeight");
            }
            if (printMask?.CNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.CNAMDataTypeState, "CNAMDataTypeState");
            }
            if (printMask?.BNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.BNAMDataTypeState, "BNAMDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.SpeedTreeSeeds?.Overall.HasValue ?? false && checkMask.SpeedTreeSeeds!.Overall.Value != (item.SpeedTreeSeeds != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITreeGetter item,
            Tree.Mask<bool> mask)
        {
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Icon = (item.Icon != null);
            mask.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.SpeedTreeSeeds != null), default);
            mask.LeafCurvature = true;
            mask.MinimumLeafAngle = true;
            mask.MaximumLeafAngle = true;
            mask.BranchDimmingValue = true;
            mask.LeafDimmingValue = true;
            mask.ShadowRadius = true;
            mask.RockingSpeed = true;
            mask.RustleSpeed = true;
            mask.BillboardWidth = true;
            mask.BillboardHeight = true;
            mask.CNAMDataTypeState = true;
            mask.BNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Tree_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeGetter? lhs,
            ITreeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.SpeedTreeSeeds.SequenceEqual(rhs.SpeedTreeSeeds)) return false;
            if (!lhs.LeafCurvature.EqualsWithin(rhs.LeafCurvature)) return false;
            if (!lhs.MinimumLeafAngle.EqualsWithin(rhs.MinimumLeafAngle)) return false;
            if (!lhs.MaximumLeafAngle.EqualsWithin(rhs.MaximumLeafAngle)) return false;
            if (!lhs.BranchDimmingValue.EqualsWithin(rhs.BranchDimmingValue)) return false;
            if (!lhs.LeafDimmingValue.EqualsWithin(rhs.LeafDimmingValue)) return false;
            if (lhs.ShadowRadius != rhs.ShadowRadius) return false;
            if (!lhs.RockingSpeed.EqualsWithin(rhs.RockingSpeed)) return false;
            if (!lhs.RustleSpeed.EqualsWithin(rhs.RustleSpeed)) return false;
            if (!lhs.BillboardWidth.EqualsWithin(rhs.BillboardWidth)) return false;
            if (!lhs.BillboardHeight.EqualsWithin(rhs.BillboardHeight)) return false;
            if (lhs.CNAMDataTypeState != rhs.CNAMDataTypeState) return false;
            if (lhs.BNAMDataTypeState != rhs.BNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public virtual int GetHashCode(ITreeGetter item)
        {
            int ret = 0;
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.SpeedTreeSeeds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeafCurvature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MinimumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumLeafAngle).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BranchDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeafDimmingValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ShadowRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RockingSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RustleSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BillboardWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BillboardHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CNAMDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BNAMDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Tree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITreeGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Tree obj, Tree rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Tree(getNextFormKey());
            ret.DeepCopyIn((Tree)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Tree)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TreeSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly TreeSetterTranslationCommon Instance = new TreeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITreeInternal item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                try
                {
                    if ((rhs.SpeedTreeSeeds != null))
                    {
                        item.SpeedTreeSeeds = 
                            rhs.SpeedTreeSeeds
                            .ToExtendedList<UInt32>();
                    }
                    else
                    {
                        item.SpeedTreeSeeds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafCurvature) ?? true))
            {
                item.LeafCurvature = rhs.LeafCurvature;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.MinimumLeafAngle) ?? true))
            {
                item.MinimumLeafAngle = rhs.MinimumLeafAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.MaximumLeafAngle) ?? true))
            {
                item.MaximumLeafAngle = rhs.MaximumLeafAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchDimmingValue) ?? true))
            {
                item.BranchDimmingValue = rhs.BranchDimmingValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafDimmingValue) ?? true))
            {
                item.LeafDimmingValue = rhs.LeafDimmingValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ShadowRadius) ?? true))
            {
                item.ShadowRadius = rhs.ShadowRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.RockingSpeed) ?? true))
            {
                item.RockingSpeed = rhs.RockingSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.RustleSpeed) ?? true))
            {
                item.RustleSpeed = rhs.RustleSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardWidth) ?? true))
            {
                item.BillboardWidth = rhs.BillboardWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardHeight) ?? true))
            {
                item.BillboardHeight = rhs.BillboardHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                item.CNAMDataTypeState = rhs.CNAMDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BNAMDataTypeState) ?? true))
            {
                item.BNAMDataTypeState = rhs.BNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Tree DeepCopy(
            ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Tree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TreeXmlWriteTranslation Instance = new TreeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITreeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Tree_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                }
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Tree_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.SpeedTreeSeeds != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                ListXmlTranslation<UInt32>.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeeds),
                    item: item.SpeedTreeSeeds,
                    fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.SpeedTreeSeeds),
                    transl: (XElement subNode, UInt32 subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        UInt32XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafCurvature) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafCurvature),
                        item: item.LeafCurvature,
                        fieldIndex: (int)Tree_FieldIndex.LeafCurvature,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MinimumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinimumLeafAngle),
                        item: item.MinimumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MinimumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.MaximumLeafAngle) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumLeafAngle),
                        item: item.MaximumLeafAngle,
                        fieldIndex: (int)Tree_FieldIndex.MaximumLeafAngle,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BranchDimmingValue),
                        item: item.BranchDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.BranchDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafDimmingValue) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LeafDimmingValue),
                        item: item.LeafDimmingValue,
                        fieldIndex: (int)Tree_FieldIndex.LeafDimmingValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.ShadowRadius) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ShadowRadius),
                        item: item.ShadowRadius,
                        fieldIndex: (int)Tree_FieldIndex.ShadowRadius,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RockingSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RockingSpeed),
                        item: item.RockingSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RockingSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.RustleSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RustleSpeed),
                        item: item.RustleSpeed,
                        fieldIndex: (int)Tree_FieldIndex.RustleSpeed,
                        errorMask: errorMask);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardWidth) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardWidth),
                        item: item.BillboardWidth,
                        fieldIndex: (int)Tree_FieldIndex.BillboardWidth,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardHeight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BillboardHeight),
                        item: item.BillboardHeight,
                        fieldIndex: (int)Tree_FieldIndex.BillboardHeight,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Tree.CNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.CNAMDataTypeState),
                    item: item.CNAMDataTypeState,
                    fieldIndex: (int)Tree_FieldIndex.CNAMDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Tree.BNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BNAMDataTypeState),
                    item: item.BNAMDataTypeState,
                    fieldIndex: (int)Tree_FieldIndex.BNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Tree");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Tree");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TreeXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static TreeXmlCreateTranslation Instance = new TreeXmlCreateTranslation();

        public static void FillPublicXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Model":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedTreeSeeds":
                    errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                    try
                    {
                        if (ListXmlTranslation<UInt32>.Instance.Parse(
                            node: node,
                            enumer: out var SpeedTreeSeedsItem,
                            transl: UInt32XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SpeedTreeSeeds = SpeedTreeSeedsItem.ToExtendedList();
                        }
                        else
                        {
                            item.SpeedTreeSeeds = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafCurvature":
                    errorMask?.PushIndex((int)Tree_FieldIndex.LeafCurvature);
                    try
                    {
                        item.LeafCurvature = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CNAMDataTypeState |= Tree.CNAMDataType.Has;
                    break;
                case "MinimumLeafAngle":
                    errorMask?.PushIndex((int)Tree_FieldIndex.MinimumLeafAngle);
                    try
                    {
                        item.MinimumLeafAngle = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumLeafAngle":
                    errorMask?.PushIndex((int)Tree_FieldIndex.MaximumLeafAngle);
                    try
                    {
                        item.MaximumLeafAngle = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BranchDimmingValue":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BranchDimmingValue);
                    try
                    {
                        item.BranchDimmingValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafDimmingValue":
                    errorMask?.PushIndex((int)Tree_FieldIndex.LeafDimmingValue);
                    try
                    {
                        item.LeafDimmingValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShadowRadius":
                    errorMask?.PushIndex((int)Tree_FieldIndex.ShadowRadius);
                    try
                    {
                        item.ShadowRadius = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RockingSpeed":
                    errorMask?.PushIndex((int)Tree_FieldIndex.RockingSpeed);
                    try
                    {
                        item.RockingSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RustleSpeed":
                    errorMask?.PushIndex((int)Tree_FieldIndex.RustleSpeed);
                    try
                    {
                        item.RustleSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BillboardWidth":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BillboardWidth);
                    try
                    {
                        item.BillboardWidth = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BNAMDataTypeState |= Tree.BNAMDataType.Has;
                    break;
                case "BillboardHeight":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BillboardHeight);
                    try
                    {
                        item.BillboardHeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CNAMDataTypeState":
                    errorMask?.PushIndex((int)Tree_FieldIndex.CNAMDataTypeState);
                    try
                    {
                        item.CNAMDataTypeState = EnumXmlTranslation<Tree.CNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BNAMDataTypeState":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BNAMDataTypeState);
                    try
                    {
                        item.BNAMDataTypeState = EnumXmlTranslation<Tree.BNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class TreeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITreeGetter item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TreeBinaryWriteTranslation Instance = new TreeBinaryWriteTranslation();

        public static void Write_Embedded(
            ITreeGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            ITreeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Write(
                writer: writer,
                items: item.SpeedTreeSeeds,
                recordType: Tree_Registration.SNAM_HEADER,
                transl: UInt32BinaryTranslation.Instance.Write);
            if (item.CNAMDataTypeState.HasFlag(Tree.CNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.CNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafCurvature);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MinimumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MaximumLeafAngle);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BranchDimmingValue);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LeafDimmingValue);
                    writer.Write(item.ShadowRadius);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RockingSpeed);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RustleSpeed);
                }
            }
            if (item.BNAMDataTypeState.HasFlag(Tree.BNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.BNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardWidth);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BillboardHeight);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Tree_Registration.TREE_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ITreeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ITreeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ITreeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TreeBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ITreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlyList<UInt32>? SpeedTreeSeeds { get; private set; }
        private int? _CNAMLocation;
        public Tree.CNAMDataType CNAMDataTypeState { get; private set; }
        #region LeafCurvature
        private int _LeafCurvatureLocation => _CNAMLocation!.Value + 0x0;
        private bool _LeafCurvature_IsSet => _CNAMLocation.HasValue;
        public Single LeafCurvature => _LeafCurvature_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_LeafCurvatureLocation, 4)) : default;
        #endregion
        #region MinimumLeafAngle
        private int _MinimumLeafAngleLocation => _CNAMLocation!.Value + 0x4;
        private bool _MinimumLeafAngle_IsSet => _CNAMLocation.HasValue;
        public Single MinimumLeafAngle => _MinimumLeafAngle_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MinimumLeafAngleLocation, 4)) : default;
        #endregion
        #region MaximumLeafAngle
        private int _MaximumLeafAngleLocation => _CNAMLocation!.Value + 0x8;
        private bool _MaximumLeafAngle_IsSet => _CNAMLocation.HasValue;
        public Single MaximumLeafAngle => _MaximumLeafAngle_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_MaximumLeafAngleLocation, 4)) : default;
        #endregion
        #region BranchDimmingValue
        private int _BranchDimmingValueLocation => _CNAMLocation!.Value + 0xC;
        private bool _BranchDimmingValue_IsSet => _CNAMLocation.HasValue;
        public Single BranchDimmingValue => _BranchDimmingValue_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BranchDimmingValueLocation, 4)) : default;
        #endregion
        #region LeafDimmingValue
        private int _LeafDimmingValueLocation => _CNAMLocation!.Value + 0x10;
        private bool _LeafDimmingValue_IsSet => _CNAMLocation.HasValue;
        public Single LeafDimmingValue => _LeafDimmingValue_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_LeafDimmingValueLocation, 4)) : default;
        #endregion
        #region ShadowRadius
        private int _ShadowRadiusLocation => _CNAMLocation!.Value + 0x14;
        private bool _ShadowRadius_IsSet => _CNAMLocation.HasValue;
        public Int32 ShadowRadius => _ShadowRadius_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ShadowRadiusLocation, 4)) : default;
        #endregion
        #region RockingSpeed
        private int _RockingSpeedLocation => _CNAMLocation!.Value + 0x18;
        private bool _RockingSpeed_IsSet => _CNAMLocation.HasValue;
        public Single RockingSpeed => _RockingSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RockingSpeedLocation, 4)) : default;
        #endregion
        #region RustleSpeed
        private int _RustleSpeedLocation => _CNAMLocation!.Value + 0x1C;
        private bool _RustleSpeed_IsSet => _CNAMLocation.HasValue;
        public Single RustleSpeed => _RustleSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RustleSpeedLocation, 4)) : default;
        #endregion
        private int? _BNAMLocation;
        public Tree.BNAMDataType BNAMDataTypeState { get; private set; }
        #region BillboardWidth
        private int _BillboardWidthLocation => _BNAMLocation!.Value + 0x0;
        private bool _BillboardWidth_IsSet => _BNAMLocation.HasValue;
        public Single BillboardWidth => _BillboardWidth_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BillboardWidthLocation, 4)) : default;
        #endregion
        #region BillboardHeight
        private int _BillboardHeightLocation => _BNAMLocation!.Value + 0x4;
        private bool _BillboardHeight_IsSet => _BNAMLocation.HasValue;
        public Single BillboardHeight => _BillboardHeight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BillboardHeightLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TreeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TreeBinaryOverlay TreeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new TreeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.SpeedTreeSeeds = BinaryOverlaySetList<UInt32>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => BinaryPrimitives.ReadUInt32LittleEndian(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    _CNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.CNAMDataTypeState = Tree.CNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.RustleSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    _BNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BNAMDataTypeState = Tree.BNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardHeight);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

