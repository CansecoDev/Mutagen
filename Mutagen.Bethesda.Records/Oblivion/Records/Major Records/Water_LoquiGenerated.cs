/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Water :
        OblivionMajorRecord,
        IWaterInternal,
        ILoquiObjectSetter<Water>,
        ILinkSubContainer,
        IEquatable<Water>,
        IEqualsMask
    {
        #region Ctor
        protected Water()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public bool Texture_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Texture];
            set => _hasBeenSetTracker[(int)Water_FieldIndex.Texture] = value;
        }
        bool IWaterGetter.Texture_IsSet => Texture_IsSet;
        private String _Texture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Texture
        {
            get => this._Texture;
            set => Texture_Set(value);
        }
        String IWaterGetter.Texture => this.Texture;
        public void Texture_Set(
            String value,
            bool markSet = true)
        {
            _Texture = value;
            _hasBeenSetTracker[(int)Water_FieldIndex.Texture] = markSet;
        }
        public void Texture_Unset()
        {
            this.Texture_Set(default(String), false);
        }
        #endregion
        #region Opacity
        public bool Opacity_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Opacity];
            set => _hasBeenSetTracker[(int)Water_FieldIndex.Opacity] = value;
        }
        bool IWaterGetter.Opacity_IsSet => Opacity_IsSet;
        private Byte _Opacity;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte Opacity
        {
            get => this._Opacity;
            set => Opacity_Set(value);
        }
        Byte IWaterGetter.Opacity => this.Opacity;
        public void Opacity_Set(
            Byte value,
            bool markSet = true)
        {
            _Opacity = value;
            _hasBeenSetTracker[(int)Water_FieldIndex.Opacity] = markSet;
        }
        public void Opacity_Unset()
        {
            this.Opacity_Set(default(Byte), false);
        }
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)Water_FieldIndex.Flags] = value;
        }
        bool IWaterGetter.Flags_IsSet => Flags_IsSet;
        private Water.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Water.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        Water.Flag IWaterGetter.Flags => this.Flags;
        public void Flags_Set(
            Water.Flag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)Water_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(Water.Flag), false);
        }
        #endregion
        #region MaterialID
        public bool MaterialID_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.MaterialID];
            set => _hasBeenSetTracker[(int)Water_FieldIndex.MaterialID] = value;
        }
        bool IWaterGetter.MaterialID_IsSet => MaterialID_IsSet;
        private String _MaterialID;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String MaterialID
        {
            get => this._MaterialID;
            set => MaterialID_Set(value);
        }
        String IWaterGetter.MaterialID => this.MaterialID;
        public void MaterialID_Set(
            String value,
            bool markSet = true)
        {
            _MaterialID = value;
            _hasBeenSetTracker[(int)Water_FieldIndex.MaterialID] = markSet;
        }
        public void MaterialID_Unset()
        {
            this.MaterialID_Set(default(String), false);
        }
        #endregion
        #region Sound
        public IFormIDSetLink<Sound> Sound_Property { get; } = new FormIDSetLink<Sound>();
        public Sound Sound { get => Sound_Property.Item; set => Sound_Property.Item = value; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLink<Sound> IWater.Sound_Property => this.Sound_Property;
        ISoundGetter IWaterGetter.Sound => this.Sound_Property.Item;
        IFormIDSetLinkGetter<ISoundGetter> IWaterGetter.Sound_Property => this.Sound_Property;
        #endregion
        #region WindVelocity
        private Single _WindVelocity;
        public Single WindVelocity
        {
            get => this._WindVelocity;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._WindVelocity = value;
            }
        }
        #endregion
        #region WindDirection
        private Single _WindDirection;
        public Single WindDirection
        {
            get => this._WindDirection;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._WindDirection = value;
            }
        }
        #endregion
        #region WaveAmplitude
        private Single _WaveAmplitude;
        public Single WaveAmplitude
        {
            get => this._WaveAmplitude;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._WaveAmplitude = value;
            }
        }
        #endregion
        #region WaveFrequency
        private Single _WaveFrequency;
        public Single WaveFrequency
        {
            get => this._WaveFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._WaveFrequency = value;
            }
        }
        #endregion
        #region SunPower
        private Single _SunPower;
        public Single SunPower
        {
            get => this._SunPower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._SunPower = value;
            }
        }
        #endregion
        #region ReflectivityAmount
        private Single _ReflectivityAmount;
        public Single ReflectivityAmount
        {
            get => this._ReflectivityAmount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ReflectivityAmount = value;
            }
        }
        #endregion
        #region FresnelAmount
        private Single _FresnelAmount;
        public Single FresnelAmount
        {
            get => this._FresnelAmount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._FresnelAmount = value;
            }
        }
        #endregion
        #region ScrollXSpeed
        private Single _ScrollXSpeed;
        public Single ScrollXSpeed
        {
            get => this._ScrollXSpeed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ScrollXSpeed = value;
            }
        }
        #endregion
        #region ScrollYSpeed
        private Single _ScrollYSpeed;
        public Single ScrollYSpeed
        {
            get => this._ScrollYSpeed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ScrollYSpeed = value;
            }
        }
        #endregion
        #region FogDistanceNearPlane
        private Single _FogDistanceNearPlane;
        public Single FogDistanceNearPlane
        {
            get => this._FogDistanceNearPlane;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._FogDistanceNearPlane = value;
            }
        }
        #endregion
        #region FogDistanceFarPlane
        private Single _FogDistanceFarPlane;
        public Single FogDistanceFarPlane
        {
            get => this._FogDistanceFarPlane;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FogDistanceFarPlane = value;
            }
        }
        #endregion
        #region ShallowColor
        private Color _ShallowColor;
        public Color ShallowColor
        {
            get => this._ShallowColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._ShallowColor = value;
            }
        }
        #endregion
        #region DeepColor
        private Color _DeepColor;
        public Color DeepColor
        {
            get => this._DeepColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._DeepColor = value;
            }
        }
        #endregion
        #region ReflectionColor
        private Color _ReflectionColor;
        public Color ReflectionColor
        {
            get => this._ReflectionColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._ReflectionColor = value;
            }
        }
        #endregion
        #region TextureBlend
        private Byte _TextureBlend;
        public Byte TextureBlend
        {
            get => this._TextureBlend;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._TextureBlend = value;
            }
        }
        #endregion
        #region RainSimulatorForce
        private Single _RainSimulatorForce;
        public Single RainSimulatorForce
        {
            get => this._RainSimulatorForce;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._RainSimulatorForce = value;
            }
        }
        #endregion
        #region RainSimulatorVelocity
        private Single _RainSimulatorVelocity;
        public Single RainSimulatorVelocity
        {
            get => this._RainSimulatorVelocity;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._RainSimulatorVelocity = value;
            }
        }
        #endregion
        #region RainSimulatorFalloff
        private Single _RainSimulatorFalloff;
        public Single RainSimulatorFalloff
        {
            get => this._RainSimulatorFalloff;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._RainSimulatorFalloff = value;
            }
        }
        #endregion
        #region RainSimulatorDampner
        private Single _RainSimulatorDampner;
        public Single RainSimulatorDampner
        {
            get => this._RainSimulatorDampner;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._RainSimulatorDampner = value;
            }
        }
        #endregion
        #region RainSimulatorStartingSize
        private Single _RainSimulatorStartingSize;
        public Single RainSimulatorStartingSize
        {
            get => this._RainSimulatorStartingSize;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._RainSimulatorStartingSize = value;
            }
        }
        #endregion
        #region DisplacementSimulatorForce
        private Single _DisplacementSimulatorForce;
        public Single DisplacementSimulatorForce
        {
            get => this._DisplacementSimulatorForce;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._DisplacementSimulatorForce = value;
            }
        }
        #endregion
        #region DisplacementSimulatorVelocity
        private Single _DisplacementSimulatorVelocity;
        public Single DisplacementSimulatorVelocity
        {
            get => this._DisplacementSimulatorVelocity;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._DisplacementSimulatorVelocity = value;
            }
        }
        #endregion
        #region DisplacementSimulatorFalloff
        private Single _DisplacementSimulatorFalloff;
        public Single DisplacementSimulatorFalloff
        {
            get => this._DisplacementSimulatorFalloff;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._DisplacementSimulatorFalloff = value;
            }
        }
        #endregion
        #region DisplacementSimulatorDampner
        private Single _DisplacementSimulatorDampner;
        public Single DisplacementSimulatorDampner
        {
            get => this._DisplacementSimulatorDampner;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._DisplacementSimulatorDampner = value;
            }
        }
        #endregion
        #region DisplacementSimulatorStartingSize
        private Single _DisplacementSimulatorStartingSize;
        public Single DisplacementSimulatorStartingSize
        {
            get => this._DisplacementSimulatorStartingSize;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._DisplacementSimulatorStartingSize = value;
            }
        }
        #endregion
        #region Damage
        private UInt16 _Damage;
        public UInt16 Damage
        {
            get => this._Damage;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._Damage = value;
            }
        }
        #endregion
        #region RelatedWaters
        public bool RelatedWaters_IsSet
        {
            get => _hasBeenSetTracker[(int)Water_FieldIndex.RelatedWaters];
            set => _hasBeenSetTracker[(int)Water_FieldIndex.RelatedWaters] = value;
        }
        bool IWaterGetter.RelatedWaters_IsSet => RelatedWaters_IsSet;
        private RelatedWaters _RelatedWaters;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RelatedWaters RelatedWaters
        {
            get => _RelatedWaters;
            set => RelatedWaters_Set(value);
        }
        public void RelatedWaters_Set(
            RelatedWaters value,
            bool hasBeenSet = true)
        {
            _RelatedWaters = value;
            _hasBeenSetTracker[(int)Water_FieldIndex.RelatedWaters] = hasBeenSet;
        }
        public void RelatedWaters_Unset()
        {
            this.RelatedWaters_Set(default(RelatedWaters), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRelatedWatersGetter IWaterGetter.RelatedWaters => this.RelatedWaters;
        #endregion
        #region DATADataTypeState
        public Water.DATADataType DATADataTypeState { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWaterGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            WaterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IWaterGetter rhs)) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Water obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => WaterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((WaterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Water CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Water_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Water CreateFromXml(
            XElement node,
            out Water_ErrorMask errorMask,
            bool doMasks = true,
            Water_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Water CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Water() : null;
                    break;
                default:
                    break;
            }
            var ret = new Water();
            try
            {
                ret.DATADataTypeState |= Water.DATADataType.Break0;
                ret.DATADataTypeState |= Water.DATADataType.Break1;
                ret.DATADataTypeState |= Water.DATADataType.Break2;
                ret.DATADataTypeState |= Water.DATADataType.Break3;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WaterXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Water CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Water_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            string path,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Water_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Water CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Water_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            Stream stream,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Water_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            Water item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Water.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((Water_FieldIndex)index)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.RelatedWaters:
                    return _hasBeenSetTracker[index];
                case Water_FieldIndex.Sound:
                    return Sound_Property.HasBeenSet;
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.DATADataTypeState:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Water_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4,
            Break2 = 8,
            Break3 = 16
        }
        public override IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in base.Links)
            {
                yield return item;
            }
            yield return Sound_Property;
            if (RelatedWaters != null)
            {
                foreach (var item in RelatedWaters.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }

        public override void Link<M>(LinkingPackage<M> package)
            
        {
            base.Link(package: package);
            Sound_Property.Link(package);
            if (RelatedWaters != null)
            {
                RelatedWaters?.Link(package: package);
            }
        }

        public Water(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Water(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Water CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Water CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Water CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<Water>(
                record: new Water(),
                frame: frame,
                errorMask: errorMask,
                recType: Water_Registration.WATR_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            Water item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            OblivionMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            Water item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String TextureParse))
                    {
                        item.Texture = TextureParse;
                    }
                    else
                    {
                        item.Texture = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Texture);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Opacity = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Opacity);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<Water.Flag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Water.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(Water.Flag);
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Flags);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MaterialIDParse))
                    {
                        item.MaterialID = MaterialIDParse;
                    }
                    else
                    {
                        item.MaterialID = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.MaterialID);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.ParseInto(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Sound_Property);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Sound);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = DATADataType.Has;
                    }
                    WaterBinaryCreateTranslation.FillBinaryNothingCustomLogicCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break0;
                        return TryGet<int?>.Succeed(null);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WindVelocityParse))
                    {
                        item.WindVelocity = WindVelocityParse;
                    }
                    else
                    {
                        item.WindVelocity = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WindDirectionParse))
                    {
                        item.WindDirection = WindDirectionParse;
                    }
                    else
                    {
                        item.WindDirection = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WaveAmplitudeParse))
                    {
                        item.WaveAmplitude = WaveAmplitudeParse;
                    }
                    else
                    {
                        item.WaveAmplitude = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single WaveFrequencyParse))
                    {
                        item.WaveFrequency = WaveFrequencyParse;
                    }
                    else
                    {
                        item.WaveFrequency = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single SunPowerParse))
                    {
                        item.SunPower = SunPowerParse;
                    }
                    else
                    {
                        item.SunPower = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ReflectivityAmountParse))
                    {
                        item.ReflectivityAmount = ReflectivityAmountParse;
                    }
                    else
                    {
                        item.ReflectivityAmount = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single FresnelAmountParse))
                    {
                        item.FresnelAmount = FresnelAmountParse;
                    }
                    else
                    {
                        item.FresnelAmount = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ScrollXSpeedParse))
                    {
                        item.ScrollXSpeed = ScrollXSpeedParse;
                    }
                    else
                    {
                        item.ScrollXSpeed = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single ScrollYSpeedParse))
                    {
                        item.ScrollYSpeed = ScrollYSpeedParse;
                    }
                    else
                    {
                        item.ScrollYSpeed = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single FogDistanceNearPlaneParse))
                    {
                        item.FogDistanceNearPlane = FogDistanceNearPlaneParse;
                    }
                    else
                    {
                        item.FogDistanceNearPlane = default(Single);
                    }
                    WaterBinaryCreateTranslation.FillBinaryBloodCustomLogicCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break1;
                        return TryGet<int?>.Succeed((int)Water_FieldIndex.FogDistanceNearPlane);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single FogDistanceFarPlaneParse))
                    {
                        item.FogDistanceFarPlane = FogDistanceFarPlaneParse;
                    }
                    else
                    {
                        item.FogDistanceFarPlane = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true,
                        item: out Color ShallowColorParse))
                    {
                        item.ShallowColor = ShallowColorParse;
                    }
                    else
                    {
                        item.ShallowColor = default(Color);
                    }
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true,
                        item: out Color DeepColorParse))
                    {
                        item.DeepColor = DeepColorParse;
                    }
                    else
                    {
                        item.DeepColor = default(Color);
                    }
                    if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true,
                        item: out Color ReflectionColorParse))
                    {
                        item.ReflectionColor = ReflectionColorParse;
                    }
                    else
                    {
                        item.ReflectionColor = default(Color);
                    }
                    item.TextureBlend = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 3);
                    WaterBinaryCreateTranslation.FillBinaryOilCustomLogicCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break2;
                        return TryGet<int?>.Succeed((int)Water_FieldIndex.TextureBlend);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RainSimulatorForceParse))
                    {
                        item.RainSimulatorForce = RainSimulatorForceParse;
                    }
                    else
                    {
                        item.RainSimulatorForce = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RainSimulatorVelocityParse))
                    {
                        item.RainSimulatorVelocity = RainSimulatorVelocityParse;
                    }
                    else
                    {
                        item.RainSimulatorVelocity = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RainSimulatorFalloffParse))
                    {
                        item.RainSimulatorFalloff = RainSimulatorFalloffParse;
                    }
                    else
                    {
                        item.RainSimulatorFalloff = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RainSimulatorDampnerParse))
                    {
                        item.RainSimulatorDampner = RainSimulatorDampnerParse;
                    }
                    else
                    {
                        item.RainSimulatorDampner = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single RainSimulatorStartingSizeParse))
                    {
                        item.RainSimulatorStartingSize = RainSimulatorStartingSizeParse;
                    }
                    else
                    {
                        item.RainSimulatorStartingSize = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single DisplacementSimulatorForceParse))
                    {
                        item.DisplacementSimulatorForce = DisplacementSimulatorForceParse;
                    }
                    else
                    {
                        item.DisplacementSimulatorForce = default(Single);
                    }
                    WaterBinaryCreateTranslation.FillBinaryOddExtraBytesCustomPublic(
                        frame: dataFrame,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DATADataType.Break3;
                        return TryGet<int?>.Succeed((int)Water_FieldIndex.DisplacementSimulatorForce);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single DisplacementSimulatorVelocityParse))
                    {
                        item.DisplacementSimulatorVelocity = DisplacementSimulatorVelocityParse;
                    }
                    else
                    {
                        item.DisplacementSimulatorVelocity = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single DisplacementSimulatorFalloffParse))
                    {
                        item.DisplacementSimulatorFalloff = DisplacementSimulatorFalloffParse;
                    }
                    else
                    {
                        item.DisplacementSimulatorFalloff = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single DisplacementSimulatorDampnerParse))
                    {
                        item.DisplacementSimulatorDampner = DisplacementSimulatorDampnerParse;
                    }
                    else
                    {
                        item.DisplacementSimulatorDampner = default(Single);
                    }
                    if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        item: out Single DisplacementSimulatorStartingSizeParse))
                    {
                        item.DisplacementSimulatorStartingSize = DisplacementSimulatorStartingSizeParse;
                    }
                    else
                    {
                        item.DisplacementSimulatorStartingSize = default(Single);
                    }
                    item.Damage = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Damage);
                }
                case 0x4D414E47: // GNAM
                {
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                        item.RelatedWaters = Mutagen.Bethesda.Oblivion.RelatedWaters.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.RelatedWaters);
                }
                default:
                    return OblivionMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        void IClearable.Clear()
        {
            ((WaterSetterCommon)((IWaterGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IWater :
        IWaterGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IWaterInternal>
    {
        new String Texture { get; set; }
        new bool Texture_IsSet { get; set; }
        void Texture_Set(String value, bool hasBeenSet = true);
        void Texture_Unset();

        new Byte Opacity { get; set; }
        new bool Opacity_IsSet { get; set; }
        void Opacity_Set(Byte value, bool hasBeenSet = true);
        void Opacity_Unset();

        new Water.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(Water.Flag value, bool hasBeenSet = true);
        void Flags_Unset();

        new String MaterialID { get; set; }
        new bool MaterialID_IsSet { get; set; }
        void MaterialID_Set(String value, bool hasBeenSet = true);
        void MaterialID_Unset();

        new Sound Sound { get; set; }
        new IFormIDSetLink<Sound> Sound_Property { get; }
        new Single WindVelocity { get; set; }

        new Single WindDirection { get; set; }

        new Single WaveAmplitude { get; set; }

        new Single WaveFrequency { get; set; }

        new Single SunPower { get; set; }

        new Single ReflectivityAmount { get; set; }

        new Single FresnelAmount { get; set; }

        new Single ScrollXSpeed { get; set; }

        new Single ScrollYSpeed { get; set; }

        new Single FogDistanceNearPlane { get; set; }

        new Single FogDistanceFarPlane { get; set; }

        new Color ShallowColor { get; set; }

        new Color DeepColor { get; set; }

        new Color ReflectionColor { get; set; }

        new Byte TextureBlend { get; set; }

        new Single RainSimulatorForce { get; set; }

        new Single RainSimulatorVelocity { get; set; }

        new Single RainSimulatorFalloff { get; set; }

        new Single RainSimulatorDampner { get; set; }

        new Single RainSimulatorStartingSize { get; set; }

        new Single DisplacementSimulatorForce { get; set; }

        new Single DisplacementSimulatorVelocity { get; set; }

        new Single DisplacementSimulatorFalloff { get; set; }

        new Single DisplacementSimulatorDampner { get; set; }

        new Single DisplacementSimulatorStartingSize { get; set; }

        new UInt16 Damage { get; set; }

        new RelatedWaters RelatedWaters { get; set; }
        new bool RelatedWaters_IsSet { get; set; }
        void RelatedWaters_Set(RelatedWaters value, bool hasBeenSet = true);
        void RelatedWaters_Unset();

        new Water.DATADataType DATADataTypeState { get; set; }

    }

    public partial interface IWaterInternal :
        IOblivionMajorRecordInternal,
        IWater,
        IWaterGetter
    {
    }

    public partial interface IWaterGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IWaterGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Texture
        String Texture { get; }
        bool Texture_IsSet { get; }

        #endregion
        #region Opacity
        Byte Opacity { get; }
        bool Opacity_IsSet { get; }

        #endregion
        #region Flags
        Water.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion
        #region MaterialID
        String MaterialID { get; }
        bool MaterialID_IsSet { get; }

        #endregion
        #region Sound
        ISoundGetter Sound { get; }
        IFormIDSetLinkGetter<ISoundGetter> Sound_Property { get; }

        #endregion
        #region WindVelocity
        Single WindVelocity { get; }

        #endregion
        #region WindDirection
        Single WindDirection { get; }

        #endregion
        #region WaveAmplitude
        Single WaveAmplitude { get; }

        #endregion
        #region WaveFrequency
        Single WaveFrequency { get; }

        #endregion
        #region SunPower
        Single SunPower { get; }

        #endregion
        #region ReflectivityAmount
        Single ReflectivityAmount { get; }

        #endregion
        #region FresnelAmount
        Single FresnelAmount { get; }

        #endregion
        #region ScrollXSpeed
        Single ScrollXSpeed { get; }

        #endregion
        #region ScrollYSpeed
        Single ScrollYSpeed { get; }

        #endregion
        #region FogDistanceNearPlane
        Single FogDistanceNearPlane { get; }

        #endregion
        #region FogDistanceFarPlane
        Single FogDistanceFarPlane { get; }

        #endregion
        #region ShallowColor
        Color ShallowColor { get; }

        #endregion
        #region DeepColor
        Color DeepColor { get; }

        #endregion
        #region ReflectionColor
        Color ReflectionColor { get; }

        #endregion
        #region TextureBlend
        Byte TextureBlend { get; }

        #endregion
        #region RainSimulatorForce
        Single RainSimulatorForce { get; }

        #endregion
        #region RainSimulatorVelocity
        Single RainSimulatorVelocity { get; }

        #endregion
        #region RainSimulatorFalloff
        Single RainSimulatorFalloff { get; }

        #endregion
        #region RainSimulatorDampner
        Single RainSimulatorDampner { get; }

        #endregion
        #region RainSimulatorStartingSize
        Single RainSimulatorStartingSize { get; }

        #endregion
        #region DisplacementSimulatorForce
        Single DisplacementSimulatorForce { get; }

        #endregion
        #region DisplacementSimulatorVelocity
        Single DisplacementSimulatorVelocity { get; }

        #endregion
        #region DisplacementSimulatorFalloff
        Single DisplacementSimulatorFalloff { get; }

        #endregion
        #region DisplacementSimulatorDampner
        Single DisplacementSimulatorDampner { get; }

        #endregion
        #region DisplacementSimulatorStartingSize
        Single DisplacementSimulatorStartingSize { get; }

        #endregion
        #region Damage
        UInt16 Damage { get; }

        #endregion
        #region RelatedWaters
        IRelatedWatersGetter RelatedWaters { get; }
        bool RelatedWaters_IsSet { get; }

        #endregion
        #region DATADataTypeState
        Water.DATADataType DATADataTypeState { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class WaterMixIn
    {
        public static void Clear(this IWaterInternal item)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Water_Mask<bool> GetEqualsMask(
            this IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWaterGetter item,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWaterGetter item,
            FileGeneration fg,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            ((WaterCommon)((IWaterGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWaterGetter item,
            Water_Mask<bool?> checkMask)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Water_Mask<bool> GetHasBeenSetMask(this IWaterGetter item)
        {
            var ret = new Water_Mask<bool>();
            ((WaterCommon)((IWaterGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWaterGetter item,
            IWaterGetter rhs)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this Water lhs,
            Water rhs,
            Water_CopyMask copyMask,
            Water def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this Water lhs,
            Water rhs,
            out Water_ErrorMask errorMask,
            Water_CopyMask copyMask = null,
            Water def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WaterSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this Water lhs,
            Water rhs,
            ErrorMaskBuilder errorMask,
            Water_CopyMask copyMask = null,
            Water def = null)
        {
            WaterSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Water_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Texture = 5,
        Opacity = 6,
        Flags = 7,
        MaterialID = 8,
        Sound = 9,
        WindVelocity = 10,
        WindDirection = 11,
        WaveAmplitude = 12,
        WaveFrequency = 13,
        SunPower = 14,
        ReflectivityAmount = 15,
        FresnelAmount = 16,
        ScrollXSpeed = 17,
        ScrollYSpeed = 18,
        FogDistanceNearPlane = 19,
        FogDistanceFarPlane = 20,
        ShallowColor = 21,
        DeepColor = 22,
        ReflectionColor = 23,
        TextureBlend = 24,
        RainSimulatorForce = 25,
        RainSimulatorVelocity = 26,
        RainSimulatorFalloff = 27,
        RainSimulatorDampner = 28,
        RainSimulatorStartingSize = 29,
        DisplacementSimulatorForce = 30,
        DisplacementSimulatorVelocity = 31,
        DisplacementSimulatorFalloff = 32,
        DisplacementSimulatorDampner = 33,
        DisplacementSimulatorStartingSize = 34,
        Damage = 35,
        RelatedWaters = 36,
        DATADataTypeState = 37,
    }
    #endregion

    #region Registration
    public class Water_Registration : ILoquiRegistration
    {
        public static readonly Water_Registration Instance = new Water_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 127,
            version: 0);

        public const string GUID = "31d50641-f6df-4533-89c3-e764dc35a702";

        public const ushort AdditionalFieldCount = 33;

        public const ushort FieldCount = 38;

        public static readonly Type MaskType = typeof(Water_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Water_ErrorMask);

        public static readonly Type ClassType = typeof(Water);

        public static readonly Type GetterType = typeof(IWaterGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWater);

        public static readonly Type InternalSetterType = typeof(IWaterInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Water";

        public const string Name = "Water";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)Water_FieldIndex.Texture;
                case "OPACITY":
                    return (ushort)Water_FieldIndex.Opacity;
                case "FLAGS":
                    return (ushort)Water_FieldIndex.Flags;
                case "MATERIALID":
                    return (ushort)Water_FieldIndex.MaterialID;
                case "SOUND":
                    return (ushort)Water_FieldIndex.Sound;
                case "WINDVELOCITY":
                    return (ushort)Water_FieldIndex.WindVelocity;
                case "WINDDIRECTION":
                    return (ushort)Water_FieldIndex.WindDirection;
                case "WAVEAMPLITUDE":
                    return (ushort)Water_FieldIndex.WaveAmplitude;
                case "WAVEFREQUENCY":
                    return (ushort)Water_FieldIndex.WaveFrequency;
                case "SUNPOWER":
                    return (ushort)Water_FieldIndex.SunPower;
                case "REFLECTIVITYAMOUNT":
                    return (ushort)Water_FieldIndex.ReflectivityAmount;
                case "FRESNELAMOUNT":
                    return (ushort)Water_FieldIndex.FresnelAmount;
                case "SCROLLXSPEED":
                    return (ushort)Water_FieldIndex.ScrollXSpeed;
                case "SCROLLYSPEED":
                    return (ushort)Water_FieldIndex.ScrollYSpeed;
                case "FOGDISTANCENEARPLANE":
                    return (ushort)Water_FieldIndex.FogDistanceNearPlane;
                case "FOGDISTANCEFARPLANE":
                    return (ushort)Water_FieldIndex.FogDistanceFarPlane;
                case "SHALLOWCOLOR":
                    return (ushort)Water_FieldIndex.ShallowColor;
                case "DEEPCOLOR":
                    return (ushort)Water_FieldIndex.DeepColor;
                case "REFLECTIONCOLOR":
                    return (ushort)Water_FieldIndex.ReflectionColor;
                case "TEXTUREBLEND":
                    return (ushort)Water_FieldIndex.TextureBlend;
                case "RAINSIMULATORFORCE":
                    return (ushort)Water_FieldIndex.RainSimulatorForce;
                case "RAINSIMULATORVELOCITY":
                    return (ushort)Water_FieldIndex.RainSimulatorVelocity;
                case "RAINSIMULATORFALLOFF":
                    return (ushort)Water_FieldIndex.RainSimulatorFalloff;
                case "RAINSIMULATORDAMPNER":
                    return (ushort)Water_FieldIndex.RainSimulatorDampner;
                case "RAINSIMULATORSTARTINGSIZE":
                    return (ushort)Water_FieldIndex.RainSimulatorStartingSize;
                case "DISPLACEMENTSIMULATORFORCE":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorForce;
                case "DISPLACEMENTSIMULATORVELOCITY":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorVelocity;
                case "DISPLACEMENTSIMULATORFALLOFF":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorFalloff;
                case "DISPLACEMENTSIMULATORDAMPNER":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorDampner;
                case "DISPLACEMENTSIMULATORSTARTINGSIZE":
                    return (ushort)Water_FieldIndex.DisplacementSimulatorStartingSize;
                case "DAMAGE":
                    return (ushort)Water_FieldIndex.Damage;
                case "RELATEDWATERS":
                    return (ushort)Water_FieldIndex.RelatedWaters;
                case "DATADATATYPESTATE":
                    return (ushort)Water_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                case Water_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.RelatedWaters:
                    return true;
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                case Water_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return "Texture";
                case Water_FieldIndex.Opacity:
                    return "Opacity";
                case Water_FieldIndex.Flags:
                    return "Flags";
                case Water_FieldIndex.MaterialID:
                    return "MaterialID";
                case Water_FieldIndex.Sound:
                    return "Sound";
                case Water_FieldIndex.WindVelocity:
                    return "WindVelocity";
                case Water_FieldIndex.WindDirection:
                    return "WindDirection";
                case Water_FieldIndex.WaveAmplitude:
                    return "WaveAmplitude";
                case Water_FieldIndex.WaveFrequency:
                    return "WaveFrequency";
                case Water_FieldIndex.SunPower:
                    return "SunPower";
                case Water_FieldIndex.ReflectivityAmount:
                    return "ReflectivityAmount";
                case Water_FieldIndex.FresnelAmount:
                    return "FresnelAmount";
                case Water_FieldIndex.ScrollXSpeed:
                    return "ScrollXSpeed";
                case Water_FieldIndex.ScrollYSpeed:
                    return "ScrollYSpeed";
                case Water_FieldIndex.FogDistanceNearPlane:
                    return "FogDistanceNearPlane";
                case Water_FieldIndex.FogDistanceFarPlane:
                    return "FogDistanceFarPlane";
                case Water_FieldIndex.ShallowColor:
                    return "ShallowColor";
                case Water_FieldIndex.DeepColor:
                    return "DeepColor";
                case Water_FieldIndex.ReflectionColor:
                    return "ReflectionColor";
                case Water_FieldIndex.TextureBlend:
                    return "TextureBlend";
                case Water_FieldIndex.RainSimulatorForce:
                    return "RainSimulatorForce";
                case Water_FieldIndex.RainSimulatorVelocity:
                    return "RainSimulatorVelocity";
                case Water_FieldIndex.RainSimulatorFalloff:
                    return "RainSimulatorFalloff";
                case Water_FieldIndex.RainSimulatorDampner:
                    return "RainSimulatorDampner";
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return "RainSimulatorStartingSize";
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return "DisplacementSimulatorForce";
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return "DisplacementSimulatorVelocity";
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return "DisplacementSimulatorFalloff";
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return "DisplacementSimulatorDampner";
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return "DisplacementSimulatorStartingSize";
                case Water_FieldIndex.Damage:
                    return "Damage";
                case Water_FieldIndex.RelatedWaters:
                    return "RelatedWaters";
                case Water_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                case Water_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.WindVelocity:
                case Water_FieldIndex.WindDirection:
                case Water_FieldIndex.WaveAmplitude:
                case Water_FieldIndex.WaveFrequency:
                case Water_FieldIndex.SunPower:
                case Water_FieldIndex.ReflectivityAmount:
                case Water_FieldIndex.FresnelAmount:
                case Water_FieldIndex.ScrollXSpeed:
                case Water_FieldIndex.ScrollYSpeed:
                case Water_FieldIndex.FogDistanceNearPlane:
                case Water_FieldIndex.FogDistanceFarPlane:
                case Water_FieldIndex.ShallowColor:
                case Water_FieldIndex.DeepColor:
                case Water_FieldIndex.ReflectionColor:
                case Water_FieldIndex.TextureBlend:
                case Water_FieldIndex.RainSimulatorForce:
                case Water_FieldIndex.RainSimulatorVelocity:
                case Water_FieldIndex.RainSimulatorFalloff:
                case Water_FieldIndex.RainSimulatorDampner:
                case Water_FieldIndex.RainSimulatorStartingSize:
                case Water_FieldIndex.DisplacementSimulatorForce:
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                case Water_FieldIndex.DisplacementSimulatorDampner:
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                case Water_FieldIndex.Damage:
                case Water_FieldIndex.RelatedWaters:
                case Water_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return typeof(String);
                case Water_FieldIndex.Opacity:
                    return typeof(Byte);
                case Water_FieldIndex.Flags:
                    return typeof(Water.Flag);
                case Water_FieldIndex.MaterialID:
                    return typeof(String);
                case Water_FieldIndex.Sound:
                    return typeof(IFormIDSetLink<Sound>);
                case Water_FieldIndex.WindVelocity:
                    return typeof(Single);
                case Water_FieldIndex.WindDirection:
                    return typeof(Single);
                case Water_FieldIndex.WaveAmplitude:
                    return typeof(Single);
                case Water_FieldIndex.WaveFrequency:
                    return typeof(Single);
                case Water_FieldIndex.SunPower:
                    return typeof(Single);
                case Water_FieldIndex.ReflectivityAmount:
                    return typeof(Single);
                case Water_FieldIndex.FresnelAmount:
                    return typeof(Single);
                case Water_FieldIndex.ScrollXSpeed:
                    return typeof(Single);
                case Water_FieldIndex.ScrollYSpeed:
                    return typeof(Single);
                case Water_FieldIndex.FogDistanceNearPlane:
                    return typeof(Single);
                case Water_FieldIndex.FogDistanceFarPlane:
                    return typeof(Single);
                case Water_FieldIndex.ShallowColor:
                    return typeof(Color);
                case Water_FieldIndex.DeepColor:
                    return typeof(Color);
                case Water_FieldIndex.ReflectionColor:
                    return typeof(Color);
                case Water_FieldIndex.TextureBlend:
                    return typeof(Byte);
                case Water_FieldIndex.RainSimulatorForce:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorVelocity:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorFalloff:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorDampner:
                    return typeof(Single);
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return typeof(Single);
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return typeof(Single);
                case Water_FieldIndex.Damage:
                    return typeof(UInt16);
                case Water_FieldIndex.RelatedWaters:
                    return typeof(RelatedWaters);
                case Water_FieldIndex.DATADataTypeState:
                    return typeof(Water.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WaterXmlWriteTranslation);
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WATR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(WaterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WaterSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly WaterSetterCommon Instance = new WaterSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IWaterInternal item)
        {
            ClearPartial();
            item.Texture_Unset();
            item.Opacity_Unset();
            item.Flags_Unset();
            item.MaterialID_Unset();
            item.Sound_Property.Unset();
            item.WindVelocity = default(Single);
            item.WindDirection = default(Single);
            item.WaveAmplitude = default(Single);
            item.WaveFrequency = default(Single);
            item.SunPower = default(Single);
            item.ReflectivityAmount = default(Single);
            item.FresnelAmount = default(Single);
            item.ScrollXSpeed = default(Single);
            item.ScrollYSpeed = default(Single);
            item.FogDistanceNearPlane = default(Single);
            item.FogDistanceFarPlane = default(Single);
            item.ShallowColor = default(Color);
            item.DeepColor = default(Color);
            item.ReflectionColor = default(Color);
            item.TextureBlend = default(Byte);
            item.RainSimulatorForce = default(Single);
            item.RainSimulatorVelocity = default(Single);
            item.RainSimulatorFalloff = default(Single);
            item.RainSimulatorDampner = default(Single);
            item.RainSimulatorStartingSize = default(Single);
            item.DisplacementSimulatorForce = default(Single);
            item.DisplacementSimulatorVelocity = default(Single);
            item.DisplacementSimulatorFalloff = default(Single);
            item.DisplacementSimulatorDampner = default(Single);
            item.DisplacementSimulatorStartingSize = default(Single);
            item.Damage = default(UInt16);
            item.RelatedWaters_Unset();
            item.DATADataTypeState = default(Water.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
    }
    public partial class WaterCommon : OblivionMajorRecordCommon
    {
        public new static readonly WaterCommon Instance = new WaterCommon();

        public Water_Mask<bool> GetEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Water_Mask<bool>();
            ((WaterCommon)((IWaterGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            Water_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Texture = item.Texture_IsSet == rhs.Texture_IsSet && string.Equals(item.Texture, rhs.Texture);
            ret.Opacity = item.Opacity_IsSet == rhs.Opacity_IsSet && item.Opacity == rhs.Opacity;
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            ret.MaterialID = item.MaterialID_IsSet == rhs.MaterialID_IsSet && string.Equals(item.MaterialID, rhs.MaterialID);
            ret.Sound = item.Sound_Property.FormKey == rhs.Sound_Property.FormKey;
            ret.WindVelocity = item.WindVelocity.EqualsWithin(rhs.WindVelocity);
            ret.WindDirection = item.WindDirection.EqualsWithin(rhs.WindDirection);
            ret.WaveAmplitude = item.WaveAmplitude.EqualsWithin(rhs.WaveAmplitude);
            ret.WaveFrequency = item.WaveFrequency.EqualsWithin(rhs.WaveFrequency);
            ret.SunPower = item.SunPower.EqualsWithin(rhs.SunPower);
            ret.ReflectivityAmount = item.ReflectivityAmount.EqualsWithin(rhs.ReflectivityAmount);
            ret.FresnelAmount = item.FresnelAmount.EqualsWithin(rhs.FresnelAmount);
            ret.ScrollXSpeed = item.ScrollXSpeed.EqualsWithin(rhs.ScrollXSpeed);
            ret.ScrollYSpeed = item.ScrollYSpeed.EqualsWithin(rhs.ScrollYSpeed);
            ret.FogDistanceNearPlane = item.FogDistanceNearPlane.EqualsWithin(rhs.FogDistanceNearPlane);
            ret.FogDistanceFarPlane = item.FogDistanceFarPlane.EqualsWithin(rhs.FogDistanceFarPlane);
            ret.ShallowColor = item.ShallowColor.ColorOnlyEquals(rhs.ShallowColor);
            ret.DeepColor = item.DeepColor.ColorOnlyEquals(rhs.DeepColor);
            ret.ReflectionColor = item.ReflectionColor.ColorOnlyEquals(rhs.ReflectionColor);
            ret.TextureBlend = item.TextureBlend == rhs.TextureBlend;
            ret.RainSimulatorForce = item.RainSimulatorForce.EqualsWithin(rhs.RainSimulatorForce);
            ret.RainSimulatorVelocity = item.RainSimulatorVelocity.EqualsWithin(rhs.RainSimulatorVelocity);
            ret.RainSimulatorFalloff = item.RainSimulatorFalloff.EqualsWithin(rhs.RainSimulatorFalloff);
            ret.RainSimulatorDampner = item.RainSimulatorDampner.EqualsWithin(rhs.RainSimulatorDampner);
            ret.RainSimulatorStartingSize = item.RainSimulatorStartingSize.EqualsWithin(rhs.RainSimulatorStartingSize);
            ret.DisplacementSimulatorForce = item.DisplacementSimulatorForce.EqualsWithin(rhs.DisplacementSimulatorForce);
            ret.DisplacementSimulatorVelocity = item.DisplacementSimulatorVelocity.EqualsWithin(rhs.DisplacementSimulatorVelocity);
            ret.DisplacementSimulatorFalloff = item.DisplacementSimulatorFalloff.EqualsWithin(rhs.DisplacementSimulatorFalloff);
            ret.DisplacementSimulatorDampner = item.DisplacementSimulatorDampner.EqualsWithin(rhs.DisplacementSimulatorDampner);
            ret.DisplacementSimulatorStartingSize = item.DisplacementSimulatorStartingSize.EqualsWithin(rhs.DisplacementSimulatorStartingSize);
            ret.Damage = item.Damage == rhs.Damage;
            ret.RelatedWaters = EqualsMaskHelper.EqualsHelper(
                item.RelatedWaters_IsSet,
                rhs.RelatedWaters_IsSet,
                item.RelatedWaters,
                rhs.RelatedWaters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWaterGetter item,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWaterGetter item,
            FileGeneration fg,
            string name = null,
            Water_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Water =>");
            }
            else
            {
                fg.AppendLine($"{name} (Water) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWaterGetter item,
            FileGeneration fg,
            Water_Mask<bool> printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Texture ?? true)
            {
                fg.AppendLine($"Texture => {item.Texture}");
            }
            if (printMask?.Opacity ?? true)
            {
                fg.AppendLine($"Opacity => {item.Opacity}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.MaterialID ?? true)
            {
                fg.AppendLine($"MaterialID => {item.MaterialID}");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendLine($"Sound => {item.Sound_Property}");
            }
            if (printMask?.WindVelocity ?? true)
            {
                fg.AppendLine($"WindVelocity => {item.WindVelocity}");
            }
            if (printMask?.WindDirection ?? true)
            {
                fg.AppendLine($"WindDirection => {item.WindDirection}");
            }
            if (printMask?.WaveAmplitude ?? true)
            {
                fg.AppendLine($"WaveAmplitude => {item.WaveAmplitude}");
            }
            if (printMask?.WaveFrequency ?? true)
            {
                fg.AppendLine($"WaveFrequency => {item.WaveFrequency}");
            }
            if (printMask?.SunPower ?? true)
            {
                fg.AppendLine($"SunPower => {item.SunPower}");
            }
            if (printMask?.ReflectivityAmount ?? true)
            {
                fg.AppendLine($"ReflectivityAmount => {item.ReflectivityAmount}");
            }
            if (printMask?.FresnelAmount ?? true)
            {
                fg.AppendLine($"FresnelAmount => {item.FresnelAmount}");
            }
            if (printMask?.ScrollXSpeed ?? true)
            {
                fg.AppendLine($"ScrollXSpeed => {item.ScrollXSpeed}");
            }
            if (printMask?.ScrollYSpeed ?? true)
            {
                fg.AppendLine($"ScrollYSpeed => {item.ScrollYSpeed}");
            }
            if (printMask?.FogDistanceNearPlane ?? true)
            {
                fg.AppendLine($"FogDistanceNearPlane => {item.FogDistanceNearPlane}");
            }
            if (printMask?.FogDistanceFarPlane ?? true)
            {
                fg.AppendLine($"FogDistanceFarPlane => {item.FogDistanceFarPlane}");
            }
            if (printMask?.ShallowColor ?? true)
            {
                fg.AppendLine($"ShallowColor => {item.ShallowColor}");
            }
            if (printMask?.DeepColor ?? true)
            {
                fg.AppendLine($"DeepColor => {item.DeepColor}");
            }
            if (printMask?.ReflectionColor ?? true)
            {
                fg.AppendLine($"ReflectionColor => {item.ReflectionColor}");
            }
            if (printMask?.TextureBlend ?? true)
            {
                fg.AppendLine($"TextureBlend => {item.TextureBlend}");
            }
            if (printMask?.RainSimulatorForce ?? true)
            {
                fg.AppendLine($"RainSimulatorForce => {item.RainSimulatorForce}");
            }
            if (printMask?.RainSimulatorVelocity ?? true)
            {
                fg.AppendLine($"RainSimulatorVelocity => {item.RainSimulatorVelocity}");
            }
            if (printMask?.RainSimulatorFalloff ?? true)
            {
                fg.AppendLine($"RainSimulatorFalloff => {item.RainSimulatorFalloff}");
            }
            if (printMask?.RainSimulatorDampner ?? true)
            {
                fg.AppendLine($"RainSimulatorDampner => {item.RainSimulatorDampner}");
            }
            if (printMask?.RainSimulatorStartingSize ?? true)
            {
                fg.AppendLine($"RainSimulatorStartingSize => {item.RainSimulatorStartingSize}");
            }
            if (printMask?.DisplacementSimulatorForce ?? true)
            {
                fg.AppendLine($"DisplacementSimulatorForce => {item.DisplacementSimulatorForce}");
            }
            if (printMask?.DisplacementSimulatorVelocity ?? true)
            {
                fg.AppendLine($"DisplacementSimulatorVelocity => {item.DisplacementSimulatorVelocity}");
            }
            if (printMask?.DisplacementSimulatorFalloff ?? true)
            {
                fg.AppendLine($"DisplacementSimulatorFalloff => {item.DisplacementSimulatorFalloff}");
            }
            if (printMask?.DisplacementSimulatorDampner ?? true)
            {
                fg.AppendLine($"DisplacementSimulatorDampner => {item.DisplacementSimulatorDampner}");
            }
            if (printMask?.DisplacementSimulatorStartingSize ?? true)
            {
                fg.AppendLine($"DisplacementSimulatorStartingSize => {item.DisplacementSimulatorStartingSize}");
            }
            if (printMask?.Damage ?? true)
            {
                fg.AppendLine($"Damage => {item.Damage}");
            }
            if (printMask?.RelatedWaters?.Overall ?? true)
            {
                item.RelatedWaters?.ToString(fg, "RelatedWaters");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IWaterGetter item,
            Water_Mask<bool?> checkMask)
        {
            if (checkMask.Texture.HasValue && checkMask.Texture.Value != item.Texture_IsSet) return false;
            if (checkMask.Opacity.HasValue && checkMask.Opacity.Value != item.Opacity_IsSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            if (checkMask.MaterialID.HasValue && checkMask.MaterialID.Value != item.MaterialID_IsSet) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != item.Sound_Property.HasBeenSet) return false;
            if (checkMask.RelatedWaters.Overall.HasValue && checkMask.RelatedWaters.Overall.Value != item.RelatedWaters_IsSet) return false;
            if (checkMask.RelatedWaters.Specific != null && (item.RelatedWaters == null || !item.RelatedWaters.HasBeenSet(checkMask.RelatedWaters.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWaterGetter item,
            Water_Mask<bool> mask)
        {
            mask.Texture = item.Texture_IsSet;
            mask.Opacity = item.Opacity_IsSet;
            mask.Flags = item.Flags_IsSet;
            mask.MaterialID = item.MaterialID_IsSet;
            mask.Sound = item.Sound_Property.HasBeenSet;
            mask.WindVelocity = true;
            mask.WindDirection = true;
            mask.WaveAmplitude = true;
            mask.WaveFrequency = true;
            mask.SunPower = true;
            mask.ReflectivityAmount = true;
            mask.FresnelAmount = true;
            mask.ScrollXSpeed = true;
            mask.ScrollYSpeed = true;
            mask.FogDistanceNearPlane = true;
            mask.FogDistanceFarPlane = true;
            mask.ShallowColor = true;
            mask.DeepColor = true;
            mask.ReflectionColor = true;
            mask.TextureBlend = true;
            mask.RainSimulatorForce = true;
            mask.RainSimulatorVelocity = true;
            mask.RainSimulatorFalloff = true;
            mask.RainSimulatorDampner = true;
            mask.RainSimulatorStartingSize = true;
            mask.DisplacementSimulatorForce = true;
            mask.DisplacementSimulatorVelocity = true;
            mask.DisplacementSimulatorFalloff = true;
            mask.DisplacementSimulatorDampner = true;
            mask.DisplacementSimulatorStartingSize = true;
            mask.Damage = true;
            mask.RelatedWaters = new MaskItem<bool, RelatedWaters_Mask<bool>>(item.RelatedWaters_IsSet, item.RelatedWaters.GetHasBeenSetMask());
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Water_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static Water_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWaterGetter lhs,
            IWaterGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Texture_IsSet != rhs.Texture_IsSet) return false;
            if (lhs.Texture_IsSet)
            {
                if (!string.Equals(lhs.Texture, rhs.Texture)) return false;
            }
            if (lhs.Opacity_IsSet != rhs.Opacity_IsSet) return false;
            if (lhs.Opacity_IsSet)
            {
                if (lhs.Opacity != rhs.Opacity) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if (lhs.MaterialID_IsSet != rhs.MaterialID_IsSet) return false;
            if (lhs.MaterialID_IsSet)
            {
                if (!string.Equals(lhs.MaterialID, rhs.MaterialID)) return false;
            }
            if (lhs.Sound_Property.HasBeenSet != rhs.Sound_Property.HasBeenSet) return false;
            if (lhs.Sound_Property.HasBeenSet)
            {
                if (!lhs.Sound_Property.Equals(rhs.Sound_Property)) return false;
            }
            if (!lhs.WindVelocity.EqualsWithin(rhs.WindVelocity)) return false;
            if (!lhs.WindDirection.EqualsWithin(rhs.WindDirection)) return false;
            if (!lhs.WaveAmplitude.EqualsWithin(rhs.WaveAmplitude)) return false;
            if (!lhs.WaveFrequency.EqualsWithin(rhs.WaveFrequency)) return false;
            if (!lhs.SunPower.EqualsWithin(rhs.SunPower)) return false;
            if (!lhs.ReflectivityAmount.EqualsWithin(rhs.ReflectivityAmount)) return false;
            if (!lhs.FresnelAmount.EqualsWithin(rhs.FresnelAmount)) return false;
            if (!lhs.ScrollXSpeed.EqualsWithin(rhs.ScrollXSpeed)) return false;
            if (!lhs.ScrollYSpeed.EqualsWithin(rhs.ScrollYSpeed)) return false;
            if (!lhs.FogDistanceNearPlane.EqualsWithin(rhs.FogDistanceNearPlane)) return false;
            if (!lhs.FogDistanceFarPlane.EqualsWithin(rhs.FogDistanceFarPlane)) return false;
            if (!lhs.ShallowColor.ColorOnlyEquals(rhs.ShallowColor)) return false;
            if (!lhs.DeepColor.ColorOnlyEquals(rhs.DeepColor)) return false;
            if (!lhs.ReflectionColor.ColorOnlyEquals(rhs.ReflectionColor)) return false;
            if (lhs.TextureBlend != rhs.TextureBlend) return false;
            if (!lhs.RainSimulatorForce.EqualsWithin(rhs.RainSimulatorForce)) return false;
            if (!lhs.RainSimulatorVelocity.EqualsWithin(rhs.RainSimulatorVelocity)) return false;
            if (!lhs.RainSimulatorFalloff.EqualsWithin(rhs.RainSimulatorFalloff)) return false;
            if (!lhs.RainSimulatorDampner.EqualsWithin(rhs.RainSimulatorDampner)) return false;
            if (!lhs.RainSimulatorStartingSize.EqualsWithin(rhs.RainSimulatorStartingSize)) return false;
            if (!lhs.DisplacementSimulatorForce.EqualsWithin(rhs.DisplacementSimulatorForce)) return false;
            if (!lhs.DisplacementSimulatorVelocity.EqualsWithin(rhs.DisplacementSimulatorVelocity)) return false;
            if (!lhs.DisplacementSimulatorFalloff.EqualsWithin(rhs.DisplacementSimulatorFalloff)) return false;
            if (!lhs.DisplacementSimulatorDampner.EqualsWithin(rhs.DisplacementSimulatorDampner)) return false;
            if (!lhs.DisplacementSimulatorStartingSize.EqualsWithin(rhs.DisplacementSimulatorStartingSize)) return false;
            if (lhs.Damage != rhs.Damage) return false;
            if (lhs.RelatedWaters_IsSet != rhs.RelatedWaters_IsSet) return false;
            if (lhs.RelatedWaters_IsSet)
            {
                if (!object.Equals(lhs.RelatedWaters, rhs.RelatedWaters)) return false;
            }
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter lhs,
            IOblivionMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IWaterGetter)lhs,
                rhs: rhs as IWaterGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IWaterGetter)lhs,
                rhs: rhs as IWaterGetter);
        }
        
        public virtual int GetHashCode(IWaterGetter item)
        {
            int ret = 0;
            if (item.Texture_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Texture).CombineHashCode(ret);
            }
            if (item.Opacity_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Opacity).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            if (item.MaterialID_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaterialID).CombineHashCode(ret);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(item.Sound).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.WindVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WindDirection).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WaveAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WaveFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunPower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ReflectivityAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FresnelAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ScrollXSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ScrollYSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogDistanceNearPlane).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogDistanceFarPlane).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ShallowColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DeepColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ReflectionColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TextureBlend).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RainSimulatorForce).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RainSimulatorVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RainSimulatorFalloff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RainSimulatorDampner).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RainSimulatorStartingSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DisplacementSimulatorForce).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DisplacementSimulatorVelocity).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DisplacementSimulatorFalloff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DisplacementSimulatorDampner).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DisplacementSimulatorStartingSize).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Damage).CombineHashCode(ret);
            if (item.RelatedWaters_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RelatedWaters).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(Water obj, Water rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Water(getNextFormKey());
            ret.CopyFieldsFrom((Water)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Water)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WaterSetterCopyCommon : OblivionMajorRecordSetterCopyCommon
    {
        public new static readonly WaterSetterCopyCommon Instance = new WaterSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Water item,
            Water rhs,
            Water def,
            ErrorMaskBuilder errorMask,
            Water_CopyMask copyMask)
        {
            OblivionMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Texture ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Texture,
                        rhsHasBeenSet: rhs.Texture_IsSet,
                        defItem: def?.Texture ?? default(String),
                        defHasBeenSet: def?.Texture_IsSet ?? false,
                        outRhsItem: out var rhsTextureItem,
                        outDefItem: out var defTextureItem))
                    {
                        item.Texture = rhsTextureItem;
                    }
                    else
                    {
                        item.Texture_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Opacity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Opacity,
                        rhsHasBeenSet: rhs.Opacity_IsSet,
                        defItem: def?.Opacity ?? default(Byte),
                        defHasBeenSet: def?.Opacity_IsSet ?? false,
                        outRhsItem: out var rhsOpacityItem,
                        outDefItem: out var defOpacityItem))
                    {
                        item.Opacity = rhsOpacityItem;
                    }
                    else
                    {
                        item.Opacity_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(Water.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaterialID ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.MaterialID,
                        rhsHasBeenSet: rhs.MaterialID_IsSet,
                        defItem: def?.MaterialID ?? default(String),
                        defHasBeenSet: def?.MaterialID_IsSet ?? false,
                        outRhsItem: out var rhsMaterialIDItem,
                        outDefItem: out var defMaterialIDItem))
                    {
                        item.MaterialID = rhsMaterialIDItem;
                    }
                    else
                    {
                        item.MaterialID_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Sound ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Sound);
                try
                {
                    item.Sound_Property.SetLink(
                        rhs: rhs.Sound_Property,
                        def: def?.Sound_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.WindVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WindVelocity);
                item.WindVelocity = rhs.WindVelocity;
                errorMask?.PopIndex();
            }
            if (copyMask?.WindDirection ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WindDirection);
                item.WindDirection = rhs.WindDirection;
                errorMask?.PopIndex();
            }
            if (copyMask?.WaveAmplitude ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WaveAmplitude);
                item.WaveAmplitude = rhs.WaveAmplitude;
                errorMask?.PopIndex();
            }
            if (copyMask?.WaveFrequency ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WaveFrequency);
                item.WaveFrequency = rhs.WaveFrequency;
                errorMask?.PopIndex();
            }
            if (copyMask?.SunPower ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.SunPower);
                item.SunPower = rhs.SunPower;
                errorMask?.PopIndex();
            }
            if (copyMask?.ReflectivityAmount ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ReflectivityAmount);
                item.ReflectivityAmount = rhs.ReflectivityAmount;
                errorMask?.PopIndex();
            }
            if (copyMask?.FresnelAmount ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FresnelAmount);
                item.FresnelAmount = rhs.FresnelAmount;
                errorMask?.PopIndex();
            }
            if (copyMask?.ScrollXSpeed ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ScrollXSpeed);
                item.ScrollXSpeed = rhs.ScrollXSpeed;
                errorMask?.PopIndex();
            }
            if (copyMask?.ScrollYSpeed ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ScrollYSpeed);
                item.ScrollYSpeed = rhs.ScrollYSpeed;
                errorMask?.PopIndex();
            }
            if (copyMask?.FogDistanceNearPlane ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceNearPlane);
                item.FogDistanceNearPlane = rhs.FogDistanceNearPlane;
                errorMask?.PopIndex();
            }
            if (copyMask?.FogDistanceFarPlane ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceFarPlane);
                item.FogDistanceFarPlane = rhs.FogDistanceFarPlane;
                errorMask?.PopIndex();
            }
            if (copyMask?.ShallowColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ShallowColor);
                item.ShallowColor = rhs.ShallowColor;
                errorMask?.PopIndex();
            }
            if (copyMask?.DeepColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DeepColor);
                item.DeepColor = rhs.DeepColor;
                errorMask?.PopIndex();
            }
            if (copyMask?.ReflectionColor ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.ReflectionColor);
                item.ReflectionColor = rhs.ReflectionColor;
                errorMask?.PopIndex();
            }
            if (copyMask?.TextureBlend ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.TextureBlend);
                item.TextureBlend = rhs.TextureBlend;
                errorMask?.PopIndex();
            }
            if (copyMask?.RainSimulatorForce ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorForce);
                item.RainSimulatorForce = rhs.RainSimulatorForce;
                errorMask?.PopIndex();
            }
            if (copyMask?.RainSimulatorVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorVelocity);
                item.RainSimulatorVelocity = rhs.RainSimulatorVelocity;
                errorMask?.PopIndex();
            }
            if (copyMask?.RainSimulatorFalloff ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorFalloff);
                item.RainSimulatorFalloff = rhs.RainSimulatorFalloff;
                errorMask?.PopIndex();
            }
            if (copyMask?.RainSimulatorDampner ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorDampner);
                item.RainSimulatorDampner = rhs.RainSimulatorDampner;
                errorMask?.PopIndex();
            }
            if (copyMask?.RainSimulatorStartingSize ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorStartingSize);
                item.RainSimulatorStartingSize = rhs.RainSimulatorStartingSize;
                errorMask?.PopIndex();
            }
            if (copyMask?.DisplacementSimulatorForce ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorForce);
                item.DisplacementSimulatorForce = rhs.DisplacementSimulatorForce;
                errorMask?.PopIndex();
            }
            if (copyMask?.DisplacementSimulatorVelocity ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorVelocity);
                item.DisplacementSimulatorVelocity = rhs.DisplacementSimulatorVelocity;
                errorMask?.PopIndex();
            }
            if (copyMask?.DisplacementSimulatorFalloff ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorFalloff);
                item.DisplacementSimulatorFalloff = rhs.DisplacementSimulatorFalloff;
                errorMask?.PopIndex();
            }
            if (copyMask?.DisplacementSimulatorDampner ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorDampner);
                item.DisplacementSimulatorDampner = rhs.DisplacementSimulatorDampner;
                errorMask?.PopIndex();
            }
            if (copyMask?.DisplacementSimulatorStartingSize ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorStartingSize);
                item.DisplacementSimulatorStartingSize = rhs.DisplacementSimulatorStartingSize;
                errorMask?.PopIndex();
            }
            if (copyMask?.Damage ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Damage);
                item.Damage = rhs.Damage;
                errorMask?.PopIndex();
            }
            if (copyMask?.RelatedWaters.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RelatedWaters,
                        rhsHasBeenSet: rhs.RelatedWaters_IsSet,
                        defItem: def?.RelatedWaters,
                        defHasBeenSet: def?.RelatedWaters_IsSet ?? false,
                        outRhsItem: out var rhsRelatedWatersItem,
                        outDefItem: out var defRelatedWatersItem))
                    {
                        switch (copyMask?.RelatedWaters.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                RelatedWatersSetterCopyCommon.CopyFieldsFrom(
                                    item: item.RelatedWaters,
                                    rhs: rhs.RelatedWaters,
                                    def: def?.RelatedWaters,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.RelatedWaters.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.RelatedWaters = rhsRelatedWatersItem.Copy(
                                    copyMask?.RelatedWaters?.Specific,
                                    def: defRelatedWatersItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.RelatedWaters?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.RelatedWaters_Set(
                            value: default(RelatedWaters),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DATADataTypeState ?? true)
            {
                errorMask?.PushIndex((int)Water_FieldIndex.DATADataTypeState);
                item.DATADataTypeState = rhs.DATADataTypeState;
                errorMask?.PopIndex();
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Water
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static Water_Registration Registration => Water_Registration.Instance;
        protected override object CommonInstance()
        {
            return WaterCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return WaterSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return WaterSetterCopyCommon.Instance;
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WaterXmlWriteTranslation Instance = new WaterXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWaterGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Texture_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Texture),
                    item: item.Texture,
                    fieldIndex: (int)Water_FieldIndex.Texture,
                    errorMask: errorMask);
            }
            if (item.Opacity_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Opacity),
                    item: item.Opacity,
                    fieldIndex: (int)Water_FieldIndex.Opacity,
                    errorMask: errorMask);
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Water.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Water_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if (item.MaterialID_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaterialID),
                    item: item.MaterialID,
                    fieldIndex: (int)Water_FieldIndex.MaterialID,
                    errorMask: errorMask);
            }
            if (item.Sound_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound_Property?.FormKey,
                    fieldIndex: (int)Water_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Water.DATADataType.Has))
            {
                if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WindVelocity) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.WindVelocity),
                            item: item.WindVelocity,
                            fieldIndex: (int)Water_FieldIndex.WindVelocity,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WindDirection) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.WindDirection),
                            item: item.WindDirection,
                            fieldIndex: (int)Water_FieldIndex.WindDirection,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WaveAmplitude) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.WaveAmplitude),
                            item: item.WaveAmplitude,
                            fieldIndex: (int)Water_FieldIndex.WaveAmplitude,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.WaveFrequency) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.WaveFrequency),
                            item: item.WaveFrequency,
                            fieldIndex: (int)Water_FieldIndex.WaveFrequency,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.SunPower) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.SunPower),
                            item: item.SunPower,
                            fieldIndex: (int)Water_FieldIndex.SunPower,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ReflectivityAmount) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ReflectivityAmount),
                            item: item.ReflectivityAmount,
                            fieldIndex: (int)Water_FieldIndex.ReflectivityAmount,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FresnelAmount) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.FresnelAmount),
                            item: item.FresnelAmount,
                            fieldIndex: (int)Water_FieldIndex.FresnelAmount,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ScrollXSpeed) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ScrollXSpeed),
                            item: item.ScrollXSpeed,
                            fieldIndex: (int)Water_FieldIndex.ScrollXSpeed,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ScrollYSpeed) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ScrollYSpeed),
                            item: item.ScrollYSpeed,
                            fieldIndex: (int)Water_FieldIndex.ScrollYSpeed,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FogDistanceNearPlane) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.FogDistanceNearPlane),
                            item: item.FogDistanceNearPlane,
                            fieldIndex: (int)Water_FieldIndex.FogDistanceNearPlane,
                            errorMask: errorMask);
                    }
                    if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break1))
                    {
                        if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.FogDistanceFarPlane) ?? true))
                        {
                            FloatXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.FogDistanceFarPlane),
                                item: item.FogDistanceFarPlane,
                                fieldIndex: (int)Water_FieldIndex.FogDistanceFarPlane,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ShallowColor) ?? true))
                        {
                            ColorXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.ShallowColor),
                                item: item.ShallowColor,
                                fieldIndex: (int)Water_FieldIndex.ShallowColor,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DeepColor) ?? true))
                        {
                            ColorXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.DeepColor),
                                item: item.DeepColor,
                                fieldIndex: (int)Water_FieldIndex.DeepColor,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.ReflectionColor) ?? true))
                        {
                            ColorXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.ReflectionColor),
                                item: item.ReflectionColor,
                                fieldIndex: (int)Water_FieldIndex.ReflectionColor,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.TextureBlend) ?? true))
                        {
                            ByteXmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.TextureBlend),
                                item: item.TextureBlend,
                                fieldIndex: (int)Water_FieldIndex.TextureBlend,
                                errorMask: errorMask);
                        }
                        if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break2))
                        {
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorForce) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RainSimulatorForce),
                                    item: item.RainSimulatorForce,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorForce,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorVelocity) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RainSimulatorVelocity),
                                    item: item.RainSimulatorVelocity,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorVelocity,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorFalloff) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RainSimulatorFalloff),
                                    item: item.RainSimulatorFalloff,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorFalloff,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorDampner) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RainSimulatorDampner),
                                    item: item.RainSimulatorDampner,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorDampner,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.RainSimulatorStartingSize) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.RainSimulatorStartingSize),
                                    item: item.RainSimulatorStartingSize,
                                    fieldIndex: (int)Water_FieldIndex.RainSimulatorStartingSize,
                                    errorMask: errorMask);
                            }
                            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorForce) ?? true))
                            {
                                FloatXmlTranslation.Instance.Write(
                                    node: node,
                                    name: nameof(item.DisplacementSimulatorForce),
                                    item: item.DisplacementSimulatorForce,
                                    fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorForce,
                                    errorMask: errorMask);
                            }
                            if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break3))
                            {
                                if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorVelocity) ?? true))
                                {
                                    FloatXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.DisplacementSimulatorVelocity),
                                        item: item.DisplacementSimulatorVelocity,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorVelocity,
                                        errorMask: errorMask);
                                }
                                if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorFalloff) ?? true))
                                {
                                    FloatXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.DisplacementSimulatorFalloff),
                                        item: item.DisplacementSimulatorFalloff,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorFalloff,
                                        errorMask: errorMask);
                                }
                                if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorDampner) ?? true))
                                {
                                    FloatXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.DisplacementSimulatorDampner),
                                        item: item.DisplacementSimulatorDampner,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorDampner,
                                        errorMask: errorMask);
                                }
                                if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DisplacementSimulatorStartingSize) ?? true))
                                {
                                    FloatXmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.DisplacementSimulatorStartingSize),
                                        item: item.DisplacementSimulatorStartingSize,
                                        fieldIndex: (int)Water_FieldIndex.DisplacementSimulatorStartingSize,
                                        errorMask: errorMask);
                                }
                                if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.Damage) ?? true))
                                {
                                    UInt16XmlTranslation.Instance.Write(
                                        node: node,
                                        name: nameof(item.Damage),
                                        item: item.Damage,
                                        fieldIndex: (int)Water_FieldIndex.Damage,
                                        errorMask: errorMask);
                                }
                            }
                        }
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if (item.RelatedWaters_IsSet
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                var loquiItem = item.RelatedWaters;
                ((RelatedWatersXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.RelatedWaters),
                    fieldIndex: (int)Water_FieldIndex.RelatedWaters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
            }
            if ((translationMask?.GetShouldTranslate((int)Water_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Water.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Water_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWaterGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Water");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Water");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WaterXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static WaterXmlCreateTranslation Instance = new WaterXmlCreateTranslation();

        public static void FillPublicXml(
            IWaterInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WaterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWaterInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Texture":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String TextureParse,
                            errorMask: errorMask))
                        {
                            item.Texture = TextureParse;
                        }
                        else
                        {
                            item.Texture = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Opacity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte OpacityParse,
                            errorMask: errorMask))
                        {
                            item.Opacity = OpacityParse;
                        }
                        else
                        {
                            item.Opacity = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                        if (EnumXmlTranslation<Water.Flag>.Instance.Parse(
                            node: node,
                            item: out Water.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Water.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialID":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MaterialIDParse,
                            errorMask: errorMask))
                        {
                            item.MaterialID = MaterialIDParse;
                        }
                        else
                        {
                            item.MaterialID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    FormKeyXmlTranslation.Instance.ParseInto(
                        node: node,
                        item: item.Sound_Property,
                        fieldIndex: (int)Water_FieldIndex.Sound,
                        errorMask: errorMask);
                    break;
                case "WindVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WindVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WindVelocityParse,
                            errorMask: errorMask))
                        {
                            item.WindVelocity = WindVelocityParse;
                        }
                        else
                        {
                            item.WindVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Water.DATADataType.Break0;
                    break;
                case "WindDirection":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WindDirection);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WindDirectionParse,
                            errorMask: errorMask))
                        {
                            item.WindDirection = WindDirectionParse;
                        }
                        else
                        {
                            item.WindDirection = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaveAmplitude":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WaveAmplitude);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WaveAmplitudeParse,
                            errorMask: errorMask))
                        {
                            item.WaveAmplitude = WaveAmplitudeParse;
                        }
                        else
                        {
                            item.WaveAmplitude = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WaveFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.WaveFrequency);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single WaveFrequencyParse,
                            errorMask: errorMask))
                        {
                            item.WaveFrequency = WaveFrequencyParse;
                        }
                        else
                        {
                            item.WaveFrequency = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunPower":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.SunPower);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single SunPowerParse,
                            errorMask: errorMask))
                        {
                            item.SunPower = SunPowerParse;
                        }
                        else
                        {
                            item.SunPower = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ReflectivityAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ReflectivityAmount);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ReflectivityAmountParse,
                            errorMask: errorMask))
                        {
                            item.ReflectivityAmount = ReflectivityAmountParse;
                        }
                        else
                        {
                            item.ReflectivityAmount = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FresnelAmount":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FresnelAmount);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FresnelAmountParse,
                            errorMask: errorMask))
                        {
                            item.FresnelAmount = FresnelAmountParse;
                        }
                        else
                        {
                            item.FresnelAmount = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScrollXSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ScrollXSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ScrollXSpeedParse,
                            errorMask: errorMask))
                        {
                            item.ScrollXSpeed = ScrollXSpeedParse;
                        }
                        else
                        {
                            item.ScrollXSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScrollYSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ScrollYSpeed);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ScrollYSpeedParse,
                            errorMask: errorMask))
                        {
                            item.ScrollYSpeed = ScrollYSpeedParse;
                        }
                        else
                        {
                            item.ScrollYSpeed = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNearPlane":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceNearPlane);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FogDistanceNearPlaneParse,
                            errorMask: errorMask))
                        {
                            item.FogDistanceNearPlane = FogDistanceNearPlaneParse;
                        }
                        else
                        {
                            item.FogDistanceNearPlane = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceFarPlane":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.FogDistanceFarPlane);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single FogDistanceFarPlaneParse,
                            errorMask: errorMask))
                        {
                            item.FogDistanceFarPlane = FogDistanceFarPlaneParse;
                        }
                        else
                        {
                            item.FogDistanceFarPlane = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Water.DATADataType.Break1;
                    break;
                case "ShallowColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ShallowColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ShallowColorParse,
                            errorMask: errorMask))
                        {
                            item.ShallowColor = ShallowColorParse;
                        }
                        else
                        {
                            item.ShallowColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeepColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DeepColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color DeepColorParse,
                            errorMask: errorMask))
                        {
                            item.DeepColor = DeepColorParse;
                        }
                        else
                        {
                            item.DeepColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ReflectionColor":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.ReflectionColor);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ReflectionColorParse,
                            errorMask: errorMask))
                        {
                            item.ReflectionColor = ReflectionColorParse;
                        }
                        else
                        {
                            item.ReflectionColor = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureBlend":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.TextureBlend);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte TextureBlendParse,
                            errorMask: errorMask))
                        {
                            item.TextureBlend = TextureBlendParse;
                        }
                        else
                        {
                            item.TextureBlend = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorForce":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorForce);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RainSimulatorForceParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorForce = RainSimulatorForceParse;
                        }
                        else
                        {
                            item.RainSimulatorForce = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Water.DATADataType.Break2;
                    break;
                case "RainSimulatorVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RainSimulatorVelocityParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorVelocity = RainSimulatorVelocityParse;
                        }
                        else
                        {
                            item.RainSimulatorVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorFalloff":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorFalloff);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RainSimulatorFalloffParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorFalloff = RainSimulatorFalloffParse;
                        }
                        else
                        {
                            item.RainSimulatorFalloff = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorDampner":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorDampner);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RainSimulatorDampnerParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorDampner = RainSimulatorDampnerParse;
                        }
                        else
                        {
                            item.RainSimulatorDampner = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RainSimulatorStartingSize":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RainSimulatorStartingSize);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single RainSimulatorStartingSizeParse,
                            errorMask: errorMask))
                        {
                            item.RainSimulatorStartingSize = RainSimulatorStartingSizeParse;
                        }
                        else
                        {
                            item.RainSimulatorStartingSize = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorForce":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorForce);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DisplacementSimulatorForceParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorForce = DisplacementSimulatorForceParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorForce = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorVelocity":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorVelocity);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DisplacementSimulatorVelocityParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorVelocity = DisplacementSimulatorVelocityParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorVelocity = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Water.DATADataType.Break3;
                    break;
                case "DisplacementSimulatorFalloff":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorFalloff);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DisplacementSimulatorFalloffParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorFalloff = DisplacementSimulatorFalloffParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorFalloff = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorDampner":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorDampner);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DisplacementSimulatorDampnerParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorDampner = DisplacementSimulatorDampnerParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorDampner = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisplacementSimulatorStartingSize":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DisplacementSimulatorStartingSize);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DisplacementSimulatorStartingSizeParse,
                            errorMask: errorMask))
                        {
                            item.DisplacementSimulatorStartingSize = DisplacementSimulatorStartingSizeParse;
                        }
                        else
                        {
                            item.DisplacementSimulatorStartingSize = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Damage":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.Damage);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 DamageParse,
                            errorMask: errorMask))
                        {
                            item.Damage = DamageParse;
                        }
                        else
                        {
                            item.Damage = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedWaters":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                        if (LoquiXmlTranslation<RelatedWaters>.Instance.Parse(
                            node: node,
                            item: out RelatedWaters RelatedWatersParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters)))
                        {
                            item.RelatedWaters = RelatedWatersParse;
                        }
                        else
                        {
                            item.RelatedWaters = default(RelatedWaters);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Water_FieldIndex.DATADataTypeState);
                        if (EnumXmlTranslation<Water.DATADataType>.Instance.Parse(
                            node: node,
                            item: out Water.DATADataType DATADataTypeStateParse,
                            errorMask: errorMask))
                        {
                            item.DATADataTypeState = DATADataTypeStateParse;
                        }
                        else
                        {
                            item.DATADataTypeState = default(Water.DATADataType);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WaterXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWaterGetter item,
            XElement node,
            out Water_ErrorMask errorMask,
            bool doMasks = true,
            Water_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((WaterXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWaterGetter item,
            string path,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWaterGetter item,
            Stream stream,
            out Water_ErrorMask errorMask,
            Water_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Water_Mask<T> : OblivionMajorRecord_Mask<T>, IMask<T>, IEquatable<Water_Mask<T>>
    {
        #region Ctors
        public Water_Mask()
        {
        }

        public Water_Mask(T initialValue)
        {
            this.Texture = initialValue;
            this.Opacity = initialValue;
            this.Flags = initialValue;
            this.MaterialID = initialValue;
            this.Sound = initialValue;
            this.WindVelocity = initialValue;
            this.WindDirection = initialValue;
            this.WaveAmplitude = initialValue;
            this.WaveFrequency = initialValue;
            this.SunPower = initialValue;
            this.ReflectivityAmount = initialValue;
            this.FresnelAmount = initialValue;
            this.ScrollXSpeed = initialValue;
            this.ScrollYSpeed = initialValue;
            this.FogDistanceNearPlane = initialValue;
            this.FogDistanceFarPlane = initialValue;
            this.ShallowColor = initialValue;
            this.DeepColor = initialValue;
            this.ReflectionColor = initialValue;
            this.TextureBlend = initialValue;
            this.RainSimulatorForce = initialValue;
            this.RainSimulatorVelocity = initialValue;
            this.RainSimulatorFalloff = initialValue;
            this.RainSimulatorDampner = initialValue;
            this.RainSimulatorStartingSize = initialValue;
            this.DisplacementSimulatorForce = initialValue;
            this.DisplacementSimulatorVelocity = initialValue;
            this.DisplacementSimulatorFalloff = initialValue;
            this.DisplacementSimulatorDampner = initialValue;
            this.DisplacementSimulatorStartingSize = initialValue;
            this.Damage = initialValue;
            this.RelatedWaters = new MaskItem<T, RelatedWaters_Mask<T>>(initialValue, new RelatedWaters_Mask<T>(initialValue));
            this.DATADataTypeState = initialValue;
        }
        #endregion

        #region Members
        public T Texture;
        public T Opacity;
        public T Flags;
        public T MaterialID;
        public T Sound;
        public T WindVelocity;
        public T WindDirection;
        public T WaveAmplitude;
        public T WaveFrequency;
        public T SunPower;
        public T ReflectivityAmount;
        public T FresnelAmount;
        public T ScrollXSpeed;
        public T ScrollYSpeed;
        public T FogDistanceNearPlane;
        public T FogDistanceFarPlane;
        public T ShallowColor;
        public T DeepColor;
        public T ReflectionColor;
        public T TextureBlend;
        public T RainSimulatorForce;
        public T RainSimulatorVelocity;
        public T RainSimulatorFalloff;
        public T RainSimulatorDampner;
        public T RainSimulatorStartingSize;
        public T DisplacementSimulatorForce;
        public T DisplacementSimulatorVelocity;
        public T DisplacementSimulatorFalloff;
        public T DisplacementSimulatorDampner;
        public T DisplacementSimulatorStartingSize;
        public T Damage;
        public MaskItem<T, RelatedWaters_Mask<T>> RelatedWaters { get; set; }
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Water_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Water_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Texture, rhs.Texture)) return false;
            if (!object.Equals(this.Opacity, rhs.Opacity)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
            if (!object.Equals(this.Sound, rhs.Sound)) return false;
            if (!object.Equals(this.WindVelocity, rhs.WindVelocity)) return false;
            if (!object.Equals(this.WindDirection, rhs.WindDirection)) return false;
            if (!object.Equals(this.WaveAmplitude, rhs.WaveAmplitude)) return false;
            if (!object.Equals(this.WaveFrequency, rhs.WaveFrequency)) return false;
            if (!object.Equals(this.SunPower, rhs.SunPower)) return false;
            if (!object.Equals(this.ReflectivityAmount, rhs.ReflectivityAmount)) return false;
            if (!object.Equals(this.FresnelAmount, rhs.FresnelAmount)) return false;
            if (!object.Equals(this.ScrollXSpeed, rhs.ScrollXSpeed)) return false;
            if (!object.Equals(this.ScrollYSpeed, rhs.ScrollYSpeed)) return false;
            if (!object.Equals(this.FogDistanceNearPlane, rhs.FogDistanceNearPlane)) return false;
            if (!object.Equals(this.FogDistanceFarPlane, rhs.FogDistanceFarPlane)) return false;
            if (!object.Equals(this.ShallowColor, rhs.ShallowColor)) return false;
            if (!object.Equals(this.DeepColor, rhs.DeepColor)) return false;
            if (!object.Equals(this.ReflectionColor, rhs.ReflectionColor)) return false;
            if (!object.Equals(this.TextureBlend, rhs.TextureBlend)) return false;
            if (!object.Equals(this.RainSimulatorForce, rhs.RainSimulatorForce)) return false;
            if (!object.Equals(this.RainSimulatorVelocity, rhs.RainSimulatorVelocity)) return false;
            if (!object.Equals(this.RainSimulatorFalloff, rhs.RainSimulatorFalloff)) return false;
            if (!object.Equals(this.RainSimulatorDampner, rhs.RainSimulatorDampner)) return false;
            if (!object.Equals(this.RainSimulatorStartingSize, rhs.RainSimulatorStartingSize)) return false;
            if (!object.Equals(this.DisplacementSimulatorForce, rhs.DisplacementSimulatorForce)) return false;
            if (!object.Equals(this.DisplacementSimulatorVelocity, rhs.DisplacementSimulatorVelocity)) return false;
            if (!object.Equals(this.DisplacementSimulatorFalloff, rhs.DisplacementSimulatorFalloff)) return false;
            if (!object.Equals(this.DisplacementSimulatorDampner, rhs.DisplacementSimulatorDampner)) return false;
            if (!object.Equals(this.DisplacementSimulatorStartingSize, rhs.DisplacementSimulatorStartingSize)) return false;
            if (!object.Equals(this.Damage, rhs.Damage)) return false;
            if (!object.Equals(this.RelatedWaters, rhs.RelatedWaters)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Texture?.GetHashCode());
            ret = ret.CombineHashCode(this.Opacity?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.MaterialID?.GetHashCode());
            ret = ret.CombineHashCode(this.Sound?.GetHashCode());
            ret = ret.CombineHashCode(this.WindVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.WindDirection?.GetHashCode());
            ret = ret.CombineHashCode(this.WaveAmplitude?.GetHashCode());
            ret = ret.CombineHashCode(this.WaveFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.SunPower?.GetHashCode());
            ret = ret.CombineHashCode(this.ReflectivityAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.FresnelAmount?.GetHashCode());
            ret = ret.CombineHashCode(this.ScrollXSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.ScrollYSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDistanceNearPlane?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDistanceFarPlane?.GetHashCode());
            ret = ret.CombineHashCode(this.ShallowColor?.GetHashCode());
            ret = ret.CombineHashCode(this.DeepColor?.GetHashCode());
            ret = ret.CombineHashCode(this.ReflectionColor?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureBlend?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorForce?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorFalloff?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorDampner?.GetHashCode());
            ret = ret.CombineHashCode(this.RainSimulatorStartingSize?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorForce?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorVelocity?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorFalloff?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorDampner?.GetHashCode());
            ret = ret.CombineHashCode(this.DisplacementSimulatorStartingSize?.GetHashCode());
            ret = ret.CombineHashCode(this.Damage?.GetHashCode());
            ret = ret.CombineHashCode(this.RelatedWaters?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Texture)) return false;
            if (!eval(this.Opacity)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.MaterialID)) return false;
            if (!eval(this.Sound)) return false;
            if (!eval(this.WindVelocity)) return false;
            if (!eval(this.WindDirection)) return false;
            if (!eval(this.WaveAmplitude)) return false;
            if (!eval(this.WaveFrequency)) return false;
            if (!eval(this.SunPower)) return false;
            if (!eval(this.ReflectivityAmount)) return false;
            if (!eval(this.FresnelAmount)) return false;
            if (!eval(this.ScrollXSpeed)) return false;
            if (!eval(this.ScrollYSpeed)) return false;
            if (!eval(this.FogDistanceNearPlane)) return false;
            if (!eval(this.FogDistanceFarPlane)) return false;
            if (!eval(this.ShallowColor)) return false;
            if (!eval(this.DeepColor)) return false;
            if (!eval(this.ReflectionColor)) return false;
            if (!eval(this.TextureBlend)) return false;
            if (!eval(this.RainSimulatorForce)) return false;
            if (!eval(this.RainSimulatorVelocity)) return false;
            if (!eval(this.RainSimulatorFalloff)) return false;
            if (!eval(this.RainSimulatorDampner)) return false;
            if (!eval(this.RainSimulatorStartingSize)) return false;
            if (!eval(this.DisplacementSimulatorForce)) return false;
            if (!eval(this.DisplacementSimulatorVelocity)) return false;
            if (!eval(this.DisplacementSimulatorFalloff)) return false;
            if (!eval(this.DisplacementSimulatorDampner)) return false;
            if (!eval(this.DisplacementSimulatorStartingSize)) return false;
            if (!eval(this.Damage)) return false;
            if (RelatedWaters != null)
            {
                if (!eval(this.RelatedWaters.Overall)) return false;
                if (this.RelatedWaters.Specific != null && !this.RelatedWaters.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Water_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Water_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Water_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Texture = eval(this.Texture);
            obj.Opacity = eval(this.Opacity);
            obj.Flags = eval(this.Flags);
            obj.MaterialID = eval(this.MaterialID);
            obj.Sound = eval(this.Sound);
            obj.WindVelocity = eval(this.WindVelocity);
            obj.WindDirection = eval(this.WindDirection);
            obj.WaveAmplitude = eval(this.WaveAmplitude);
            obj.WaveFrequency = eval(this.WaveFrequency);
            obj.SunPower = eval(this.SunPower);
            obj.ReflectivityAmount = eval(this.ReflectivityAmount);
            obj.FresnelAmount = eval(this.FresnelAmount);
            obj.ScrollXSpeed = eval(this.ScrollXSpeed);
            obj.ScrollYSpeed = eval(this.ScrollYSpeed);
            obj.FogDistanceNearPlane = eval(this.FogDistanceNearPlane);
            obj.FogDistanceFarPlane = eval(this.FogDistanceFarPlane);
            obj.ShallowColor = eval(this.ShallowColor);
            obj.DeepColor = eval(this.DeepColor);
            obj.ReflectionColor = eval(this.ReflectionColor);
            obj.TextureBlend = eval(this.TextureBlend);
            obj.RainSimulatorForce = eval(this.RainSimulatorForce);
            obj.RainSimulatorVelocity = eval(this.RainSimulatorVelocity);
            obj.RainSimulatorFalloff = eval(this.RainSimulatorFalloff);
            obj.RainSimulatorDampner = eval(this.RainSimulatorDampner);
            obj.RainSimulatorStartingSize = eval(this.RainSimulatorStartingSize);
            obj.DisplacementSimulatorForce = eval(this.DisplacementSimulatorForce);
            obj.DisplacementSimulatorVelocity = eval(this.DisplacementSimulatorVelocity);
            obj.DisplacementSimulatorFalloff = eval(this.DisplacementSimulatorFalloff);
            obj.DisplacementSimulatorDampner = eval(this.DisplacementSimulatorDampner);
            obj.DisplacementSimulatorStartingSize = eval(this.DisplacementSimulatorStartingSize);
            obj.Damage = eval(this.Damage);
            if (this.RelatedWaters != null)
            {
                obj.RelatedWaters = new MaskItem<R, RelatedWaters_Mask<R>>();
                obj.RelatedWaters.Overall = eval(this.RelatedWaters.Overall);
                if (this.RelatedWaters.Specific != null)
                {
                    obj.RelatedWaters.Specific = this.RelatedWaters.Specific.Translate(eval);
                }
            }
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Water_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Water_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Water_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Texture ?? true)
                {
                    fg.AppendLine($"Texture => {Texture}");
                }
                if (printMask?.Opacity ?? true)
                {
                    fg.AppendLine($"Opacity => {Opacity}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.MaterialID ?? true)
                {
                    fg.AppendLine($"MaterialID => {MaterialID}");
                }
                if (printMask?.Sound ?? true)
                {
                    fg.AppendLine($"Sound => {Sound}");
                }
                if (printMask?.WindVelocity ?? true)
                {
                    fg.AppendLine($"WindVelocity => {WindVelocity}");
                }
                if (printMask?.WindDirection ?? true)
                {
                    fg.AppendLine($"WindDirection => {WindDirection}");
                }
                if (printMask?.WaveAmplitude ?? true)
                {
                    fg.AppendLine($"WaveAmplitude => {WaveAmplitude}");
                }
                if (printMask?.WaveFrequency ?? true)
                {
                    fg.AppendLine($"WaveFrequency => {WaveFrequency}");
                }
                if (printMask?.SunPower ?? true)
                {
                    fg.AppendLine($"SunPower => {SunPower}");
                }
                if (printMask?.ReflectivityAmount ?? true)
                {
                    fg.AppendLine($"ReflectivityAmount => {ReflectivityAmount}");
                }
                if (printMask?.FresnelAmount ?? true)
                {
                    fg.AppendLine($"FresnelAmount => {FresnelAmount}");
                }
                if (printMask?.ScrollXSpeed ?? true)
                {
                    fg.AppendLine($"ScrollXSpeed => {ScrollXSpeed}");
                }
                if (printMask?.ScrollYSpeed ?? true)
                {
                    fg.AppendLine($"ScrollYSpeed => {ScrollYSpeed}");
                }
                if (printMask?.FogDistanceNearPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceNearPlane => {FogDistanceNearPlane}");
                }
                if (printMask?.FogDistanceFarPlane ?? true)
                {
                    fg.AppendLine($"FogDistanceFarPlane => {FogDistanceFarPlane}");
                }
                if (printMask?.ShallowColor ?? true)
                {
                    fg.AppendLine($"ShallowColor => {ShallowColor}");
                }
                if (printMask?.DeepColor ?? true)
                {
                    fg.AppendLine($"DeepColor => {DeepColor}");
                }
                if (printMask?.ReflectionColor ?? true)
                {
                    fg.AppendLine($"ReflectionColor => {ReflectionColor}");
                }
                if (printMask?.TextureBlend ?? true)
                {
                    fg.AppendLine($"TextureBlend => {TextureBlend}");
                }
                if (printMask?.RainSimulatorForce ?? true)
                {
                    fg.AppendLine($"RainSimulatorForce => {RainSimulatorForce}");
                }
                if (printMask?.RainSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"RainSimulatorVelocity => {RainSimulatorVelocity}");
                }
                if (printMask?.RainSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"RainSimulatorFalloff => {RainSimulatorFalloff}");
                }
                if (printMask?.RainSimulatorDampner ?? true)
                {
                    fg.AppendLine($"RainSimulatorDampner => {RainSimulatorDampner}");
                }
                if (printMask?.RainSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"RainSimulatorStartingSize => {RainSimulatorStartingSize}");
                }
                if (printMask?.DisplacementSimulatorForce ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorForce => {DisplacementSimulatorForce}");
                }
                if (printMask?.DisplacementSimulatorVelocity ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorVelocity => {DisplacementSimulatorVelocity}");
                }
                if (printMask?.DisplacementSimulatorFalloff ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorFalloff => {DisplacementSimulatorFalloff}");
                }
                if (printMask?.DisplacementSimulatorDampner ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorDampner => {DisplacementSimulatorDampner}");
                }
                if (printMask?.DisplacementSimulatorStartingSize ?? true)
                {
                    fg.AppendLine($"DisplacementSimulatorStartingSize => {DisplacementSimulatorStartingSize}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {Damage}");
                }
                if (printMask?.RelatedWaters?.Overall ?? true)
                {
                    RelatedWaters?.ToString(fg);
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Water_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Water_ErrorMask>
    {
        #region Members
        public Exception Texture;
        public Exception Opacity;
        public Exception Flags;
        public Exception MaterialID;
        public Exception Sound;
        public Exception WindVelocity;
        public Exception WindDirection;
        public Exception WaveAmplitude;
        public Exception WaveFrequency;
        public Exception SunPower;
        public Exception ReflectivityAmount;
        public Exception FresnelAmount;
        public Exception ScrollXSpeed;
        public Exception ScrollYSpeed;
        public Exception FogDistanceNearPlane;
        public Exception FogDistanceFarPlane;
        public Exception ShallowColor;
        public Exception DeepColor;
        public Exception ReflectionColor;
        public Exception TextureBlend;
        public Exception RainSimulatorForce;
        public Exception RainSimulatorVelocity;
        public Exception RainSimulatorFalloff;
        public Exception RainSimulatorDampner;
        public Exception RainSimulatorStartingSize;
        public Exception DisplacementSimulatorForce;
        public Exception DisplacementSimulatorVelocity;
        public Exception DisplacementSimulatorFalloff;
        public Exception DisplacementSimulatorDampner;
        public Exception DisplacementSimulatorStartingSize;
        public Exception Damage;
        public MaskItem<Exception, RelatedWaters_ErrorMask> RelatedWaters;
        public Exception DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return Texture;
                case Water_FieldIndex.Opacity:
                    return Opacity;
                case Water_FieldIndex.Flags:
                    return Flags;
                case Water_FieldIndex.MaterialID:
                    return MaterialID;
                case Water_FieldIndex.Sound:
                    return Sound;
                case Water_FieldIndex.WindVelocity:
                    return WindVelocity;
                case Water_FieldIndex.WindDirection:
                    return WindDirection;
                case Water_FieldIndex.WaveAmplitude:
                    return WaveAmplitude;
                case Water_FieldIndex.WaveFrequency:
                    return WaveFrequency;
                case Water_FieldIndex.SunPower:
                    return SunPower;
                case Water_FieldIndex.ReflectivityAmount:
                    return ReflectivityAmount;
                case Water_FieldIndex.FresnelAmount:
                    return FresnelAmount;
                case Water_FieldIndex.ScrollXSpeed:
                    return ScrollXSpeed;
                case Water_FieldIndex.ScrollYSpeed:
                    return ScrollYSpeed;
                case Water_FieldIndex.FogDistanceNearPlane:
                    return FogDistanceNearPlane;
                case Water_FieldIndex.FogDistanceFarPlane:
                    return FogDistanceFarPlane;
                case Water_FieldIndex.ShallowColor:
                    return ShallowColor;
                case Water_FieldIndex.DeepColor:
                    return DeepColor;
                case Water_FieldIndex.ReflectionColor:
                    return ReflectionColor;
                case Water_FieldIndex.TextureBlend:
                    return TextureBlend;
                case Water_FieldIndex.RainSimulatorForce:
                    return RainSimulatorForce;
                case Water_FieldIndex.RainSimulatorVelocity:
                    return RainSimulatorVelocity;
                case Water_FieldIndex.RainSimulatorFalloff:
                    return RainSimulatorFalloff;
                case Water_FieldIndex.RainSimulatorDampner:
                    return RainSimulatorDampner;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    return RainSimulatorStartingSize;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    return DisplacementSimulatorForce;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    return DisplacementSimulatorVelocity;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    return DisplacementSimulatorFalloff;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    return DisplacementSimulatorDampner;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    return DisplacementSimulatorStartingSize;
                case Water_FieldIndex.Damage:
                    return Damage;
                case Water_FieldIndex.RelatedWaters:
                    return RelatedWaters;
                case Water_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    this.Texture = ex;
                    break;
                case Water_FieldIndex.Opacity:
                    this.Opacity = ex;
                    break;
                case Water_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Water_FieldIndex.MaterialID:
                    this.MaterialID = ex;
                    break;
                case Water_FieldIndex.Sound:
                    this.Sound = ex;
                    break;
                case Water_FieldIndex.WindVelocity:
                    this.WindVelocity = ex;
                    break;
                case Water_FieldIndex.WindDirection:
                    this.WindDirection = ex;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    this.WaveAmplitude = ex;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    this.WaveFrequency = ex;
                    break;
                case Water_FieldIndex.SunPower:
                    this.SunPower = ex;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    this.ReflectivityAmount = ex;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    this.FresnelAmount = ex;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    this.ScrollXSpeed = ex;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    this.ScrollYSpeed = ex;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    this.FogDistanceNearPlane = ex;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    this.FogDistanceFarPlane = ex;
                    break;
                case Water_FieldIndex.ShallowColor:
                    this.ShallowColor = ex;
                    break;
                case Water_FieldIndex.DeepColor:
                    this.DeepColor = ex;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    this.ReflectionColor = ex;
                    break;
                case Water_FieldIndex.TextureBlend:
                    this.TextureBlend = ex;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    this.RainSimulatorForce = ex;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    this.RainSimulatorVelocity = ex;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    this.RainSimulatorFalloff = ex;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    this.RainSimulatorDampner = ex;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    this.RainSimulatorStartingSize = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    this.DisplacementSimulatorForce = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    this.DisplacementSimulatorVelocity = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    this.DisplacementSimulatorFalloff = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    this.DisplacementSimulatorDampner = ex;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    this.DisplacementSimulatorStartingSize = ex;
                    break;
                case Water_FieldIndex.Damage:
                    this.Damage = ex;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    this.RelatedWaters = new MaskItem<Exception, RelatedWaters_ErrorMask>(ex, null);
                    break;
                case Water_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    this.Texture = (Exception)obj;
                    break;
                case Water_FieldIndex.Opacity:
                    this.Opacity = (Exception)obj;
                    break;
                case Water_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Water_FieldIndex.MaterialID:
                    this.MaterialID = (Exception)obj;
                    break;
                case Water_FieldIndex.Sound:
                    this.Sound = (Exception)obj;
                    break;
                case Water_FieldIndex.WindVelocity:
                    this.WindVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.WindDirection:
                    this.WindDirection = (Exception)obj;
                    break;
                case Water_FieldIndex.WaveAmplitude:
                    this.WaveAmplitude = (Exception)obj;
                    break;
                case Water_FieldIndex.WaveFrequency:
                    this.WaveFrequency = (Exception)obj;
                    break;
                case Water_FieldIndex.SunPower:
                    this.SunPower = (Exception)obj;
                    break;
                case Water_FieldIndex.ReflectivityAmount:
                    this.ReflectivityAmount = (Exception)obj;
                    break;
                case Water_FieldIndex.FresnelAmount:
                    this.FresnelAmount = (Exception)obj;
                    break;
                case Water_FieldIndex.ScrollXSpeed:
                    this.ScrollXSpeed = (Exception)obj;
                    break;
                case Water_FieldIndex.ScrollYSpeed:
                    this.ScrollYSpeed = (Exception)obj;
                    break;
                case Water_FieldIndex.FogDistanceNearPlane:
                    this.FogDistanceNearPlane = (Exception)obj;
                    break;
                case Water_FieldIndex.FogDistanceFarPlane:
                    this.FogDistanceFarPlane = (Exception)obj;
                    break;
                case Water_FieldIndex.ShallowColor:
                    this.ShallowColor = (Exception)obj;
                    break;
                case Water_FieldIndex.DeepColor:
                    this.DeepColor = (Exception)obj;
                    break;
                case Water_FieldIndex.ReflectionColor:
                    this.ReflectionColor = (Exception)obj;
                    break;
                case Water_FieldIndex.TextureBlend:
                    this.TextureBlend = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorForce:
                    this.RainSimulatorForce = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorVelocity:
                    this.RainSimulatorVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorFalloff:
                    this.RainSimulatorFalloff = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorDampner:
                    this.RainSimulatorDampner = (Exception)obj;
                    break;
                case Water_FieldIndex.RainSimulatorStartingSize:
                    this.RainSimulatorStartingSize = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorForce:
                    this.DisplacementSimulatorForce = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorVelocity:
                    this.DisplacementSimulatorVelocity = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorFalloff:
                    this.DisplacementSimulatorFalloff = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorDampner:
                    this.DisplacementSimulatorDampner = (Exception)obj;
                    break;
                case Water_FieldIndex.DisplacementSimulatorStartingSize:
                    this.DisplacementSimulatorStartingSize = (Exception)obj;
                    break;
                case Water_FieldIndex.Damage:
                    this.Damage = (Exception)obj;
                    break;
                case Water_FieldIndex.RelatedWaters:
                    this.RelatedWaters = (MaskItem<Exception, RelatedWaters_ErrorMask>)obj;
                    break;
                case Water_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Texture != null) return true;
            if (Opacity != null) return true;
            if (Flags != null) return true;
            if (MaterialID != null) return true;
            if (Sound != null) return true;
            if (WindVelocity != null) return true;
            if (WindDirection != null) return true;
            if (WaveAmplitude != null) return true;
            if (WaveFrequency != null) return true;
            if (SunPower != null) return true;
            if (ReflectivityAmount != null) return true;
            if (FresnelAmount != null) return true;
            if (ScrollXSpeed != null) return true;
            if (ScrollYSpeed != null) return true;
            if (FogDistanceNearPlane != null) return true;
            if (FogDistanceFarPlane != null) return true;
            if (ShallowColor != null) return true;
            if (DeepColor != null) return true;
            if (ReflectionColor != null) return true;
            if (TextureBlend != null) return true;
            if (RainSimulatorForce != null) return true;
            if (RainSimulatorVelocity != null) return true;
            if (RainSimulatorFalloff != null) return true;
            if (RainSimulatorDampner != null) return true;
            if (RainSimulatorStartingSize != null) return true;
            if (DisplacementSimulatorForce != null) return true;
            if (DisplacementSimulatorVelocity != null) return true;
            if (DisplacementSimulatorFalloff != null) return true;
            if (DisplacementSimulatorDampner != null) return true;
            if (DisplacementSimulatorStartingSize != null) return true;
            if (Damage != null) return true;
            if (RelatedWaters != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Water_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Texture => {Texture}");
            fg.AppendLine($"Opacity => {Opacity}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"MaterialID => {MaterialID}");
            fg.AppendLine($"Sound => {Sound}");
            fg.AppendLine($"WindVelocity => {WindVelocity}");
            fg.AppendLine($"WindDirection => {WindDirection}");
            fg.AppendLine($"WaveAmplitude => {WaveAmplitude}");
            fg.AppendLine($"WaveFrequency => {WaveFrequency}");
            fg.AppendLine($"SunPower => {SunPower}");
            fg.AppendLine($"ReflectivityAmount => {ReflectivityAmount}");
            fg.AppendLine($"FresnelAmount => {FresnelAmount}");
            fg.AppendLine($"ScrollXSpeed => {ScrollXSpeed}");
            fg.AppendLine($"ScrollYSpeed => {ScrollYSpeed}");
            fg.AppendLine($"FogDistanceNearPlane => {FogDistanceNearPlane}");
            fg.AppendLine($"FogDistanceFarPlane => {FogDistanceFarPlane}");
            fg.AppendLine($"ShallowColor => {ShallowColor}");
            fg.AppendLine($"DeepColor => {DeepColor}");
            fg.AppendLine($"ReflectionColor => {ReflectionColor}");
            fg.AppendLine($"TextureBlend => {TextureBlend}");
            fg.AppendLine($"RainSimulatorForce => {RainSimulatorForce}");
            fg.AppendLine($"RainSimulatorVelocity => {RainSimulatorVelocity}");
            fg.AppendLine($"RainSimulatorFalloff => {RainSimulatorFalloff}");
            fg.AppendLine($"RainSimulatorDampner => {RainSimulatorDampner}");
            fg.AppendLine($"RainSimulatorStartingSize => {RainSimulatorStartingSize}");
            fg.AppendLine($"DisplacementSimulatorForce => {DisplacementSimulatorForce}");
            fg.AppendLine($"DisplacementSimulatorVelocity => {DisplacementSimulatorVelocity}");
            fg.AppendLine($"DisplacementSimulatorFalloff => {DisplacementSimulatorFalloff}");
            fg.AppendLine($"DisplacementSimulatorDampner => {DisplacementSimulatorDampner}");
            fg.AppendLine($"DisplacementSimulatorStartingSize => {DisplacementSimulatorStartingSize}");
            fg.AppendLine($"Damage => {Damage}");
            RelatedWaters?.ToString(fg);
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Water_ErrorMask Combine(Water_ErrorMask rhs)
        {
            var ret = new Water_ErrorMask();
            ret.Texture = this.Texture.Combine(rhs.Texture);
            ret.Opacity = this.Opacity.Combine(rhs.Opacity);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.MaterialID = this.MaterialID.Combine(rhs.MaterialID);
            ret.Sound = this.Sound.Combine(rhs.Sound);
            ret.WindVelocity = this.WindVelocity.Combine(rhs.WindVelocity);
            ret.WindDirection = this.WindDirection.Combine(rhs.WindDirection);
            ret.WaveAmplitude = this.WaveAmplitude.Combine(rhs.WaveAmplitude);
            ret.WaveFrequency = this.WaveFrequency.Combine(rhs.WaveFrequency);
            ret.SunPower = this.SunPower.Combine(rhs.SunPower);
            ret.ReflectivityAmount = this.ReflectivityAmount.Combine(rhs.ReflectivityAmount);
            ret.FresnelAmount = this.FresnelAmount.Combine(rhs.FresnelAmount);
            ret.ScrollXSpeed = this.ScrollXSpeed.Combine(rhs.ScrollXSpeed);
            ret.ScrollYSpeed = this.ScrollYSpeed.Combine(rhs.ScrollYSpeed);
            ret.FogDistanceNearPlane = this.FogDistanceNearPlane.Combine(rhs.FogDistanceNearPlane);
            ret.FogDistanceFarPlane = this.FogDistanceFarPlane.Combine(rhs.FogDistanceFarPlane);
            ret.ShallowColor = this.ShallowColor.Combine(rhs.ShallowColor);
            ret.DeepColor = this.DeepColor.Combine(rhs.DeepColor);
            ret.ReflectionColor = this.ReflectionColor.Combine(rhs.ReflectionColor);
            ret.TextureBlend = this.TextureBlend.Combine(rhs.TextureBlend);
            ret.RainSimulatorForce = this.RainSimulatorForce.Combine(rhs.RainSimulatorForce);
            ret.RainSimulatorVelocity = this.RainSimulatorVelocity.Combine(rhs.RainSimulatorVelocity);
            ret.RainSimulatorFalloff = this.RainSimulatorFalloff.Combine(rhs.RainSimulatorFalloff);
            ret.RainSimulatorDampner = this.RainSimulatorDampner.Combine(rhs.RainSimulatorDampner);
            ret.RainSimulatorStartingSize = this.RainSimulatorStartingSize.Combine(rhs.RainSimulatorStartingSize);
            ret.DisplacementSimulatorForce = this.DisplacementSimulatorForce.Combine(rhs.DisplacementSimulatorForce);
            ret.DisplacementSimulatorVelocity = this.DisplacementSimulatorVelocity.Combine(rhs.DisplacementSimulatorVelocity);
            ret.DisplacementSimulatorFalloff = this.DisplacementSimulatorFalloff.Combine(rhs.DisplacementSimulatorFalloff);
            ret.DisplacementSimulatorDampner = this.DisplacementSimulatorDampner.Combine(rhs.DisplacementSimulatorDampner);
            ret.DisplacementSimulatorStartingSize = this.DisplacementSimulatorStartingSize.Combine(rhs.DisplacementSimulatorStartingSize);
            ret.Damage = this.Damage.Combine(rhs.Damage);
            ret.RelatedWaters = new MaskItem<Exception, RelatedWaters_ErrorMask>(this.RelatedWaters.Overall.Combine(rhs.RelatedWaters.Overall), ((IErrorMask<RelatedWaters_ErrorMask>)this.RelatedWaters.Specific).Combine(rhs.RelatedWaters.Specific));
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Water_ErrorMask Combine(Water_ErrorMask lhs, Water_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Water_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Water_ErrorMask();
        }
        #endregion

    }
    public class Water_CopyMask : OblivionMajorRecord_CopyMask
    {
        public Water_CopyMask()
        {
        }

        public Water_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Texture = defaultOn;
            this.Opacity = defaultOn;
            this.Flags = defaultOn;
            this.MaterialID = defaultOn;
            this.Sound = defaultOn;
            this.WindVelocity = defaultOn;
            this.WindDirection = defaultOn;
            this.WaveAmplitude = defaultOn;
            this.WaveFrequency = defaultOn;
            this.SunPower = defaultOn;
            this.ReflectivityAmount = defaultOn;
            this.FresnelAmount = defaultOn;
            this.ScrollXSpeed = defaultOn;
            this.ScrollYSpeed = defaultOn;
            this.FogDistanceNearPlane = defaultOn;
            this.FogDistanceFarPlane = defaultOn;
            this.ShallowColor = defaultOn;
            this.DeepColor = defaultOn;
            this.ReflectionColor = defaultOn;
            this.TextureBlend = defaultOn;
            this.RainSimulatorForce = defaultOn;
            this.RainSimulatorVelocity = defaultOn;
            this.RainSimulatorFalloff = defaultOn;
            this.RainSimulatorDampner = defaultOn;
            this.RainSimulatorStartingSize = defaultOn;
            this.DisplacementSimulatorForce = defaultOn;
            this.DisplacementSimulatorVelocity = defaultOn;
            this.DisplacementSimulatorFalloff = defaultOn;
            this.DisplacementSimulatorDampner = defaultOn;
            this.DisplacementSimulatorStartingSize = defaultOn;
            this.Damage = defaultOn;
            this.RelatedWaters = new MaskItem<CopyOption, RelatedWaters_CopyMask>(deepCopyOption, default);
            this.DATADataTypeState = defaultOn;
        }

        #region Members
        public bool Texture;
        public bool Opacity;
        public bool Flags;
        public bool MaterialID;
        public bool Sound;
        public bool WindVelocity;
        public bool WindDirection;
        public bool WaveAmplitude;
        public bool WaveFrequency;
        public bool SunPower;
        public bool ReflectivityAmount;
        public bool FresnelAmount;
        public bool ScrollXSpeed;
        public bool ScrollYSpeed;
        public bool FogDistanceNearPlane;
        public bool FogDistanceFarPlane;
        public bool ShallowColor;
        public bool DeepColor;
        public bool ReflectionColor;
        public bool TextureBlend;
        public bool RainSimulatorForce;
        public bool RainSimulatorVelocity;
        public bool RainSimulatorFalloff;
        public bool RainSimulatorDampner;
        public bool RainSimulatorStartingSize;
        public bool DisplacementSimulatorForce;
        public bool DisplacementSimulatorVelocity;
        public bool DisplacementSimulatorFalloff;
        public bool DisplacementSimulatorDampner;
        public bool DisplacementSimulatorStartingSize;
        public bool Damage;
        public MaskItem<CopyOption, RelatedWaters_CopyMask> RelatedWaters;
        public bool DATADataTypeState;
        #endregion

    }

    public class Water_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool Texture;
        public bool Opacity;
        public bool Flags;
        public bool MaterialID;
        public bool Sound;
        public bool WindVelocity;
        public bool WindDirection;
        public bool WaveAmplitude;
        public bool WaveFrequency;
        public bool SunPower;
        public bool ReflectivityAmount;
        public bool FresnelAmount;
        public bool ScrollXSpeed;
        public bool ScrollYSpeed;
        public bool FogDistanceNearPlane;
        public bool FogDistanceFarPlane;
        public bool ShallowColor;
        public bool DeepColor;
        public bool ReflectionColor;
        public bool TextureBlend;
        public bool RainSimulatorForce;
        public bool RainSimulatorVelocity;
        public bool RainSimulatorFalloff;
        public bool RainSimulatorDampner;
        public bool RainSimulatorStartingSize;
        public bool DisplacementSimulatorForce;
        public bool DisplacementSimulatorVelocity;
        public bool DisplacementSimulatorFalloff;
        public bool DisplacementSimulatorDampner;
        public bool DisplacementSimulatorStartingSize;
        public bool Damage;
        public MaskItem<bool, RelatedWaters_TranslationMask> RelatedWaters;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Water_TranslationMask()
            : base()
        {
        }

        public Water_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Texture = defaultOn;
            this.Opacity = defaultOn;
            this.Flags = defaultOn;
            this.MaterialID = defaultOn;
            this.Sound = defaultOn;
            this.WindVelocity = defaultOn;
            this.WindDirection = defaultOn;
            this.WaveAmplitude = defaultOn;
            this.WaveFrequency = defaultOn;
            this.SunPower = defaultOn;
            this.ReflectivityAmount = defaultOn;
            this.FresnelAmount = defaultOn;
            this.ScrollXSpeed = defaultOn;
            this.ScrollYSpeed = defaultOn;
            this.FogDistanceNearPlane = defaultOn;
            this.FogDistanceFarPlane = defaultOn;
            this.ShallowColor = defaultOn;
            this.DeepColor = defaultOn;
            this.ReflectionColor = defaultOn;
            this.TextureBlend = defaultOn;
            this.RainSimulatorForce = defaultOn;
            this.RainSimulatorVelocity = defaultOn;
            this.RainSimulatorFalloff = defaultOn;
            this.RainSimulatorDampner = defaultOn;
            this.RainSimulatorStartingSize = defaultOn;
            this.DisplacementSimulatorForce = defaultOn;
            this.DisplacementSimulatorVelocity = defaultOn;
            this.DisplacementSimulatorFalloff = defaultOn;
            this.DisplacementSimulatorDampner = defaultOn;
            this.DisplacementSimulatorStartingSize = defaultOn;
            this.Damage = defaultOn;
            this.RelatedWaters = new MaskItem<bool, RelatedWaters_TranslationMask>(defaultOn, null);
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Texture, null));
            ret.Add((Opacity, null));
            ret.Add((Flags, null));
            ret.Add((MaterialID, null));
            ret.Add((Sound, null));
            ret.Add((WindVelocity, null));
            ret.Add((WindDirection, null));
            ret.Add((WaveAmplitude, null));
            ret.Add((WaveFrequency, null));
            ret.Add((SunPower, null));
            ret.Add((ReflectivityAmount, null));
            ret.Add((FresnelAmount, null));
            ret.Add((ScrollXSpeed, null));
            ret.Add((ScrollYSpeed, null));
            ret.Add((FogDistanceNearPlane, null));
            ret.Add((FogDistanceFarPlane, null));
            ret.Add((ShallowColor, null));
            ret.Add((DeepColor, null));
            ret.Add((ReflectionColor, null));
            ret.Add((TextureBlend, null));
            ret.Add((RainSimulatorForce, null));
            ret.Add((RainSimulatorVelocity, null));
            ret.Add((RainSimulatorFalloff, null));
            ret.Add((RainSimulatorDampner, null));
            ret.Add((RainSimulatorStartingSize, null));
            ret.Add((DisplacementSimulatorForce, null));
            ret.Add((DisplacementSimulatorVelocity, null));
            ret.Add((DisplacementSimulatorFalloff, null));
            ret.Add((DisplacementSimulatorDampner, null));
            ret.Add((DisplacementSimulatorStartingSize, null));
            ret.Add((Damage, null));
            ret.Add((RelatedWaters?.Overall ?? true, RelatedWaters?.Specific?.GetCrystal()));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WaterBinaryWriteTranslation Instance = new WaterBinaryWriteTranslation();

        static partial void WriteBinaryNothingCustomLogicCustom(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryNothingCustomLogic(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryNothingCustomLogicCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryBloodCustomLogicCustom(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryBloodCustomLogic(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryBloodCustomLogicCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryOilCustomLogicCustom(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryOilCustomLogic(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryOilCustomLogicCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinaryOddExtraBytesCustom(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryOddExtraBytes(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryOddExtraBytesCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IWaterGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IWaterGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.Texture_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Texture,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.TNAM_HEADER),
                    nullable: false);
            }
            if (item.Opacity_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Opacity,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.ANAM_HEADER),
                    nullable: false);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Water.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.FNAM_HEADER),
                    nullable: false);
            }
            if (item.MaterialID_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaterialID,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.MNAM_HEADER),
                    nullable: false);
            }
            if (item.Sound_Property.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound_Property,
                    header: recordTypeConverter.ConvertToCustom(Water_Registration.SNAM_HEADER),
                    nullable: false,
                    masterReferences: masterReferences);
            }
            if (item.DATADataTypeState.HasFlag(Water.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Water_Registration.DATA_HEADER)))
                {
                    WaterBinaryWriteTranslation.WriteBinaryNothingCustomLogic(
                        writer: writer,
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WindVelocity);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WindDirection);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WaveAmplitude);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.WaveFrequency);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.SunPower);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ReflectivityAmount);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FresnelAmount);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ScrollXSpeed);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ScrollYSpeed);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FogDistanceNearPlane);
                        WaterBinaryWriteTranslation.WriteBinaryBloodCustomLogic(
                            writer: writer,
                            item: item,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                        if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break1))
                        {
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.FogDistanceFarPlane);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.ShallowColor,
                                extraByte: true);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.DeepColor,
                                extraByte: true);
                            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.ReflectionColor,
                                extraByte: true);
                            writer.Write(item.TextureBlend);
                            writer.WriteZeros(3);
                            WaterBinaryWriteTranslation.WriteBinaryOilCustomLogic(
                                writer: writer,
                                item: item,
                                masterReferences: masterReferences,
                                errorMask: errorMask);
                            if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break2))
                            {
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorForce);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorVelocity);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorFalloff);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorDampner);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.RainSimulatorStartingSize);
                                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                    writer: writer,
                                    item: item.DisplacementSimulatorForce);
                                WaterBinaryWriteTranslation.WriteBinaryOddExtraBytes(
                                    writer: writer,
                                    item: item,
                                    masterReferences: masterReferences,
                                    errorMask: errorMask);
                                if (!item.DATADataTypeState.HasFlag(Water.DATADataType.Break3))
                                {
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorVelocity);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorFalloff);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorDampner);
                                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                        writer: writer,
                                        item: item.DisplacementSimulatorStartingSize);
                                    writer.Write(item.Damage);
                                }
                            }
                        }
                    }
                }
            }
            if (item.RelatedWaters_IsSet)
            {
                var loquiItem = item.RelatedWaters;
                ((RelatedWatersBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IWaterGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Water_Registration.WATR_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IWaterGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IWaterGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IWaterGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class WaterBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static WaterBinaryCreateTranslation Instance = new WaterBinaryCreateTranslation();

        static partial void FillBinaryNothingCustomLogicCustom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryNothingCustomLogicCustomPublic(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryNothingCustomLogicCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryBloodCustomLogicCustom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryBloodCustomLogicCustomPublic(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryBloodCustomLogicCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryOilCustomLogicCustom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryOilCustomLogicCustomPublic(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryOilCustomLogicCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void FillBinaryOddExtraBytesCustom(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryOddExtraBytesCustomPublic(
            MutagenFrame frame,
            Water item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryOddExtraBytesCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WaterBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWaterGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Water_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((WaterBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Water_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterBinaryWrapper :
        OblivionMajorRecordBinaryWrapper,
        IWaterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static Water_Registration Registration => Water_Registration.Instance;
        protected override object CommonInstance()
        {
            return WaterCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWaterGetter)rhs, include);

        protected override object XmlWriteTranslator => WaterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((WaterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Texture
        private int? _TextureLocation;
        public bool Texture_IsSet => _TextureLocation.HasValue;
        public String Texture => _TextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureLocation.Value, _package.Meta)) : default;
        #endregion
        #region Opacity
        private int? _OpacityLocation;
        public bool Opacity_IsSet => _OpacityLocation.HasValue;
        public Byte Opacity => _OpacityLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _OpacityLocation.Value, _package.Meta)[0] : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public Water.Flag Flags => (Water.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta)[0];
        #endregion
        #region MaterialID
        private int? _MaterialIDLocation;
        public bool MaterialID_IsSet => _MaterialIDLocation.HasValue;
        public String MaterialID => _MaterialIDLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MaterialIDLocation.Value, _package.Meta)) : default;
        #endregion
        #region Sound
        private int? _SoundLocation;
        public bool Sound_IsSet => _SoundLocation.HasValue;
        public IFormIDSetLinkGetter<ISoundGetter> Sound_Property => _SoundLocation.HasValue ? new FormIDSetLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundLocation.Value, _package.Meta)))) : FormIDSetLink<ISoundGetter>.Empty;
        public ISoundGetter Sound => default;
        #endregion
        private int? _DATALocation;
        public Water.DATADataType DATADataTypeState { get; private set; }
        partial void DATACustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #region NothingCustomLogic
        partial void NothingCustomLogicCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region WindVelocity
        private int _WindVelocityLocation => _DATALocation.Value + 0x0;
        private bool _WindVelocity_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single WindVelocity => _WindVelocity_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WindVelocityLocation, 4)) : default;
        #endregion
        #region WindDirection
        private int _WindDirectionLocation => _DATALocation.Value + 0x4;
        private bool _WindDirection_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single WindDirection => _WindDirection_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WindDirectionLocation, 4)) : default;
        #endregion
        #region WaveAmplitude
        private int _WaveAmplitudeLocation => _DATALocation.Value + 0x8;
        private bool _WaveAmplitude_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single WaveAmplitude => _WaveAmplitude_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WaveAmplitudeLocation, 4)) : default;
        #endregion
        #region WaveFrequency
        private int _WaveFrequencyLocation => _DATALocation.Value + 0xC;
        private bool _WaveFrequency_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single WaveFrequency => _WaveFrequency_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WaveFrequencyLocation, 4)) : default;
        #endregion
        #region SunPower
        private int _SunPowerLocation => _DATALocation.Value + 0x10;
        private bool _SunPower_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single SunPower => _SunPower_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_SunPowerLocation, 4)) : default;
        #endregion
        #region ReflectivityAmount
        private int _ReflectivityAmountLocation => _DATALocation.Value + 0x14;
        private bool _ReflectivityAmount_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single ReflectivityAmount => _ReflectivityAmount_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ReflectivityAmountLocation, 4)) : default;
        #endregion
        #region FresnelAmount
        private int _FresnelAmountLocation => _DATALocation.Value + 0x18;
        private bool _FresnelAmount_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single FresnelAmount => _FresnelAmount_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FresnelAmountLocation, 4)) : default;
        #endregion
        #region ScrollXSpeed
        private int _ScrollXSpeedLocation => _DATALocation.Value + 0x1C;
        private bool _ScrollXSpeed_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single ScrollXSpeed => _ScrollXSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ScrollXSpeedLocation, 4)) : default;
        #endregion
        #region ScrollYSpeed
        private int _ScrollYSpeedLocation => _DATALocation.Value + 0x20;
        private bool _ScrollYSpeed_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single ScrollYSpeed => _ScrollYSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ScrollYSpeedLocation, 4)) : default;
        #endregion
        #region FogDistanceNearPlane
        private int _FogDistanceNearPlaneLocation => _DATALocation.Value + 0x24;
        private bool _FogDistanceNearPlane_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break0);
        public Single FogDistanceNearPlane => _FogDistanceNearPlane_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogDistanceNearPlaneLocation, 4)) : default;
        #endregion
        #region BloodCustomLogic
        partial void BloodCustomLogicCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region FogDistanceFarPlane
        private int _FogDistanceFarPlaneLocation => _DATALocation.Value + 0x28;
        private bool _FogDistanceFarPlane_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break1);
        public Single FogDistanceFarPlane => _FogDistanceFarPlane_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogDistanceFarPlaneLocation, 4)) : default;
        #endregion
        #region ShallowColor
        private int _ShallowColorLocation => _DATALocation.Value + 0x2C;
        private bool _ShallowColor_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break1);
        public Color ShallowColor => _ShallowColor_IsSet ? _data.Span.Slice(_ShallowColorLocation, 4).ReadColor() : default;
        #endregion
        #region DeepColor
        private int _DeepColorLocation => _DATALocation.Value + 0x30;
        private bool _DeepColor_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break1);
        public Color DeepColor => _DeepColor_IsSet ? _data.Span.Slice(_DeepColorLocation, 4).ReadColor() : default;
        #endregion
        #region ReflectionColor
        private int _ReflectionColorLocation => _DATALocation.Value + 0x34;
        private bool _ReflectionColor_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break1);
        public Color ReflectionColor => _ReflectionColor_IsSet ? _data.Span.Slice(_ReflectionColorLocation, 4).ReadColor() : default;
        #endregion
        public Byte TextureBlend => _DATALocation.HasValue ? _data.Span[_DATALocation.Value + 56] : default;
        #region OilCustomLogic
        partial void OilCustomLogicCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region RainSimulatorForce
        private int _RainSimulatorForceLocation => _DATALocation.Value + 0x3C;
        private bool _RainSimulatorForce_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single RainSimulatorForce => _RainSimulatorForce_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RainSimulatorForceLocation, 4)) : default;
        #endregion
        #region RainSimulatorVelocity
        private int _RainSimulatorVelocityLocation => _DATALocation.Value + 0x40;
        private bool _RainSimulatorVelocity_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single RainSimulatorVelocity => _RainSimulatorVelocity_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RainSimulatorVelocityLocation, 4)) : default;
        #endregion
        #region RainSimulatorFalloff
        private int _RainSimulatorFalloffLocation => _DATALocation.Value + 0x44;
        private bool _RainSimulatorFalloff_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single RainSimulatorFalloff => _RainSimulatorFalloff_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RainSimulatorFalloffLocation, 4)) : default;
        #endregion
        #region RainSimulatorDampner
        private int _RainSimulatorDampnerLocation => _DATALocation.Value + 0x48;
        private bool _RainSimulatorDampner_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single RainSimulatorDampner => _RainSimulatorDampner_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RainSimulatorDampnerLocation, 4)) : default;
        #endregion
        #region RainSimulatorStartingSize
        private int _RainSimulatorStartingSizeLocation => _DATALocation.Value + 0x4C;
        private bool _RainSimulatorStartingSize_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single RainSimulatorStartingSize => _RainSimulatorStartingSize_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_RainSimulatorStartingSizeLocation, 4)) : default;
        #endregion
        #region DisplacementSimulatorForce
        private int _DisplacementSimulatorForceLocation => _DATALocation.Value + 0x50;
        private bool _DisplacementSimulatorForce_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break2);
        public Single DisplacementSimulatorForce => _DisplacementSimulatorForce_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DisplacementSimulatorForceLocation, 4)) : default;
        #endregion
        #region OddExtraBytes
        partial void OddExtraBytesCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region DisplacementSimulatorVelocity
        private int _DisplacementSimulatorVelocityLocation => _DATALocation.Value + 0x54;
        private bool _DisplacementSimulatorVelocity_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break3);
        public Single DisplacementSimulatorVelocity => _DisplacementSimulatorVelocity_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DisplacementSimulatorVelocityLocation, 4)) : default;
        #endregion
        #region DisplacementSimulatorFalloff
        private int _DisplacementSimulatorFalloffLocation => _DATALocation.Value + 0x58;
        private bool _DisplacementSimulatorFalloff_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break3);
        public Single DisplacementSimulatorFalloff => _DisplacementSimulatorFalloff_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DisplacementSimulatorFalloffLocation, 4)) : default;
        #endregion
        #region DisplacementSimulatorDampner
        private int _DisplacementSimulatorDampnerLocation => _DATALocation.Value + 0x5C;
        private bool _DisplacementSimulatorDampner_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break3);
        public Single DisplacementSimulatorDampner => _DisplacementSimulatorDampner_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DisplacementSimulatorDampnerLocation, 4)) : default;
        #endregion
        #region DisplacementSimulatorStartingSize
        private int _DisplacementSimulatorStartingSizeLocation => _DATALocation.Value + 0x60;
        private bool _DisplacementSimulatorStartingSize_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break3);
        public Single DisplacementSimulatorStartingSize => _DisplacementSimulatorStartingSize_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_DisplacementSimulatorStartingSizeLocation, 4)) : default;
        #endregion
        #region Damage
        private int _DamageLocation => _DATALocation.Value + 0x64;
        private bool _Damage_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Water.DATADataType.Break3);
        public UInt16 Damage => _Damage_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_DamageLocation, 2)) : default;
        #endregion
        #region RelatedWaters
        public IRelatedWatersGetter RelatedWaters { get; private set; }
        public bool RelatedWaters_IsSet => RelatedWaters != null;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected WaterBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WaterBinaryWrapper WaterFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new WaterBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    _TextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Texture);
                }
                case 0x4D414E41: // ANAM
                {
                    _OpacityLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Opacity);
                }
                case 0x4D414E46: // FNAM
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Flags);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MaterialIDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.MaterialID);
                }
                case 0x4D414E53: // SNAM
                {
                    _SoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Sound);
                }
                case 0x41544144: // DATA
                {
                    DATACustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Damage);
                }
                case 0x4D414E47: // GNAM
                {
                    this.RelatedWaters = RelatedWatersBinaryWrapper.RelatedWatersFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.RelatedWaters);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

