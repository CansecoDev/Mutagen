/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Weapon :
        ItemAbstract,
        IWeaponInternal,
        ILoquiObjectSetter<Weapon>,
        INamed,
        IEquatable<Weapon>,
        IEqualsMask
    {
        #region Ctor
        protected Weapon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeaponGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeaponGetter.Model => this.Model;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeaponGetter.Icon => this.Icon;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Script> _Script = new FormIDSetLink<Script>();
        public IFormIDSetLink<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IScriptGetter> IWeaponGetter.Script => this.Script;
        #endregion
        #region Enchantment
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDSetLink<Enchantment> _Enchantment = new FormIDSetLink<Enchantment>();
        public IFormIDSetLink<Enchantment> Enchantment => this._Enchantment;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDSetLinkGetter<IEnchantmentGetter> IWeaponGetter.Enchantment => this.Enchantment;
        #endregion
        #region EnchantmentPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _EnchantmentPoints;
        public UInt16? EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => this._EnchantmentPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IWeaponGetter.EnchantmentPoints => this.EnchantmentPoints;
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Weapon.WeaponType _Type;
        public Weapon.WeaponType Type
        {
            get => this._Type;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Type = value;
            }
        }
        #endregion
        #region Speed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Speed;
        public Single Speed
        {
            get => this._Speed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Speed = value;
            }
        }
        #endregion
        #region Reach
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Reach;
        public Single Reach
        {
            get => this._Reach;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Reach = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Weapon.WeaponFlag _Flags;
        public Weapon.WeaponFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Value = value;
            }
        }
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Health = value;
            }
        }
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Weight = value;
            }
        }
        #endregion
        #region Damage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _Damage;
        public UInt16 Damage
        {
            get => this._Damage;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Damage = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public Weapon.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeaponMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IWeaponGetter rhs)) return false;
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Weapon obj)
        {
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeaponXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeaponXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Weapon CreateFromXml(
            XElement node,
            Weapon_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Weapon CreateFromXml(
            XElement node,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weapon_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Weapon CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Weapon();
            ((WeaponSetterCommon)((IWeaponGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Weapon CreateFromXml(
            string path,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weapon CreateFromXml(
            string path,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weapon CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Weapon CreateFromXml(
            Stream stream,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weapon CreateFromXml(
            Stream stream,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weapon CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Weapon_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => WeaponCommon.Instance.GetLinks(this);
        public Weapon(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Weapon(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Weapon CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Weapon CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Weapon();
            ((WeaponSetterCommon)((IWeaponGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeaponGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeaponSetterCommon)((IWeaponGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weapon GetNew()
        {
            return new Weapon();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeapon :
        IWeaponGetter,
        IItemAbstract,
        ILoquiObjectSetter<IWeaponInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new String? Icon { get; set; }
        new IFormIDSetLink<Script> Script { get; }
        new IFormIDSetLink<Enchantment> Enchantment { get; }
        new UInt16? EnchantmentPoints { get; set; }
        new Weapon.WeaponType Type { get; set; }
        new Single Speed { get; set; }
        new Single Reach { get; set; }
        new Weapon.WeaponFlag Flags { get; set; }
        new UInt32 Value { get; set; }
        new UInt32 Health { get; set; }
        new Single Weight { get; set; }
        new UInt16 Damage { get; set; }
        new Weapon.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IWeaponInternal :
        IItemAbstractInternal,
        IWeapon,
        IWeaponGetter
    {
    }

    public partial interface IWeaponGetter :
        IItemAbstractGetter,
        ILoquiObject<IWeaponGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        String? Icon { get; }
        IFormIDSetLinkGetter<IScriptGetter> Script { get; }
        IFormIDSetLinkGetter<IEnchantmentGetter> Enchantment { get; }
        UInt16? EnchantmentPoints { get; }
        Weapon.WeaponType Type { get; }
        Single Speed { get; }
        Single Reach { get; }
        Weapon.WeaponFlag Flags { get; }
        UInt32 Value { get; }
        UInt32 Health { get; }
        Single Weight { get; }
        UInt16 Damage { get; }
        Weapon.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class WeaponMixIn
    {
        public static void Clear(this IWeaponInternal item)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weapon_Mask<bool> GetEqualsMask(
            this IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeaponGetter item,
            string? name = null,
            Weapon_Mask<bool>? printMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeaponGetter item,
            FileGeneration fg,
            string? name = null,
            Weapon_Mask<bool>? printMask = null)
        {
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeaponGetter item,
            Weapon_Mask<bool?> checkMask)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Weapon_Mask<bool> GetHasBeenSetMask(this IWeaponGetter item)
        {
            var ret = new Weapon_Mask<bool>(false);
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeaponGetter item,
            IWeaponGetter rhs)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Weapon_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            Weapon_TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeaponInternal item,
            XElement node,
            Weapon_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeaponInternal item,
            XElement node,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weapon_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            string path,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            string path,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            Stream stream,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            Stream stream,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeaponInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weapon_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeaponInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeaponInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Weapon_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Enchantment = 9,
        EnchantmentPoints = 10,
        Type = 11,
        Speed = 12,
        Reach = 13,
        Flags = 14,
        Value = 15,
        Health = 16,
        Weight = 17,
        Damage = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class Weapon_Registration : ILoquiRegistration
    {
        public static readonly Weapon_Registration Instance = new Weapon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 82,
            version: 0);

        public const string GUID = "7251519c-a94a-44f1-a46c-c9a659b6e36c";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(Weapon_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weapon_ErrorMask);

        public static readonly Type ClassType = typeof(Weapon);

        public static readonly Type GetterType = typeof(IWeaponGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeapon);

        public static readonly Type? InternalSetterType = typeof(IWeaponInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Weapon";

        public const string Name = "Weapon";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Weapon_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Weapon_FieldIndex.Model;
                case "ICON":
                    return (ushort)Weapon_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)Weapon_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)Weapon_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)Weapon_FieldIndex.EnchantmentPoints;
                case "TYPE":
                    return (ushort)Weapon_FieldIndex.Type;
                case "SPEED":
                    return (ushort)Weapon_FieldIndex.Speed;
                case "REACH":
                    return (ushort)Weapon_FieldIndex.Reach;
                case "FLAGS":
                    return (ushort)Weapon_FieldIndex.Flags;
                case "VALUE":
                    return (ushort)Weapon_FieldIndex.Value;
                case "HEALTH":
                    return (ushort)Weapon_FieldIndex.Health;
                case "WEIGHT":
                    return (ushort)Weapon_FieldIndex.Weight;
                case "DAMAGE":
                    return (ushort)Weapon_FieldIndex.Damage;
                case "DATADATATYPESTATE":
                    return (ushort)Weapon_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                case Weapon_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Model:
                    return true;
                case Weapon_FieldIndex.Name:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                case Weapon_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                case Weapon_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                    return "Name";
                case Weapon_FieldIndex.Model:
                    return "Model";
                case Weapon_FieldIndex.Icon:
                    return "Icon";
                case Weapon_FieldIndex.Script:
                    return "Script";
                case Weapon_FieldIndex.Enchantment:
                    return "Enchantment";
                case Weapon_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case Weapon_FieldIndex.Type:
                    return "Type";
                case Weapon_FieldIndex.Speed:
                    return "Speed";
                case Weapon_FieldIndex.Reach:
                    return "Reach";
                case Weapon_FieldIndex.Flags:
                    return "Flags";
                case Weapon_FieldIndex.Value:
                    return "Value";
                case Weapon_FieldIndex.Health:
                    return "Health";
                case Weapon_FieldIndex.Weight:
                    return "Weight";
                case Weapon_FieldIndex.Damage:
                    return "Damage";
                case Weapon_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                case Weapon_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                case Weapon_FieldIndex.Model:
                case Weapon_FieldIndex.Icon:
                case Weapon_FieldIndex.Script:
                case Weapon_FieldIndex.Enchantment:
                case Weapon_FieldIndex.EnchantmentPoints:
                case Weapon_FieldIndex.Type:
                case Weapon_FieldIndex.Speed:
                case Weapon_FieldIndex.Reach:
                case Weapon_FieldIndex.Flags:
                case Weapon_FieldIndex.Value:
                case Weapon_FieldIndex.Health:
                case Weapon_FieldIndex.Weight:
                case Weapon_FieldIndex.Damage:
                case Weapon_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                    return typeof(String);
                case Weapon_FieldIndex.Model:
                    return typeof(Model);
                case Weapon_FieldIndex.Icon:
                    return typeof(String);
                case Weapon_FieldIndex.Script:
                    return typeof(IFormIDSetLink<Script>);
                case Weapon_FieldIndex.Enchantment:
                    return typeof(IFormIDSetLink<Enchantment>);
                case Weapon_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case Weapon_FieldIndex.Type:
                    return typeof(Weapon.WeaponType);
                case Weapon_FieldIndex.Speed:
                    return typeof(Single);
                case Weapon_FieldIndex.Reach:
                    return typeof(Single);
                case Weapon_FieldIndex.Flags:
                    return typeof(Weapon.WeaponFlag);
                case Weapon_FieldIndex.Value:
                    return typeof(UInt32);
                case Weapon_FieldIndex.Health:
                    return typeof(UInt32);
                case Weapon_FieldIndex.Weight:
                    return typeof(Single);
                case Weapon_FieldIndex.Damage:
                    return typeof(UInt16);
                case Weapon_FieldIndex.DATADataTypeState:
                    return typeof(Weapon.DATADataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeaponXmlWriteTranslation);
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WEAP_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(WeaponBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeaponSetterCommon : ItemAbstractSetterCommon
    {
        public new static readonly WeaponSetterCommon Instance = new WeaponSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Icon = default;
            item.Script.Unset();
            item.Enchantment.Unset();
            item.EnchantmentPoints = default;
            item.Type = default;
            item.Speed = default;
            item.Reach = default;
            item.Flags = default;
            item.Value = default;
            item.Health = default;
            item.Weight = default;
            item.Damage = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWeaponInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Weapon.DATADataType.Has;
                    break;
                default:
                    ItemAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IWeaponInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WeaponXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Weapon_Registration.WEAP_HEADER;
        protected static void FillBinaryStructs(
            IWeaponInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            ItemAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IWeaponInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.NULL);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Enchantment.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.NULL);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.EnchantmentPoints);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Weapon.DATADataType.Has;
                    }
                    item.Type = EnumBinaryTranslation<Weapon.WeaponType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Speed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Reach = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Flags = EnumBinaryTranslation<Weapon.WeaponFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Value = dataFrame.ReadUInt32();
                    item.Health = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Damage = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Damage);
                }
                default:
                    return ItemAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IWeaponInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IWeaponInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class WeaponCommon : ItemAbstractCommon
    {
        public new static readonly WeaponCommon Instance = new WeaponCommon();

        public Weapon_Mask<bool> GetEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weapon_Mask<bool>(false);
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            Weapon_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Enchantment = object.Equals(item.Enchantment, rhs.Enchantment);
            ret.EnchantmentPoints = item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.Type = item.Type == rhs.Type;
            ret.Speed = item.Speed.EqualsWithin(rhs.Speed);
            ret.Reach = item.Reach.EqualsWithin(rhs.Reach);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Value = item.Value == rhs.Value;
            ret.Health = item.Health == rhs.Health;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.Damage = item.Damage == rhs.Damage;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWeaponGetter item,
            string? name = null,
            Weapon_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeaponGetter item,
            FileGeneration fg,
            string? name = null,
            Weapon_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Weapon =>");
            }
            else
            {
                fg.AppendLine($"{name} (Weapon) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeaponGetter item,
            FileGeneration fg,
            Weapon_Mask<bool>? printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendLine($"Script => {item.Script}");
            }
            if (printMask?.Enchantment ?? true)
            {
                fg.AppendLine($"Enchantment => {item.Enchantment}");
            }
            if (printMask?.EnchantmentPoints ?? true)
            {
                fg.AppendLine($"EnchantmentPoints => {item.EnchantmentPoints}");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendLine($"Type => {item.Type}");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendLine($"Speed => {item.Speed}");
            }
            if (printMask?.Reach ?? true)
            {
                fg.AppendLine($"Reach => {item.Reach}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendLine($"Value => {item.Value}");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendLine($"Health => {item.Health}");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendLine($"Weight => {item.Weight}");
            }
            if (printMask?.Damage ?? true)
            {
                fg.AppendLine($"Damage => {item.Damage}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IWeaponGetter item,
            Weapon_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != item.Script.HasBeenSet) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != item.Enchantment.HasBeenSet) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != (item.EnchantmentPoints != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWeaponGetter item,
            Weapon_Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model_Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Icon = (item.Icon != null);
            mask.Script = item.Script.HasBeenSet;
            mask.Enchantment = item.Enchantment.HasBeenSet;
            mask.EnchantmentPoints = (item.EnchantmentPoints != null);
            mask.Type = true;
            mask.Speed = true;
            mask.Reach = true;
            mask.Flags = true;
            mask.Value = true;
            mask.Health = true;
            mask.Weight = true;
            mask.Damage = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Weapon_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (Weapon_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weapon_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Weapon_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weapon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponGetter? lhs,
            IWeaponGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Enchantment.Equals(rhs.Enchantment)) return false;
            if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.Speed.EqualsWithin(rhs.Speed)) return false;
            if (!lhs.Reach.EqualsWithin(rhs.Reach)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Value != rhs.Value) return false;
            if (lhs.Health != rhs.Health) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.Damage != rhs.Damage) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IItemAbstractGetter? lhs,
            IItemAbstractGetter? rhs)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter);
        }
        
        public virtual int GetHashCode(IWeaponGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            if (item.Enchantment.TryGet(out var Enchantmentitem))
            {
                ret = HashHelper.GetHashCode(Enchantmentitem).CombineHashCode(ret);
            }
            if (item.EnchantmentPoints.TryGet(out var EnchantmentPointsitem))
            {
                ret = HashHelper.GetHashCode(EnchantmentPointsitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Reach).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Damage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IItemAbstractGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weapon.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IWeaponGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield return obj.Enchantment;
            yield break;
        }
        
        partial void PostDuplicate(Weapon obj, Weapon rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Weapon(getNextFormKey());
            ret.DeepCopyFieldsFrom((Weapon)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Weapon)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WeaponSetterTranslationCommon : ItemAbstractSetterTranslationCommon
    {
        public new static readonly WeaponSetterTranslationCommon Instance = new WeaponSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IWeaponInternal item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IWeapon item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Script) ?? true))
            {
                item.Script.SetToFormKey(rhs: rhs.Script);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Enchantment) ?? true))
            {
                item.Enchantment.SetToFormKey(rhs: rhs.Enchantment);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnchantmentPoints) ?? true))
            {
                item.EnchantmentPoints = rhs.EnchantmentPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Reach) ?? true))
            {
                item.Reach = rhs.Reach;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Damage) ?? true))
            {
                item.Damage = rhs.Damage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IItemAbstractInternal item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IItemAbstract item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            Weapon_TranslationMask? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Weapon
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static Weapon_Registration Registration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeaponSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeaponXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WeaponXmlWriteTranslation Instance = new WeaponXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeaponGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Weapon_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Weapon_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weapon_FieldIndex.Model));
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Weapon_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.Script.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script?.FormKey,
                    fieldIndex: (int)Weapon_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.Enchantment.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Enchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment?.FormKey,
                    fieldIndex: (int)Weapon_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if ((item.EnchantmentPoints != null)
                && (translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints.Value,
                    fieldIndex: (int)Weapon_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Weapon.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Weapon.WeaponType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)Weapon_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Speed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speed),
                        item: item.Speed,
                        fieldIndex: (int)Weapon_FieldIndex.Speed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Reach) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Reach),
                        item: item.Reach,
                        fieldIndex: (int)Weapon_FieldIndex.Reach,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Weapon.WeaponFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Weapon_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Value) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)Weapon_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)Weapon_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Weapon_FieldIndex.Weight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.Damage) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Damage),
                        item: item.Damage,
                        fieldIndex: (int)Weapon_FieldIndex.Damage,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Weapon_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Weapon.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Weapon_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Weapon");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Weapon");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeaponGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeaponGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeaponGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeaponGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WeaponXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static WeaponXmlCreateTranslation Instance = new WeaponXmlCreateTranslation();

        public static void FillPublicXml(
            IWeaponInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeaponXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeaponInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Model);
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weapon_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Icon);
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Script);
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantment":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Enchantment);
                        item.Enchantment.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantmentPoints":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.EnchantmentPoints);
                        item.EnchantmentPoints = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Type);
                        item.Type = EnumXmlTranslation<Weapon.WeaponType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Weapon.DATADataType.Has;
                    break;
                case "Speed":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Speed);
                        item.Speed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Reach":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Reach);
                        item.Reach = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Flags);
                        item.Flags = EnumXmlTranslation<Weapon.WeaponFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Value);
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Health);
                        item.Health = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Weight);
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Damage":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.Damage);
                        item.Damage = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Weapon_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<Weapon.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WeaponXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeaponGetter item,
            XElement node,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weapon_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeaponGetter item,
            string path,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeaponGetter item,
            Stream stream,
            out Weapon_ErrorMask errorMask,
            Weapon_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Weapon_Mask<T> :
        ItemAbstract_Mask<T>,
        IMask<T>,
        IEquatable<Weapon_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public Weapon_Mask(T initialValue)
        : base(initialValue)
        {
            this.Name = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>?>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Script = initialValue;
            this.Enchantment = initialValue;
            this.EnchantmentPoints = initialValue;
            this.Type = initialValue;
            this.Speed = initialValue;
            this.Reach = initialValue;
            this.Flags = initialValue;
            this.Value = initialValue;
            this.Health = initialValue;
            this.Weight = initialValue;
            this.Damage = initialValue;
            this.DATADataTypeState = initialValue;
        }

        public Weapon_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T OblivionMajorRecordFlags,
            T Name,
            T Model,
            T Icon,
            T Script,
            T Enchantment,
            T EnchantmentPoints,
            T Type,
            T Speed,
            T Reach,
            T Flags,
            T Value,
            T Health,
            T Weight,
            T Damage,
            T DATADataTypeState)
        : base(
            MajorRecordFlagsRaw: MajorRecordFlagsRaw,
            FormKey: FormKey,
            Version: Version,
            EditorID: EditorID,
            OblivionMajorRecordFlags: OblivionMajorRecordFlags)
        {
            this.Name = Name;
            this.Model = new MaskItem<T, Model_Mask<T>?>(Model, new Model_Mask<T>(Model));
            this.Icon = Icon;
            this.Script = Script;
            this.Enchantment = Enchantment;
            this.EnchantmentPoints = EnchantmentPoints;
            this.Type = Type;
            this.Speed = Speed;
            this.Reach = Reach;
            this.Flags = Flags;
            this.Value = Value;
            this.Health = Health;
            this.Weight = Weight;
            this.Damage = Damage;
            this.DATADataTypeState = DATADataTypeState;
        }

        #pragma warning disable CS8618
        protected Weapon_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T Name;
        public MaskItem<T, Model_Mask<T>?>? Model { get; set; }
        public T Icon;
        public T Script;
        public T Enchantment;
        public T EnchantmentPoints;
        public T Type;
        public T Speed;
        public T Reach;
        public T Flags;
        public T Value;
        public T Health;
        public T Weight;
        public T Damage;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Weapon_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weapon_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Script, rhs.Script)) return false;
            if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
            if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.Speed, rhs.Speed)) return false;
            if (!object.Equals(this.Reach, rhs.Reach)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Value, rhs.Value)) return false;
            if (!object.Equals(this.Health, rhs.Health)) return false;
            if (!object.Equals(this.Weight, rhs.Weight)) return false;
            if (!object.Equals(this.Damage, rhs.Damage)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Script?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantment?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantmentPoints?.GetHashCode());
            ret = ret.CombineHashCode(this.Type?.GetHashCode());
            ret = ret.CombineHashCode(this.Speed?.GetHashCode());
            ret = ret.CombineHashCode(this.Reach?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Value?.GetHashCode());
            ret = ret.CombineHashCode(this.Health?.GetHashCode());
            ret = ret.CombineHashCode(this.Weight?.GetHashCode());
            ret = ret.CombineHashCode(this.Damage?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Script)) return false;
            if (!eval(this.Enchantment)) return false;
            if (!eval(this.EnchantmentPoints)) return false;
            if (!eval(this.Type)) return false;
            if (!eval(this.Speed)) return false;
            if (!eval(this.Reach)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Value)) return false;
            if (!eval(this.Health)) return false;
            if (!eval(this.Weight)) return false;
            if (!eval(this.Damage)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Weapon_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Weapon_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Weapon_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
            obj.Model = this.Model == null ? null : new MaskItem<R, Model_Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            obj.Icon = eval(this.Icon);
            obj.Script = eval(this.Script);
            obj.Enchantment = eval(this.Enchantment);
            obj.EnchantmentPoints = eval(this.EnchantmentPoints);
            obj.Type = eval(this.Type);
            obj.Speed = eval(this.Speed);
            obj.Reach = eval(this.Reach);
            obj.Flags = eval(this.Flags);
            obj.Value = eval(this.Value);
            obj.Health = eval(this.Health);
            obj.Weight = eval(this.Weight);
            obj.Damage = eval(this.Damage);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Weapon_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Weapon_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(Weapon_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon}");
                }
                if (printMask?.Script ?? true)
                {
                    fg.AppendLine($"Script => {Script}");
                }
                if (printMask?.Enchantment ?? true)
                {
                    fg.AppendLine($"Enchantment => {Enchantment}");
                }
                if (printMask?.EnchantmentPoints ?? true)
                {
                    fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
                }
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type}");
                }
                if (printMask?.Speed ?? true)
                {
                    fg.AppendLine($"Speed => {Speed}");
                }
                if (printMask?.Reach ?? true)
                {
                    fg.AppendLine($"Reach => {Reach}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Value ?? true)
                {
                    fg.AppendLine($"Value => {Value}");
                }
                if (printMask?.Health ?? true)
                {
                    fg.AppendLine($"Health => {Health}");
                }
                if (printMask?.Weight ?? true)
                {
                    fg.AppendLine($"Weight => {Weight}");
                }
                if (printMask?.Damage ?? true)
                {
                    fg.AppendLine($"Damage => {Damage}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Weapon_ErrorMask : ItemAbstract_ErrorMask, IErrorMask<Weapon_ErrorMask>
    {
        #region Members
        public Exception? Name;
        public MaskItem<Exception?, Model_ErrorMask?>? Model;
        public Exception? Icon;
        public Exception? Script;
        public Exception? Enchantment;
        public Exception? EnchantmentPoints;
        public Exception? Type;
        public Exception? Speed;
        public Exception? Reach;
        public Exception? Flags;
        public Exception? Value;
        public Exception? Health;
        public Exception? Weight;
        public Exception? Damage;
        public Exception? DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object? GetNthMask(int index)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                    return Name;
                case Weapon_FieldIndex.Model:
                    return Model;
                case Weapon_FieldIndex.Icon:
                    return Icon;
                case Weapon_FieldIndex.Script:
                    return Script;
                case Weapon_FieldIndex.Enchantment:
                    return Enchantment;
                case Weapon_FieldIndex.EnchantmentPoints:
                    return EnchantmentPoints;
                case Weapon_FieldIndex.Type:
                    return Type;
                case Weapon_FieldIndex.Speed:
                    return Speed;
                case Weapon_FieldIndex.Reach:
                    return Reach;
                case Weapon_FieldIndex.Flags:
                    return Flags;
                case Weapon_FieldIndex.Value:
                    return Value;
                case Weapon_FieldIndex.Health:
                    return Health;
                case Weapon_FieldIndex.Weight:
                    return Weight;
                case Weapon_FieldIndex.Damage:
                    return Damage;
                case Weapon_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Weapon_FieldIndex.Model:
                    this.Model = new MaskItem<Exception?, Model_ErrorMask?>(ex, null);
                    break;
                case Weapon_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Weapon_FieldIndex.Script:
                    this.Script = ex;
                    break;
                case Weapon_FieldIndex.Enchantment:
                    this.Enchantment = ex;
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = ex;
                    break;
                case Weapon_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case Weapon_FieldIndex.Speed:
                    this.Speed = ex;
                    break;
                case Weapon_FieldIndex.Reach:
                    this.Reach = ex;
                    break;
                case Weapon_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Weapon_FieldIndex.Value:
                    this.Value = ex;
                    break;
                case Weapon_FieldIndex.Health:
                    this.Health = ex;
                    break;
                case Weapon_FieldIndex.Weight:
                    this.Weight = ex;
                    break;
                case Weapon_FieldIndex.Damage:
                    this.Damage = ex;
                    break;
                case Weapon_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
            switch (enu)
            {
                case Weapon_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Model:
                    this.Model = (MaskItem<Exception?, Model_ErrorMask?>?)obj;
                    break;
                case Weapon_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Script:
                    this.Script = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Enchantment:
                    this.Enchantment = (Exception)obj;
                    break;
                case Weapon_FieldIndex.EnchantmentPoints:
                    this.EnchantmentPoints = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Speed:
                    this.Speed = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Reach:
                    this.Reach = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Value:
                    this.Value = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Health:
                    this.Health = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Weight:
                    this.Weight = (Exception)obj;
                    break;
                case Weapon_FieldIndex.Damage:
                    this.Damage = (Exception)obj;
                    break;
                case Weapon_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Model != null) return true;
            if (Icon != null) return true;
            if (Script != null) return true;
            if (Enchantment != null) return true;
            if (EnchantmentPoints != null) return true;
            if (Type != null) return true;
            if (Speed != null) return true;
            if (Reach != null) return true;
            if (Flags != null) return true;
            if (Value != null) return true;
            if (Health != null) return true;
            if (Weight != null) return true;
            if (Damage != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Weapon_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
            Model?.ToString(fg);
            fg.AppendLine($"Icon => {Icon}");
            fg.AppendLine($"Script => {Script}");
            fg.AppendLine($"Enchantment => {Enchantment}");
            fg.AppendLine($"EnchantmentPoints => {EnchantmentPoints}");
            fg.AppendLine($"Type => {Type}");
            fg.AppendLine($"Speed => {Speed}");
            fg.AppendLine($"Reach => {Reach}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Value => {Value}");
            fg.AppendLine($"Health => {Health}");
            fg.AppendLine($"Weight => {Weight}");
            fg.AppendLine($"Damage => {Damage}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Weapon_ErrorMask Combine(Weapon_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new Weapon_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Model = new MaskItem<Exception?, Model_ErrorMask?>(ExceptionExt.Combine(this.Model?.Overall, rhs.Model?.Overall), (this.Model?.Specific as IErrorMask<Model_ErrorMask>)?.Combine(rhs.Model?.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Script = this.Script.Combine(rhs.Script);
            ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
            ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
            ret.Type = this.Type.Combine(rhs.Type);
            ret.Speed = this.Speed.Combine(rhs.Speed);
            ret.Reach = this.Reach.Combine(rhs.Reach);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Value = this.Value.Combine(rhs.Value);
            ret.Health = this.Health.Combine(rhs.Health);
            ret.Weight = this.Weight.Combine(rhs.Weight);
            ret.Damage = this.Damage.Combine(rhs.Damage);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Weapon_ErrorMask? Combine(Weapon_ErrorMask? lhs, Weapon_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new Weapon_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new Weapon_ErrorMask();
        }
        #endregion

    }
    public class Weapon_TranslationMask : ItemAbstract_TranslationMask
    {
        #region Members
        public bool Name;
        public MaskItem<bool, Model_TranslationMask?> Model;
        public bool Icon;
        public bool Script;
        public bool Enchantment;
        public bool EnchantmentPoints;
        public bool Type;
        public bool Speed;
        public bool Reach;
        public bool Flags;
        public bool Value;
        public bool Health;
        public bool Weight;
        public bool Damage;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Weapon_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Name = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask?>(defaultOn, null);
            this.Icon = defaultOn;
            this.Script = defaultOn;
            this.Enchantment = defaultOn;
            this.EnchantmentPoints = defaultOn;
            this.Type = defaultOn;
            this.Speed = defaultOn;
            this.Reach = defaultOn;
            this.Flags = defaultOn;
            this.Value = defaultOn;
            this.Health = defaultOn;
            this.Weight = defaultOn;
            this.Damage = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Name, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((Icon, null));
            ret.Add((Script, null));
            ret.Add((Enchantment, null));
            ret.Add((EnchantmentPoints, null));
            ret.Add((Type, null));
            ret.Add((Speed, null));
            ret.Add((Reach, null));
            ret.Add((Flags, null));
            ret.Add((Value, null));
            ret.Add((Health, null));
            ret.Add((Weight, null));
            ret.Add((Damage, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeaponBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WeaponBinaryWriteTranslation Instance = new WeaponBinaryWriteTranslation();

        public static void Write_Embedded(
            IWeaponGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IWeaponGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            {
                var loquiItem = item.Model;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Enchantment,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ENAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentPoints,
                header: recordTypeConverter.ConvertToCustom(Weapon_Registration.ANAM_HEADER));
            if (item.DATADataTypeState.HasFlag(Weapon.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weapon_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Speed);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Reach);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weapon.WeaponFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    writer.Write(item.Value);
                    writer.Write(item.Health);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                    writer.Write(item.Damage);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IWeaponGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Weapon_Registration.WEAP_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeaponGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeaponGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeaponGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeaponGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeaponBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static WeaponBinaryCreateTranslation Instance = new WeaponBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WeaponBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeaponBinaryOverlay :
        ItemAbstractBinaryOverlay,
        IWeaponGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static Weapon_Registration Registration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeaponGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => WeaponCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeaponXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeaponXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormIDSetLinkGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormIDSetLink<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormIDSetLink<IScriptGetter>.Empty;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public bool Enchantment_IsSet => _EnchantmentLocation.HasValue;
        public IFormIDSetLinkGetter<IEnchantmentGetter> Enchantment => _EnchantmentLocation.HasValue ? new FormIDSetLink<IEnchantmentGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentLocation.Value, _package.Meta)))) : FormIDSetLink<IEnchantmentGetter>.Empty;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public UInt16? EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentPointsLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        private int? _DATALocation;
        public Weapon.DATADataType DATADataTypeState { get; private set; }
        #region Type
        private int _TypeLocation => _DATALocation!.Value + 0x0;
        private bool _Type_IsSet => _DATALocation.HasValue;
        public Weapon.WeaponType Type => _Type_IsSet ? (Weapon.WeaponType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 4)) : default;
        #endregion
        #region Speed
        private int _SpeedLocation => _DATALocation!.Value + 0x4;
        private bool _Speed_IsSet => _DATALocation.HasValue;
        public Single Speed => _Speed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_SpeedLocation, 4)) : default;
        #endregion
        #region Reach
        private int _ReachLocation => _DATALocation!.Value + 0x8;
        private bool _Reach_IsSet => _DATALocation.HasValue;
        public Single Reach => _Reach_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ReachLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xC;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Weapon.WeaponFlag Flags => _Flags_IsSet ? (Weapon.WeaponFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x10;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Health
        private int _HealthLocation => _DATALocation!.Value + 0x14;
        private bool _Health_IsSet => _DATALocation.HasValue;
        public UInt32 Health => _Health_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HealthLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x18;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region Damage
        private int _DamageLocation => _DATALocation!.Value + 0x1C;
        private bool _Damage_IsSet => _DATALocation.HasValue;
        public UInt16 Damage => _Damage_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_DamageLocation, 2)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WeaponBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WeaponBinaryOverlay WeaponFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new WeaponBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    _EnchantmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    _EnchantmentPointsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.EnchantmentPoints);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Weapon.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Weapon_FieldIndex.Damage);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

