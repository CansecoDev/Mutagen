/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WeatherType :
        LoquiNotifyingObject,
        IWeatherTypeInternal,
        ILoquiObjectSetter<WeatherType>,
        IEquatable<WeatherType>,
        IEqualsMask
    {
        #region Ctor
        public WeatherType()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sunrise
        public Color Sunrise { get; set; }
        #endregion
        #region Day
        public Color Day { get; set; }
        #endregion
        #region Sunset
        public Color Sunset { get; set; }
        #endregion
        #region Night
        public Color Night { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherTypeInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            WeatherTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IWeatherTypeInternalGetter rhs)) return false;
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(WeatherType obj)
        {
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherTypeCommon)((IWeatherTypeInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => WeatherTypeXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((WeatherTypeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WeatherType CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            WeatherType_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WeatherType CreateFromXml(
            XElement node,
            out WeatherType_ErrorMask errorMask,
            bool doMasks = true,
            WeatherType_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = WeatherType_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherType CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new WeatherType() : null;
                    break;
                default:
                    break;
            }
            var ret = new WeatherType();
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherTypeXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static WeatherType CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            WeatherType_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherType CreateFromXml(
            string path,
            out WeatherType_ErrorMask errorMask,
            WeatherType_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherType CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            WeatherType_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WeatherType CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            WeatherType_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static WeatherType CreateFromXml(
            Stream stream,
            out WeatherType_ErrorMask errorMask,
            WeatherType_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherType CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            WeatherType_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((WeatherType_FieldIndex)index)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => WeatherTypeBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((WeatherTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherType CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static WeatherType CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out WeatherType_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherType_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherType CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new WeatherType();
            UtilityTranslation.TypelessRecordParse(
                record: ret,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            WeatherType item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color SunriseParse))
            {
                item.Sunrise = SunriseParse;
            }
            else
            {
                item.Sunrise = default(Color);
            }
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color DayParse))
            {
                item.Day = DayParse;
            }
            else
            {
                item.Day = default(Color);
            }
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color SunsetParse))
            {
                item.Sunset = SunsetParse;
            }
            else
            {
                item.Sunset = default(Color);
            }
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color NightParse))
            {
                item.Night = NightParse;
            }
            else
            {
                item.Night = default(Color);
            }
        }

        #endregion

        public WeatherType Copy(
            WeatherType_CopyMask copyMask = null,
            WeatherType def = null)
        {
            return WeatherType.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static WeatherType Copy(
            WeatherType item,
            WeatherType_CopyMask copyMask = null,
            WeatherType def = null)
        {
            WeatherType ret;
            if (item.GetType().Equals(typeof(WeatherType)))
            {
                ret = new WeatherType();
            }
            else
            {
                ret = (WeatherType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void IClearable.Clear()
        {
            ((WeatherTypeSetterCommon)((IWeatherTypeInternalGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IWeatherType :
        IWeatherTypeInternalGetter,
        ILoquiObjectSetter<IWeatherTypeInternal>
    {
        new Color Sunrise { get; set; }

        new Color Day { get; set; }

        new Color Sunset { get; set; }

        new Color Night { get; set; }

    }

    public partial interface IWeatherTypeInternal :
        IWeatherType,
        IWeatherTypeInternalGetter
    {
    }

    public partial interface IWeatherTypeGetter :
        ILoquiObject,
        ILoquiObject<IWeatherTypeInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Sunrise
        Color Sunrise { get; }

        #endregion
        #region Day
        Color Day { get; }

        #endregion
        #region Sunset
        Color Sunset { get; }

        #endregion
        #region Night
        Color Night { get; }

        #endregion

    }

    public partial interface IWeatherTypeInternalGetter : IWeatherTypeGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class WeatherTypeMixIn
    {
        public static void Clear(this IWeatherTypeInternal item)
        {
            ((WeatherTypeSetterCommon)((IWeatherTypeInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static WeatherType_Mask<bool> GetEqualsMask(
            this IWeatherTypeInternalGetter item,
            IWeatherTypeInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherTypeInternalGetter item,
            string name = null,
            WeatherType_Mask<bool> printMask = null)
        {
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherTypeInternalGetter item,
            FileGeneration fg,
            string name = null,
            WeatherType_Mask<bool> printMask = null)
        {
            ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherTypeInternalGetter item,
            WeatherType_Mask<bool?> checkMask)
        {
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WeatherType_Mask<bool> GetHasBeenSetMask(this IWeatherTypeInternalGetter item)
        {
            var ret = new WeatherType_Mask<bool>();
            ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherTypeInternalGetter item,
            IWeatherTypeInternalGetter rhs)
        {
            return ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this WeatherType lhs,
            WeatherType rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this WeatherType lhs,
            WeatherType rhs,
            WeatherType_CopyMask copyMask,
            WeatherType def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this WeatherType lhs,
            WeatherType rhs,
            out WeatherType_ErrorMask errorMask,
            WeatherType_CopyMask copyMask = null,
            WeatherType def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherTypeSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = WeatherType_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this WeatherType lhs,
            WeatherType rhs,
            ErrorMaskBuilder errorMask,
            WeatherType_CopyMask copyMask = null,
            WeatherType def = null)
        {
            WeatherTypeSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WeatherType_FieldIndex
    {
        Sunrise = 0,
        Day = 1,
        Sunset = 2,
        Night = 3,
    }
    #endregion

    #region Registration
    public class WeatherType_Registration : ILoquiRegistration
    {
        public static readonly WeatherType_Registration Instance = new WeatherType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 103,
            version: 0);

        public const string GUID = "8a3ac7e7-7e81-4f9c-b318-c1c40ed00f8c";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(WeatherType_Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherType_ErrorMask);

        public static readonly Type ClassType = typeof(WeatherType);

        public static readonly Type GetterType = typeof(IWeatherTypeGetter);

        public static readonly Type InternalGetterType = typeof(IWeatherTypeInternalGetter);

        public static readonly Type SetterType = typeof(IWeatherType);

        public static readonly Type InternalSetterType = typeof(IWeatherTypeInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.WeatherType";

        public const string Name = "WeatherType";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SUNRISE":
                    return (ushort)WeatherType_FieldIndex.Sunrise;
                case "DAY":
                    return (ushort)WeatherType_FieldIndex.Day;
                case "SUNSET":
                    return (ushort)WeatherType_FieldIndex.Sunset;
                case "NIGHT":
                    return (ushort)WeatherType_FieldIndex.Night;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                    return "Sunrise";
                case WeatherType_FieldIndex.Day:
                    return "Day";
                case WeatherType_FieldIndex.Sunset:
                    return "Sunset";
                case WeatherType_FieldIndex.Night:
                    return "Night";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                case WeatherType_FieldIndex.Day:
                case WeatherType_FieldIndex.Sunset:
                case WeatherType_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                    return typeof(Color);
                case WeatherType_FieldIndex.Day:
                    return typeof(Color);
                case WeatherType_FieldIndex.Sunset:
                    return typeof(Color);
                case WeatherType_FieldIndex.Night:
                    return typeof(Color);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherTypeXmlWriteTranslation);
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherTypeSetterCommon
    {
        public static readonly WeatherTypeSetterCommon Instance = new WeatherTypeSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IWeatherTypeInternal item)
        {
            ClearPartial();
            item.Sunrise = default(Color);
            item.Day = default(Color);
            item.Sunset = default(Color);
            item.Night = default(Color);
        }
        
    }
    public partial class WeatherTypeCommon
    {
        public static readonly WeatherTypeCommon Instance = new WeatherTypeCommon();

        public WeatherType_Mask<bool> GetEqualsMask(
            IWeatherTypeInternalGetter item,
            IWeatherTypeInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherType_Mask<bool>();
            ((WeatherTypeCommon)((IWeatherTypeInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherTypeInternalGetter item,
            IWeatherTypeInternalGetter rhs,
            WeatherType_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sunrise = item.Sunrise.ColorOnlyEquals(rhs.Sunrise);
            ret.Day = item.Day.ColorOnlyEquals(rhs.Day);
            ret.Sunset = item.Sunset.ColorOnlyEquals(rhs.Sunset);
            ret.Night = item.Night.ColorOnlyEquals(rhs.Night);
        }
        
        public string ToString(
            IWeatherTypeInternalGetter item,
            string name = null,
            WeatherType_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherTypeInternalGetter item,
            FileGeneration fg,
            string name = null,
            WeatherType_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WeatherType =>");
            }
            else
            {
                fg.AppendLine($"{name} (WeatherType) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherTypeInternalGetter item,
            FileGeneration fg,
            WeatherType_Mask<bool> printMask = null)
        {
            if (printMask?.Sunrise ?? true)
            {
                fg.AppendLine($"Sunrise => {item.Sunrise}");
            }
            if (printMask?.Day ?? true)
            {
                fg.AppendLine($"Day => {item.Day}");
            }
            if (printMask?.Sunset ?? true)
            {
                fg.AppendLine($"Sunset => {item.Sunset}");
            }
            if (printMask?.Night ?? true)
            {
                fg.AppendLine($"Night => {item.Night}");
            }
        }
        
        public bool HasBeenSet(
            IWeatherTypeInternalGetter item,
            WeatherType_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWeatherTypeInternalGetter item,
            WeatherType_Mask<bool> mask)
        {
            mask.Sunrise = true;
            mask.Day = true;
            mask.Sunset = true;
            mask.Night = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherTypeInternalGetter lhs,
            IWeatherTypeInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Sunrise.ColorOnlyEquals(rhs.Sunrise)) return false;
            if (!lhs.Day.ColorOnlyEquals(rhs.Day)) return false;
            if (!lhs.Sunset.ColorOnlyEquals(rhs.Sunset)) return false;
            if (!lhs.Night.ColorOnlyEquals(rhs.Night)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWeatherTypeInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Sunrise).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Day).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Sunset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Night).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class WeatherTypeSetterCopyCommon
    {
        public static readonly WeatherTypeSetterCopyCommon Instance = new WeatherTypeSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            WeatherType item,
            WeatherType rhs,
            WeatherType def,
            ErrorMaskBuilder errorMask,
            WeatherType_CopyMask copyMask)
        {
            if (copyMask?.Sunrise ?? true)
            {
                errorMask?.PushIndex((int)WeatherType_FieldIndex.Sunrise);
                item.Sunrise = rhs.Sunrise;
                errorMask?.PopIndex();
            }
            if (copyMask?.Day ?? true)
            {
                errorMask?.PushIndex((int)WeatherType_FieldIndex.Day);
                item.Day = rhs.Day;
                errorMask?.PopIndex();
            }
            if (copyMask?.Sunset ?? true)
            {
                errorMask?.PushIndex((int)WeatherType_FieldIndex.Sunset);
                item.Sunset = rhs.Sunset;
                errorMask?.PopIndex();
            }
            if (copyMask?.Night ?? true)
            {
                errorMask?.PushIndex((int)WeatherType_FieldIndex.Night);
                item.Night = rhs.Night;
                errorMask?.PopIndex();
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class WeatherType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherType_Registration.Instance;
        public static WeatherType_Registration Registration => WeatherType_Registration.Instance;
        protected object CommonInstance()
        {
            return WeatherTypeCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return WeatherTypeSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return WeatherTypeSetterCopyCommon.Instance;
        }
        object IWeatherTypeInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IWeatherTypeInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IWeatherTypeInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherTypeXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WeatherTypeXmlWriteTranslation Instance = new WeatherTypeXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherTypeInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WeatherType_FieldIndex.Sunrise) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sunrise),
                    item: item.Sunrise,
                    fieldIndex: (int)WeatherType_FieldIndex.Sunrise,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherType_FieldIndex.Day) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Day),
                    item: item.Day,
                    fieldIndex: (int)WeatherType_FieldIndex.Day,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherType_FieldIndex.Sunset) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sunset),
                    item: item.Sunset,
                    fieldIndex: (int)WeatherType_FieldIndex.Sunset,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherType_FieldIndex.Night) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Night),
                    item: item.Night,
                    fieldIndex: (int)WeatherType_FieldIndex.Night,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeatherTypeInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.WeatherType");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.WeatherType");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IWeatherTypeInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWeatherTypeInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IWeatherTypeInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WeatherTypeXmlCreateTranslation
    {
        public readonly static WeatherTypeXmlCreateTranslation Instance = new WeatherTypeXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherTypeInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherTypeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherTypeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Sunrise":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherType_FieldIndex.Sunrise);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color SunriseParse,
                            errorMask: errorMask))
                        {
                            item.Sunrise = SunriseParse;
                        }
                        else
                        {
                            item.Sunrise = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Day":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherType_FieldIndex.Day);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color DayParse,
                            errorMask: errorMask))
                        {
                            item.Day = DayParse;
                        }
                        else
                        {
                            item.Day = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sunset":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherType_FieldIndex.Sunset);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color SunsetParse,
                            errorMask: errorMask))
                        {
                            item.Sunset = SunsetParse;
                        }
                        else
                        {
                            item.Sunset = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Night":
                    try
                    {
                        errorMask?.PushIndex((int)WeatherType_FieldIndex.Night);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color NightParse,
                            errorMask: errorMask))
                        {
                            item.Night = NightParse;
                        }
                        else
                        {
                            item.Night = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WeatherTypeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            XElement node,
            out WeatherType_ErrorMask errorMask,
            bool doMasks = true,
            WeatherType_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((WeatherTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherType_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            string path,
            out WeatherType_ErrorMask errorMask,
            WeatherType_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            Stream stream,
            out WeatherType_ErrorMask errorMask,
            WeatherType_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((WeatherTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            XElement node,
            string name = null,
            WeatherType_TranslationMask translationMask = null)
        {
            ((WeatherTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((WeatherTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherTypeInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((WeatherTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class WeatherType_Mask<T> : IMask<T>, IEquatable<WeatherType_Mask<T>>
    {
        #region Ctors
        public WeatherType_Mask()
        {
        }

        public WeatherType_Mask(T initialValue)
        {
            this.Sunrise = initialValue;
            this.Day = initialValue;
            this.Sunset = initialValue;
            this.Night = initialValue;
        }
        #endregion

        #region Members
        public T Sunrise;
        public T Day;
        public T Sunset;
        public T Night;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is WeatherType_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(WeatherType_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Sunrise, rhs.Sunrise)) return false;
            if (!object.Equals(this.Day, rhs.Day)) return false;
            if (!object.Equals(this.Sunset, rhs.Sunset)) return false;
            if (!object.Equals(this.Night, rhs.Night)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Sunrise?.GetHashCode());
            ret = ret.CombineHashCode(this.Day?.GetHashCode());
            ret = ret.CombineHashCode(this.Sunset?.GetHashCode());
            ret = ret.CombineHashCode(this.Night?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Sunrise)) return false;
            if (!eval(this.Day)) return false;
            if (!eval(this.Sunset)) return false;
            if (!eval(this.Night)) return false;
            return true;
        }
        #endregion

        #region Translate
        public WeatherType_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new WeatherType_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(WeatherType_Mask<R> obj, Func<T, R> eval)
        {
            obj.Sunrise = eval(this.Sunrise);
            obj.Day = eval(this.Day);
            obj.Sunset = eval(this.Sunset);
            obj.Night = eval(this.Night);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(WeatherType_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, WeatherType_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(WeatherType_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Sunrise ?? true)
                {
                    fg.AppendLine($"Sunrise => {Sunrise}");
                }
                if (printMask?.Day ?? true)
                {
                    fg.AppendLine($"Day => {Day}");
                }
                if (printMask?.Sunset ?? true)
                {
                    fg.AppendLine($"Sunset => {Sunset}");
                }
                if (printMask?.Night ?? true)
                {
                    fg.AppendLine($"Night => {Night}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class WeatherType_ErrorMask : IErrorMask, IErrorMask<WeatherType_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Sunrise;
        public Exception Day;
        public Exception Sunset;
        public Exception Night;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                    return Sunrise;
                case WeatherType_FieldIndex.Day:
                    return Day;
                case WeatherType_FieldIndex.Sunset:
                    return Sunset;
                case WeatherType_FieldIndex.Night:
                    return Night;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                    this.Sunrise = ex;
                    break;
                case WeatherType_FieldIndex.Day:
                    this.Day = ex;
                    break;
                case WeatherType_FieldIndex.Sunset:
                    this.Sunset = ex;
                    break;
                case WeatherType_FieldIndex.Night:
                    this.Night = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            WeatherType_FieldIndex enu = (WeatherType_FieldIndex)index;
            switch (enu)
            {
                case WeatherType_FieldIndex.Sunrise:
                    this.Sunrise = (Exception)obj;
                    break;
                case WeatherType_FieldIndex.Day:
                    this.Day = (Exception)obj;
                    break;
                case WeatherType_FieldIndex.Sunset:
                    this.Sunset = (Exception)obj;
                    break;
                case WeatherType_FieldIndex.Night:
                    this.Night = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Sunrise != null) return true;
            if (Day != null) return true;
            if (Sunset != null) return true;
            if (Night != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("WeatherType_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Sunrise => {Sunrise}");
            fg.AppendLine($"Day => {Day}");
            fg.AppendLine($"Sunset => {Sunset}");
            fg.AppendLine($"Night => {Night}");
        }
        #endregion

        #region Combine
        public WeatherType_ErrorMask Combine(WeatherType_ErrorMask rhs)
        {
            var ret = new WeatherType_ErrorMask();
            ret.Sunrise = this.Sunrise.Combine(rhs.Sunrise);
            ret.Day = this.Day.Combine(rhs.Day);
            ret.Sunset = this.Sunset.Combine(rhs.Sunset);
            ret.Night = this.Night.Combine(rhs.Night);
            return ret;
        }
        public static WeatherType_ErrorMask Combine(WeatherType_ErrorMask lhs, WeatherType_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static WeatherType_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new WeatherType_ErrorMask();
        }
        #endregion

    }
    public class WeatherType_CopyMask
    {
        public WeatherType_CopyMask()
        {
        }

        public WeatherType_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Sunrise = defaultOn;
            this.Day = defaultOn;
            this.Sunset = defaultOn;
            this.Night = defaultOn;
        }

        #region Members
        public bool Sunrise;
        public bool Day;
        public bool Sunset;
        public bool Night;
        #endregion

    }

    public class WeatherType_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Sunrise;
        public bool Day;
        public bool Sunset;
        public bool Night;
        #endregion

        #region Ctors
        public WeatherType_TranslationMask()
        {
        }

        public WeatherType_TranslationMask(bool defaultOn)
        {
            this.Sunrise = defaultOn;
            this.Day = defaultOn;
            this.Sunset = defaultOn;
            this.Night = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Sunrise, null));
            ret.Add((Day, null));
            ret.Add((Sunset, null));
            ret.Add((Night, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherTypeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WeatherTypeBinaryWriteTranslation Instance = new WeatherTypeBinaryWriteTranslation();

        public static void Write_Embedded(
            IWeatherTypeInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sunrise,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Day,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sunset,
                extraByte: true);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Night,
                extraByte: true);
        }

        public void Write(
            MutagenWriter writer,
            IWeatherTypeInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IWeatherTypeInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class WeatherTypeBinaryCreateTranslation
    {
        public readonly static WeatherTypeBinaryCreateTranslation Instance = new WeatherTypeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WeatherTypeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeatherTypeInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out WeatherType_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((WeatherTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = WeatherType_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IWeatherTypeInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((WeatherTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IWeatherTypeInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((WeatherTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherTypeBinaryWrapper :
        BinaryWrapper,
        IWeatherTypeInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherType_Registration.Instance;
        public static WeatherType_Registration Registration => WeatherType_Registration.Instance;
        protected object CommonInstance()
        {
            return WeatherTypeCommon.Instance;
        }
        object IWeatherTypeInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IWeatherTypeInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IWeatherTypeInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherTypeInternalGetter)rhs, include);

        protected object XmlWriteTranslator => WeatherTypeXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((WeatherTypeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => WeatherTypeBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((WeatherTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Color Sunrise => _data.Span.Slice(0, 4).ReadColor();
        public Color Day => _data.Span.Slice(4, 4).ReadColor();
        public Color Sunset => _data.Span.Slice(8, 4).ReadColor();
        public Color Night => _data.Span.Slice(12, 4).ReadColor();
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected WeatherTypeBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static WeatherTypeBinaryWrapper WeatherTypeFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new WeatherTypeBinaryWrapper(
                bytes: stream.RemainingMemory.Slice(0, 16),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

