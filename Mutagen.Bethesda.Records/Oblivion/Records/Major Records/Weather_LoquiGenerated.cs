/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Drawing;
using Loqui.Presentation;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Weather :
        OblivionMajorRecord,
        IWeatherInternal,
        ILoquiObjectSetter<Weather>,
        IEquatable<Weather>,
        IEqualsMask
    {
        #region Ctor
        protected Weather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureLowerLayer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _TextureLowerLayer;
        public String? TextureLowerLayer
        {
            get => this._TextureLowerLayer;
            set => this._TextureLowerLayer = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeatherGetter.TextureLowerLayer => this.TextureLowerLayer;
        #endregion
        #region TextureUpperLayer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _TextureUpperLayer;
        public String? TextureUpperLayer
        {
            get => this._TextureUpperLayer;
            set => this._TextureUpperLayer = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWeatherGetter.TextureUpperLayer => this.TextureUpperLayer;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeatherGetter.Model => this.Model;
        #endregion
        #region WeatherTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<WeatherType> _WeatherTypes = new SetList<WeatherType>();
        public ISetList<WeatherType> WeatherTypes => _WeatherTypes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<WeatherType> IWeather.WeatherTypes => _WeatherTypes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IWeatherTypeGetter> IWeatherGetter.WeatherTypes => _WeatherTypes;
        #endregion

        #endregion
        #region FogDayNear
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FogDayNear;
        public Single FogDayNear
        {
            get => this._FogDayNear;
            set
            {
                this.FNAMDataTypeState |= FNAMDataType.Has;
                this._FogDayNear = value;
            }
        }
        #endregion
        #region FogDayFar
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FogDayFar;
        public Single FogDayFar
        {
            get => this._FogDayFar;
            set
            {
                this.FNAMDataTypeState |= FNAMDataType.Has;
                this._FogDayFar = value;
            }
        }
        #endregion
        #region FogNightNear
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FogNightNear;
        public Single FogNightNear
        {
            get => this._FogNightNear;
            set
            {
                this.FNAMDataTypeState |= FNAMDataType.Has;
                this._FogNightNear = value;
            }
        }
        #endregion
        #region FogNightFar
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FogNightFar;
        public Single FogNightFar
        {
            get => this._FogNightFar;
            set
            {
                this.FNAMDataTypeState |= FNAMDataType.Has;
                this._FogNightFar = value;
            }
        }
        #endregion
        #region HdrEyeAdaptSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrEyeAdaptSpeed;
        public Single HdrEyeAdaptSpeed
        {
            get => this._HdrEyeAdaptSpeed;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrEyeAdaptSpeed = value;
            }
        }
        #endregion
        #region HdrBlurRadius
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrBlurRadius;
        public Single HdrBlurRadius
        {
            get => this._HdrBlurRadius;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrBlurRadius = value;
            }
        }
        #endregion
        #region HdrBlurPasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrBlurPasses;
        public Single HdrBlurPasses
        {
            get => this._HdrBlurPasses;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrBlurPasses = value;
            }
        }
        #endregion
        #region HdrEmissiveMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrEmissiveMult;
        public Single HdrEmissiveMult
        {
            get => this._HdrEmissiveMult;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrEmissiveMult = value;
            }
        }
        #endregion
        #region HdrTargetLum
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrTargetLum;
        public Single HdrTargetLum
        {
            get => this._HdrTargetLum;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrTargetLum = value;
            }
        }
        #endregion
        #region HdrUpperLumClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrUpperLumClamp;
        public Single HdrUpperLumClamp
        {
            get => this._HdrUpperLumClamp;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrUpperLumClamp = value;
            }
        }
        #endregion
        #region HdrBrightScale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrBrightScale;
        public Single HdrBrightScale
        {
            get => this._HdrBrightScale;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrBrightScale = value;
            }
        }
        #endregion
        #region HdrBrightClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrBrightClamp;
        public Single HdrBrightClamp
        {
            get => this._HdrBrightClamp;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrBrightClamp = value;
            }
        }
        #endregion
        #region HdrLumRampNoTex
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrLumRampNoTex;
        public Single HdrLumRampNoTex
        {
            get => this._HdrLumRampNoTex;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrLumRampNoTex = value;
            }
        }
        #endregion
        #region HdrLumRampMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrLumRampMin;
        public Single HdrLumRampMin
        {
            get => this._HdrLumRampMin;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrLumRampMin = value;
            }
        }
        #endregion
        #region HdrLumRampMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrLumRampMax;
        public Single HdrLumRampMax
        {
            get => this._HdrLumRampMax;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrLumRampMax = value;
            }
        }
        #endregion
        #region HdrSunlightDimmer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrSunlightDimmer;
        public Single HdrSunlightDimmer
        {
            get => this._HdrSunlightDimmer;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrSunlightDimmer = value;
            }
        }
        #endregion
        #region HdrGrassDimmer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrGrassDimmer;
        public Single HdrGrassDimmer
        {
            get => this._HdrGrassDimmer;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrGrassDimmer = value;
            }
        }
        #endregion
        #region HdrTreeDimmer
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HdrTreeDimmer;
        public Single HdrTreeDimmer
        {
            get => this._HdrTreeDimmer;
            set
            {
                this.HNAMDataTypeState |= HNAMDataType.Has;
                this._HdrTreeDimmer = value;
            }
        }
        #endregion
        #region WindSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _WindSpeed;
        public Byte WindSpeed
        {
            get => this._WindSpeed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._WindSpeed = value;
            }
        }
        #endregion
        #region CloudSpeedLower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _CloudSpeedLower;
        public Byte CloudSpeedLower
        {
            get => this._CloudSpeedLower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CloudSpeedLower = value;
            }
        }
        #endregion
        #region CloudSpeedUpper
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _CloudSpeedUpper;
        public Byte CloudSpeedUpper
        {
            get => this._CloudSpeedUpper;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CloudSpeedUpper = value;
            }
        }
        #endregion
        #region TransDelta
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _TransDelta;
        public Byte TransDelta
        {
            get => this._TransDelta;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._TransDelta = value;
            }
        }
        #endregion
        #region SunGlare
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _SunGlare;
        public Byte SunGlare
        {
            get => this._SunGlare;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SunGlare = value;
            }
        }
        #endregion
        #region SunDamage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _SunDamage;
        public Byte SunDamage
        {
            get => this._SunDamage;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SunDamage = value;
            }
        }
        #endregion
        #region PrecipitationBeginFadeIn
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PrecipitationBeginFadeIn;
        public Byte PrecipitationBeginFadeIn
        {
            get => this._PrecipitationBeginFadeIn;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._PrecipitationBeginFadeIn = value;
            }
        }
        #endregion
        #region PrecipitationEndFadeOut
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PrecipitationEndFadeOut;
        public Byte PrecipitationEndFadeOut
        {
            get => this._PrecipitationEndFadeOut;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._PrecipitationEndFadeOut = value;
            }
        }
        #endregion
        #region ThunderLightningBeginFadeIn
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _ThunderLightningBeginFadeIn;
        public Byte ThunderLightningBeginFadeIn
        {
            get => this._ThunderLightningBeginFadeIn;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ThunderLightningBeginFadeIn = value;
            }
        }
        #endregion
        #region ThunderLightningEndFadeOut
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _ThunderLightningEndFadeOut;
        public Byte ThunderLightningEndFadeOut
        {
            get => this._ThunderLightningEndFadeOut;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ThunderLightningEndFadeOut = value;
            }
        }
        #endregion
        #region ThunderLightningFrequency
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _ThunderLightningFrequency;
        public Byte ThunderLightningFrequency
        {
            get => this._ThunderLightningFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ThunderLightningFrequency = value;
            }
        }
        #endregion
        #region Classification
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Weather.WeatherClassification _Classification;
        public Weather.WeatherClassification Classification
        {
            get => this._Classification;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Classification = value;
            }
        }
        #endregion
        #region LightningColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _LightningColor;
        public Color LightningColor
        {
            get => this._LightningColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._LightningColor = value;
            }
        }
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<WeatherSound> _Sounds = new SetList<WeatherSound>();
        public ISetList<WeatherSound> Sounds => _Sounds;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<WeatherSound> IWeather.Sounds => _Sounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IWeatherSoundGetter> IWeatherGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region FNAMDataTypeState
        public Weather.FNAMDataType FNAMDataTypeState { get; set; } = default;
        #endregion
        #region HNAMDataTypeState
        public Weather.HNAMDataType HNAMDataTypeState { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public Weather.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IWeatherGetter rhs)) return false;
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Weather obj)
        {
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Weather CreateFromXml(
            XElement node,
            Weather_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Weather CreateFromXml(
            XElement node,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Weather CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Weather CreateFromXml(
            string path,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Weather CreateFromXml(
            Stream stream,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Weather_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum FNAMDataType
        {
            Has = 1
        }
        [Flags]
        public enum HNAMDataType
        {
            Has = 1
        }
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => WeatherCommon.Instance.GetLinks(this);
        public Weather(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Weather(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Weather CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Weather CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeatherSetterCommon)((IWeatherGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weather GetNew()
        {
            return new Weather();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeather :
        IWeatherGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IWeatherInternal>
    {
        new String? TextureLowerLayer { get; set; }
        new String? TextureUpperLayer { get; set; }
        new Model? Model { get; set; }
        new ISetList<WeatherType> WeatherTypes { get; }
        new Single FogDayNear { get; set; }
        new Single FogDayFar { get; set; }
        new Single FogNightNear { get; set; }
        new Single FogNightFar { get; set; }
        new Single HdrEyeAdaptSpeed { get; set; }
        new Single HdrBlurRadius { get; set; }
        new Single HdrBlurPasses { get; set; }
        new Single HdrEmissiveMult { get; set; }
        new Single HdrTargetLum { get; set; }
        new Single HdrUpperLumClamp { get; set; }
        new Single HdrBrightScale { get; set; }
        new Single HdrBrightClamp { get; set; }
        new Single HdrLumRampNoTex { get; set; }
        new Single HdrLumRampMin { get; set; }
        new Single HdrLumRampMax { get; set; }
        new Single HdrSunlightDimmer { get; set; }
        new Single HdrGrassDimmer { get; set; }
        new Single HdrTreeDimmer { get; set; }
        new Byte WindSpeed { get; set; }
        new Byte CloudSpeedLower { get; set; }
        new Byte CloudSpeedUpper { get; set; }
        new Byte TransDelta { get; set; }
        new Byte SunGlare { get; set; }
        new Byte SunDamage { get; set; }
        new Byte PrecipitationBeginFadeIn { get; set; }
        new Byte PrecipitationEndFadeOut { get; set; }
        new Byte ThunderLightningBeginFadeIn { get; set; }
        new Byte ThunderLightningEndFadeOut { get; set; }
        new Byte ThunderLightningFrequency { get; set; }
        new Weather.WeatherClassification Classification { get; set; }
        new Color LightningColor { get; set; }
        new ISetList<WeatherSound> Sounds { get; }
        new Weather.FNAMDataType FNAMDataTypeState { get; set; }
        new Weather.HNAMDataType HNAMDataTypeState { get; set; }
        new Weather.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IWeatherInternal :
        IOblivionMajorRecordInternal,
        IWeather,
        IWeatherGetter
    {
    }

    public partial interface IWeatherGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IWeatherGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? TextureLowerLayer { get; }
        String? TextureUpperLayer { get; }
        IModelGetter? Model { get; }
        IReadOnlySetList<IWeatherTypeGetter> WeatherTypes { get; }
        Single FogDayNear { get; }
        Single FogDayFar { get; }
        Single FogNightNear { get; }
        Single FogNightFar { get; }
        Single HdrEyeAdaptSpeed { get; }
        Single HdrBlurRadius { get; }
        Single HdrBlurPasses { get; }
        Single HdrEmissiveMult { get; }
        Single HdrTargetLum { get; }
        Single HdrUpperLumClamp { get; }
        Single HdrBrightScale { get; }
        Single HdrBrightClamp { get; }
        Single HdrLumRampNoTex { get; }
        Single HdrLumRampMin { get; }
        Single HdrLumRampMax { get; }
        Single HdrSunlightDimmer { get; }
        Single HdrGrassDimmer { get; }
        Single HdrTreeDimmer { get; }
        Byte WindSpeed { get; }
        Byte CloudSpeedLower { get; }
        Byte CloudSpeedUpper { get; }
        Byte TransDelta { get; }
        Byte SunGlare { get; }
        Byte SunDamage { get; }
        Byte PrecipitationBeginFadeIn { get; }
        Byte PrecipitationEndFadeOut { get; }
        Byte ThunderLightningBeginFadeIn { get; }
        Byte ThunderLightningEndFadeOut { get; }
        Byte ThunderLightningFrequency { get; }
        Weather.WeatherClassification Classification { get; }
        Color LightningColor { get; }
        IReadOnlySetList<IWeatherSoundGetter> Sounds { get; }
        Weather.FNAMDataType FNAMDataTypeState { get; }
        Weather.HNAMDataType HNAMDataTypeState { get; }
        Weather.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class WeatherMixIn
    {
        public static void Clear(this IWeatherInternal item)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weather_Mask<bool> GetEqualsMask(
            this IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherGetter item,
            string? name = null,
            Weather_Mask<bool>? printMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather_Mask<bool>? printMask = null)
        {
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherGetter item,
            Weather_Mask<bool?> checkMask)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Weather_Mask<bool> GetHasBeenSetMask(this IWeatherGetter item)
        {
            var ret = new Weather_Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherGetter item,
            IWeatherGetter rhs)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            Weather_TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            Weather_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Weather_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        TextureLowerLayer = 5,
        TextureUpperLayer = 6,
        Model = 7,
        WeatherTypes = 8,
        FogDayNear = 9,
        FogDayFar = 10,
        FogNightNear = 11,
        FogNightFar = 12,
        HdrEyeAdaptSpeed = 13,
        HdrBlurRadius = 14,
        HdrBlurPasses = 15,
        HdrEmissiveMult = 16,
        HdrTargetLum = 17,
        HdrUpperLumClamp = 18,
        HdrBrightScale = 19,
        HdrBrightClamp = 20,
        HdrLumRampNoTex = 21,
        HdrLumRampMin = 22,
        HdrLumRampMax = 23,
        HdrSunlightDimmer = 24,
        HdrGrassDimmer = 25,
        HdrTreeDimmer = 26,
        WindSpeed = 27,
        CloudSpeedLower = 28,
        CloudSpeedUpper = 29,
        TransDelta = 30,
        SunGlare = 31,
        SunDamage = 32,
        PrecipitationBeginFadeIn = 33,
        PrecipitationEndFadeOut = 34,
        ThunderLightningBeginFadeIn = 35,
        ThunderLightningEndFadeOut = 36,
        ThunderLightningFrequency = 37,
        Classification = 38,
        LightningColor = 39,
        Sounds = 40,
        FNAMDataTypeState = 41,
        HNAMDataTypeState = 42,
        DATADataTypeState = 43,
    }
    #endregion

    #region Registration
    public partial class Weather_Registration : ILoquiRegistration
    {
        public static readonly Weather_Registration Instance = new Weather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 102,
            version: 0);

        public const string GUID = "c7183e23-4f2c-43f7-adcf-6c56458c94af";

        public const ushort AdditionalFieldCount = 39;

        public const ushort FieldCount = 44;

        public static readonly Type MaskType = typeof(Weather_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weather_ErrorMask);

        public static readonly Type ClassType = typeof(Weather);

        public static readonly Type GetterType = typeof(IWeatherGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeather);

        public static readonly Type? InternalSetterType = typeof(IWeatherInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Weather";

        public const string Name = "Weather";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURELOWERLAYER":
                    return (ushort)Weather_FieldIndex.TextureLowerLayer;
                case "TEXTUREUPPERLAYER":
                    return (ushort)Weather_FieldIndex.TextureUpperLayer;
                case "MODEL":
                    return (ushort)Weather_FieldIndex.Model;
                case "WEATHERTYPES":
                    return (ushort)Weather_FieldIndex.WeatherTypes;
                case "FOGDAYNEAR":
                    return (ushort)Weather_FieldIndex.FogDayNear;
                case "FOGDAYFAR":
                    return (ushort)Weather_FieldIndex.FogDayFar;
                case "FOGNIGHTNEAR":
                    return (ushort)Weather_FieldIndex.FogNightNear;
                case "FOGNIGHTFAR":
                    return (ushort)Weather_FieldIndex.FogNightFar;
                case "HDREYEADAPTSPEED":
                    return (ushort)Weather_FieldIndex.HdrEyeAdaptSpeed;
                case "HDRBLURRADIUS":
                    return (ushort)Weather_FieldIndex.HdrBlurRadius;
                case "HDRBLURPASSES":
                    return (ushort)Weather_FieldIndex.HdrBlurPasses;
                case "HDREMISSIVEMULT":
                    return (ushort)Weather_FieldIndex.HdrEmissiveMult;
                case "HDRTARGETLUM":
                    return (ushort)Weather_FieldIndex.HdrTargetLum;
                case "HDRUPPERLUMCLAMP":
                    return (ushort)Weather_FieldIndex.HdrUpperLumClamp;
                case "HDRBRIGHTSCALE":
                    return (ushort)Weather_FieldIndex.HdrBrightScale;
                case "HDRBRIGHTCLAMP":
                    return (ushort)Weather_FieldIndex.HdrBrightClamp;
                case "HDRLUMRAMPNOTEX":
                    return (ushort)Weather_FieldIndex.HdrLumRampNoTex;
                case "HDRLUMRAMPMIN":
                    return (ushort)Weather_FieldIndex.HdrLumRampMin;
                case "HDRLUMRAMPMAX":
                    return (ushort)Weather_FieldIndex.HdrLumRampMax;
                case "HDRSUNLIGHTDIMMER":
                    return (ushort)Weather_FieldIndex.HdrSunlightDimmer;
                case "HDRGRASSDIMMER":
                    return (ushort)Weather_FieldIndex.HdrGrassDimmer;
                case "HDRTREEDIMMER":
                    return (ushort)Weather_FieldIndex.HdrTreeDimmer;
                case "WINDSPEED":
                    return (ushort)Weather_FieldIndex.WindSpeed;
                case "CLOUDSPEEDLOWER":
                    return (ushort)Weather_FieldIndex.CloudSpeedLower;
                case "CLOUDSPEEDUPPER":
                    return (ushort)Weather_FieldIndex.CloudSpeedUpper;
                case "TRANSDELTA":
                    return (ushort)Weather_FieldIndex.TransDelta;
                case "SUNGLARE":
                    return (ushort)Weather_FieldIndex.SunGlare;
                case "SUNDAMAGE":
                    return (ushort)Weather_FieldIndex.SunDamage;
                case "PRECIPITATIONBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.PrecipitationBeginFadeIn;
                case "PRECIPITATIONENDFADEOUT":
                    return (ushort)Weather_FieldIndex.PrecipitationEndFadeOut;
                case "THUNDERLIGHTNINGBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.ThunderLightningBeginFadeIn;
                case "THUNDERLIGHTNINGENDFADEOUT":
                    return (ushort)Weather_FieldIndex.ThunderLightningEndFadeOut;
                case "THUNDERLIGHTNINGFREQUENCY":
                    return (ushort)Weather_FieldIndex.ThunderLightningFrequency;
                case "CLASSIFICATION":
                    return (ushort)Weather_FieldIndex.Classification;
                case "LIGHTNINGCOLOR":
                    return (ushort)Weather_FieldIndex.LightningColor;
                case "SOUNDS":
                    return (ushort)Weather_FieldIndex.Sounds;
                case "FNAMDATATYPESTATE":
                    return (ushort)Weather_FieldIndex.FNAMDataTypeState;
                case "HNAMDATATYPESTATE":
                    return (ushort)Weather_FieldIndex.HNAMDataTypeState;
                case "DATADATATYPESTATE":
                    return (ushort)Weather_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.HNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.Sounds:
                    return true;
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.HNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.HNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return "TextureLowerLayer";
                case Weather_FieldIndex.TextureUpperLayer:
                    return "TextureUpperLayer";
                case Weather_FieldIndex.Model:
                    return "Model";
                case Weather_FieldIndex.WeatherTypes:
                    return "WeatherTypes";
                case Weather_FieldIndex.FogDayNear:
                    return "FogDayNear";
                case Weather_FieldIndex.FogDayFar:
                    return "FogDayFar";
                case Weather_FieldIndex.FogNightNear:
                    return "FogNightNear";
                case Weather_FieldIndex.FogNightFar:
                    return "FogNightFar";
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return "HdrEyeAdaptSpeed";
                case Weather_FieldIndex.HdrBlurRadius:
                    return "HdrBlurRadius";
                case Weather_FieldIndex.HdrBlurPasses:
                    return "HdrBlurPasses";
                case Weather_FieldIndex.HdrEmissiveMult:
                    return "HdrEmissiveMult";
                case Weather_FieldIndex.HdrTargetLum:
                    return "HdrTargetLum";
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return "HdrUpperLumClamp";
                case Weather_FieldIndex.HdrBrightScale:
                    return "HdrBrightScale";
                case Weather_FieldIndex.HdrBrightClamp:
                    return "HdrBrightClamp";
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return "HdrLumRampNoTex";
                case Weather_FieldIndex.HdrLumRampMin:
                    return "HdrLumRampMin";
                case Weather_FieldIndex.HdrLumRampMax:
                    return "HdrLumRampMax";
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return "HdrSunlightDimmer";
                case Weather_FieldIndex.HdrGrassDimmer:
                    return "HdrGrassDimmer";
                case Weather_FieldIndex.HdrTreeDimmer:
                    return "HdrTreeDimmer";
                case Weather_FieldIndex.WindSpeed:
                    return "WindSpeed";
                case Weather_FieldIndex.CloudSpeedLower:
                    return "CloudSpeedLower";
                case Weather_FieldIndex.CloudSpeedUpper:
                    return "CloudSpeedUpper";
                case Weather_FieldIndex.TransDelta:
                    return "TransDelta";
                case Weather_FieldIndex.SunGlare:
                    return "SunGlare";
                case Weather_FieldIndex.SunDamage:
                    return "SunDamage";
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return "PrecipitationBeginFadeIn";
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return "PrecipitationEndFadeOut";
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return "ThunderLightningBeginFadeIn";
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return "ThunderLightningEndFadeOut";
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return "ThunderLightningFrequency";
                case Weather_FieldIndex.Classification:
                    return "Classification";
                case Weather_FieldIndex.LightningColor:
                    return "LightningColor";
                case Weather_FieldIndex.Sounds:
                    return "Sounds";
                case Weather_FieldIndex.FNAMDataTypeState:
                    return "FNAMDataTypeState";
                case Weather_FieldIndex.HNAMDataTypeState:
                    return "HNAMDataTypeState";
                case Weather_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.HNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                case Weather_FieldIndex.TextureUpperLayer:
                case Weather_FieldIndex.Model:
                case Weather_FieldIndex.WeatherTypes:
                case Weather_FieldIndex.FogDayNear:
                case Weather_FieldIndex.FogDayFar:
                case Weather_FieldIndex.FogNightNear:
                case Weather_FieldIndex.FogNightFar:
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                case Weather_FieldIndex.HdrBlurRadius:
                case Weather_FieldIndex.HdrBlurPasses:
                case Weather_FieldIndex.HdrEmissiveMult:
                case Weather_FieldIndex.HdrTargetLum:
                case Weather_FieldIndex.HdrUpperLumClamp:
                case Weather_FieldIndex.HdrBrightScale:
                case Weather_FieldIndex.HdrBrightClamp:
                case Weather_FieldIndex.HdrLumRampNoTex:
                case Weather_FieldIndex.HdrLumRampMin:
                case Weather_FieldIndex.HdrLumRampMax:
                case Weather_FieldIndex.HdrSunlightDimmer:
                case Weather_FieldIndex.HdrGrassDimmer:
                case Weather_FieldIndex.HdrTreeDimmer:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.CloudSpeedLower:
                case Weather_FieldIndex.CloudSpeedUpper:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Classification:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.HNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return typeof(String);
                case Weather_FieldIndex.TextureUpperLayer:
                    return typeof(String);
                case Weather_FieldIndex.Model:
                    return typeof(Model);
                case Weather_FieldIndex.WeatherTypes:
                    return typeof(ISetList<WeatherType>);
                case Weather_FieldIndex.FogDayNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogDayFar:
                    return typeof(Single);
                case Weather_FieldIndex.FogNightNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogNightFar:
                    return typeof(Single);
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBlurRadius:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBlurPasses:
                    return typeof(Single);
                case Weather_FieldIndex.HdrEmissiveMult:
                    return typeof(Single);
                case Weather_FieldIndex.HdrTargetLum:
                    return typeof(Single);
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBrightScale:
                    return typeof(Single);
                case Weather_FieldIndex.HdrBrightClamp:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampMin:
                    return typeof(Single);
                case Weather_FieldIndex.HdrLumRampMax:
                    return typeof(Single);
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.HdrGrassDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.HdrTreeDimmer:
                    return typeof(Single);
                case Weather_FieldIndex.WindSpeed:
                    return typeof(Byte);
                case Weather_FieldIndex.CloudSpeedLower:
                    return typeof(Byte);
                case Weather_FieldIndex.CloudSpeedUpper:
                    return typeof(Byte);
                case Weather_FieldIndex.TransDelta:
                    return typeof(Byte);
                case Weather_FieldIndex.SunGlare:
                    return typeof(Byte);
                case Weather_FieldIndex.SunDamage:
                    return typeof(Byte);
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return typeof(Byte);
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return typeof(Byte);
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return typeof(Byte);
                case Weather_FieldIndex.Classification:
                    return typeof(Weather.WeatherClassification);
                case Weather_FieldIndex.LightningColor:
                    return typeof(Color);
                case Weather_FieldIndex.Sounds:
                    return typeof(ISetList<WeatherSound>);
                case Weather_FieldIndex.FNAMDataTypeState:
                    return typeof(Weather.FNAMDataType);
                case Weather_FieldIndex.HNAMDataTypeState:
                    return typeof(Weather.HNAMDataType);
                case Weather_FieldIndex.DATADataTypeState:
                    return typeof(Weather.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherXmlWriteTranslation);
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = WTHR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly WeatherSetterCommon Instance = new WeatherSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherInternal item)
        {
            ClearPartial();
            item.TextureLowerLayer = default;
            item.TextureUpperLayer = default;
            item.Model = null;
            item.WeatherTypes.Unset();
            item.FogDayNear = default;
            item.FogDayFar = default;
            item.FogNightNear = default;
            item.FogNightFar = default;
            item.HdrEyeAdaptSpeed = default;
            item.HdrBlurRadius = default;
            item.HdrBlurPasses = default;
            item.HdrEmissiveMult = default;
            item.HdrTargetLum = default;
            item.HdrUpperLumClamp = default;
            item.HdrBrightScale = default;
            item.HdrBrightClamp = default;
            item.HdrLumRampNoTex = default;
            item.HdrLumRampMin = default;
            item.HdrLumRampMax = default;
            item.HdrSunlightDimmer = default;
            item.HdrGrassDimmer = default;
            item.HdrTreeDimmer = default;
            item.WindSpeed = default;
            item.CloudSpeedLower = default;
            item.CloudSpeedUpper = default;
            item.TransDelta = default;
            item.SunGlare = default;
            item.SunDamage = default;
            item.PrecipitationBeginFadeIn = default;
            item.PrecipitationEndFadeOut = default;
            item.ThunderLightningBeginFadeIn = default;
            item.ThunderLightningEndFadeOut = default;
            item.ThunderLightningFrequency = default;
            item.Classification = default;
            item.LightningColor = default;
            item.Sounds.Unset();
            item.FNAMDataTypeState = default;
            item.HNAMDataTypeState = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasFNAMDataType":
                    item.FNAMDataTypeState |= Weather.FNAMDataType.Has;
                    break;
                case "HasHNAMDataType":
                    item.HNAMDataTypeState |= Weather.HNAMDataType.Has;
                    break;
                case "HasDATADataType":
                    item.DATADataTypeState |= Weather.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Weather_Registration.WTHR_HEADER;
        protected static void FillBinaryStructs(
            IWeatherInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IWeatherInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureLowerLayer = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureLowerLayer);
                }
                case 0x4D414E44: // DNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureUpperLayer = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureUpperLayer);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Model);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherType>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        item: item.WeatherTypes,
                        transl: (MutagenFrame r, out WeatherType listSubItem) =>
                        {
                            return LoquiBinaryTranslation<WeatherType>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.WeatherTypes);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.FNAMDataTypeState = Weather.FNAMDataType.Has;
                    }
                    item.FogDayNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDayFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogNightNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogNightFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.FogNightFar);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.HNAMDataTypeState = Weather.HNAMDataType.Has;
                    }
                    item.HdrEyeAdaptSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrBlurRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrBlurPasses = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrEmissiveMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrTargetLum = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrUpperLumClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrBrightScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrBrightClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrLumRampNoTex = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrLumRampMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrLumRampMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrSunlightDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrGrassDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HdrTreeDimmer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.HdrTreeDimmer);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Weather.DATADataType.Has;
                    }
                    item.WindSpeed = dataFrame.ReadUInt8();
                    item.CloudSpeedLower = dataFrame.ReadUInt8();
                    item.CloudSpeedUpper = dataFrame.ReadUInt8();
                    item.TransDelta = dataFrame.ReadUInt8();
                    item.SunGlare = dataFrame.ReadUInt8();
                    item.SunDamage = dataFrame.ReadUInt8();
                    item.PrecipitationBeginFadeIn = dataFrame.ReadUInt8();
                    item.PrecipitationEndFadeOut = dataFrame.ReadUInt8();
                    item.ThunderLightningBeginFadeIn = dataFrame.ReadUInt8();
                    item.ThunderLightningEndFadeOut = dataFrame.ReadUInt8();
                    item.ThunderLightningFrequency = dataFrame.ReadUInt8();
                    item.Classification = EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.LightningColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.LightningColor);
                }
                case 0x4D414E53: // SNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherSound>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Weather_Registration.SNAM_HEADER,
                        item: item.Sounds,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out WeatherSound listSubItem) =>
                        {
                            return LoquiBinaryTranslation<WeatherSound>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Sounds);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IWeatherInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IWeatherInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class WeatherCommon : OblivionMajorRecordCommon
    {
        public new static readonly WeatherCommon Instance = new WeatherCommon();

        public Weather_Mask<bool> GetEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weather_Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            Weather_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TextureLowerLayer = string.Equals(item.TextureLowerLayer, rhs.TextureLowerLayer);
            ret.TextureUpperLayer = string.Equals(item.TextureUpperLayer, rhs.TextureUpperLayer);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.WeatherTypes = item.WeatherTypes.CollectionEqualsHelper(
                rhs.WeatherTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FogDayNear = item.FogDayNear.EqualsWithin(rhs.FogDayNear);
            ret.FogDayFar = item.FogDayFar.EqualsWithin(rhs.FogDayFar);
            ret.FogNightNear = item.FogNightNear.EqualsWithin(rhs.FogNightNear);
            ret.FogNightFar = item.FogNightFar.EqualsWithin(rhs.FogNightFar);
            ret.HdrEyeAdaptSpeed = item.HdrEyeAdaptSpeed.EqualsWithin(rhs.HdrEyeAdaptSpeed);
            ret.HdrBlurRadius = item.HdrBlurRadius.EqualsWithin(rhs.HdrBlurRadius);
            ret.HdrBlurPasses = item.HdrBlurPasses.EqualsWithin(rhs.HdrBlurPasses);
            ret.HdrEmissiveMult = item.HdrEmissiveMult.EqualsWithin(rhs.HdrEmissiveMult);
            ret.HdrTargetLum = item.HdrTargetLum.EqualsWithin(rhs.HdrTargetLum);
            ret.HdrUpperLumClamp = item.HdrUpperLumClamp.EqualsWithin(rhs.HdrUpperLumClamp);
            ret.HdrBrightScale = item.HdrBrightScale.EqualsWithin(rhs.HdrBrightScale);
            ret.HdrBrightClamp = item.HdrBrightClamp.EqualsWithin(rhs.HdrBrightClamp);
            ret.HdrLumRampNoTex = item.HdrLumRampNoTex.EqualsWithin(rhs.HdrLumRampNoTex);
            ret.HdrLumRampMin = item.HdrLumRampMin.EqualsWithin(rhs.HdrLumRampMin);
            ret.HdrLumRampMax = item.HdrLumRampMax.EqualsWithin(rhs.HdrLumRampMax);
            ret.HdrSunlightDimmer = item.HdrSunlightDimmer.EqualsWithin(rhs.HdrSunlightDimmer);
            ret.HdrGrassDimmer = item.HdrGrassDimmer.EqualsWithin(rhs.HdrGrassDimmer);
            ret.HdrTreeDimmer = item.HdrTreeDimmer.EqualsWithin(rhs.HdrTreeDimmer);
            ret.WindSpeed = item.WindSpeed == rhs.WindSpeed;
            ret.CloudSpeedLower = item.CloudSpeedLower == rhs.CloudSpeedLower;
            ret.CloudSpeedUpper = item.CloudSpeedUpper == rhs.CloudSpeedUpper;
            ret.TransDelta = item.TransDelta == rhs.TransDelta;
            ret.SunGlare = item.SunGlare == rhs.SunGlare;
            ret.SunDamage = item.SunDamage == rhs.SunDamage;
            ret.PrecipitationBeginFadeIn = item.PrecipitationBeginFadeIn == rhs.PrecipitationBeginFadeIn;
            ret.PrecipitationEndFadeOut = item.PrecipitationEndFadeOut == rhs.PrecipitationEndFadeOut;
            ret.ThunderLightningBeginFadeIn = item.ThunderLightningBeginFadeIn == rhs.ThunderLightningBeginFadeIn;
            ret.ThunderLightningEndFadeOut = item.ThunderLightningEndFadeOut == rhs.ThunderLightningEndFadeOut;
            ret.ThunderLightningFrequency = item.ThunderLightningFrequency == rhs.ThunderLightningFrequency;
            ret.Classification = item.Classification == rhs.Classification;
            ret.LightningColor = item.LightningColor.ColorOnlyEquals(rhs.LightningColor);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FNAMDataTypeState = item.FNAMDataTypeState == rhs.FNAMDataTypeState;
            ret.HNAMDataTypeState = item.HNAMDataTypeState == rhs.HNAMDataTypeState;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWeatherGetter item,
            string? name = null,
            Weather_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Weather =>");
            }
            else
            {
                fg.AppendLine($"{name} (Weather) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherGetter item,
            FileGeneration fg,
            Weather_Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.TextureLowerLayer ?? true)
            {
                fg.AppendLine($"TextureLowerLayer => {item.TextureLowerLayer}");
            }
            if (printMask?.TextureUpperLayer ?? true)
            {
                fg.AppendLine($"TextureUpperLayer => {item.TextureUpperLayer}");
            }
            if (printMask?.Model?.Overall ?? true)
            {
                item.Model?.ToString(fg, "Model");
            }
            if (printMask?.WeatherTypes?.Overall ?? true)
            {
                fg.AppendLine("WeatherTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.WeatherTypes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FogDayNear ?? true)
            {
                fg.AppendLine($"FogDayNear => {item.FogDayNear}");
            }
            if (printMask?.FogDayFar ?? true)
            {
                fg.AppendLine($"FogDayFar => {item.FogDayFar}");
            }
            if (printMask?.FogNightNear ?? true)
            {
                fg.AppendLine($"FogNightNear => {item.FogNightNear}");
            }
            if (printMask?.FogNightFar ?? true)
            {
                fg.AppendLine($"FogNightFar => {item.FogNightFar}");
            }
            if (printMask?.HdrEyeAdaptSpeed ?? true)
            {
                fg.AppendLine($"HdrEyeAdaptSpeed => {item.HdrEyeAdaptSpeed}");
            }
            if (printMask?.HdrBlurRadius ?? true)
            {
                fg.AppendLine($"HdrBlurRadius => {item.HdrBlurRadius}");
            }
            if (printMask?.HdrBlurPasses ?? true)
            {
                fg.AppendLine($"HdrBlurPasses => {item.HdrBlurPasses}");
            }
            if (printMask?.HdrEmissiveMult ?? true)
            {
                fg.AppendLine($"HdrEmissiveMult => {item.HdrEmissiveMult}");
            }
            if (printMask?.HdrTargetLum ?? true)
            {
                fg.AppendLine($"HdrTargetLum => {item.HdrTargetLum}");
            }
            if (printMask?.HdrUpperLumClamp ?? true)
            {
                fg.AppendLine($"HdrUpperLumClamp => {item.HdrUpperLumClamp}");
            }
            if (printMask?.HdrBrightScale ?? true)
            {
                fg.AppendLine($"HdrBrightScale => {item.HdrBrightScale}");
            }
            if (printMask?.HdrBrightClamp ?? true)
            {
                fg.AppendLine($"HdrBrightClamp => {item.HdrBrightClamp}");
            }
            if (printMask?.HdrLumRampNoTex ?? true)
            {
                fg.AppendLine($"HdrLumRampNoTex => {item.HdrLumRampNoTex}");
            }
            if (printMask?.HdrLumRampMin ?? true)
            {
                fg.AppendLine($"HdrLumRampMin => {item.HdrLumRampMin}");
            }
            if (printMask?.HdrLumRampMax ?? true)
            {
                fg.AppendLine($"HdrLumRampMax => {item.HdrLumRampMax}");
            }
            if (printMask?.HdrSunlightDimmer ?? true)
            {
                fg.AppendLine($"HdrSunlightDimmer => {item.HdrSunlightDimmer}");
            }
            if (printMask?.HdrGrassDimmer ?? true)
            {
                fg.AppendLine($"HdrGrassDimmer => {item.HdrGrassDimmer}");
            }
            if (printMask?.HdrTreeDimmer ?? true)
            {
                fg.AppendLine($"HdrTreeDimmer => {item.HdrTreeDimmer}");
            }
            if (printMask?.WindSpeed ?? true)
            {
                fg.AppendLine($"WindSpeed => {item.WindSpeed}");
            }
            if (printMask?.CloudSpeedLower ?? true)
            {
                fg.AppendLine($"CloudSpeedLower => {item.CloudSpeedLower}");
            }
            if (printMask?.CloudSpeedUpper ?? true)
            {
                fg.AppendLine($"CloudSpeedUpper => {item.CloudSpeedUpper}");
            }
            if (printMask?.TransDelta ?? true)
            {
                fg.AppendLine($"TransDelta => {item.TransDelta}");
            }
            if (printMask?.SunGlare ?? true)
            {
                fg.AppendLine($"SunGlare => {item.SunGlare}");
            }
            if (printMask?.SunDamage ?? true)
            {
                fg.AppendLine($"SunDamage => {item.SunDamage}");
            }
            if (printMask?.PrecipitationBeginFadeIn ?? true)
            {
                fg.AppendLine($"PrecipitationBeginFadeIn => {item.PrecipitationBeginFadeIn}");
            }
            if (printMask?.PrecipitationEndFadeOut ?? true)
            {
                fg.AppendLine($"PrecipitationEndFadeOut => {item.PrecipitationEndFadeOut}");
            }
            if (printMask?.ThunderLightningBeginFadeIn ?? true)
            {
                fg.AppendLine($"ThunderLightningBeginFadeIn => {item.ThunderLightningBeginFadeIn}");
            }
            if (printMask?.ThunderLightningEndFadeOut ?? true)
            {
                fg.AppendLine($"ThunderLightningEndFadeOut => {item.ThunderLightningEndFadeOut}");
            }
            if (printMask?.ThunderLightningFrequency ?? true)
            {
                fg.AppendLine($"ThunderLightningFrequency => {item.ThunderLightningFrequency}");
            }
            if (printMask?.Classification ?? true)
            {
                fg.AppendLine($"Classification => {item.Classification}");
            }
            if (printMask?.LightningColor ?? true)
            {
                fg.AppendLine($"LightningColor => {item.LightningColor}");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Sounds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FNAMDataTypeState ?? true)
            {
                fg.AppendLine($"FNAMDataTypeState => {item.FNAMDataTypeState}");
            }
            if (printMask?.HNAMDataTypeState ?? true)
            {
                fg.AppendLine($"HNAMDataTypeState => {item.HNAMDataTypeState}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IWeatherGetter item,
            Weather_Mask<bool?> checkMask)
        {
            if (checkMask.TextureLowerLayer.HasValue && checkMask.TextureLowerLayer.Value != (item.TextureLowerLayer != null)) return false;
            if (checkMask.TextureUpperLayer.HasValue && checkMask.TextureUpperLayer.Value != (item.TextureUpperLayer != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.WeatherTypes?.Overall.HasValue ?? false && checkMask.WeatherTypes!.Overall.Value != item.WeatherTypes.HasBeenSet) return false;
            if (checkMask.Sounds?.Overall.HasValue ?? false && checkMask.Sounds!.Overall.Value != item.Sounds.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWeatherGetter item,
            Weather_Mask<bool> mask)
        {
            mask.TextureLowerLayer = (item.TextureLowerLayer != null);
            mask.TextureUpperLayer = (item.TextureUpperLayer != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model_Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.WeatherTypes = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherType_Mask<bool>?>>>(item.WeatherTypes.HasBeenSet, item.WeatherTypes.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherType_Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.FogDayNear = true;
            mask.FogDayFar = true;
            mask.FogNightNear = true;
            mask.FogNightFar = true;
            mask.HdrEyeAdaptSpeed = true;
            mask.HdrBlurRadius = true;
            mask.HdrBlurPasses = true;
            mask.HdrEmissiveMult = true;
            mask.HdrTargetLum = true;
            mask.HdrUpperLumClamp = true;
            mask.HdrBrightScale = true;
            mask.HdrBrightClamp = true;
            mask.HdrLumRampNoTex = true;
            mask.HdrLumRampMin = true;
            mask.HdrLumRampMax = true;
            mask.HdrSunlightDimmer = true;
            mask.HdrGrassDimmer = true;
            mask.HdrTreeDimmer = true;
            mask.WindSpeed = true;
            mask.CloudSpeedLower = true;
            mask.CloudSpeedUpper = true;
            mask.TransDelta = true;
            mask.SunGlare = true;
            mask.SunDamage = true;
            mask.PrecipitationBeginFadeIn = true;
            mask.PrecipitationEndFadeOut = true;
            mask.ThunderLightningBeginFadeIn = true;
            mask.ThunderLightningEndFadeOut = true;
            mask.ThunderLightningFrequency = true;
            mask.Classification = true;
            mask.LightningColor = true;
            mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherSound_Mask<bool>?>>>(item.Sounds.HasBeenSet, item.Sounds.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherSound_Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.FNAMDataTypeState = true;
            mask.HNAMDataTypeState = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Weather_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weather_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherGetter? lhs,
            IWeatherGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
            if (!string.Equals(lhs.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.WeatherTypes.SequenceEqual(rhs.WeatherTypes)) return false;
            if (!lhs.FogDayNear.EqualsWithin(rhs.FogDayNear)) return false;
            if (!lhs.FogDayFar.EqualsWithin(rhs.FogDayFar)) return false;
            if (!lhs.FogNightNear.EqualsWithin(rhs.FogNightNear)) return false;
            if (!lhs.FogNightFar.EqualsWithin(rhs.FogNightFar)) return false;
            if (!lhs.HdrEyeAdaptSpeed.EqualsWithin(rhs.HdrEyeAdaptSpeed)) return false;
            if (!lhs.HdrBlurRadius.EqualsWithin(rhs.HdrBlurRadius)) return false;
            if (!lhs.HdrBlurPasses.EqualsWithin(rhs.HdrBlurPasses)) return false;
            if (!lhs.HdrEmissiveMult.EqualsWithin(rhs.HdrEmissiveMult)) return false;
            if (!lhs.HdrTargetLum.EqualsWithin(rhs.HdrTargetLum)) return false;
            if (!lhs.HdrUpperLumClamp.EqualsWithin(rhs.HdrUpperLumClamp)) return false;
            if (!lhs.HdrBrightScale.EqualsWithin(rhs.HdrBrightScale)) return false;
            if (!lhs.HdrBrightClamp.EqualsWithin(rhs.HdrBrightClamp)) return false;
            if (!lhs.HdrLumRampNoTex.EqualsWithin(rhs.HdrLumRampNoTex)) return false;
            if (!lhs.HdrLumRampMin.EqualsWithin(rhs.HdrLumRampMin)) return false;
            if (!lhs.HdrLumRampMax.EqualsWithin(rhs.HdrLumRampMax)) return false;
            if (!lhs.HdrSunlightDimmer.EqualsWithin(rhs.HdrSunlightDimmer)) return false;
            if (!lhs.HdrGrassDimmer.EqualsWithin(rhs.HdrGrassDimmer)) return false;
            if (!lhs.HdrTreeDimmer.EqualsWithin(rhs.HdrTreeDimmer)) return false;
            if (lhs.WindSpeed != rhs.WindSpeed) return false;
            if (lhs.CloudSpeedLower != rhs.CloudSpeedLower) return false;
            if (lhs.CloudSpeedUpper != rhs.CloudSpeedUpper) return false;
            if (lhs.TransDelta != rhs.TransDelta) return false;
            if (lhs.SunGlare != rhs.SunGlare) return false;
            if (lhs.SunDamage != rhs.SunDamage) return false;
            if (lhs.PrecipitationBeginFadeIn != rhs.PrecipitationBeginFadeIn) return false;
            if (lhs.PrecipitationEndFadeOut != rhs.PrecipitationEndFadeOut) return false;
            if (lhs.ThunderLightningBeginFadeIn != rhs.ThunderLightningBeginFadeIn) return false;
            if (lhs.ThunderLightningEndFadeOut != rhs.ThunderLightningEndFadeOut) return false;
            if (lhs.ThunderLightningFrequency != rhs.ThunderLightningFrequency) return false;
            if (lhs.Classification != rhs.Classification) return false;
            if (!lhs.LightningColor.ColorOnlyEquals(rhs.LightningColor)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            if (lhs.FNAMDataTypeState != rhs.FNAMDataTypeState) return false;
            if (lhs.HNAMDataTypeState != rhs.HNAMDataTypeState) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public virtual int GetHashCode(IWeatherGetter item)
        {
            int ret = 0;
            if (item.TextureLowerLayer.TryGet(out var TextureLowerLayeritem))
            {
                ret = HashHelper.GetHashCode(TextureLowerLayeritem).CombineHashCode(ret);
            }
            if (item.TextureUpperLayer.TryGet(out var TextureUpperLayeritem))
            {
                ret = HashHelper.GetHashCode(TextureUpperLayeritem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.WeatherTypes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogDayNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogDayFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogNightNear).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FogNightFar).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrEyeAdaptSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrBlurRadius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrBlurPasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrEmissiveMult).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrTargetLum).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrUpperLumClamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrBrightScale).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrBrightClamp).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrLumRampNoTex).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrLumRampMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrLumRampMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrSunlightDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrGrassDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HdrTreeDimmer).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WindSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CloudSpeedLower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CloudSpeedUpper).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TransDelta).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunGlare).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SunDamage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PrecipitationBeginFadeIn).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PrecipitationEndFadeOut).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ThunderLightningBeginFadeIn).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ThunderLightningEndFadeOut).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ThunderLightningFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Classification).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LightningColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Sounds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FNAMDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HNAMDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weather.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IWeatherGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Weather obj, Weather rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Weather(getNextFormKey());
            ret.DeepCopyFieldsFrom((Weather)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Weather)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WeatherSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly WeatherSetterTranslationCommon Instance = new WeatherSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IWeatherInternal item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IWeather item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureLowerLayer) ?? true))
            {
                item.TextureLowerLayer = rhs.TextureLowerLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureUpperLayer) ?? true))
            {
                item.TextureUpperLayer = rhs.TextureUpperLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WeatherTypes) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.WeatherTypes);
                try
                {
                    if (rhs.WeatherTypes.HasBeenSet)
                    {
                        item.WeatherTypes.SetTo(
                            items: rhs.WeatherTypes,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.WeatherTypes.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayNear) ?? true))
            {
                item.FogDayNear = rhs.FogDayNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayFar) ?? true))
            {
                item.FogDayFar = rhs.FogDayFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightNear) ?? true))
            {
                item.FogNightNear = rhs.FogNightNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightFar) ?? true))
            {
                item.FogNightFar = rhs.FogNightFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEyeAdaptSpeed) ?? true))
            {
                item.HdrEyeAdaptSpeed = rhs.HdrEyeAdaptSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurRadius) ?? true))
            {
                item.HdrBlurRadius = rhs.HdrBlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurPasses) ?? true))
            {
                item.HdrBlurPasses = rhs.HdrBlurPasses;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEmissiveMult) ?? true))
            {
                item.HdrEmissiveMult = rhs.HdrEmissiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTargetLum) ?? true))
            {
                item.HdrTargetLum = rhs.HdrTargetLum;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrUpperLumClamp) ?? true))
            {
                item.HdrUpperLumClamp = rhs.HdrUpperLumClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightScale) ?? true))
            {
                item.HdrBrightScale = rhs.HdrBrightScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightClamp) ?? true))
            {
                item.HdrBrightClamp = rhs.HdrBrightClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampNoTex) ?? true))
            {
                item.HdrLumRampNoTex = rhs.HdrLumRampNoTex;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMin) ?? true))
            {
                item.HdrLumRampMin = rhs.HdrLumRampMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMax) ?? true))
            {
                item.HdrLumRampMax = rhs.HdrLumRampMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrSunlightDimmer) ?? true))
            {
                item.HdrSunlightDimmer = rhs.HdrSunlightDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrGrassDimmer) ?? true))
            {
                item.HdrGrassDimmer = rhs.HdrGrassDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTreeDimmer) ?? true))
            {
                item.HdrTreeDimmer = rhs.HdrTreeDimmer;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                item.WindSpeed = rhs.WindSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedLower) ?? true))
            {
                item.CloudSpeedLower = rhs.CloudSpeedLower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedUpper) ?? true))
            {
                item.CloudSpeedUpper = rhs.CloudSpeedUpper;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                item.TransDelta = rhs.TransDelta;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                item.SunGlare = rhs.SunGlare;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                item.SunDamage = rhs.SunDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                item.PrecipitationBeginFadeIn = rhs.PrecipitationBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                item.PrecipitationEndFadeOut = rhs.PrecipitationEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                item.ThunderLightningBeginFadeIn = rhs.ThunderLightningBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                item.ThunderLightningEndFadeOut = rhs.ThunderLightningEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                item.ThunderLightningFrequency = rhs.ThunderLightningFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Classification) ?? true))
            {
                item.Classification = rhs.Classification;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                item.LightningColor = rhs.LightningColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                try
                {
                    if (rhs.Sounds.HasBeenSet)
                    {
                        item.Sounds.SetTo(
                            items: rhs.Sounds,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Sounds.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FNAMDataTypeState) ?? true))
            {
                item.FNAMDataTypeState = rhs.FNAMDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HNAMDataTypeState) ?? true))
            {
                item.HNAMDataTypeState = rhs.HNAMDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Weather DeepCopy(
            IWeatherGetter item,
            Weather_TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Weather
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeatherSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WeatherXmlWriteTranslation Instance = new WeatherXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.TextureLowerLayer != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureLowerLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureLowerLayer),
                    item: item.TextureLowerLayer,
                    fieldIndex: (int)Weather_FieldIndex.TextureLowerLayer,
                    errorMask: errorMask);
            }
            if ((item.TextureUpperLayer != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TextureUpperLayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureUpperLayer),
                    item: item.TextureUpperLayer,
                    fieldIndex: (int)Weather_FieldIndex.TextureUpperLayer,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Model) ?? true))
            {
                var loquiItem = item.Model;
                ((ModelXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Model),
                    fieldIndex: (int)Weather_FieldIndex.Model,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
            }
            if (item.WeatherTypes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WeatherTypes) ?? true))
            {
                ListXmlTranslation<IWeatherTypeGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.WeatherTypes),
                    item: item.WeatherTypes,
                    fieldIndex: (int)Weather_FieldIndex.WeatherTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.WeatherTypes),
                    transl: (XElement subNode, IWeatherTypeGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((WeatherTypeXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.FNAMDataTypeState.HasFlag(Weather.FNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayNear) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FogDayNear),
                        item: item.FogDayNear,
                        fieldIndex: (int)Weather_FieldIndex.FogDayNear,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDayFar) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FogDayFar),
                        item: item.FogDayFar,
                        fieldIndex: (int)Weather_FieldIndex.FogDayFar,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightNear) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FogNightNear),
                        item: item.FogNightNear,
                        fieldIndex: (int)Weather_FieldIndex.FogNightNear,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNightFar) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FogNightFar),
                        item: item.FogNightFar,
                        fieldIndex: (int)Weather_FieldIndex.FogNightFar,
                        errorMask: errorMask);
                }
            }
            if (item.HNAMDataTypeState.HasFlag(Weather.HNAMDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEyeAdaptSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrEyeAdaptSpeed),
                        item: item.HdrEyeAdaptSpeed,
                        fieldIndex: (int)Weather_FieldIndex.HdrEyeAdaptSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurRadius) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrBlurRadius),
                        item: item.HdrBlurRadius,
                        fieldIndex: (int)Weather_FieldIndex.HdrBlurRadius,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBlurPasses) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrBlurPasses),
                        item: item.HdrBlurPasses,
                        fieldIndex: (int)Weather_FieldIndex.HdrBlurPasses,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrEmissiveMult) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrEmissiveMult),
                        item: item.HdrEmissiveMult,
                        fieldIndex: (int)Weather_FieldIndex.HdrEmissiveMult,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTargetLum) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrTargetLum),
                        item: item.HdrTargetLum,
                        fieldIndex: (int)Weather_FieldIndex.HdrTargetLum,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrUpperLumClamp) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrUpperLumClamp),
                        item: item.HdrUpperLumClamp,
                        fieldIndex: (int)Weather_FieldIndex.HdrUpperLumClamp,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightScale) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrBrightScale),
                        item: item.HdrBrightScale,
                        fieldIndex: (int)Weather_FieldIndex.HdrBrightScale,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrBrightClamp) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrBrightClamp),
                        item: item.HdrBrightClamp,
                        fieldIndex: (int)Weather_FieldIndex.HdrBrightClamp,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampNoTex) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrLumRampNoTex),
                        item: item.HdrLumRampNoTex,
                        fieldIndex: (int)Weather_FieldIndex.HdrLumRampNoTex,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMin) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrLumRampMin),
                        item: item.HdrLumRampMin,
                        fieldIndex: (int)Weather_FieldIndex.HdrLumRampMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrLumRampMax) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrLumRampMax),
                        item: item.HdrLumRampMax,
                        fieldIndex: (int)Weather_FieldIndex.HdrLumRampMax,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrSunlightDimmer) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrSunlightDimmer),
                        item: item.HdrSunlightDimmer,
                        fieldIndex: (int)Weather_FieldIndex.HdrSunlightDimmer,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrGrassDimmer) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrGrassDimmer),
                        item: item.HdrGrassDimmer,
                        fieldIndex: (int)Weather_FieldIndex.HdrGrassDimmer,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HdrTreeDimmer) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HdrTreeDimmer),
                        item: item.HdrTreeDimmer,
                        fieldIndex: (int)Weather_FieldIndex.HdrTreeDimmer,
                        errorMask: errorMask);
                }
            }
            if (item.DATADataTypeState.HasFlag(Weather.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.WindSpeed),
                        item: item.WindSpeed,
                        fieldIndex: (int)Weather_FieldIndex.WindSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedLower) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CloudSpeedLower),
                        item: item.CloudSpeedLower,
                        fieldIndex: (int)Weather_FieldIndex.CloudSpeedLower,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudSpeedUpper) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CloudSpeedUpper),
                        item: item.CloudSpeedUpper,
                        fieldIndex: (int)Weather_FieldIndex.CloudSpeedUpper,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.TransDelta),
                        item: item.TransDelta,
                        fieldIndex: (int)Weather_FieldIndex.TransDelta,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunGlare),
                        item: item.SunGlare,
                        fieldIndex: (int)Weather_FieldIndex.SunGlare,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SunDamage),
                        item: item.SunDamage,
                        fieldIndex: (int)Weather_FieldIndex.SunDamage,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PrecipitationBeginFadeIn),
                        item: item.PrecipitationBeginFadeIn,
                        fieldIndex: (int)Weather_FieldIndex.PrecipitationBeginFadeIn,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PrecipitationEndFadeOut),
                        item: item.PrecipitationEndFadeOut,
                        fieldIndex: (int)Weather_FieldIndex.PrecipitationEndFadeOut,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ThunderLightningBeginFadeIn),
                        item: item.ThunderLightningBeginFadeIn,
                        fieldIndex: (int)Weather_FieldIndex.ThunderLightningBeginFadeIn,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ThunderLightningEndFadeOut),
                        item: item.ThunderLightningEndFadeOut,
                        fieldIndex: (int)Weather_FieldIndex.ThunderLightningEndFadeOut,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ThunderLightningFrequency),
                        item: item.ThunderLightningFrequency,
                        fieldIndex: (int)Weather_FieldIndex.ThunderLightningFrequency,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Classification) ?? true))
                {
                    EnumXmlTranslation<Weather.WeatherClassification>.Instance.Write(
                        node: node,
                        name: nameof(item.Classification),
                        item: item.Classification,
                        fieldIndex: (int)Weather_FieldIndex.Classification,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LightningColor),
                        item: item.LightningColor,
                        fieldIndex: (int)Weather_FieldIndex.LightningColor,
                        errorMask: errorMask);
                }
            }
            if (item.Sounds.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IWeatherSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Weather_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Sounds),
                    transl: (XElement subNode, IWeatherSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((WeatherSoundXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.FNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.FNAMDataTypeState),
                    item: item.FNAMDataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.FNAMDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.HNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.HNAMDataTypeState),
                    item: item.HNAMDataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.HNAMDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Weather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Weather");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WeatherXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static WeatherXmlCreateTranslation Instance = new WeatherXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "TextureLowerLayer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureLowerLayer);
                        item.TextureLowerLayer = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureUpperLayer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TextureUpperLayer);
                        item.TextureUpperLayer = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Model);
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WeatherTypes":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.WeatherTypes);
                        if (ListXmlTranslation<WeatherType>.Instance.Parse(
                            node: node,
                            enumer: out var WeatherTypesItem,
                            transl: LoquiXmlTranslation<WeatherType>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.WeatherTypes.SetTo(WeatherTypesItem);
                        }
                        else
                        {
                            item.WeatherTypes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDayNear":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogDayNear);
                        item.FogDayNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.FNAMDataTypeState |= Weather.FNAMDataType.Has;
                    break;
                case "FogDayFar":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogDayFar);
                        item.FogDayFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNightNear":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogNightNear);
                        item.FogNightNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNightFar":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FogNightFar);
                        item.FogNightFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrEyeAdaptSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrEyeAdaptSpeed);
                        item.HdrEyeAdaptSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.HNAMDataTypeState |= Weather.HNAMDataType.Has;
                    break;
                case "HdrBlurRadius":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurRadius);
                        item.HdrBlurRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBlurPasses":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBlurPasses);
                        item.HdrBlurPasses = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrEmissiveMult":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrEmissiveMult);
                        item.HdrEmissiveMult = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrTargetLum":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrTargetLum);
                        item.HdrTargetLum = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrUpperLumClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrUpperLumClamp);
                        item.HdrUpperLumClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBrightScale":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightScale);
                        item.HdrBrightScale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrBrightClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrBrightClamp);
                        item.HdrBrightClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampNoTex":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampNoTex);
                        item.HdrLumRampNoTex = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampMin":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMin);
                        item.HdrLumRampMin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrLumRampMax":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrLumRampMax);
                        item.HdrLumRampMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrSunlightDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrSunlightDimmer);
                        item.HdrSunlightDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrGrassDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrGrassDimmer);
                        item.HdrGrassDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HdrTreeDimmer":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HdrTreeDimmer);
                        item.HdrTreeDimmer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindSpeed":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.WindSpeed);
                        item.WindSpeed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Weather.DATADataType.Has;
                    break;
                case "CloudSpeedLower":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedLower);
                        item.CloudSpeedLower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudSpeedUpper":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.CloudSpeedUpper);
                        item.CloudSpeedUpper = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TransDelta":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.TransDelta);
                        item.TransDelta = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlare":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.SunGlare);
                        item.SunGlare = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunDamage":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.SunDamage);
                        item.SunDamage = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationBeginFadeIn":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationBeginFadeIn);
                        item.PrecipitationBeginFadeIn = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationEndFadeOut":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationEndFadeOut);
                        item.PrecipitationEndFadeOut = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningBeginFadeIn":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningBeginFadeIn);
                        item.ThunderLightningBeginFadeIn = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningEndFadeOut":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningEndFadeOut);
                        item.ThunderLightningEndFadeOut = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningFrequency":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningFrequency);
                        item.ThunderLightningFrequency = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classification":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Classification);
                        item.Classification = EnumXmlTranslation<Weather.WeatherClassification>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightningColor":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.LightningColor);
                        item.LightningColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                        if (ListXmlTranslation<WeatherSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<WeatherSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.FNAMDataTypeState);
                        item.FNAMDataTypeState = EnumXmlTranslation<Weather.FNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HNAMDataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.HNAMDataTypeState);
                        item.HNAMDataTypeState = EnumXmlTranslation<Weather.HNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Weather_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<Weather.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WeatherXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherGetter item,
            XElement node,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            string path,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            Stream stream,
            out Weather_ErrorMask errorMask,
            Weather_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class Weather_Mask<T> :
        OblivionMajorRecord_Mask<T>,
        IMask<T>,
        IEquatable<Weather_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public Weather_Mask(T initialValue)
        : base(initialValue)
        {
            this.TextureLowerLayer = initialValue;
            this.TextureUpperLayer = initialValue;
            this.Model = new MaskItem<T, Model_Mask<T>?>(initialValue, new Model_Mask<T>(initialValue));
            this.WeatherTypes = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherType_Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, WeatherType_Mask<T>?>>());
            this.FogDayNear = initialValue;
            this.FogDayFar = initialValue;
            this.FogNightNear = initialValue;
            this.FogNightFar = initialValue;
            this.HdrEyeAdaptSpeed = initialValue;
            this.HdrBlurRadius = initialValue;
            this.HdrBlurPasses = initialValue;
            this.HdrEmissiveMult = initialValue;
            this.HdrTargetLum = initialValue;
            this.HdrUpperLumClamp = initialValue;
            this.HdrBrightScale = initialValue;
            this.HdrBrightClamp = initialValue;
            this.HdrLumRampNoTex = initialValue;
            this.HdrLumRampMin = initialValue;
            this.HdrLumRampMax = initialValue;
            this.HdrSunlightDimmer = initialValue;
            this.HdrGrassDimmer = initialValue;
            this.HdrTreeDimmer = initialValue;
            this.WindSpeed = initialValue;
            this.CloudSpeedLower = initialValue;
            this.CloudSpeedUpper = initialValue;
            this.TransDelta = initialValue;
            this.SunGlare = initialValue;
            this.SunDamage = initialValue;
            this.PrecipitationBeginFadeIn = initialValue;
            this.PrecipitationEndFadeOut = initialValue;
            this.ThunderLightningBeginFadeIn = initialValue;
            this.ThunderLightningEndFadeOut = initialValue;
            this.ThunderLightningFrequency = initialValue;
            this.Classification = initialValue;
            this.LightningColor = initialValue;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherSound_Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, WeatherSound_Mask<T>?>>());
            this.FNAMDataTypeState = initialValue;
            this.HNAMDataTypeState = initialValue;
            this.DATADataTypeState = initialValue;
        }

        public Weather_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T OblivionMajorRecordFlags,
            T TextureLowerLayer,
            T TextureUpperLayer,
            T Model,
            T WeatherTypes,
            T FogDayNear,
            T FogDayFar,
            T FogNightNear,
            T FogNightFar,
            T HdrEyeAdaptSpeed,
            T HdrBlurRadius,
            T HdrBlurPasses,
            T HdrEmissiveMult,
            T HdrTargetLum,
            T HdrUpperLumClamp,
            T HdrBrightScale,
            T HdrBrightClamp,
            T HdrLumRampNoTex,
            T HdrLumRampMin,
            T HdrLumRampMax,
            T HdrSunlightDimmer,
            T HdrGrassDimmer,
            T HdrTreeDimmer,
            T WindSpeed,
            T CloudSpeedLower,
            T CloudSpeedUpper,
            T TransDelta,
            T SunGlare,
            T SunDamage,
            T PrecipitationBeginFadeIn,
            T PrecipitationEndFadeOut,
            T ThunderLightningBeginFadeIn,
            T ThunderLightningEndFadeOut,
            T ThunderLightningFrequency,
            T Classification,
            T LightningColor,
            T Sounds,
            T FNAMDataTypeState,
            T HNAMDataTypeState,
            T DATADataTypeState)
        : base(
            MajorRecordFlagsRaw: MajorRecordFlagsRaw,
            FormKey: FormKey,
            Version: Version,
            EditorID: EditorID,
            OblivionMajorRecordFlags: OblivionMajorRecordFlags)
        {
            this.TextureLowerLayer = TextureLowerLayer;
            this.TextureUpperLayer = TextureUpperLayer;
            this.Model = new MaskItem<T, Model_Mask<T>?>(Model, new Model_Mask<T>(Model));
            this.WeatherTypes = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherType_Mask<T>?>>>(WeatherTypes, Enumerable.Empty<MaskItemIndexed<T, WeatherType_Mask<T>?>>());
            this.FogDayNear = FogDayNear;
            this.FogDayFar = FogDayFar;
            this.FogNightNear = FogNightNear;
            this.FogNightFar = FogNightFar;
            this.HdrEyeAdaptSpeed = HdrEyeAdaptSpeed;
            this.HdrBlurRadius = HdrBlurRadius;
            this.HdrBlurPasses = HdrBlurPasses;
            this.HdrEmissiveMult = HdrEmissiveMult;
            this.HdrTargetLum = HdrTargetLum;
            this.HdrUpperLumClamp = HdrUpperLumClamp;
            this.HdrBrightScale = HdrBrightScale;
            this.HdrBrightClamp = HdrBrightClamp;
            this.HdrLumRampNoTex = HdrLumRampNoTex;
            this.HdrLumRampMin = HdrLumRampMin;
            this.HdrLumRampMax = HdrLumRampMax;
            this.HdrSunlightDimmer = HdrSunlightDimmer;
            this.HdrGrassDimmer = HdrGrassDimmer;
            this.HdrTreeDimmer = HdrTreeDimmer;
            this.WindSpeed = WindSpeed;
            this.CloudSpeedLower = CloudSpeedLower;
            this.CloudSpeedUpper = CloudSpeedUpper;
            this.TransDelta = TransDelta;
            this.SunGlare = SunGlare;
            this.SunDamage = SunDamage;
            this.PrecipitationBeginFadeIn = PrecipitationBeginFadeIn;
            this.PrecipitationEndFadeOut = PrecipitationEndFadeOut;
            this.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeIn;
            this.ThunderLightningEndFadeOut = ThunderLightningEndFadeOut;
            this.ThunderLightningFrequency = ThunderLightningFrequency;
            this.Classification = Classification;
            this.LightningColor = LightningColor;
            this.Sounds = new MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherSound_Mask<T>?>>>(Sounds, Enumerable.Empty<MaskItemIndexed<T, WeatherSound_Mask<T>?>>());
            this.FNAMDataTypeState = FNAMDataTypeState;
            this.HNAMDataTypeState = HNAMDataTypeState;
            this.DATADataTypeState = DATADataTypeState;
        }

        #pragma warning disable CS8618
        protected Weather_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public T TextureLowerLayer;
        public T TextureUpperLayer;
        public MaskItem<T, Model_Mask<T>?>? Model { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherType_Mask<T>?>>>? WeatherTypes;
        public T FogDayNear;
        public T FogDayFar;
        public T FogNightNear;
        public T FogNightFar;
        public T HdrEyeAdaptSpeed;
        public T HdrBlurRadius;
        public T HdrBlurPasses;
        public T HdrEmissiveMult;
        public T HdrTargetLum;
        public T HdrUpperLumClamp;
        public T HdrBrightScale;
        public T HdrBrightClamp;
        public T HdrLumRampNoTex;
        public T HdrLumRampMin;
        public T HdrLumRampMax;
        public T HdrSunlightDimmer;
        public T HdrGrassDimmer;
        public T HdrTreeDimmer;
        public T WindSpeed;
        public T CloudSpeedLower;
        public T CloudSpeedUpper;
        public T TransDelta;
        public T SunGlare;
        public T SunDamage;
        public T PrecipitationBeginFadeIn;
        public T PrecipitationEndFadeOut;
        public T ThunderLightningBeginFadeIn;
        public T ThunderLightningEndFadeOut;
        public T ThunderLightningFrequency;
        public T Classification;
        public T LightningColor;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, WeatherSound_Mask<T>?>>>? Sounds;
        public T FNAMDataTypeState;
        public T HNAMDataTypeState;
        public T DATADataTypeState;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Weather_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Weather_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.TextureLowerLayer, rhs.TextureLowerLayer)) return false;
            if (!object.Equals(this.TextureUpperLayer, rhs.TextureUpperLayer)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.WeatherTypes, rhs.WeatherTypes)) return false;
            if (!object.Equals(this.FogDayNear, rhs.FogDayNear)) return false;
            if (!object.Equals(this.FogDayFar, rhs.FogDayFar)) return false;
            if (!object.Equals(this.FogNightNear, rhs.FogNightNear)) return false;
            if (!object.Equals(this.FogNightFar, rhs.FogNightFar)) return false;
            if (!object.Equals(this.HdrEyeAdaptSpeed, rhs.HdrEyeAdaptSpeed)) return false;
            if (!object.Equals(this.HdrBlurRadius, rhs.HdrBlurRadius)) return false;
            if (!object.Equals(this.HdrBlurPasses, rhs.HdrBlurPasses)) return false;
            if (!object.Equals(this.HdrEmissiveMult, rhs.HdrEmissiveMult)) return false;
            if (!object.Equals(this.HdrTargetLum, rhs.HdrTargetLum)) return false;
            if (!object.Equals(this.HdrUpperLumClamp, rhs.HdrUpperLumClamp)) return false;
            if (!object.Equals(this.HdrBrightScale, rhs.HdrBrightScale)) return false;
            if (!object.Equals(this.HdrBrightClamp, rhs.HdrBrightClamp)) return false;
            if (!object.Equals(this.HdrLumRampNoTex, rhs.HdrLumRampNoTex)) return false;
            if (!object.Equals(this.HdrLumRampMin, rhs.HdrLumRampMin)) return false;
            if (!object.Equals(this.HdrLumRampMax, rhs.HdrLumRampMax)) return false;
            if (!object.Equals(this.HdrSunlightDimmer, rhs.HdrSunlightDimmer)) return false;
            if (!object.Equals(this.HdrGrassDimmer, rhs.HdrGrassDimmer)) return false;
            if (!object.Equals(this.HdrTreeDimmer, rhs.HdrTreeDimmer)) return false;
            if (!object.Equals(this.WindSpeed, rhs.WindSpeed)) return false;
            if (!object.Equals(this.CloudSpeedLower, rhs.CloudSpeedLower)) return false;
            if (!object.Equals(this.CloudSpeedUpper, rhs.CloudSpeedUpper)) return false;
            if (!object.Equals(this.TransDelta, rhs.TransDelta)) return false;
            if (!object.Equals(this.SunGlare, rhs.SunGlare)) return false;
            if (!object.Equals(this.SunDamage, rhs.SunDamage)) return false;
            if (!object.Equals(this.PrecipitationBeginFadeIn, rhs.PrecipitationBeginFadeIn)) return false;
            if (!object.Equals(this.PrecipitationEndFadeOut, rhs.PrecipitationEndFadeOut)) return false;
            if (!object.Equals(this.ThunderLightningBeginFadeIn, rhs.ThunderLightningBeginFadeIn)) return false;
            if (!object.Equals(this.ThunderLightningEndFadeOut, rhs.ThunderLightningEndFadeOut)) return false;
            if (!object.Equals(this.ThunderLightningFrequency, rhs.ThunderLightningFrequency)) return false;
            if (!object.Equals(this.Classification, rhs.Classification)) return false;
            if (!object.Equals(this.LightningColor, rhs.LightningColor)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(this.FNAMDataTypeState, rhs.FNAMDataTypeState)) return false;
            if (!object.Equals(this.HNAMDataTypeState, rhs.HNAMDataTypeState)) return false;
            if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TextureLowerLayer?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureUpperLayer?.GetHashCode());
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.WeatherTypes?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDayNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogDayFar?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNightNear?.GetHashCode());
            ret = ret.CombineHashCode(this.FogNightFar?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrEyeAdaptSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBlurRadius?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBlurPasses?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrEmissiveMult?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrTargetLum?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrUpperLumClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBrightScale?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrBrightClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampNoTex?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampMin?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrLumRampMax?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrSunlightDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrGrassDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.HdrTreeDimmer?.GetHashCode());
            ret = ret.CombineHashCode(this.WindSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.CloudSpeedLower?.GetHashCode());
            ret = ret.CombineHashCode(this.CloudSpeedUpper?.GetHashCode());
            ret = ret.CombineHashCode(this.TransDelta?.GetHashCode());
            ret = ret.CombineHashCode(this.SunGlare?.GetHashCode());
            ret = ret.CombineHashCode(this.SunDamage?.GetHashCode());
            ret = ret.CombineHashCode(this.PrecipitationBeginFadeIn?.GetHashCode());
            ret = ret.CombineHashCode(this.PrecipitationEndFadeOut?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningBeginFadeIn?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningEndFadeOut?.GetHashCode());
            ret = ret.CombineHashCode(this.ThunderLightningFrequency?.GetHashCode());
            ret = ret.CombineHashCode(this.Classification?.GetHashCode());
            ret = ret.CombineHashCode(this.LightningColor?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(this.FNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(this.HNAMDataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.TextureLowerLayer)) return false;
            if (!eval(this.TextureUpperLayer)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (this.Model.Specific != null && !this.Model.Specific.AllEqual(eval)) return false;
            }
            if (this.WeatherTypes != null)
            {
                if (!eval(this.WeatherTypes.Overall)) return false;
                if (this.WeatherTypes.Specific != null)
                {
                    foreach (var item in this.WeatherTypes.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.FogDayNear)) return false;
            if (!eval(this.FogDayFar)) return false;
            if (!eval(this.FogNightNear)) return false;
            if (!eval(this.FogNightFar)) return false;
            if (!eval(this.HdrEyeAdaptSpeed)) return false;
            if (!eval(this.HdrBlurRadius)) return false;
            if (!eval(this.HdrBlurPasses)) return false;
            if (!eval(this.HdrEmissiveMult)) return false;
            if (!eval(this.HdrTargetLum)) return false;
            if (!eval(this.HdrUpperLumClamp)) return false;
            if (!eval(this.HdrBrightScale)) return false;
            if (!eval(this.HdrBrightClamp)) return false;
            if (!eval(this.HdrLumRampNoTex)) return false;
            if (!eval(this.HdrLumRampMin)) return false;
            if (!eval(this.HdrLumRampMax)) return false;
            if (!eval(this.HdrSunlightDimmer)) return false;
            if (!eval(this.HdrGrassDimmer)) return false;
            if (!eval(this.HdrTreeDimmer)) return false;
            if (!eval(this.WindSpeed)) return false;
            if (!eval(this.CloudSpeedLower)) return false;
            if (!eval(this.CloudSpeedUpper)) return false;
            if (!eval(this.TransDelta)) return false;
            if (!eval(this.SunGlare)) return false;
            if (!eval(this.SunDamage)) return false;
            if (!eval(this.PrecipitationBeginFadeIn)) return false;
            if (!eval(this.PrecipitationEndFadeOut)) return false;
            if (!eval(this.ThunderLightningBeginFadeIn)) return false;
            if (!eval(this.ThunderLightningEndFadeOut)) return false;
            if (!eval(this.ThunderLightningFrequency)) return false;
            if (!eval(this.Classification)) return false;
            if (!eval(this.LightningColor)) return false;
            if (this.Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null)
                {
                    foreach (var item in this.Sounds.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.FNAMDataTypeState)) return false;
            if (!eval(this.HNAMDataTypeState)) return false;
            if (!eval(this.DATADataTypeState)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Weather_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Weather_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Weather_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.TextureLowerLayer = eval(this.TextureLowerLayer);
            obj.TextureUpperLayer = eval(this.TextureUpperLayer);
            obj.Model = this.Model == null ? null : new MaskItem<R, Model_Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            if (WeatherTypes != null)
            {
                obj.WeatherTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherType_Mask<R>?>>>(eval(this.WeatherTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherType_Mask<R>?>>());
                if (WeatherTypes.Specific != null)
                {
                    var l = new List<MaskItemIndexed<R, WeatherType_Mask<R>?>>();
                    obj.WeatherTypes.Specific = l;
                    foreach (var item in WeatherTypes.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, WeatherType_Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherType_Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                        if (mask == null) continue;
                        l.Add(mask);
                    }
                }
            }
            obj.FogDayNear = eval(this.FogDayNear);
            obj.FogDayFar = eval(this.FogDayFar);
            obj.FogNightNear = eval(this.FogNightNear);
            obj.FogNightFar = eval(this.FogNightFar);
            obj.HdrEyeAdaptSpeed = eval(this.HdrEyeAdaptSpeed);
            obj.HdrBlurRadius = eval(this.HdrBlurRadius);
            obj.HdrBlurPasses = eval(this.HdrBlurPasses);
            obj.HdrEmissiveMult = eval(this.HdrEmissiveMult);
            obj.HdrTargetLum = eval(this.HdrTargetLum);
            obj.HdrUpperLumClamp = eval(this.HdrUpperLumClamp);
            obj.HdrBrightScale = eval(this.HdrBrightScale);
            obj.HdrBrightClamp = eval(this.HdrBrightClamp);
            obj.HdrLumRampNoTex = eval(this.HdrLumRampNoTex);
            obj.HdrLumRampMin = eval(this.HdrLumRampMin);
            obj.HdrLumRampMax = eval(this.HdrLumRampMax);
            obj.HdrSunlightDimmer = eval(this.HdrSunlightDimmer);
            obj.HdrGrassDimmer = eval(this.HdrGrassDimmer);
            obj.HdrTreeDimmer = eval(this.HdrTreeDimmer);
            obj.WindSpeed = eval(this.WindSpeed);
            obj.CloudSpeedLower = eval(this.CloudSpeedLower);
            obj.CloudSpeedUpper = eval(this.CloudSpeedUpper);
            obj.TransDelta = eval(this.TransDelta);
            obj.SunGlare = eval(this.SunGlare);
            obj.SunDamage = eval(this.SunDamage);
            obj.PrecipitationBeginFadeIn = eval(this.PrecipitationBeginFadeIn);
            obj.PrecipitationEndFadeOut = eval(this.PrecipitationEndFadeOut);
            obj.ThunderLightningBeginFadeIn = eval(this.ThunderLightningBeginFadeIn);
            obj.ThunderLightningEndFadeOut = eval(this.ThunderLightningEndFadeOut);
            obj.ThunderLightningFrequency = eval(this.ThunderLightningFrequency);
            obj.Classification = eval(this.Classification);
            obj.LightningColor = eval(this.LightningColor);
            if (Sounds != null)
            {
                obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherSound_Mask<R>?>>>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherSound_Mask<R>?>>());
                if (Sounds.Specific != null)
                {
                    var l = new List<MaskItemIndexed<R, WeatherSound_Mask<R>?>>();
                    obj.Sounds.Specific = l;
                    foreach (var item in Sounds.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, WeatherSound_Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherSound_Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                        if (mask == null) continue;
                        l.Add(mask);
                    }
                }
            }
            obj.FNAMDataTypeState = eval(this.FNAMDataTypeState);
            obj.HNAMDataTypeState = eval(this.HNAMDataTypeState);
            obj.DATADataTypeState = eval(this.DATADataTypeState);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Weather_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Weather_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(Weather_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TextureLowerLayer ?? true)
                {
                    fg.AppendLine($"TextureLowerLayer => {TextureLowerLayer}");
                }
                if (printMask?.TextureUpperLayer ?? true)
                {
                    fg.AppendLine($"TextureUpperLayer => {TextureUpperLayer}");
                }
                if (printMask?.Model?.Overall ?? true)
                {
                    Model?.ToString(fg);
                }
                if (printMask?.WeatherTypes?.Overall ?? true)
                {
                    fg.AppendLine("WeatherTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (WeatherTypes != null)
                        {
                            if (WeatherTypes.Overall != null)
                            {
                                fg.AppendLine(WeatherTypes.Overall.ToString());
                            }
                            if (WeatherTypes.Specific != null)
                            {
                                foreach (var subItem in WeatherTypes.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FogDayNear ?? true)
                {
                    fg.AppendLine($"FogDayNear => {FogDayNear}");
                }
                if (printMask?.FogDayFar ?? true)
                {
                    fg.AppendLine($"FogDayFar => {FogDayFar}");
                }
                if (printMask?.FogNightNear ?? true)
                {
                    fg.AppendLine($"FogNightNear => {FogNightNear}");
                }
                if (printMask?.FogNightFar ?? true)
                {
                    fg.AppendLine($"FogNightFar => {FogNightFar}");
                }
                if (printMask?.HdrEyeAdaptSpeed ?? true)
                {
                    fg.AppendLine($"HdrEyeAdaptSpeed => {HdrEyeAdaptSpeed}");
                }
                if (printMask?.HdrBlurRadius ?? true)
                {
                    fg.AppendLine($"HdrBlurRadius => {HdrBlurRadius}");
                }
                if (printMask?.HdrBlurPasses ?? true)
                {
                    fg.AppendLine($"HdrBlurPasses => {HdrBlurPasses}");
                }
                if (printMask?.HdrEmissiveMult ?? true)
                {
                    fg.AppendLine($"HdrEmissiveMult => {HdrEmissiveMult}");
                }
                if (printMask?.HdrTargetLum ?? true)
                {
                    fg.AppendLine($"HdrTargetLum => {HdrTargetLum}");
                }
                if (printMask?.HdrUpperLumClamp ?? true)
                {
                    fg.AppendLine($"HdrUpperLumClamp => {HdrUpperLumClamp}");
                }
                if (printMask?.HdrBrightScale ?? true)
                {
                    fg.AppendLine($"HdrBrightScale => {HdrBrightScale}");
                }
                if (printMask?.HdrBrightClamp ?? true)
                {
                    fg.AppendLine($"HdrBrightClamp => {HdrBrightClamp}");
                }
                if (printMask?.HdrLumRampNoTex ?? true)
                {
                    fg.AppendLine($"HdrLumRampNoTex => {HdrLumRampNoTex}");
                }
                if (printMask?.HdrLumRampMin ?? true)
                {
                    fg.AppendLine($"HdrLumRampMin => {HdrLumRampMin}");
                }
                if (printMask?.HdrLumRampMax ?? true)
                {
                    fg.AppendLine($"HdrLumRampMax => {HdrLumRampMax}");
                }
                if (printMask?.HdrSunlightDimmer ?? true)
                {
                    fg.AppendLine($"HdrSunlightDimmer => {HdrSunlightDimmer}");
                }
                if (printMask?.HdrGrassDimmer ?? true)
                {
                    fg.AppendLine($"HdrGrassDimmer => {HdrGrassDimmer}");
                }
                if (printMask?.HdrTreeDimmer ?? true)
                {
                    fg.AppendLine($"HdrTreeDimmer => {HdrTreeDimmer}");
                }
                if (printMask?.WindSpeed ?? true)
                {
                    fg.AppendLine($"WindSpeed => {WindSpeed}");
                }
                if (printMask?.CloudSpeedLower ?? true)
                {
                    fg.AppendLine($"CloudSpeedLower => {CloudSpeedLower}");
                }
                if (printMask?.CloudSpeedUpper ?? true)
                {
                    fg.AppendLine($"CloudSpeedUpper => {CloudSpeedUpper}");
                }
                if (printMask?.TransDelta ?? true)
                {
                    fg.AppendLine($"TransDelta => {TransDelta}");
                }
                if (printMask?.SunGlare ?? true)
                {
                    fg.AppendLine($"SunGlare => {SunGlare}");
                }
                if (printMask?.SunDamage ?? true)
                {
                    fg.AppendLine($"SunDamage => {SunDamage}");
                }
                if (printMask?.PrecipitationBeginFadeIn ?? true)
                {
                    fg.AppendLine($"PrecipitationBeginFadeIn => {PrecipitationBeginFadeIn}");
                }
                if (printMask?.PrecipitationEndFadeOut ?? true)
                {
                    fg.AppendLine($"PrecipitationEndFadeOut => {PrecipitationEndFadeOut}");
                }
                if (printMask?.ThunderLightningBeginFadeIn ?? true)
                {
                    fg.AppendLine($"ThunderLightningBeginFadeIn => {ThunderLightningBeginFadeIn}");
                }
                if (printMask?.ThunderLightningEndFadeOut ?? true)
                {
                    fg.AppendLine($"ThunderLightningEndFadeOut => {ThunderLightningEndFadeOut}");
                }
                if (printMask?.ThunderLightningFrequency ?? true)
                {
                    fg.AppendLine($"ThunderLightningFrequency => {ThunderLightningFrequency}");
                }
                if (printMask?.Classification ?? true)
                {
                    fg.AppendLine($"Classification => {Classification}");
                }
                if (printMask?.LightningColor ?? true)
                {
                    fg.AppendLine($"LightningColor => {LightningColor}");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Sounds != null)
                        {
                            if (Sounds.Overall != null)
                            {
                                fg.AppendLine(Sounds.Overall.ToString());
                            }
                            if (Sounds.Specific != null)
                            {
                                foreach (var subItem in Sounds.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"FNAMDataTypeState => {FNAMDataTypeState}");
                }
                if (printMask?.HNAMDataTypeState ?? true)
                {
                    fg.AppendLine($"HNAMDataTypeState => {HNAMDataTypeState}");
                }
                if (printMask?.DATADataTypeState ?? true)
                {
                    fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Weather_ErrorMask : OblivionMajorRecord_ErrorMask, IErrorMask<Weather_ErrorMask>
    {
        #region Members
        public Exception? TextureLowerLayer;
        public Exception? TextureUpperLayer;
        public MaskItem<Exception?, Model_ErrorMask?>? Model;
        public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType_ErrorMask?>>?>? WeatherTypes;
        public Exception? FogDayNear;
        public Exception? FogDayFar;
        public Exception? FogNightNear;
        public Exception? FogNightFar;
        public Exception? HdrEyeAdaptSpeed;
        public Exception? HdrBlurRadius;
        public Exception? HdrBlurPasses;
        public Exception? HdrEmissiveMult;
        public Exception? HdrTargetLum;
        public Exception? HdrUpperLumClamp;
        public Exception? HdrBrightScale;
        public Exception? HdrBrightClamp;
        public Exception? HdrLumRampNoTex;
        public Exception? HdrLumRampMin;
        public Exception? HdrLumRampMax;
        public Exception? HdrSunlightDimmer;
        public Exception? HdrGrassDimmer;
        public Exception? HdrTreeDimmer;
        public Exception? WindSpeed;
        public Exception? CloudSpeedLower;
        public Exception? CloudSpeedUpper;
        public Exception? TransDelta;
        public Exception? SunGlare;
        public Exception? SunDamage;
        public Exception? PrecipitationBeginFadeIn;
        public Exception? PrecipitationEndFadeOut;
        public Exception? ThunderLightningBeginFadeIn;
        public Exception? ThunderLightningEndFadeOut;
        public Exception? ThunderLightningFrequency;
        public Exception? Classification;
        public Exception? LightningColor;
        public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound_ErrorMask?>>?>? Sounds;
        public Exception? FNAMDataTypeState;
        public Exception? HNAMDataTypeState;
        public Exception? DATADataTypeState;
        #endregion

        #region IErrorMask
        public override object? GetNthMask(int index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    return TextureLowerLayer;
                case Weather_FieldIndex.TextureUpperLayer:
                    return TextureUpperLayer;
                case Weather_FieldIndex.Model:
                    return Model;
                case Weather_FieldIndex.WeatherTypes:
                    return WeatherTypes;
                case Weather_FieldIndex.FogDayNear:
                    return FogDayNear;
                case Weather_FieldIndex.FogDayFar:
                    return FogDayFar;
                case Weather_FieldIndex.FogNightNear:
                    return FogNightNear;
                case Weather_FieldIndex.FogNightFar:
                    return FogNightFar;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    return HdrEyeAdaptSpeed;
                case Weather_FieldIndex.HdrBlurRadius:
                    return HdrBlurRadius;
                case Weather_FieldIndex.HdrBlurPasses:
                    return HdrBlurPasses;
                case Weather_FieldIndex.HdrEmissiveMult:
                    return HdrEmissiveMult;
                case Weather_FieldIndex.HdrTargetLum:
                    return HdrTargetLum;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    return HdrUpperLumClamp;
                case Weather_FieldIndex.HdrBrightScale:
                    return HdrBrightScale;
                case Weather_FieldIndex.HdrBrightClamp:
                    return HdrBrightClamp;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    return HdrLumRampNoTex;
                case Weather_FieldIndex.HdrLumRampMin:
                    return HdrLumRampMin;
                case Weather_FieldIndex.HdrLumRampMax:
                    return HdrLumRampMax;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    return HdrSunlightDimmer;
                case Weather_FieldIndex.HdrGrassDimmer:
                    return HdrGrassDimmer;
                case Weather_FieldIndex.HdrTreeDimmer:
                    return HdrTreeDimmer;
                case Weather_FieldIndex.WindSpeed:
                    return WindSpeed;
                case Weather_FieldIndex.CloudSpeedLower:
                    return CloudSpeedLower;
                case Weather_FieldIndex.CloudSpeedUpper:
                    return CloudSpeedUpper;
                case Weather_FieldIndex.TransDelta:
                    return TransDelta;
                case Weather_FieldIndex.SunGlare:
                    return SunGlare;
                case Weather_FieldIndex.SunDamage:
                    return SunDamage;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return PrecipitationBeginFadeIn;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return PrecipitationEndFadeOut;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return ThunderLightningBeginFadeIn;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return ThunderLightningEndFadeOut;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return ThunderLightningFrequency;
                case Weather_FieldIndex.Classification:
                    return Classification;
                case Weather_FieldIndex.LightningColor:
                    return LightningColor;
                case Weather_FieldIndex.Sounds:
                    return Sounds;
                case Weather_FieldIndex.FNAMDataTypeState:
                    return FNAMDataTypeState;
                case Weather_FieldIndex.HNAMDataTypeState:
                    return HNAMDataTypeState;
                case Weather_FieldIndex.DATADataTypeState:
                    return DATADataTypeState;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    this.TextureLowerLayer = ex;
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    this.TextureUpperLayer = ex;
                    break;
                case Weather_FieldIndex.Model:
                    this.Model = new MaskItem<Exception?, Model_ErrorMask?>(ex, null);
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    this.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType_ErrorMask?>>?>(ex, null);
                    break;
                case Weather_FieldIndex.FogDayNear:
                    this.FogDayNear = ex;
                    break;
                case Weather_FieldIndex.FogDayFar:
                    this.FogDayFar = ex;
                    break;
                case Weather_FieldIndex.FogNightNear:
                    this.FogNightNear = ex;
                    break;
                case Weather_FieldIndex.FogNightFar:
                    this.FogNightFar = ex;
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    this.HdrEyeAdaptSpeed = ex;
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    this.HdrBlurRadius = ex;
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    this.HdrBlurPasses = ex;
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    this.HdrEmissiveMult = ex;
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    this.HdrTargetLum = ex;
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    this.HdrUpperLumClamp = ex;
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    this.HdrBrightScale = ex;
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    this.HdrBrightClamp = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    this.HdrLumRampNoTex = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    this.HdrLumRampMin = ex;
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    this.HdrLumRampMax = ex;
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    this.HdrSunlightDimmer = ex;
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    this.HdrGrassDimmer = ex;
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    this.HdrTreeDimmer = ex;
                    break;
                case Weather_FieldIndex.WindSpeed:
                    this.WindSpeed = ex;
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    this.CloudSpeedLower = ex;
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    this.CloudSpeedUpper = ex;
                    break;
                case Weather_FieldIndex.TransDelta:
                    this.TransDelta = ex;
                    break;
                case Weather_FieldIndex.SunGlare:
                    this.SunGlare = ex;
                    break;
                case Weather_FieldIndex.SunDamage:
                    this.SunDamage = ex;
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    this.PrecipitationBeginFadeIn = ex;
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    this.PrecipitationEndFadeOut = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    this.ThunderLightningBeginFadeIn = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    this.ThunderLightningEndFadeOut = ex;
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    this.ThunderLightningFrequency = ex;
                    break;
                case Weather_FieldIndex.Classification:
                    this.Classification = ex;
                    break;
                case Weather_FieldIndex.LightningColor:
                    this.LightningColor = ex;
                    break;
                case Weather_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound_ErrorMask?>>?>(ex, null);
                    break;
                case Weather_FieldIndex.FNAMDataTypeState:
                    this.FNAMDataTypeState = ex;
                    break;
                case Weather_FieldIndex.HNAMDataTypeState:
                    this.HNAMDataTypeState = ex;
                    break;
                case Weather_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.TextureLowerLayer:
                    this.TextureLowerLayer = (Exception)obj;
                    break;
                case Weather_FieldIndex.TextureUpperLayer:
                    this.TextureUpperLayer = (Exception)obj;
                    break;
                case Weather_FieldIndex.Model:
                    this.Model = (MaskItem<Exception?, Model_ErrorMask?>?)obj;
                    break;
                case Weather_FieldIndex.WeatherTypes:
                    this.WeatherTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType_ErrorMask?>>?>)obj;
                    break;
                case Weather_FieldIndex.FogDayNear:
                    this.FogDayNear = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogDayFar:
                    this.FogDayFar = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogNightNear:
                    this.FogNightNear = (Exception)obj;
                    break;
                case Weather_FieldIndex.FogNightFar:
                    this.FogNightFar = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrEyeAdaptSpeed:
                    this.HdrEyeAdaptSpeed = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBlurRadius:
                    this.HdrBlurRadius = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBlurPasses:
                    this.HdrBlurPasses = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrEmissiveMult:
                    this.HdrEmissiveMult = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrTargetLum:
                    this.HdrTargetLum = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrUpperLumClamp:
                    this.HdrUpperLumClamp = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBrightScale:
                    this.HdrBrightScale = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrBrightClamp:
                    this.HdrBrightClamp = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampNoTex:
                    this.HdrLumRampNoTex = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampMin:
                    this.HdrLumRampMin = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrLumRampMax:
                    this.HdrLumRampMax = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrSunlightDimmer:
                    this.HdrSunlightDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrGrassDimmer:
                    this.HdrGrassDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.HdrTreeDimmer:
                    this.HdrTreeDimmer = (Exception)obj;
                    break;
                case Weather_FieldIndex.WindSpeed:
                    this.WindSpeed = (Exception)obj;
                    break;
                case Weather_FieldIndex.CloudSpeedLower:
                    this.CloudSpeedLower = (Exception)obj;
                    break;
                case Weather_FieldIndex.CloudSpeedUpper:
                    this.CloudSpeedUpper = (Exception)obj;
                    break;
                case Weather_FieldIndex.TransDelta:
                    this.TransDelta = (Exception)obj;
                    break;
                case Weather_FieldIndex.SunGlare:
                    this.SunGlare = (Exception)obj;
                    break;
                case Weather_FieldIndex.SunDamage:
                    this.SunDamage = (Exception)obj;
                    break;
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    this.PrecipitationBeginFadeIn = (Exception)obj;
                    break;
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    this.PrecipitationEndFadeOut = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    this.ThunderLightningBeginFadeIn = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    this.ThunderLightningEndFadeOut = (Exception)obj;
                    break;
                case Weather_FieldIndex.ThunderLightningFrequency:
                    this.ThunderLightningFrequency = (Exception)obj;
                    break;
                case Weather_FieldIndex.Classification:
                    this.Classification = (Exception)obj;
                    break;
                case Weather_FieldIndex.LightningColor:
                    this.LightningColor = (Exception)obj;
                    break;
                case Weather_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound_ErrorMask?>>?>)obj;
                    break;
                case Weather_FieldIndex.FNAMDataTypeState:
                    this.FNAMDataTypeState = (Exception)obj;
                    break;
                case Weather_FieldIndex.HNAMDataTypeState:
                    this.HNAMDataTypeState = (Exception)obj;
                    break;
                case Weather_FieldIndex.DATADataTypeState:
                    this.DATADataTypeState = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (TextureLowerLayer != null) return true;
            if (TextureUpperLayer != null) return true;
            if (Model != null) return true;
            if (WeatherTypes != null) return true;
            if (FogDayNear != null) return true;
            if (FogDayFar != null) return true;
            if (FogNightNear != null) return true;
            if (FogNightFar != null) return true;
            if (HdrEyeAdaptSpeed != null) return true;
            if (HdrBlurRadius != null) return true;
            if (HdrBlurPasses != null) return true;
            if (HdrEmissiveMult != null) return true;
            if (HdrTargetLum != null) return true;
            if (HdrUpperLumClamp != null) return true;
            if (HdrBrightScale != null) return true;
            if (HdrBrightClamp != null) return true;
            if (HdrLumRampNoTex != null) return true;
            if (HdrLumRampMin != null) return true;
            if (HdrLumRampMax != null) return true;
            if (HdrSunlightDimmer != null) return true;
            if (HdrGrassDimmer != null) return true;
            if (HdrTreeDimmer != null) return true;
            if (WindSpeed != null) return true;
            if (CloudSpeedLower != null) return true;
            if (CloudSpeedUpper != null) return true;
            if (TransDelta != null) return true;
            if (SunGlare != null) return true;
            if (SunDamage != null) return true;
            if (PrecipitationBeginFadeIn != null) return true;
            if (PrecipitationEndFadeOut != null) return true;
            if (ThunderLightningBeginFadeIn != null) return true;
            if (ThunderLightningEndFadeOut != null) return true;
            if (ThunderLightningFrequency != null) return true;
            if (Classification != null) return true;
            if (LightningColor != null) return true;
            if (Sounds != null) return true;
            if (FNAMDataTypeState != null) return true;
            if (HNAMDataTypeState != null) return true;
            if (DATADataTypeState != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Weather_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"TextureLowerLayer => {TextureLowerLayer}");
            fg.AppendLine($"TextureUpperLayer => {TextureUpperLayer}");
            Model?.ToString(fg);
            fg.AppendLine("WeatherTypes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (WeatherTypes != null)
                {
                    if (WeatherTypes.Overall != null)
                    {
                        fg.AppendLine(WeatherTypes.Overall.ToString());
                    }
                    if (WeatherTypes.Specific != null)
                    {
                        foreach (var subItem in WeatherTypes.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"FogDayNear => {FogDayNear}");
            fg.AppendLine($"FogDayFar => {FogDayFar}");
            fg.AppendLine($"FogNightNear => {FogNightNear}");
            fg.AppendLine($"FogNightFar => {FogNightFar}");
            fg.AppendLine($"HdrEyeAdaptSpeed => {HdrEyeAdaptSpeed}");
            fg.AppendLine($"HdrBlurRadius => {HdrBlurRadius}");
            fg.AppendLine($"HdrBlurPasses => {HdrBlurPasses}");
            fg.AppendLine($"HdrEmissiveMult => {HdrEmissiveMult}");
            fg.AppendLine($"HdrTargetLum => {HdrTargetLum}");
            fg.AppendLine($"HdrUpperLumClamp => {HdrUpperLumClamp}");
            fg.AppendLine($"HdrBrightScale => {HdrBrightScale}");
            fg.AppendLine($"HdrBrightClamp => {HdrBrightClamp}");
            fg.AppendLine($"HdrLumRampNoTex => {HdrLumRampNoTex}");
            fg.AppendLine($"HdrLumRampMin => {HdrLumRampMin}");
            fg.AppendLine($"HdrLumRampMax => {HdrLumRampMax}");
            fg.AppendLine($"HdrSunlightDimmer => {HdrSunlightDimmer}");
            fg.AppendLine($"HdrGrassDimmer => {HdrGrassDimmer}");
            fg.AppendLine($"HdrTreeDimmer => {HdrTreeDimmer}");
            fg.AppendLine($"WindSpeed => {WindSpeed}");
            fg.AppendLine($"CloudSpeedLower => {CloudSpeedLower}");
            fg.AppendLine($"CloudSpeedUpper => {CloudSpeedUpper}");
            fg.AppendLine($"TransDelta => {TransDelta}");
            fg.AppendLine($"SunGlare => {SunGlare}");
            fg.AppendLine($"SunDamage => {SunDamage}");
            fg.AppendLine($"PrecipitationBeginFadeIn => {PrecipitationBeginFadeIn}");
            fg.AppendLine($"PrecipitationEndFadeOut => {PrecipitationEndFadeOut}");
            fg.AppendLine($"ThunderLightningBeginFadeIn => {ThunderLightningBeginFadeIn}");
            fg.AppendLine($"ThunderLightningEndFadeOut => {ThunderLightningEndFadeOut}");
            fg.AppendLine($"ThunderLightningFrequency => {ThunderLightningFrequency}");
            fg.AppendLine($"Classification => {Classification}");
            fg.AppendLine($"LightningColor => {LightningColor}");
            fg.AppendLine("Sounds =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Sounds != null)
                {
                    if (Sounds.Overall != null)
                    {
                        fg.AppendLine(Sounds.Overall.ToString());
                    }
                    if (Sounds.Specific != null)
                    {
                        foreach (var subItem in Sounds.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"FNAMDataTypeState => {FNAMDataTypeState}");
            fg.AppendLine($"HNAMDataTypeState => {HNAMDataTypeState}");
            fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
        }
        #endregion

        #region Combine
        public Weather_ErrorMask Combine(Weather_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new Weather_ErrorMask();
            ret.TextureLowerLayer = this.TextureLowerLayer.Combine(rhs.TextureLowerLayer);
            ret.TextureUpperLayer = this.TextureUpperLayer.Combine(rhs.TextureUpperLayer);
            ret.Model = new MaskItem<Exception?, Model_ErrorMask?>(ExceptionExt.Combine(this.Model?.Overall, rhs.Model?.Overall), (this.Model?.Specific as IErrorMask<Model_ErrorMask>)?.Combine(rhs.Model?.Specific));
            ret.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType_ErrorMask?>>?>(ExceptionExt.Combine(this.WeatherTypes?.Overall, rhs.WeatherTypes?.Overall), ExceptionExt.Combine(this.WeatherTypes?.Specific, rhs.WeatherTypes?.Specific));
            ret.FogDayNear = this.FogDayNear.Combine(rhs.FogDayNear);
            ret.FogDayFar = this.FogDayFar.Combine(rhs.FogDayFar);
            ret.FogNightNear = this.FogNightNear.Combine(rhs.FogNightNear);
            ret.FogNightFar = this.FogNightFar.Combine(rhs.FogNightFar);
            ret.HdrEyeAdaptSpeed = this.HdrEyeAdaptSpeed.Combine(rhs.HdrEyeAdaptSpeed);
            ret.HdrBlurRadius = this.HdrBlurRadius.Combine(rhs.HdrBlurRadius);
            ret.HdrBlurPasses = this.HdrBlurPasses.Combine(rhs.HdrBlurPasses);
            ret.HdrEmissiveMult = this.HdrEmissiveMult.Combine(rhs.HdrEmissiveMult);
            ret.HdrTargetLum = this.HdrTargetLum.Combine(rhs.HdrTargetLum);
            ret.HdrUpperLumClamp = this.HdrUpperLumClamp.Combine(rhs.HdrUpperLumClamp);
            ret.HdrBrightScale = this.HdrBrightScale.Combine(rhs.HdrBrightScale);
            ret.HdrBrightClamp = this.HdrBrightClamp.Combine(rhs.HdrBrightClamp);
            ret.HdrLumRampNoTex = this.HdrLumRampNoTex.Combine(rhs.HdrLumRampNoTex);
            ret.HdrLumRampMin = this.HdrLumRampMin.Combine(rhs.HdrLumRampMin);
            ret.HdrLumRampMax = this.HdrLumRampMax.Combine(rhs.HdrLumRampMax);
            ret.HdrSunlightDimmer = this.HdrSunlightDimmer.Combine(rhs.HdrSunlightDimmer);
            ret.HdrGrassDimmer = this.HdrGrassDimmer.Combine(rhs.HdrGrassDimmer);
            ret.HdrTreeDimmer = this.HdrTreeDimmer.Combine(rhs.HdrTreeDimmer);
            ret.WindSpeed = this.WindSpeed.Combine(rhs.WindSpeed);
            ret.CloudSpeedLower = this.CloudSpeedLower.Combine(rhs.CloudSpeedLower);
            ret.CloudSpeedUpper = this.CloudSpeedUpper.Combine(rhs.CloudSpeedUpper);
            ret.TransDelta = this.TransDelta.Combine(rhs.TransDelta);
            ret.SunGlare = this.SunGlare.Combine(rhs.SunGlare);
            ret.SunDamage = this.SunDamage.Combine(rhs.SunDamage);
            ret.PrecipitationBeginFadeIn = this.PrecipitationBeginFadeIn.Combine(rhs.PrecipitationBeginFadeIn);
            ret.PrecipitationEndFadeOut = this.PrecipitationEndFadeOut.Combine(rhs.PrecipitationEndFadeOut);
            ret.ThunderLightningBeginFadeIn = this.ThunderLightningBeginFadeIn.Combine(rhs.ThunderLightningBeginFadeIn);
            ret.ThunderLightningEndFadeOut = this.ThunderLightningEndFadeOut.Combine(rhs.ThunderLightningEndFadeOut);
            ret.ThunderLightningFrequency = this.ThunderLightningFrequency.Combine(rhs.ThunderLightningFrequency);
            ret.Classification = this.Classification.Combine(rhs.Classification);
            ret.LightningColor = this.LightningColor.Combine(rhs.LightningColor);
            ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound_ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
            ret.FNAMDataTypeState = this.FNAMDataTypeState.Combine(rhs.FNAMDataTypeState);
            ret.HNAMDataTypeState = this.HNAMDataTypeState.Combine(rhs.HNAMDataTypeState);
            ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
            return ret;
        }
        public static Weather_ErrorMask? Combine(Weather_ErrorMask? lhs, Weather_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new Weather_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new Weather_ErrorMask();
        }
        #endregion

    }
    public class Weather_TranslationMask : OblivionMajorRecord_TranslationMask
    {
        #region Members
        public bool TextureLowerLayer;
        public bool TextureUpperLayer;
        public MaskItem<bool, Model_TranslationMask?> Model;
        public MaskItem<bool, WeatherType_TranslationMask?> WeatherTypes;
        public bool FogDayNear;
        public bool FogDayFar;
        public bool FogNightNear;
        public bool FogNightFar;
        public bool HdrEyeAdaptSpeed;
        public bool HdrBlurRadius;
        public bool HdrBlurPasses;
        public bool HdrEmissiveMult;
        public bool HdrTargetLum;
        public bool HdrUpperLumClamp;
        public bool HdrBrightScale;
        public bool HdrBrightClamp;
        public bool HdrLumRampNoTex;
        public bool HdrLumRampMin;
        public bool HdrLumRampMax;
        public bool HdrSunlightDimmer;
        public bool HdrGrassDimmer;
        public bool HdrTreeDimmer;
        public bool WindSpeed;
        public bool CloudSpeedLower;
        public bool CloudSpeedUpper;
        public bool TransDelta;
        public bool SunGlare;
        public bool SunDamage;
        public bool PrecipitationBeginFadeIn;
        public bool PrecipitationEndFadeOut;
        public bool ThunderLightningBeginFadeIn;
        public bool ThunderLightningEndFadeOut;
        public bool ThunderLightningFrequency;
        public bool Classification;
        public bool LightningColor;
        public MaskItem<bool, WeatherSound_TranslationMask?> Sounds;
        public bool FNAMDataTypeState;
        public bool HNAMDataTypeState;
        public bool DATADataTypeState;
        #endregion

        #region Ctors
        public Weather_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.TextureLowerLayer = defaultOn;
            this.TextureUpperLayer = defaultOn;
            this.Model = new MaskItem<bool, Model_TranslationMask?>(defaultOn, null);
            this.WeatherTypes = new MaskItem<bool, WeatherType_TranslationMask?>(defaultOn, null);
            this.FogDayNear = defaultOn;
            this.FogDayFar = defaultOn;
            this.FogNightNear = defaultOn;
            this.FogNightFar = defaultOn;
            this.HdrEyeAdaptSpeed = defaultOn;
            this.HdrBlurRadius = defaultOn;
            this.HdrBlurPasses = defaultOn;
            this.HdrEmissiveMult = defaultOn;
            this.HdrTargetLum = defaultOn;
            this.HdrUpperLumClamp = defaultOn;
            this.HdrBrightScale = defaultOn;
            this.HdrBrightClamp = defaultOn;
            this.HdrLumRampNoTex = defaultOn;
            this.HdrLumRampMin = defaultOn;
            this.HdrLumRampMax = defaultOn;
            this.HdrSunlightDimmer = defaultOn;
            this.HdrGrassDimmer = defaultOn;
            this.HdrTreeDimmer = defaultOn;
            this.WindSpeed = defaultOn;
            this.CloudSpeedLower = defaultOn;
            this.CloudSpeedUpper = defaultOn;
            this.TransDelta = defaultOn;
            this.SunGlare = defaultOn;
            this.SunDamage = defaultOn;
            this.PrecipitationBeginFadeIn = defaultOn;
            this.PrecipitationEndFadeOut = defaultOn;
            this.ThunderLightningBeginFadeIn = defaultOn;
            this.ThunderLightningEndFadeOut = defaultOn;
            this.ThunderLightningFrequency = defaultOn;
            this.Classification = defaultOn;
            this.LightningColor = defaultOn;
            this.Sounds = new MaskItem<bool, WeatherSound_TranslationMask?>(defaultOn, null);
            this.FNAMDataTypeState = defaultOn;
            this.HNAMDataTypeState = defaultOn;
            this.DATADataTypeState = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((TextureLowerLayer, null));
            ret.Add((TextureUpperLayer, null));
            ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            ret.Add((WeatherTypes?.Overall ?? true, WeatherTypes?.Specific?.GetCrystal()));
            ret.Add((FogDayNear, null));
            ret.Add((FogDayFar, null));
            ret.Add((FogNightNear, null));
            ret.Add((FogNightFar, null));
            ret.Add((HdrEyeAdaptSpeed, null));
            ret.Add((HdrBlurRadius, null));
            ret.Add((HdrBlurPasses, null));
            ret.Add((HdrEmissiveMult, null));
            ret.Add((HdrTargetLum, null));
            ret.Add((HdrUpperLumClamp, null));
            ret.Add((HdrBrightScale, null));
            ret.Add((HdrBrightClamp, null));
            ret.Add((HdrLumRampNoTex, null));
            ret.Add((HdrLumRampMin, null));
            ret.Add((HdrLumRampMax, null));
            ret.Add((HdrSunlightDimmer, null));
            ret.Add((HdrGrassDimmer, null));
            ret.Add((HdrTreeDimmer, null));
            ret.Add((WindSpeed, null));
            ret.Add((CloudSpeedLower, null));
            ret.Add((CloudSpeedUpper, null));
            ret.Add((TransDelta, null));
            ret.Add((SunGlare, null));
            ret.Add((SunDamage, null));
            ret.Add((PrecipitationBeginFadeIn, null));
            ret.Add((PrecipitationEndFadeOut, null));
            ret.Add((ThunderLightningBeginFadeIn, null));
            ret.Add((ThunderLightningEndFadeOut, null));
            ret.Add((ThunderLightningFrequency, null));
            ret.Add((Classification, null));
            ret.Add((LightningColor, null));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            ret.Add((FNAMDataTypeState, null));
            ret.Add((HNAMDataTypeState, null));
            ret.Add((DATADataTypeState, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WeatherBinaryWriteTranslation Instance = new WeatherBinaryWriteTranslation();

        public static void Write_Embedded(
            IWeatherGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IWeatherGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureLowerLayer,
                header: recordTypeConverter.ConvertToCustom(Weather_Registration.CNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureUpperLayer,
                header: recordTypeConverter.ConvertToCustom(Weather_Registration.DNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            {
                var loquiItem = item.Model;
                if (loquiItem != null)
                {
                    ((ModelBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherTypeGetter>.Instance.Write(
                writer: writer,
                items: item.WeatherTypes,
                recordType: Weather_Registration.NAM0_HEADER,
                transl: (MutagenWriter subWriter, IWeatherTypeGetter subItem) =>
                {
                    {
                        var loquiItem = subItem;
                        ((WeatherTypeBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            if (item.FNAMDataTypeState.HasFlag(Weather.FNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.FNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FogDayNear);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FogDayFar);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FogNightNear);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FogNightFar);
                }
            }
            if (item.HNAMDataTypeState.HasFlag(Weather.HNAMDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.HNAM_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrEyeAdaptSpeed);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrBlurRadius);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrBlurPasses);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrEmissiveMult);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrTargetLum);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrUpperLumClamp);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrBrightScale);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrBrightClamp);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrLumRampNoTex);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrLumRampMin);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrLumRampMax);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrSunlightDimmer);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrGrassDimmer);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HdrTreeDimmer);
                }
            }
            if (item.DATADataTypeState.HasFlag(Weather.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Weather_Registration.DATA_HEADER)))
                {
                    writer.Write(item.WindSpeed);
                    writer.Write(item.CloudSpeedLower);
                    writer.Write(item.CloudSpeedUpper);
                    writer.Write(item.TransDelta);
                    writer.Write(item.SunGlare);
                    writer.Write(item.SunDamage);
                    writer.Write(item.PrecipitationBeginFadeIn);
                    writer.Write(item.PrecipitationEndFadeOut);
                    writer.Write(item.ThunderLightningBeginFadeIn);
                    writer.Write(item.ThunderLightningEndFadeOut);
                    writer.Write(item.ThunderLightningFrequency);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Write(
                        writer,
                        item.Classification,
                        length: 1);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.LightningColor);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IWeatherSoundGetter subItem) =>
                {
                    {
                        var loquiItem = subItem;
                        if (loquiItem != null)
                        {
                            ((WeatherSoundBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            IWeatherGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Weather_Registration.WTHR_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeatherGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeatherGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IWeatherGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static WeatherBinaryCreateTranslation Instance = new WeatherBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WeatherBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IWeatherGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => WeatherCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region TextureLowerLayer
        private int? _TextureLowerLayerLocation;
        public String? TextureLowerLayer => _TextureLowerLayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureLowerLayerLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region TextureUpperLayer
        private int? _TextureUpperLayerLocation;
        public String? TextureUpperLayer => _TextureUpperLayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureUpperLayerLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        public IReadOnlySetList<IWeatherTypeGetter> WeatherTypes { get; private set; } = EmptySetList<WeatherTypeBinaryOverlay>.Instance;
        private int? _FNAMLocation;
        public Weather.FNAMDataType FNAMDataTypeState { get; private set; }
        #region FogDayNear
        private int _FogDayNearLocation => _FNAMLocation!.Value + 0x0;
        private bool _FogDayNear_IsSet => _FNAMLocation.HasValue;
        public Single FogDayNear => _FogDayNear_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogDayNearLocation, 4)) : default;
        #endregion
        #region FogDayFar
        private int _FogDayFarLocation => _FNAMLocation!.Value + 0x4;
        private bool _FogDayFar_IsSet => _FNAMLocation.HasValue;
        public Single FogDayFar => _FogDayFar_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogDayFarLocation, 4)) : default;
        #endregion
        #region FogNightNear
        private int _FogNightNearLocation => _FNAMLocation!.Value + 0x8;
        private bool _FogNightNear_IsSet => _FNAMLocation.HasValue;
        public Single FogNightNear => _FogNightNear_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogNightNearLocation, 4)) : default;
        #endregion
        #region FogNightFar
        private int _FogNightFarLocation => _FNAMLocation!.Value + 0xC;
        private bool _FogNightFar_IsSet => _FNAMLocation.HasValue;
        public Single FogNightFar => _FogNightFar_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FogNightFarLocation, 4)) : default;
        #endregion
        private int? _HNAMLocation;
        public Weather.HNAMDataType HNAMDataTypeState { get; private set; }
        #region HdrEyeAdaptSpeed
        private int _HdrEyeAdaptSpeedLocation => _HNAMLocation!.Value + 0x0;
        private bool _HdrEyeAdaptSpeed_IsSet => _HNAMLocation.HasValue;
        public Single HdrEyeAdaptSpeed => _HdrEyeAdaptSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrEyeAdaptSpeedLocation, 4)) : default;
        #endregion
        #region HdrBlurRadius
        private int _HdrBlurRadiusLocation => _HNAMLocation!.Value + 0x4;
        private bool _HdrBlurRadius_IsSet => _HNAMLocation.HasValue;
        public Single HdrBlurRadius => _HdrBlurRadius_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrBlurRadiusLocation, 4)) : default;
        #endregion
        #region HdrBlurPasses
        private int _HdrBlurPassesLocation => _HNAMLocation!.Value + 0x8;
        private bool _HdrBlurPasses_IsSet => _HNAMLocation.HasValue;
        public Single HdrBlurPasses => _HdrBlurPasses_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrBlurPassesLocation, 4)) : default;
        #endregion
        #region HdrEmissiveMult
        private int _HdrEmissiveMultLocation => _HNAMLocation!.Value + 0xC;
        private bool _HdrEmissiveMult_IsSet => _HNAMLocation.HasValue;
        public Single HdrEmissiveMult => _HdrEmissiveMult_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrEmissiveMultLocation, 4)) : default;
        #endregion
        #region HdrTargetLum
        private int _HdrTargetLumLocation => _HNAMLocation!.Value + 0x10;
        private bool _HdrTargetLum_IsSet => _HNAMLocation.HasValue;
        public Single HdrTargetLum => _HdrTargetLum_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrTargetLumLocation, 4)) : default;
        #endregion
        #region HdrUpperLumClamp
        private int _HdrUpperLumClampLocation => _HNAMLocation!.Value + 0x14;
        private bool _HdrUpperLumClamp_IsSet => _HNAMLocation.HasValue;
        public Single HdrUpperLumClamp => _HdrUpperLumClamp_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrUpperLumClampLocation, 4)) : default;
        #endregion
        #region HdrBrightScale
        private int _HdrBrightScaleLocation => _HNAMLocation!.Value + 0x18;
        private bool _HdrBrightScale_IsSet => _HNAMLocation.HasValue;
        public Single HdrBrightScale => _HdrBrightScale_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrBrightScaleLocation, 4)) : default;
        #endregion
        #region HdrBrightClamp
        private int _HdrBrightClampLocation => _HNAMLocation!.Value + 0x1C;
        private bool _HdrBrightClamp_IsSet => _HNAMLocation.HasValue;
        public Single HdrBrightClamp => _HdrBrightClamp_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrBrightClampLocation, 4)) : default;
        #endregion
        #region HdrLumRampNoTex
        private int _HdrLumRampNoTexLocation => _HNAMLocation!.Value + 0x20;
        private bool _HdrLumRampNoTex_IsSet => _HNAMLocation.HasValue;
        public Single HdrLumRampNoTex => _HdrLumRampNoTex_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrLumRampNoTexLocation, 4)) : default;
        #endregion
        #region HdrLumRampMin
        private int _HdrLumRampMinLocation => _HNAMLocation!.Value + 0x24;
        private bool _HdrLumRampMin_IsSet => _HNAMLocation.HasValue;
        public Single HdrLumRampMin => _HdrLumRampMin_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrLumRampMinLocation, 4)) : default;
        #endregion
        #region HdrLumRampMax
        private int _HdrLumRampMaxLocation => _HNAMLocation!.Value + 0x28;
        private bool _HdrLumRampMax_IsSet => _HNAMLocation.HasValue;
        public Single HdrLumRampMax => _HdrLumRampMax_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrLumRampMaxLocation, 4)) : default;
        #endregion
        #region HdrSunlightDimmer
        private int _HdrSunlightDimmerLocation => _HNAMLocation!.Value + 0x2C;
        private bool _HdrSunlightDimmer_IsSet => _HNAMLocation.HasValue;
        public Single HdrSunlightDimmer => _HdrSunlightDimmer_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrSunlightDimmerLocation, 4)) : default;
        #endregion
        #region HdrGrassDimmer
        private int _HdrGrassDimmerLocation => _HNAMLocation!.Value + 0x30;
        private bool _HdrGrassDimmer_IsSet => _HNAMLocation.HasValue;
        public Single HdrGrassDimmer => _HdrGrassDimmer_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrGrassDimmerLocation, 4)) : default;
        #endregion
        #region HdrTreeDimmer
        private int _HdrTreeDimmerLocation => _HNAMLocation!.Value + 0x34;
        private bool _HdrTreeDimmer_IsSet => _HNAMLocation.HasValue;
        public Single HdrTreeDimmer => _HdrTreeDimmer_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HdrTreeDimmerLocation, 4)) : default;
        #endregion
        private int? _DATALocation;
        public Weather.DATADataType DATADataTypeState { get; private set; }
        #region WindSpeed
        private int _WindSpeedLocation => _DATALocation!.Value + 0x0;
        private bool _WindSpeed_IsSet => _DATALocation.HasValue;
        public Byte WindSpeed => _WindSpeed_IsSet ? _data.Span[_WindSpeedLocation] : default;
        #endregion
        #region CloudSpeedLower
        private int _CloudSpeedLowerLocation => _DATALocation!.Value + 0x1;
        private bool _CloudSpeedLower_IsSet => _DATALocation.HasValue;
        public Byte CloudSpeedLower => _CloudSpeedLower_IsSet ? _data.Span[_CloudSpeedLowerLocation] : default;
        #endregion
        #region CloudSpeedUpper
        private int _CloudSpeedUpperLocation => _DATALocation!.Value + 0x2;
        private bool _CloudSpeedUpper_IsSet => _DATALocation.HasValue;
        public Byte CloudSpeedUpper => _CloudSpeedUpper_IsSet ? _data.Span[_CloudSpeedUpperLocation] : default;
        #endregion
        #region TransDelta
        private int _TransDeltaLocation => _DATALocation!.Value + 0x3;
        private bool _TransDelta_IsSet => _DATALocation.HasValue;
        public Byte TransDelta => _TransDelta_IsSet ? _data.Span[_TransDeltaLocation] : default;
        #endregion
        #region SunGlare
        private int _SunGlareLocation => _DATALocation!.Value + 0x4;
        private bool _SunGlare_IsSet => _DATALocation.HasValue;
        public Byte SunGlare => _SunGlare_IsSet ? _data.Span[_SunGlareLocation] : default;
        #endregion
        #region SunDamage
        private int _SunDamageLocation => _DATALocation!.Value + 0x5;
        private bool _SunDamage_IsSet => _DATALocation.HasValue;
        public Byte SunDamage => _SunDamage_IsSet ? _data.Span[_SunDamageLocation] : default;
        #endregion
        #region PrecipitationBeginFadeIn
        private int _PrecipitationBeginFadeInLocation => _DATALocation!.Value + 0x6;
        private bool _PrecipitationBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Byte PrecipitationBeginFadeIn => _PrecipitationBeginFadeIn_IsSet ? _data.Span[_PrecipitationBeginFadeInLocation] : default;
        #endregion
        #region PrecipitationEndFadeOut
        private int _PrecipitationEndFadeOutLocation => _DATALocation!.Value + 0x7;
        private bool _PrecipitationEndFadeOut_IsSet => _DATALocation.HasValue;
        public Byte PrecipitationEndFadeOut => _PrecipitationEndFadeOut_IsSet ? _data.Span[_PrecipitationEndFadeOutLocation] : default;
        #endregion
        #region ThunderLightningBeginFadeIn
        private int _ThunderLightningBeginFadeInLocation => _DATALocation!.Value + 0x8;
        private bool _ThunderLightningBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Byte ThunderLightningBeginFadeIn => _ThunderLightningBeginFadeIn_IsSet ? _data.Span[_ThunderLightningBeginFadeInLocation] : default;
        #endregion
        #region ThunderLightningEndFadeOut
        private int _ThunderLightningEndFadeOutLocation => _DATALocation!.Value + 0x9;
        private bool _ThunderLightningEndFadeOut_IsSet => _DATALocation.HasValue;
        public Byte ThunderLightningEndFadeOut => _ThunderLightningEndFadeOut_IsSet ? _data.Span[_ThunderLightningEndFadeOutLocation] : default;
        #endregion
        #region ThunderLightningFrequency
        private int _ThunderLightningFrequencyLocation => _DATALocation!.Value + 0xA;
        private bool _ThunderLightningFrequency_IsSet => _DATALocation.HasValue;
        public Byte ThunderLightningFrequency => _ThunderLightningFrequency_IsSet ? _data.Span[_ThunderLightningFrequencyLocation] : default;
        #endregion
        #region Classification
        private int _ClassificationLocation => _DATALocation!.Value + 0xB;
        private bool _Classification_IsSet => _DATALocation.HasValue;
        public Weather.WeatherClassification Classification => _Classification_IsSet ? (Weather.WeatherClassification)_data.Span.Slice(_ClassificationLocation, 1)[0] : default;
        #endregion
        #region LightningColor
        private int _LightningColorLocation => _DATALocation!.Value + 0xC;
        private bool _LightningColor_IsSet => _DATALocation.HasValue;
        public Color LightningColor => _LightningColor_IsSet ? _data.Span.Slice(_LightningColorLocation, 3).ReadColor() : default;
        #endregion
        public IReadOnlySetList<IWeatherSoundGetter> Sounds { get; private set; } = EmptySetList<WeatherSoundBinaryOverlay>.Instance;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WeatherBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WeatherBinaryOverlay WeatherFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new WeatherBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E43: // CNAM
                {
                    _TextureLowerLayerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureLowerLayer);
                }
                case 0x4D414E44: // DNAM
                {
                    _TextureUpperLayerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.TextureUpperLayer);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Model);
                }
                case 0x304D414E: // NAM0
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.WeatherTypes = BinaryOverlaySetList<WeatherTypeBinaryOverlay>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 16,
                        getter: (s, p) => WeatherTypeBinaryOverlay.WeatherTypeFactory(new BinaryMemoryReadStream(s), p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.WeatherTypes);
                }
                case 0x4D414E46: // FNAM
                {
                    _FNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.FNAMDataTypeState = Weather.FNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.FogNightFar);
                }
                case 0x4D414E48: // HNAM
                {
                    _HNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.HNAMDataTypeState = Weather.HNAMDataType.Has;
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.HdrTreeDimmer);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Weather.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.LightningColor);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Sounds = BinaryOverlaySetList<WeatherSoundBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => WeatherSoundBinaryOverlay.WeatherSoundFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Weather_FieldIndex.Sounds);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

