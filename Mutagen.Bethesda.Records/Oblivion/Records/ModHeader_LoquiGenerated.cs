/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ModHeader :
        IModHeader,
        ILoquiObjectSetter<ModHeader>,
        IEquatable<ModHeader>,
        IEqualsMask
    {
        #region Ctor
        public ModHeader()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public ModHeader.HeaderFlag Flags { get; set; }
        #endregion
        #region FormID
        public UInt32 FormID { get; set; }
        #endregion
        #region Version
        public Int32 Version { get; set; }
        #endregion
        #region Stats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ModStats _Stats = new ModStats();
        public ModStats Stats
        {
            get => _Stats;
            set => _Stats = value ?? new ModStats();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModStatsGetter IModHeaderGetter.Stats => _Stats;
        #endregion
        #region TypeOffsets
        public bool TypeOffsets_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.TypeOffsets];
            set => _hasBeenSetTracker[(int)ModHeader_FieldIndex.TypeOffsets] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IModHeaderGetter.TypeOffsets_IsSet => TypeOffsets_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[] _TypeOffsets;
        public Byte[] TypeOffsets
        {
            get => this._TypeOffsets;
            set => TypeOffsets_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IModHeaderGetter.TypeOffsets => this.TypeOffsets;
        public void TypeOffsets_Set(
            Byte[] value,
            bool markSet = true)
        {
            _TypeOffsets = value;
            _hasBeenSetTracker[(int)ModHeader_FieldIndex.TypeOffsets] = markSet;
        }
        public void TypeOffsets_Unset()
        {
            this.TypeOffsets_Set(default(Byte[]), false);
        }
        #endregion
        #region Deleted
        public bool Deleted_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Deleted];
            set => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Deleted] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IModHeaderGetter.Deleted_IsSet => Deleted_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[] _Deleted;
        public Byte[] Deleted
        {
            get => this._Deleted;
            set => Deleted_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlySpan<Byte> IModHeaderGetter.Deleted => this.Deleted;
        public void Deleted_Set(
            Byte[] value,
            bool markSet = true)
        {
            _Deleted = value;
            _hasBeenSetTracker[(int)ModHeader_FieldIndex.Deleted] = markSet;
        }
        public void Deleted_Unset()
        {
            this.Deleted_Set(default(Byte[]), false);
        }
        #endregion
        #region Author
        public bool Author_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Author];
            set => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Author] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IModHeaderGetter.Author_IsSet => Author_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Author;
        public String Author
        {
            get => this._Author;
            set => Author_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IModHeaderGetter.Author => this.Author;
        public void Author_Set(
            String value,
            bool markSet = true)
        {
            _Author = value;
            _hasBeenSetTracker[(int)ModHeader_FieldIndex.Author] = markSet;
        }
        public void Author_Unset()
        {
            this.Author_Set(default(String), false);
        }
        #endregion
        #region Description
        public bool Description_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Description];
            set => _hasBeenSetTracker[(int)ModHeader_FieldIndex.Description] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IModHeaderGetter.Description_IsSet => Description_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Description;
        public String Description
        {
            get => this._Description;
            set => Description_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IModHeaderGetter.Description => this.Description;
        public void Description_Set(
            String value,
            bool markSet = true)
        {
            _Description = value;
            _hasBeenSetTracker[(int)ModHeader_FieldIndex.Description] = markSet;
        }
        public void Description_Unset()
        {
            this.Description_Set(default(String), false);
        }
        #endregion
        #region MasterReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ExtendedList<MasterReference> _MasterReferences = new ExtendedList<MasterReference>();
        public IExtendedList<MasterReference> MasterReferences => _MasterReferences;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtendedList<MasterReference> IModHeader.MasterReferences => _MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModHeaderGetter.MasterReferences => _MasterReferences;
        #endregion

        #endregion
        #region VestigialData
        public bool VestigialData_IsSet
        {
            get => _hasBeenSetTracker[(int)ModHeader_FieldIndex.VestigialData];
            set => _hasBeenSetTracker[(int)ModHeader_FieldIndex.VestigialData] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IModHeaderGetter.VestigialData_IsSet => VestigialData_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt64 _VestigialData;
        public UInt64 VestigialData
        {
            get => this._VestigialData;
            set => VestigialData_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64 IModHeaderGetter.VestigialData => this.VestigialData;
        public void VestigialData_Set(
            UInt64 value,
            bool markSet = true)
        {
            _VestigialData = value;
            _hasBeenSetTracker[(int)ModHeader_FieldIndex.VestigialData] = markSet;
        }
        public void VestigialData_Unset()
        {
            this.VestigialData_Set(default(UInt64), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IModHeaderGetter rhs)) return false;
            return ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ModHeader obj)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ModHeaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModHeader CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ModHeader() : null;
                    break;
                default:
                    break;
            }
            var ret = new ModHeader();
            ((ModHeaderSetterCommon)((IModHeaderGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ModHeader CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ModHeader_FieldIndex)index)
            {
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return _hasBeenSetTracker[index];
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ModHeader_Registration.TRIGGERING_RECORD_TYPE;
        public async Task WriteToXmlFolder(
            DirectoryPath? dir,
            string name,
            XElement node,
            int counter,
            ErrorMaskBuilder errorMask)
        {
            this.WriteToXml(
                node: node,
                errorMask: errorMask,
                translationMask: null);
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ModHeader();
            ((ModHeaderSetterCommon)((IModHeaderGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static ModHeader GetNew()
        {
            return new ModHeader();
        }

    }
    #endregion

    #region Interface
    public partial interface IModHeader :
        IModHeaderGetter,
        ILoquiObjectSetter<IModHeader>
    {
        new ModHeader.HeaderFlag Flags { get; set; }

        new UInt32 FormID { get; set; }

        new Int32 Version { get; set; }

        new ModStats Stats { get; set; }

        new Byte[] TypeOffsets { get; set; }
        new bool TypeOffsets_IsSet { get; set; }
        void TypeOffsets_Set(Byte[] value, bool hasBeenSet = true);
        void TypeOffsets_Unset();

        new Byte[] Deleted { get; set; }
        new bool Deleted_IsSet { get; set; }
        void Deleted_Set(Byte[] value, bool hasBeenSet = true);
        void Deleted_Unset();

        new String Author { get; set; }
        new bool Author_IsSet { get; set; }
        void Author_Set(String value, bool hasBeenSet = true);
        void Author_Unset();

        new String Description { get; set; }
        new bool Description_IsSet { get; set; }
        void Description_Set(String value, bool hasBeenSet = true);
        void Description_Unset();

        new IExtendedList<MasterReference> MasterReferences { get; }
        new UInt64 VestigialData { get; set; }
        new bool VestigialData_IsSet { get; set; }
        void VestigialData_Set(UInt64 value, bool hasBeenSet = true);
        void VestigialData_Unset();

    }

    public partial interface IModHeaderGetter :
        ILoquiObject,
        ILoquiObject<IModHeaderGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Flags
        ModHeader.HeaderFlag Flags { get; }

        #endregion
        #region FormID
        UInt32 FormID { get; }

        #endregion
        #region Version
        Int32 Version { get; }

        #endregion
        #region Stats
        IModStatsGetter Stats { get; }
        #endregion
        #region TypeOffsets
        ReadOnlySpan<Byte> TypeOffsets { get; }
        bool TypeOffsets_IsSet { get; }

        #endregion
        #region Deleted
        ReadOnlySpan<Byte> Deleted { get; }
        bool Deleted_IsSet { get; }

        #endregion
        #region Author
        String Author { get; }
        bool Author_IsSet { get; }

        #endregion
        #region Description
        String Description { get; }
        bool Description_IsSet { get; }

        #endregion
        #region MasterReferences
        IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; }
        #endregion
        #region VestigialData
        UInt64 VestigialData { get; }
        bool VestigialData_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ModHeaderMixIn
    {
        public static void Clear(this IModHeader item)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ModHeader_Mask<bool> GetEqualsMask(
            this IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModHeaderGetter item,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModHeaderGetter item,
            FileGeneration fg,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModHeaderGetter item,
            ModHeader_Mask<bool?> checkMask)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ModHeader_Mask<bool> GetHasBeenSetMask(this IModHeaderGetter item)
        {
            var ret = new ModHeader_Mask<bool>();
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModHeaderGetter item,
            IModHeaderGetter rhs)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IModHeader lhs,
            IModHeaderGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            ModHeader_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            ModHeader_TranslationMask copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModHeader_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModHeader_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ModHeader_FieldIndex
    {
        Flags = 0,
        FormID = 1,
        Version = 2,
        Stats = 3,
        TypeOffsets = 4,
        Deleted = 5,
        Author = 6,
        Description = 7,
        MasterReferences = 8,
        VestigialData = 9,
    }
    #endregion

    #region Registration
    public class ModHeader_Registration : ILoquiRegistration
    {
        public static readonly ModHeader_Registration Instance = new ModHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d26d9f2a-53af-4c45-9490-dfdb377b6655";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(ModHeader_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModHeader_ErrorMask);

        public static readonly Type ClassType = typeof(ModHeader);

        public static readonly Type GetterType = typeof(IModHeaderGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModHeader);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ModHeader";

        public const string Name = "ModHeader";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)ModHeader_FieldIndex.Flags;
                case "FORMID":
                    return (ushort)ModHeader_FieldIndex.FormID;
                case "VERSION":
                    return (ushort)ModHeader_FieldIndex.Version;
                case "STATS":
                    return (ushort)ModHeader_FieldIndex.Stats;
                case "TYPEOFFSETS":
                    return (ushort)ModHeader_FieldIndex.TypeOffsets;
                case "DELETED":
                    return (ushort)ModHeader_FieldIndex.Deleted;
                case "AUTHOR":
                    return (ushort)ModHeader_FieldIndex.Author;
                case "DESCRIPTION":
                    return (ushort)ModHeader_FieldIndex.Description;
                case "MASTERREFERENCES":
                    return (ushort)ModHeader_FieldIndex.MasterReferences;
                case "VESTIGIALDATA":
                    return (ushort)ModHeader_FieldIndex.VestigialData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    return "Flags";
                case ModHeader_FieldIndex.FormID:
                    return "FormID";
                case ModHeader_FieldIndex.Version:
                    return "Version";
                case ModHeader_FieldIndex.Stats:
                    return "Stats";
                case ModHeader_FieldIndex.TypeOffsets:
                    return "TypeOffsets";
                case ModHeader_FieldIndex.Deleted:
                    return "Deleted";
                case ModHeader_FieldIndex.Author:
                    return "Author";
                case ModHeader_FieldIndex.Description:
                    return "Description";
                case ModHeader_FieldIndex.MasterReferences:
                    return "MasterReferences";
                case ModHeader_FieldIndex.VestigialData:
                    return "VestigialData";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    return typeof(ModHeader.HeaderFlag);
                case ModHeader_FieldIndex.FormID:
                    return typeof(UInt32);
                case ModHeader_FieldIndex.Version:
                    return typeof(Int32);
                case ModHeader_FieldIndex.Stats:
                    return typeof(ModStats);
                case ModHeader_FieldIndex.TypeOffsets:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Deleted:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Author:
                    return typeof(String);
                case ModHeader_FieldIndex.Description:
                    return typeof(String);
                case ModHeader_FieldIndex.MasterReferences:
                    return typeof(IExtendedList<MasterReference>);
                case ModHeader_FieldIndex.VestigialData:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModHeaderXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType DELE_HEADER = new RecordType("DELE");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TES4_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(ModHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModHeaderSetterCommon
    {
        public static readonly ModHeaderSetterCommon Instance = new ModHeaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModHeader item)
        {
            ClearPartial();
            item.Flags = default(ModHeader.HeaderFlag);
            item.FormID = default(UInt32);
            item.Version = default(Int32);
            item.Stats = default(ModStats);
            item.TypeOffsets_Unset();
            item.Deleted_Unset();
            item.Author_Unset();
            item.Description_Unset();
            item.MasterReferences.Clear();
            item.VestigialData_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IModHeader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (EnumBinaryTranslation<ModHeader.HeaderFlag>.Instance.Parse(
                frame: frame.SpawnWithLength(4),
                item: out ModHeader.HeaderFlag FlagsParse))
            {
                item.Flags = FlagsParse;
            }
            else
            {
                item.Flags = default(ModHeader.HeaderFlag);
            }
            item.FormID = frame.ReadUInt32();
            item.Version = frame.ReadInt32();
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IModHeader item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                        item.Stats = Mutagen.Bethesda.Oblivion.ModStats.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] TypeOffsetsParse))
                    {
                        item.TypeOffsets = TypeOffsetsParse;
                    }
                    else
                    {
                        item.TypeOffsets = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out Byte[] DeletedParse))
                    {
                        item.Deleted = DeletedParse;
                    }
                    else
                    {
                        item.Deleted = default(Byte[]);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String AuthorParse))
                    {
                        item.Author = AuthorParse;
                    }
                    else
                    {
                        item.Author = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DescriptionParse))
                    {
                        item.Description = DescriptionParse;
                    }
                    else
                    {
                        item.Description = default(String);
                    }
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<MasterReference>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: ModHeader_Registration.MAST_HEADER,
                        item: item.MasterReferences,
                        fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, out MasterReference listSubItem, ErrorMaskBuilder listErrMask) =>
                        {
                            return LoquiBinaryTranslation<MasterReference>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                errorMask: listErrMask,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VestigialData = frame.ReadUInt64();
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + frame.MetaData.SubConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public void CopyInFromBinary(
            IModHeader item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseRecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ModHeader_Registration.TES4_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ModHeaderCommon
    {
        public static readonly ModHeaderCommon Instance = new ModHeaderCommon();

        public ModHeader_Mask<bool> GetEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModHeader_Mask<bool>();
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            ModHeader_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version == rhs.Version;
            ret.Stats = MaskItemExt.Factory(item.Stats.GetEqualsMask(rhs.Stats, include), include);
            ret.TypeOffsets = item.TypeOffsets_IsSet == rhs.TypeOffsets_IsSet && MemoryExtensions.SequenceEqual(item.TypeOffsets, rhs.TypeOffsets);
            ret.Deleted = item.Deleted_IsSet == rhs.Deleted_IsSet && MemoryExtensions.SequenceEqual(item.Deleted, rhs.Deleted);
            ret.Author = item.Author_IsSet == rhs.Author_IsSet && string.Equals(item.Author, rhs.Author);
            ret.Description = item.Description_IsSet == rhs.Description_IsSet && string.Equals(item.Description, rhs.Description);
            ret.MasterReferences = item.MasterReferences.CollectionEqualsHelper(
                rhs.MasterReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VestigialData = item.VestigialData_IsSet == rhs.VestigialData_IsSet && item.VestigialData == rhs.VestigialData;
        }
        
        public string ToString(
            IModHeaderGetter item,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModHeaderGetter item,
            FileGeneration fg,
            string name = null,
            ModHeader_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ModHeader =>");
            }
            else
            {
                fg.AppendLine($"{name} (ModHeader) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModHeaderGetter item,
            FileGeneration fg,
            ModHeader_Mask<bool> printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.FormID ?? true)
            {
                fg.AppendLine($"FormID => {item.FormID}");
            }
            if (printMask?.Version ?? true)
            {
                fg.AppendLine($"Version => {item.Version}");
            }
            if (printMask?.Stats?.Overall ?? true)
            {
                item.Stats?.ToString(fg, "Stats");
            }
            if (printMask?.TypeOffsets ?? true)
            {
                fg.AppendLine($"TypeOffsets => {SpanExt.ToHexString(item.TypeOffsets)}");
            }
            if (printMask?.Deleted ?? true)
            {
                fg.AppendLine($"Deleted => {SpanExt.ToHexString(item.Deleted)}");
            }
            if (printMask?.Author ?? true)
            {
                fg.AppendLine($"Author => {item.Author}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.MasterReferences?.Overall ?? true)
            {
                fg.AppendLine("MasterReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MasterReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VestigialData ?? true)
            {
                fg.AppendLine($"VestigialData => {item.VestigialData}");
            }
        }
        
        public bool HasBeenSet(
            IModHeaderGetter item,
            ModHeader_Mask<bool?> checkMask)
        {
            if (checkMask.TypeOffsets.HasValue && checkMask.TypeOffsets.Value != item.TypeOffsets_IsSet) return false;
            if (checkMask.Deleted.HasValue && checkMask.Deleted.Value != item.Deleted_IsSet) return false;
            if (checkMask.Author.HasValue && checkMask.Author.Value != item.Author_IsSet) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_IsSet) return false;
            if (checkMask.VestigialData.HasValue && checkMask.VestigialData.Value != item.VestigialData_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IModHeaderGetter item,
            ModHeader_Mask<bool> mask)
        {
            mask.Flags = true;
            mask.FormID = true;
            mask.Version = true;
            mask.Stats = new MaskItem<bool, ModStats_Mask<bool>>(true, item.Stats.GetHasBeenSetMask());
            mask.TypeOffsets = item.TypeOffsets_IsSet;
            mask.Deleted = item.Deleted_IsSet;
            mask.Author = item.Author_IsSet;
            mask.Description = item.Description_IsSet;
            mask.MasterReferences = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, MasterReference_Mask<bool>>>>(true, item.MasterReferences.WithIndex().Select((i) => new MaskItemIndexed<bool, MasterReference_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.VestigialData = item.VestigialData_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModHeaderGetter lhs,
            IModHeaderGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.FormID != rhs.FormID) return false;
            if (lhs.Version != rhs.Version) return false;
            if (!object.Equals(lhs.Stats, rhs.Stats)) return false;
            if (lhs.TypeOffsets_IsSet != rhs.TypeOffsets_IsSet) return false;
            if (lhs.TypeOffsets_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.TypeOffsets, rhs.TypeOffsets)) return false;
            }
            if (lhs.Deleted_IsSet != rhs.Deleted_IsSet) return false;
            if (lhs.Deleted_IsSet)
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Deleted, rhs.Deleted)) return false;
            }
            if (lhs.Author_IsSet != rhs.Author_IsSet) return false;
            if (lhs.Author_IsSet)
            {
                if (!string.Equals(lhs.Author, rhs.Author)) return false;
            }
            if (lhs.Description_IsSet != rhs.Description_IsSet) return false;
            if (lhs.Description_IsSet)
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if (!lhs.MasterReferences.SequenceEqual(rhs.MasterReferences)) return false;
            if (lhs.VestigialData_IsSet != rhs.VestigialData_IsSet) return false;
            if (lhs.VestigialData_IsSet)
            {
                if (lhs.VestigialData != rhs.VestigialData) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IModHeaderGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FormID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Version).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Stats).CombineHashCode(ret);
            if (item.TypeOffsets_IsSet)
            {
                ret = HashHelper.GetHashCode(item.TypeOffsets).CombineHashCode(ret);
            }
            if (item.Deleted_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Deleted).CombineHashCode(ret);
            }
            if (item.Author_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Author).CombineHashCode(ret);
            }
            if (item.Description_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Description).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.MasterReferences).CombineHashCode(ret);
            if (item.VestigialData_IsSet)
            {
                ret = HashHelper.GetHashCode(item.VestigialData).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ModHeader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IModHeaderGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ModHeaderSetterTranslationCommon
    {
        public static readonly ModHeaderSetterTranslationCommon Instance = new ModHeaderSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IModHeader item,
            IModHeaderGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.FormID) ?? true))
            {
                item.FormID = rhs.FormID;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
                    {
                        if (rhs.Stats == null)
                        {
                            item.Stats = null;
                        }
                        else
                        {
                            item.Stats = rhs.Stats.DeepCopy(
                                copyMask: copyMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats),
                                errorMask: errorMask);
                        }
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.TypeOffsets);
                try
                {
                    if(rhs.TypeOffsets_IsSet)
                    {
                        item.TypeOffsets = rhs.TypeOffsets.ToArray();
                    }
                    else
                    {
                        item.TypeOffsets_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Deleted) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Deleted);
                try
                {
                    if(rhs.Deleted_IsSet)
                    {
                        item.Deleted = rhs.Deleted.ToArray();
                    }
                    else
                    {
                        item.Deleted_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Author) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Author);
                try
                {
                    if (rhs.Author_IsSet)
                    {
                        item.Author = rhs.Author;
                    }
                    else
                    {
                        item.Author_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Description) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Description);
                try
                {
                    if (rhs.Description_IsSet)
                    {
                        item.Description = rhs.Description;
                    }
                    else
                    {
                        item.Description_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.MasterReferences) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                try
                {
                    item.MasterReferences.SetTo(
                        items: rhs.MasterReferences,
                        converter: (r) =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.VestigialData) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.VestigialData);
                try
                {
                    if (rhs.VestigialData_IsSet)
                    {
                        item.VestigialData = rhs.VestigialData;
                    }
                    else
                    {
                        item.VestigialData_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            ModHeader_TranslationMask copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ModHeader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModHeaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModHeaderXmlWriteTranslation Instance = new ModHeaderXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<ModHeader.HeaderFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)ModHeader_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.FormID) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FormID),
                    item: item.FormID,
                    fieldIndex: (int)ModHeader_FieldIndex.FormID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Version) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)ModHeader_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
            {
                var loquiItem = item.Stats;
                ((ModStatsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Stats),
                    fieldIndex: (int)ModHeader_FieldIndex.Stats,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats));
            }
            if (item.TypeOffsets_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TypeOffsets),
                    item: item.TypeOffsets,
                    fieldIndex: (int)ModHeader_FieldIndex.TypeOffsets,
                    errorMask: errorMask);
            }
            if (item.Deleted_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Deleted) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Deleted),
                    item: item.Deleted,
                    fieldIndex: (int)ModHeader_FieldIndex.Deleted,
                    errorMask: errorMask);
            }
            if (item.Author_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Author) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Author),
                    item: item.Author,
                    fieldIndex: (int)ModHeader_FieldIndex.Author,
                    errorMask: errorMask);
            }
            if (item.Description_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)ModHeader_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.MasterReferences) ?? true))
            {
                ListXmlTranslation<IMasterReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.MasterReferences),
                    item: item.MasterReferences,
                    fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.MasterReferences),
                    transl: (XElement subNode, IMasterReferenceGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((MasterReferenceXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if (item.VestigialData_IsSet
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.VestigialData) ?? true))
            {
                UInt64XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VestigialData),
                    item: item.VestigialData,
                    fieldIndex: (int)ModHeader_FieldIndex.VestigialData,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ModHeader");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ModHeader");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IModHeaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IModHeaderGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModHeaderXmlCreateTranslation
    {
        public readonly static ModHeaderXmlCreateTranslation Instance = new ModHeaderXmlCreateTranslation();

        public static void FillPublicXml(
            IModHeader item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModHeader item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Flags);
                        if (EnumXmlTranslation<ModHeader.HeaderFlag>.Instance.Parse(
                            node: node,
                            item: out ModHeader.HeaderFlag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(ModHeader.HeaderFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FormID":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.FormID);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 FormIDParse,
                            errorMask: errorMask))
                        {
                            item.FormID = FormIDParse;
                        }
                        else
                        {
                            item.FormID = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Version);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 VersionParse,
                            errorMask: errorMask))
                        {
                            item.Version = VersionParse;
                        }
                        else
                        {
                            item.Version = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stats":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                        if (LoquiXmlTranslation<ModStats>.Instance.Parse(
                            node: node,
                            item: out ModStats StatsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats)))
                        {
                            item.Stats = StatsParse;
                        }
                        else
                        {
                            item.Stats = default(ModStats);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TypeOffsets":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.TypeOffsets);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] TypeOffsetsParse,
                            errorMask: errorMask))
                        {
                            item.TypeOffsets = TypeOffsetsParse;
                        }
                        else
                        {
                            item.TypeOffsets = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Deleted":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Deleted);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] DeletedParse,
                            errorMask: errorMask))
                        {
                            item.Deleted = DeletedParse;
                        }
                        else
                        {
                            item.Deleted = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Author":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Author);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String AuthorParse,
                            errorMask: errorMask))
                        {
                            item.Author = AuthorParse;
                        }
                        else
                        {
                            item.Author = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.Description);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DescriptionParse,
                            errorMask: errorMask))
                        {
                            item.Description = DescriptionParse;
                        }
                        else
                        {
                            item.Description = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterReferences":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                        if (ListXmlTranslation<MasterReference>.Instance.Parse(
                            node: node,
                            enumer: out var MasterReferencesItem,
                            transl: LoquiXmlTranslation<MasterReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MasterReferences.SetTo(MasterReferencesItem);
                        }
                        else
                        {
                            item.MasterReferences.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VestigialData":
                    try
                    {
                        errorMask?.PushIndex((int)ModHeader_FieldIndex.VestigialData);
                        if (UInt64XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt64 VestigialDataParse,
                            errorMask: errorMask))
                        {
                            item.VestigialData = VestigialDataParse;
                        }
                        else
                        {
                            item.VestigialData = default(UInt64);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ModHeaderXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true,
            ModHeader_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            out ModHeader_ErrorMask errorMask,
            ModHeader_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            string name = null,
            ModHeader_TranslationMask translationMask = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ModHeader_Mask<T> : IMask<T>, IEquatable<ModHeader_Mask<T>>
    {
        #region Ctors
        public ModHeader_Mask()
        {
        }

        public ModHeader_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.FormID = initialValue;
            this.Version = initialValue;
            this.Stats = new MaskItem<T, ModStats_Mask<T>>(initialValue, new ModStats_Mask<T>(initialValue));
            this.TypeOffsets = initialValue;
            this.Deleted = initialValue;
            this.Author = initialValue;
            this.Description = initialValue;
            this.MasterReferences = new MaskItem<T, IEnumerable<MaskItemIndexed<T, MasterReference_Mask<T>>>>(initialValue, null);
            this.VestigialData = initialValue;
        }
        #endregion

        #region Members
        public T Flags;
        public T FormID;
        public T Version;
        public MaskItem<T, ModStats_Mask<T>> Stats { get; set; }
        public T TypeOffsets;
        public T Deleted;
        public T Author;
        public T Description;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, MasterReference_Mask<T>>>> MasterReferences;
        public T VestigialData;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ModHeader_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModHeader_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.FormID, rhs.FormID)) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.Stats, rhs.Stats)) return false;
            if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
            if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
            if (!object.Equals(this.Author, rhs.Author)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
            if (!object.Equals(this.VestigialData, rhs.VestigialData)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.FormID?.GetHashCode());
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.Stats?.GetHashCode());
            ret = ret.CombineHashCode(this.TypeOffsets?.GetHashCode());
            ret = ret.CombineHashCode(this.Deleted?.GetHashCode());
            ret = ret.CombineHashCode(this.Author?.GetHashCode());
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.MasterReferences?.GetHashCode());
            ret = ret.CombineHashCode(this.VestigialData?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (!eval(this.FormID)) return false;
            if (!eval(this.Version)) return false;
            if (Stats != null)
            {
                if (!eval(this.Stats.Overall)) return false;
                if (this.Stats.Specific != null && !this.Stats.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.TypeOffsets)) return false;
            if (!eval(this.Deleted)) return false;
            if (!eval(this.Author)) return false;
            if (!eval(this.Description)) return false;
            if (this.MasterReferences != null)
            {
                if (!eval(this.MasterReferences.Overall)) return false;
                if (this.MasterReferences.Specific != null)
                {
                    foreach (var item in this.MasterReferences.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.VestigialData)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ModHeader_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ModHeader_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ModHeader_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            obj.FormID = eval(this.FormID);
            obj.Version = eval(this.Version);
            if (this.Stats != null)
            {
                obj.Stats = new MaskItem<R, ModStats_Mask<R>>();
                obj.Stats.Overall = eval(this.Stats.Overall);
                if (this.Stats.Specific != null)
                {
                    obj.Stats.Specific = this.Stats.Specific.Translate(eval);
                }
            }
            obj.TypeOffsets = eval(this.TypeOffsets);
            obj.Deleted = eval(this.Deleted);
            obj.Author = eval(this.Author);
            obj.Description = eval(this.Description);
            if (MasterReferences != null)
            {
                obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MasterReference_Mask<R>>>>();
                obj.MasterReferences.Overall = eval(this.MasterReferences.Overall);
                if (MasterReferences.Specific != null)
                {
                    List<MaskItemIndexed<R, MasterReference_Mask<R>>> l = new List<MaskItemIndexed<R, MasterReference_Mask<R>>>();
                    obj.MasterReferences.Specific = l;
                    foreach (var item in MasterReferences.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, MasterReference_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, MasterReference_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.VestigialData = eval(this.VestigialData);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.MasterReferences.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ModHeader_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ModHeader_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ModHeader_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.FormID ?? true)
                {
                    fg.AppendLine($"FormID => {FormID}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.Stats?.Overall ?? true)
                {
                    Stats?.ToString(fg);
                }
                if (printMask?.TypeOffsets ?? true)
                {
                    fg.AppendLine($"TypeOffsets => {TypeOffsets}");
                }
                if (printMask?.Deleted ?? true)
                {
                    fg.AppendLine($"Deleted => {Deleted}");
                }
                if (printMask?.Author ?? true)
                {
                    fg.AppendLine($"Author => {Author}");
                }
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description}");
                }
                if (printMask?.MasterReferences?.Overall ?? true)
                {
                    fg.AppendLine("MasterReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (MasterReferences.Overall != null)
                        {
                            fg.AppendLine(MasterReferences.Overall.ToString());
                        }
                        if (MasterReferences.Specific != null)
                        {
                            foreach (var subItem in MasterReferences.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.VestigialData ?? true)
                {
                    fg.AppendLine($"VestigialData => {VestigialData}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ModHeader_ErrorMask : IErrorMask, IErrorMask<ModHeader_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public Exception FormID;
        public Exception Version;
        public MaskItem<Exception, ModStats_ErrorMask> Stats;
        public Exception TypeOffsets;
        public Exception Deleted;
        public Exception Author;
        public Exception Description;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>> MasterReferences;
        public Exception VestigialData;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    return Flags;
                case ModHeader_FieldIndex.FormID:
                    return FormID;
                case ModHeader_FieldIndex.Version:
                    return Version;
                case ModHeader_FieldIndex.Stats:
                    return Stats;
                case ModHeader_FieldIndex.TypeOffsets:
                    return TypeOffsets;
                case ModHeader_FieldIndex.Deleted:
                    return Deleted;
                case ModHeader_FieldIndex.Author:
                    return Author;
                case ModHeader_FieldIndex.Description:
                    return Description;
                case ModHeader_FieldIndex.MasterReferences:
                    return MasterReferences;
                case ModHeader_FieldIndex.VestigialData:
                    return VestigialData;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case ModHeader_FieldIndex.FormID:
                    this.FormID = ex;
                    break;
                case ModHeader_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case ModHeader_FieldIndex.Stats:
                    this.Stats = new MaskItem<Exception, ModStats_ErrorMask>(ex, null);
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    this.TypeOffsets = ex;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    this.Deleted = ex;
                    break;
                case ModHeader_FieldIndex.Author:
                    this.Author = ex;
                    break;
                case ModHeader_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    this.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(ex, null);
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    this.VestigialData = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.FormID:
                    this.FormID = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Stats:
                    this.Stats = (MaskItem<Exception, ModStats_ErrorMask>)obj;
                    break;
                case ModHeader_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Deleted:
                    this.Deleted = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Author:
                    this.Author = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case ModHeader_FieldIndex.MasterReferences:
                    this.MasterReferences = (MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>)obj;
                    break;
                case ModHeader_FieldIndex.VestigialData:
                    this.VestigialData = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Flags != null) return true;
            if (FormID != null) return true;
            if (Version != null) return true;
            if (Stats != null) return true;
            if (TypeOffsets != null) return true;
            if (Deleted != null) return true;
            if (Author != null) return true;
            if (Description != null) return true;
            if (MasterReferences != null) return true;
            if (VestigialData != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ModHeader_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"FormID => {FormID}");
            fg.AppendLine($"Version => {Version}");
            Stats?.ToString(fg);
            fg.AppendLine($"TypeOffsets => {TypeOffsets}");
            fg.AppendLine($"Deleted => {Deleted}");
            fg.AppendLine($"Author => {Author}");
            fg.AppendLine($"Description => {Description}");
            fg.AppendLine("MasterReferences =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (MasterReferences.Overall != null)
                {
                    fg.AppendLine(MasterReferences.Overall.ToString());
                }
                if (MasterReferences.Specific != null)
                {
                    foreach (var subItem in MasterReferences.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"VestigialData => {VestigialData}");
        }
        #endregion

        #region Combine
        public ModHeader_ErrorMask Combine(ModHeader_ErrorMask rhs)
        {
            var ret = new ModHeader_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.FormID = this.FormID.Combine(rhs.FormID);
            ret.Version = this.Version.Combine(rhs.Version);
            ret.Stats = new MaskItem<Exception, ModStats_ErrorMask>(this.Stats.Overall.Combine(rhs.Stats.Overall), ((IErrorMask<ModStats_ErrorMask>)this.Stats.Specific).Combine(rhs.Stats.Specific));
            ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
            ret.Deleted = this.Deleted.Combine(rhs.Deleted);
            ret.Author = this.Author.Combine(rhs.Author);
            ret.Description = this.Description.Combine(rhs.Description);
            ret.MasterReferences = new MaskItem<Exception, IEnumerable<MaskItem<Exception, MasterReference_ErrorMask>>>(this.MasterReferences.Overall.Combine(rhs.MasterReferences.Overall), new List<MaskItem<Exception, MasterReference_ErrorMask>>(this.MasterReferences.Specific.And(rhs.MasterReferences.Specific)));
            ret.VestigialData = this.VestigialData.Combine(rhs.VestigialData);
            return ret;
        }
        public static ModHeader_ErrorMask Combine(ModHeader_ErrorMask lhs, ModHeader_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ModHeader_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ModHeader_ErrorMask();
        }
        #endregion

    }
    public class ModHeader_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Flags;
        public bool FormID;
        public bool Version;
        public MaskItem<bool, ModStats_TranslationMask> Stats;
        public bool TypeOffsets;
        public bool Deleted;
        public bool Author;
        public bool Description;
        public MaskItem<bool, MasterReference_TranslationMask> MasterReferences;
        public bool VestigialData;
        #endregion

        #region Ctors
        public ModHeader_TranslationMask()
        {
        }

        public ModHeader_TranslationMask(bool defaultOn)
        {
            this.Flags = defaultOn;
            this.FormID = defaultOn;
            this.Version = defaultOn;
            this.Stats = new MaskItem<bool, ModStats_TranslationMask>(defaultOn, null);
            this.TypeOffsets = defaultOn;
            this.Deleted = defaultOn;
            this.Author = defaultOn;
            this.Description = defaultOn;
            this.MasterReferences = new MaskItem<bool, MasterReference_TranslationMask>(defaultOn, null);
            this.VestigialData = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Flags, null));
            ret.Add((FormID, null));
            ret.Add((Version, null));
            ret.Add((Stats?.Overall ?? true, Stats?.Specific?.GetCrystal()));
            ret.Add((TypeOffsets, null));
            ret.Add((Deleted, null));
            ret.Add((Author, null));
            ret.Add((Description, null));
            ret.Add((MasterReferences?.Overall ?? true, MasterReferences?.Specific?.GetCrystal()));
            ret.Add((VestigialData, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModHeaderBinaryWriteTranslation Instance = new ModHeaderBinaryWriteTranslation();

        public static void Write_Embedded(
            IModHeaderGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ModHeader.HeaderFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.FormID);
            writer.Write(item.Version);
        }

        public static void Write_RecordTypes(
            IModHeaderGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            {
                var loquiItem = item.Stats;
                ((ModStatsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.TypeOffsets_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TypeOffsets,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.OFST_HEADER),
                    nullable: false);
            }
            if (item.Deleted_IsSet)
            {
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Deleted,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DELE_HEADER),
                    nullable: false);
            }
            if (item.Author_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Author,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.CNAM_HEADER),
                    nullable: false);
            }
            if (item.Description_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.SNAM_HEADER),
                    nullable: false);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IMasterReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.MasterReferences,
                fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                errorMask: errorMask,
                transl: (MutagenWriter subWriter, IMasterReferenceGetter subItem, ErrorMaskBuilder listErrorMask) =>
                {
                    {
                        var loquiItem = subItem;
                        ((MasterReferenceBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                            item: loquiItem,
                            writer: subWriter,
                            errorMask: listErrorMask,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            if (item.VestigialData_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VestigialData,
                    header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DATA_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IModHeaderGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ModHeader_Registration.TES4_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IModHeaderGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ModHeaderBinaryCreateTranslation
    {
        public readonly static ModHeaderBinaryCreateTranslation Instance = new ModHeaderBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ModHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ModHeader_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModHeader_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderBinaryOverlay :
        BinaryOverlay,
        IModHeaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ModHeaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public ModHeader.HeaderFlag Flags => (ModHeader.HeaderFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0, 4));
        public UInt32 FormID => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4));
        public Int32 Version => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        #region Stats
        private RangeInt32? _StatsLocation;
        private bool _Stats_IsSet => _StatsLocation.HasValue;
        private IModStatsGetter _Stats => _Stats_IsSet ? ModStatsBinaryOverlay.ModStatsFactory(new BinaryMemoryReadStream(_data.Slice(_StatsLocation.Value.Min)), _package) : default;
        public IModStatsGetter Stats => _Stats ?? new ModStats();
        #endregion
        #region TypeOffsets
        private int? _TypeOffsetsLocation;
        public bool TypeOffsets_IsSet => _TypeOffsetsLocation.HasValue;
        public ReadOnlySpan<Byte> TypeOffsets => _TypeOffsetsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _TypeOffsetsLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Deleted
        private int? _DeletedLocation;
        public bool Deleted_IsSet => _DeletedLocation.HasValue;
        public ReadOnlySpan<Byte> Deleted => _DeletedLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DeletedLocation.Value, _package.Meta).ToArray() : default;
        #endregion
        #region Author
        private int? _AuthorLocation;
        public bool Author_IsSet => _AuthorLocation.HasValue;
        public String Author => _AuthorLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _AuthorLocation.Value, _package.Meta)) : default;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public bool Description_IsSet => _DescriptionLocation.HasValue;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default;
        #endregion
        public IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; private set; } = EmptySetList<MasterReferenceBinaryOverlay>.Instance;
        #region VestigialData
        private int? _VestigialDataLocation;
        public bool VestigialData_IsSet => _VestigialDataLocation.HasValue;
        public UInt64 VestigialData => _VestigialDataLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VestigialDataLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ModHeaderBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ModHeaderBinaryOverlay ModHeaderFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ModHeaderBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    _TypeOffsetsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    _DeletedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    _AuthorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    this.MasterReferences = this.ParseRepeatedTypelessSubrecord<MasterReferenceBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: ModHeader_Registration.MAST_HEADER,
                        factory:  MasterReferenceBinaryOverlay.MasterReferenceFactory);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    _VestigialDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

}
#endregion

#endregion

