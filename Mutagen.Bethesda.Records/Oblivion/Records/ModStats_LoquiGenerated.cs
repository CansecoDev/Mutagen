/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ModStats :
        IModStats,
        ILoquiObjectSetter<ModStats>,
        IEquatable<ModStats>,
        IEqualsMask
    {
        #region Ctor
        public ModStats()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Version
        public Single Version { get; set; }
        #endregion
        #region NumRecords
        public Int32 NumRecords { get; set; }
        #endregion
        #region NextObjectID
        public UInt32 NextObjectID { get; set; }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModStatsGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModStatsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IModStatsGetter rhs)) return false;
            return ((ModStatsCommon)((IModStatsGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ModStats obj)
        {
            return ((ModStatsCommon)((IModStatsGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModStatsCommon)((IModStatsGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ModStatsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ModStatsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ModStats CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModStats CreateFromXml(
            XElement node,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModStats CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ModStats() : null;
                    break;
                default:
                    break;
            }
            var ret = new ModStats();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModStatsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ModStats CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModStats CreateFromXml(
            string path,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModStats CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModStats CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModStats CreateFromXml(
            Stream stream,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModStats CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ModStats_FieldIndex)index)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ModStats_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ModStatsBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ModStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ModStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ModStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModStats CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ModStats();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ModStats_Registration.HEDR_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ModStats item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single VersionParse))
            {
                item.Version = VersionParse;
            }
            else
            {
                item.Version = default(Single);
            }
            item.NumRecords = frame.ReadInt32();
            item.NextObjectID = frame.ReadUInt32();
        }

        #endregion

        void IClearable.Clear()
        {
            ((ModStatsSetterCommon)((IModStatsGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IModStats :
        IModStatsGetter,
        ILoquiObjectSetter<IModStats>
    {
        new Single Version { get; set; }

        new Int32 NumRecords { get; set; }

        new UInt32 NextObjectID { get; set; }

    }

    public partial interface IModStatsGetter :
        ILoquiObject,
        ILoquiObject<IModStatsGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterCopyInstance();
        #region Version
        Single Version { get; }

        #endregion
        #region NumRecords
        Int32 NumRecords { get; }

        #endregion
        #region NextObjectID
        UInt32 NextObjectID { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class ModStatsMixIn
    {
        public static void Clear(this IModStats item)
        {
            ((ModStatsSetterCommon)((IModStatsGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ModStats_Mask<bool> GetEqualsMask(
            this IModStatsGetter item,
            IModStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModStatsGetter item,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            return ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModStatsGetter item,
            FileGeneration fg,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModStatsGetter item,
            ModStats_Mask<bool?> checkMask)
        {
            return ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ModStats_Mask<bool> GetHasBeenSetMask(this IModStatsGetter item)
        {
            var ret = new ModStats_Mask<bool>();
            ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModStatsGetter item,
            IModStatsGetter rhs)
        {
            return ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this ModStats lhs,
            ModStats rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this ModStats lhs,
            ModStats rhs,
            ModStats_CopyMask copyMask,
            ModStats def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this ModStats lhs,
            ModStats rhs,
            out ModStats_ErrorMask errorMask,
            ModStats_CopyMask copyMask = null,
            ModStats def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ModStatsSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this ModStats lhs,
            ModStats rhs,
            ErrorMaskBuilder errorMask,
            ModStats_CopyMask copyMask = null,
            ModStats def = null)
        {
            ModStatsSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ModStats Copy(
            this ModStats item,
            ModStats_CopyMask copyMask = null,
            ModStats def = null)
        {
            return ((ModStatsSetterCommon)((IModStatsGetter)item).CommonSetterInstance()).Copy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ModStats_FieldIndex
    {
        Version = 0,
        NumRecords = 1,
        NextObjectID = 2,
    }
    #endregion

    #region Registration
    public class ModStats_Registration : ILoquiRegistration
    {
        public static readonly ModStats_Registration Instance = new ModStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "88a14b36-530f-42a1-aa1f-b8ee1852e625";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ModStats_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModStats_ErrorMask);

        public static readonly Type ClassType = typeof(ModStats);

        public static readonly Type GetterType = typeof(IModStatsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModStats);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ModStats";

        public const string Name = "ModStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSION":
                    return (ushort)ModStats_FieldIndex.Version;
                case "NUMRECORDS":
                    return (ushort)ModStats_FieldIndex.NumRecords;
                case "NEXTOBJECTID":
                    return (ushort)ModStats_FieldIndex.NextObjectID;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return "Version";
                case ModStats_FieldIndex.NumRecords:
                    return "NumRecords";
                case ModStats_FieldIndex.NextObjectID:
                    return "NextObjectID";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return typeof(Single);
                case ModStats_FieldIndex.NumRecords:
                    return typeof(Int32);
                case ModStats_FieldIndex.NextObjectID:
                    return typeof(UInt32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModStatsXmlWriteTranslation);
        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HEDR_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ModStatsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModStatsSetterCommon
    {
        public static readonly ModStatsSetterCommon Instance = new ModStatsSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IModStats item)
        {
            ClearPartial();
            item.Version = default(Single);
            item.NumRecords = default(Int32);
            item.NextObjectID = default(UInt32);
        }
        
        public ModStats GetNew()
        {
            return new ModStats();
        }
        
        public ModStats Copy(
            ModStats item,
            ModStats_CopyMask copyMask = null,
            ModStats def = null)
        {
            ModStats ret = GetNew();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    public partial class ModStatsCommon
    {
        public static readonly ModStatsCommon Instance = new ModStatsCommon();

        public ModStats_Mask<bool> GetEqualsMask(
            IModStatsGetter item,
            IModStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModStats_Mask<bool>();
            ((ModStatsCommon)((IModStatsGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModStatsGetter item,
            IModStatsGetter rhs,
            ModStats_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Version = item.Version.EqualsWithin(rhs.Version);
            ret.NumRecords = item.NumRecords == rhs.NumRecords;
            ret.NextObjectID = item.NextObjectID == rhs.NextObjectID;
        }
        
        public string ToString(
            IModStatsGetter item,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModStatsGetter item,
            FileGeneration fg,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ModStats =>");
            }
            else
            {
                fg.AppendLine($"{name} (ModStats) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModStatsGetter item,
            FileGeneration fg,
            ModStats_Mask<bool> printMask = null)
        {
            if (printMask?.Version ?? true)
            {
                fg.AppendLine($"Version => {item.Version}");
            }
            if (printMask?.NumRecords ?? true)
            {
                fg.AppendLine($"NumRecords => {item.NumRecords}");
            }
            if (printMask?.NextObjectID ?? true)
            {
                fg.AppendLine($"NextObjectID => {item.NextObjectID}");
            }
        }
        
        public bool HasBeenSet(
            IModStatsGetter item,
            ModStats_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IModStatsGetter item,
            ModStats_Mask<bool> mask)
        {
            mask.Version = true;
            mask.NumRecords = true;
            mask.NextObjectID = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModStatsGetter lhs,
            IModStatsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Version.EqualsWithin(rhs.Version)) return false;
            if (lhs.NumRecords != rhs.NumRecords) return false;
            if (lhs.NextObjectID != rhs.NextObjectID) return false;
            return true;
        }
        
        public virtual int GetHashCode(IModStatsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Version).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NumRecords).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NextObjectID).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class ModStatsSetterCopyCommon
    {
        public static readonly ModStatsSetterCopyCommon Instance = new ModStatsSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ModStats item,
            ModStats rhs,
            ModStats def,
            ErrorMaskBuilder errorMask,
            ModStats_CopyMask copyMask)
        {
            if (copyMask?.Version ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.Version);
                item.Version = rhs.Version;
                errorMask?.PopIndex();
            }
            if (copyMask?.NumRecords ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.NumRecords);
                item.NumRecords = rhs.NumRecords;
                errorMask?.PopIndex();
            }
            if (copyMask?.NextObjectID ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.NextObjectID);
                item.NextObjectID = rhs.NextObjectID;
                errorMask?.PopIndex();
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ModStats
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModStats_Registration.Instance;
        public static ModStats_Registration Registration => ModStats_Registration.Instance;
        protected object CommonInstance()
        {
            return ModStatsCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return ModStatsSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return ModStatsSetterCopyCommon.Instance;
        }
        object IModStatsGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IModStatsGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IModStatsGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModStatsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModStatsXmlWriteTranslation Instance = new ModStatsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModStatsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.Version) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)ModStats_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.NumRecords) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumRecords),
                    item: item.NumRecords,
                    fieldIndex: (int)ModStats_FieldIndex.NumRecords,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.NextObjectID) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NextObjectID),
                    item: item.NextObjectID,
                    fieldIndex: (int)ModStats_FieldIndex.NextObjectID,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IModStatsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ModStats");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ModStats");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IModStatsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModStatsGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IModStatsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModStatsXmlCreateTranslation
    {
        public readonly static ModStatsXmlCreateTranslation Instance = new ModStatsXmlCreateTranslation();

        public static void FillPublicXml(
            IModStats item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModStatsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModStats item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Version":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.Version);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single VersionParse,
                            errorMask: errorMask))
                        {
                            item.Version = VersionParse;
                        }
                        else
                        {
                            item.Version = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumRecords":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.NumRecords);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 NumRecordsParse,
                            errorMask: errorMask))
                        {
                            item.NumRecords = NumRecordsParse;
                        }
                        else
                        {
                            item.NumRecords = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NextObjectID":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.NextObjectID);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 NextObjectIDParse,
                            errorMask: errorMask))
                        {
                            item.NextObjectID = NextObjectIDParse;
                        }
                        else
                        {
                            item.NextObjectID = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ModStatsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModStatsGetter item,
            XElement node,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true,
            ModStats_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            string path,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            Stream stream,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ModStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            XElement node,
            string name = null,
            ModStats_TranslationMask translationMask = null)
        {
            ((ModStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModStatsGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ModStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class ModStats_Mask<T> : IMask<T>, IEquatable<ModStats_Mask<T>>
    {
        #region Ctors
        public ModStats_Mask()
        {
        }

        public ModStats_Mask(T initialValue)
        {
            this.Version = initialValue;
            this.NumRecords = initialValue;
            this.NextObjectID = initialValue;
        }
        #endregion

        #region Members
        public T Version;
        public T NumRecords;
        public T NextObjectID;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ModStats_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModStats_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.NumRecords, rhs.NumRecords)) return false;
            if (!object.Equals(this.NextObjectID, rhs.NextObjectID)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.NumRecords?.GetHashCode());
            ret = ret.CombineHashCode(this.NextObjectID?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Version)) return false;
            if (!eval(this.NumRecords)) return false;
            if (!eval(this.NextObjectID)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ModStats_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ModStats_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ModStats_Mask<R> obj, Func<T, R> eval)
        {
            obj.Version = eval(this.Version);
            obj.NumRecords = eval(this.NumRecords);
            obj.NextObjectID = eval(this.NextObjectID);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ModStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ModStats_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ModStats_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {NumRecords}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {NextObjectID}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ModStats_ErrorMask : IErrorMask, IErrorMask<ModStats_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Version;
        public Exception NumRecords;
        public Exception NextObjectID;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return Version;
                case ModStats_FieldIndex.NumRecords:
                    return NumRecords;
                case ModStats_FieldIndex.NextObjectID:
                    return NextObjectID;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    this.NumRecords = ex;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    this.NextObjectID = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    this.NumRecords = (Exception)obj;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    this.NextObjectID = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Version != null) return true;
            if (NumRecords != null) return true;
            if (NextObjectID != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ModStats_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Version => {Version}");
            fg.AppendLine($"NumRecords => {NumRecords}");
            fg.AppendLine($"NextObjectID => {NextObjectID}");
        }
        #endregion

        #region Combine
        public ModStats_ErrorMask Combine(ModStats_ErrorMask rhs)
        {
            var ret = new ModStats_ErrorMask();
            ret.Version = this.Version.Combine(rhs.Version);
            ret.NumRecords = this.NumRecords.Combine(rhs.NumRecords);
            ret.NextObjectID = this.NextObjectID.Combine(rhs.NextObjectID);
            return ret;
        }
        public static ModStats_ErrorMask Combine(ModStats_ErrorMask lhs, ModStats_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ModStats_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ModStats_ErrorMask();
        }
        #endregion

    }
    public class ModStats_CopyMask
    {
        public ModStats_CopyMask()
        {
        }

        public ModStats_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Version = defaultOn;
            this.NumRecords = defaultOn;
            this.NextObjectID = defaultOn;
        }

        #region Members
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

    }

    public class ModStats_DeepCopyMask
    {
        public ModStats_DeepCopyMask()
        {
        }

        public ModStats_DeepCopyMask(bool defaultOn)
        {
            this.Version = defaultOn;
            this.NumRecords = defaultOn;
            this.NextObjectID = defaultOn;
        }

        #region Members
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

    }

    public class ModStats_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

        #region Ctors
        public ModStats_TranslationMask()
        {
        }

        public ModStats_TranslationMask(bool defaultOn)
        {
            this.Version = defaultOn;
            this.NumRecords = defaultOn;
            this.NextObjectID = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Version, null));
            ret.Add((NumRecords, null));
            ret.Add((NextObjectID, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModStatsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModStatsBinaryWriteTranslation Instance = new ModStatsBinaryWriteTranslation();

        public static void Write_Embedded(
            IModStatsGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Version);
            writer.Write(item.NumRecords);
            writer.Write(item.NextObjectID);
        }

        public void Write(
            MutagenWriter writer,
            IModStatsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ModStats_Registration.HEDR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IModStatsGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ModStatsBinaryCreateTranslation
    {
        public readonly static ModStatsBinaryCreateTranslation Instance = new ModStatsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ModStatsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ModStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IModStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ModStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IModStatsGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ModStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModStatsBinaryWrapper :
        BinaryWrapper,
        IModStatsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModStats_Registration.Instance;
        public static ModStats_Registration Registration => ModStats_Registration.Instance;
        protected object CommonInstance()
        {
            return ModStatsCommon.Instance;
        }
        object IModStatsGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IModStatsGetter.CommonSetterInstance()
        {
            return null;
        }
        object IModStatsGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModStatsGetter)rhs, include);

        protected object XmlWriteTranslator => ModStatsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ModStatsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => ModStatsBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ModStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Single Version => SpanExt.GetFloat(_data.Span.Slice(0, 4));
        public Int32 NumRecords => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        public UInt32 NextObjectID => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ModStatsBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static ModStatsBinaryWrapper ModStatsFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ModStatsBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

