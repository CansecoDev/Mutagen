/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Oblivion.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using DynamicData;
using CSharpExt.Rx;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class OblivionMod :
        IOblivionMod,
        ILoquiObjectSetter<OblivionMod>,
        IEquatable<OblivionMod>,
        IEqualsMask
    {
        #region Ctor
        protected OblivionMod()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            _GameSettings_Object = new Group<GameSetting>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eye>(this);
            _Races_Object = new Group<Race>(this);
            _Sounds_Object = new Group<Sound>(this);
            _Skills_Object = new Group<SkillRecord>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _Scripts_Object = new Group<Script>(this);
            _LandTextures_Object = new Group<LandTexture>(this);
            _Enchantments_Object = new Group<Enchantment>(this);
            _Spells_Object = new Group<SpellUnleveled>(this);
            _Birthsigns_Object = new Group<Birthsign>(this);
            _Activators_Object = new Group<Activator>(this);
            _AlchemicalApparatus_Object = new Group<AlchemicalApparatus>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Clothes_Object = new Group<Clothing>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _Miscellaneous_Object = new Group<Miscellaneous>(this);
            _Statics_Object = new Group<Static>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Flora_Object = new Group<Flora>(this);
            _Furnature_Object = new Group<Furnature>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammo_Object = new Group<Ammo>(this);
            _NPCs_Object = new Group<NPC>(this);
            _Creatures_Object = new Group<Creature>(this);
            _LeveledCreatures_Object = new Group<LeveledCreature>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _Keys_Object = new Group<Key>(this);
            _Potions_Object = new Group<Potion>(this);
            _Subspaces_Object = new Group<Subspace>(this);
            _SigilStones_Object = new Group<SigilStone>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _Regions_Object = new Group<Region>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _AIPackages_Object = new Group<AIPackage>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ModHeader _ModHeader_Object = new ModHeader();
        public ModHeader ModHeader => _ModHeader_Object;
        IModHeaderGetter IOblivionModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        IGroupGetter<IGameSettingGetter> IOblivionModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        IGroupGetter<IGlobalGetter> IOblivionModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        IGroupGetter<IClassGetter> IOblivionModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        IGroupGetter<IFactionGetter> IOblivionModGetter.Factions => _Factions_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Hair> _Hairs_Object;
        public Group<Hair> Hairs => _Hairs_Object;
        IGroupGetter<IHairGetter> IOblivionModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Eye> _Eyes_Object;
        public Group<Eye> Eyes => _Eyes_Object;
        IGroupGetter<IEyeGetter> IOblivionModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Race> _Races_Object;
        public Group<Race> Races => _Races_Object;
        IGroupGetter<IRaceGetter> IOblivionModGetter.Races => _Races_Object;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Sound> _Sounds_Object;
        public Group<Sound> Sounds => _Sounds_Object;
        IGroupGetter<ISoundGetter> IOblivionModGetter.Sounds => _Sounds_Object;
        #endregion
        #region Skills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<SkillRecord> _Skills_Object;
        public Group<SkillRecord> Skills => _Skills_Object;
        IGroupGetter<ISkillRecordGetter> IOblivionModGetter.Skills => _Skills_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<MagicEffect> _MagicEffects_Object;
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        IGroupGetter<IMagicEffectGetter> IOblivionModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region Scripts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Script> _Scripts_Object;
        public Group<Script> Scripts => _Scripts_Object;
        IGroupGetter<IScriptGetter> IOblivionModGetter.Scripts => _Scripts_Object;
        #endregion
        #region LandTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LandTexture> _LandTextures_Object;
        public Group<LandTexture> LandTextures => _LandTextures_Object;
        IGroupGetter<ILandTextureGetter> IOblivionModGetter.LandTextures => _LandTextures_Object;
        #endregion
        #region Enchantments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Enchantment> _Enchantments_Object;
        public Group<Enchantment> Enchantments => _Enchantments_Object;
        IGroupGetter<IEnchantmentGetter> IOblivionModGetter.Enchantments => _Enchantments_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<SpellUnleveled> _Spells_Object;
        public Group<SpellUnleveled> Spells => _Spells_Object;
        IGroupGetter<ISpellUnleveledGetter> IOblivionModGetter.Spells => _Spells_Object;
        #endregion
        #region Birthsigns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Birthsign> _Birthsigns_Object;
        public Group<Birthsign> Birthsigns => _Birthsigns_Object;
        IGroupGetter<IBirthsignGetter> IOblivionModGetter.Birthsigns => _Birthsigns_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Activator> _Activators_Object;
        public Group<Activator> Activators => _Activators_Object;
        IGroupGetter<IActivatorGetter> IOblivionModGetter.Activators => _Activators_Object;
        #endregion
        #region AlchemicalApparatus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<AlchemicalApparatus> _AlchemicalApparatus_Object;
        public Group<AlchemicalApparatus> AlchemicalApparatus => _AlchemicalApparatus_Object;
        IGroupGetter<IAlchemicalApparatusGetter> IOblivionModGetter.AlchemicalApparatus => _AlchemicalApparatus_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Armor> _Armors_Object;
        public Group<Armor> Armors => _Armors_Object;
        IGroupGetter<IArmorGetter> IOblivionModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Book> _Books_Object;
        public Group<Book> Books => _Books_Object;
        IGroupGetter<IBookGetter> IOblivionModGetter.Books => _Books_Object;
        #endregion
        #region Clothes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Clothing> _Clothes_Object;
        public Group<Clothing> Clothes => _Clothes_Object;
        IGroupGetter<IClothingGetter> IOblivionModGetter.Clothes => _Clothes_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Container> _Containers_Object;
        public Group<Container> Containers => _Containers_Object;
        IGroupGetter<IContainerGetter> IOblivionModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Door> _Doors_Object;
        public Group<Door> Doors => _Doors_Object;
        IGroupGetter<IDoorGetter> IOblivionModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Ingredient> _Ingredients_Object;
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        IGroupGetter<IIngredientGetter> IOblivionModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Light> _Lights_Object;
        public Group<Light> Lights => _Lights_Object;
        IGroupGetter<ILightGetter> IOblivionModGetter.Lights => _Lights_Object;
        #endregion
        #region Miscellaneous
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Miscellaneous> _Miscellaneous_Object;
        public Group<Miscellaneous> Miscellaneous => _Miscellaneous_Object;
        IGroupGetter<IMiscellaneousGetter> IOblivionModGetter.Miscellaneous => _Miscellaneous_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Static> _Statics_Object;
        public Group<Static> Statics => _Statics_Object;
        IGroupGetter<IStaticGetter> IOblivionModGetter.Statics => _Statics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Grass> _Grasses_Object;
        public Group<Grass> Grasses => _Grasses_Object;
        IGroupGetter<IGrassGetter> IOblivionModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Tree> _Trees_Object;
        public Group<Tree> Trees => _Trees_Object;
        IGroupGetter<ITreeGetter> IOblivionModGetter.Trees => _Trees_Object;
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Flora> _Flora_Object;
        public Group<Flora> Flora => _Flora_Object;
        IGroupGetter<IFloraGetter> IOblivionModGetter.Flora => _Flora_Object;
        #endregion
        #region Furnature
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Furnature> _Furnature_Object;
        public Group<Furnature> Furnature => _Furnature_Object;
        IGroupGetter<IFurnatureGetter> IOblivionModGetter.Furnature => _Furnature_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Weapon> _Weapons_Object;
        public Group<Weapon> Weapons => _Weapons_Object;
        IGroupGetter<IWeaponGetter> IOblivionModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Ammo> _Ammo_Object;
        public Group<Ammo> Ammo => _Ammo_Object;
        IGroupGetter<IAmmoGetter> IOblivionModGetter.Ammo => _Ammo_Object;
        #endregion
        #region NPCs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<NPC> _NPCs_Object;
        public Group<NPC> NPCs => _NPCs_Object;
        IGroupGetter<INPCGetter> IOblivionModGetter.NPCs => _NPCs_Object;
        #endregion
        #region Creatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Creature> _Creatures_Object;
        public Group<Creature> Creatures => _Creatures_Object;
        IGroupGetter<ICreatureGetter> IOblivionModGetter.Creatures => _Creatures_Object;
        #endregion
        #region LeveledCreatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LeveledCreature> _LeveledCreatures_Object;
        public Group<LeveledCreature> LeveledCreatures => _LeveledCreatures_Object;
        IGroupGetter<ILeveledCreatureGetter> IOblivionModGetter.LeveledCreatures => _LeveledCreatures_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<SoulGem> _SoulGems_Object;
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        IGroupGetter<ISoulGemGetter> IOblivionModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Key> _Keys_Object;
        public Group<Key> Keys => _Keys_Object;
        IGroupGetter<IKeyGetter> IOblivionModGetter.Keys => _Keys_Object;
        #endregion
        #region Potions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Potion> _Potions_Object;
        public Group<Potion> Potions => _Potions_Object;
        IGroupGetter<IPotionGetter> IOblivionModGetter.Potions => _Potions_Object;
        #endregion
        #region Subspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Subspace> _Subspaces_Object;
        public Group<Subspace> Subspaces => _Subspaces_Object;
        IGroupGetter<ISubspaceGetter> IOblivionModGetter.Subspaces => _Subspaces_Object;
        #endregion
        #region SigilStones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<SigilStone> _SigilStones_Object;
        public Group<SigilStone> SigilStones => _SigilStones_Object;
        IGroupGetter<ISigilStoneGetter> IOblivionModGetter.SigilStones => _SigilStones_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LeveledItem> _LeveledItems_Object;
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        IGroupGetter<ILeveledItemGetter> IOblivionModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Weather> _Weathers_Object;
        public Group<Weather> Weathers => _Weathers_Object;
        IGroupGetter<IWeatherGetter> IOblivionModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Climate> _Climates_Object;
        public Group<Climate> Climates => _Climates_Object;
        IGroupGetter<IClimateGetter> IOblivionModGetter.Climates => _Climates_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Region> _Regions_Object;
        public Group<Region> Regions => _Regions_Object;
        IGroupGetter<IRegionGetter> IOblivionModGetter.Regions => _Regions_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ListGroup<CellBlock> _Cells_Object = new ListGroup<CellBlock>();
        public ListGroup<CellBlock> Cells => _Cells_Object;
        IListGroupGetter<ICellBlockGetter> IOblivionModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Worldspace> _Worldspaces_Object;
        public Group<Worldspace> Worldspaces => _Worldspaces_Object;
        IGroupGetter<IWorldspaceGetter> IOblivionModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<DialogTopic> _DialogTopics_Object;
        public Group<DialogTopic> DialogTopics => _DialogTopics_Object;
        IGroupGetter<IDialogTopicGetter> IOblivionModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Quest> _Quests_Object;
        public Group<Quest> Quests => _Quests_Object;
        IGroupGetter<IQuestGetter> IOblivionModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<IdleAnimation> _IdleAnimations_Object;
        public Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        IGroupGetter<IIdleAnimationGetter> IOblivionModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<AIPackage> _AIPackages_Object;
        public Group<AIPackage> AIPackages => _AIPackages_Object;
        IGroupGetter<IAIPackageGetter> IOblivionModGetter.AIPackages => _AIPackages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<CombatStyle> _CombatStyles_Object;
        public Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        IGroupGetter<ICombatStyleGetter> IOblivionModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LoadScreen> _LoadScreens_Object;
        public Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        IGroupGetter<ILoadScreenGetter> IOblivionModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LeveledSpell> _LeveledSpells_Object;
        public Group<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        IGroupGetter<ILeveledSpellGetter> IOblivionModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<AnimatedObject> _AnimatedObjects_Object;
        public Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        IGroupGetter<IAnimatedObjectGetter> IOblivionModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Water> _Waters_Object;
        public Group<Water> Waters => _Waters_Object;
        IGroupGetter<IWaterGetter> IOblivionModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<EffectShader> _EffectShaders_Object;
        public Group<EffectShader> EffectShaders => _EffectShaders_Object;
        IGroupGetter<IEffectShaderGetter> IOblivionModGetter.EffectShaders => _EffectShaders_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IOblivionModGetter rhs)) return false;
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(OblivionMod obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => OblivionModXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((OblivionModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static OblivionMod CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static OblivionMod CreateFromXml(
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static OblivionMod CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new OblivionMod() : null;
                    break;
                default:
                    break;
            }
            var ret = new OblivionMod();
            ((OblivionModSetterCommon)((IOblivionModGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static OblivionMod CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMod CreateFromXml(
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMod CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static OblivionMod CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static OblivionMod CreateFromXml(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static OblivionMod CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((OblivionMod_FieldIndex)index)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public GameMode GameMode => GameMode.Oblivion;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, ModKey? modKeyOverride) => this.WriteToBinary(path, modKeyOverride, importMask: null);
        Task IModGetter.WriteToBinaryAsync(string path, ModKey? modKeyOverride) => this.WriteToBinaryAsync(path, modKeyOverride);
        void IModGetter.WriteToBinaryParallel(string path, ModKey? modKeyOverride) => this.WriteToBinaryParallel(path, modKeyOverride);
        public void AddRecords(
            OblivionMod rhsMod,
            GroupMask mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(rhsMod.GameSettings.Items.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(rhsMod.Globals.Items.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.Items.Set(rhsMod.Classes.Items.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.Items.Set(rhsMod.Factions.Items.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.Items.Set(rhsMod.Hairs.Items.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.Items.Set(rhsMod.Eyes.Items.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.Items.Set(rhsMod.Races.Items.Items);
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.Items.Set(rhsMod.Sounds.Items.Items);
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.Items.Set(rhsMod.Skills.Items.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.Items.Set(rhsMod.MagicEffects.Items.Items);
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.Items.Set(rhsMod.Scripts.Items.Items);
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.Items.Set(rhsMod.LandTextures.Items.Items);
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.Items.Set(rhsMod.Enchantments.Items.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.Items.Set(rhsMod.Spells.Items.Items);
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.Items.Set(rhsMod.Birthsigns.Items.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.Items.Set(rhsMod.Activators.Items.Items);
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.Items.Set(rhsMod.AlchemicalApparatus.Items.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.Items.Set(rhsMod.Armors.Items.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.Items.Set(rhsMod.Books.Items.Items);
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.Items.Set(rhsMod.Clothes.Items.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.Items.Set(rhsMod.Containers.Items.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.Items.Set(rhsMod.Doors.Items.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.Items.Set(rhsMod.Ingredients.Items.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.Items.Set(rhsMod.Lights.Items.Items);
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.Items.Set(rhsMod.Miscellaneous.Items.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.Items.Set(rhsMod.Statics.Items.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.Items.Set(rhsMod.Grasses.Items.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.Items.Set(rhsMod.Trees.Items.Items);
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.Items.Set(rhsMod.Flora.Items.Items);
            }
            if (mask?.Furnature ?? true)
            {
                this.Furnature.Items.Set(rhsMod.Furnature.Items.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.Items.Set(rhsMod.Weapons.Items.Items);
            }
            if (mask?.Ammo ?? true)
            {
                this.Ammo.Items.Set(rhsMod.Ammo.Items.Items);
            }
            if (mask?.NPCs ?? true)
            {
                this.NPCs.Items.Set(rhsMod.NPCs.Items.Items);
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.Items.Set(rhsMod.Creatures.Items.Items);
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.Items.Set(rhsMod.LeveledCreatures.Items.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.Items.Set(rhsMod.SoulGems.Items.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.Items.Set(rhsMod.Keys.Items.Items);
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.Items.Set(rhsMod.Potions.Items.Items);
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.Items.Set(rhsMod.Subspaces.Items.Items);
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.Items.Set(rhsMod.SigilStones.Items.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.Items.Set(rhsMod.LeveledItems.Items.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.Items.Set(rhsMod.Weathers.Items.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.Items.Set(rhsMod.Climates.Items.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.Items.Set(rhsMod.Regions.Items.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Items.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.Items.Set(rhsMod.Worldspaces.Items.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.Items.Set(rhsMod.DialogTopics.Items.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.Items.Set(rhsMod.Quests.Items.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.Items.Set(rhsMod.IdleAnimations.Items.Items);
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.Items.Set(rhsMod.AIPackages.Items.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.Items.Set(rhsMod.CombatStyles.Items.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.Items.Set(rhsMod.LoadScreens.Items.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.Items.Set(rhsMod.LeveledSpells.Items.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.Items.Set(rhsMod.AnimatedObjects.Items.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.Items.Set(rhsMod.Waters.Items.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.Items.Set(rhsMod.EffectShaders.Items.Items);
            }
        }

        public Dictionary<FormKey, IMajorRecordCommon> CopyInDuplicate(
            OblivionMod rhs,
            GroupMask mask = null)
        {
            var duppedRecords = new List<(IMajorRecordCommon Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(
                    rhs.GameSettings.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(
                    rhs.Globals.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.Items.Set(
                    rhs.Classes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Class>());
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.Items.Set(
                    rhs.Factions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Faction>());
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.Items.Set(
                    rhs.Hairs.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hair>());
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.Items.Set(
                    rhs.Eyes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Eye>());
            }
            if (mask?.Races ?? true)
            {
                this.Races.Items.Set(
                    rhs.Races.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Race>());
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.Items.Set(
                    rhs.Sounds.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Sound>());
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.Items.Set(
                    rhs.Skills.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SkillRecord>());
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.Items.Set(
                    rhs.MagicEffects.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MagicEffect>());
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.Items.Set(
                    rhs.Scripts.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Script>());
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.Items.Set(
                    rhs.LandTextures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LandTexture>());
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.Items.Set(
                    rhs.Enchantments.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Enchantment>());
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.Items.Set(
                    rhs.Spells.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SpellUnleveled>());
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.Items.Set(
                    rhs.Birthsigns.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Birthsign>());
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.Items.Set(
                    rhs.Activators.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Activator>());
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.Items.Set(
                    rhs.AlchemicalApparatus.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AlchemicalApparatus>());
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.Items.Set(
                    rhs.Armors.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Armor>());
            }
            if (mask?.Books ?? true)
            {
                this.Books.Items.Set(
                    rhs.Books.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Book>());
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.Items.Set(
                    rhs.Clothes.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Clothing>());
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.Items.Set(
                    rhs.Containers.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Container>());
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.Items.Set(
                    rhs.Doors.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Door>());
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.Items.Set(
                    rhs.Ingredients.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingredient>());
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.Items.Set(
                    rhs.Lights.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Light>());
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.Items.Set(
                    rhs.Miscellaneous.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Miscellaneous>());
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.Items.Set(
                    rhs.Statics.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Static>());
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.Items.Set(
                    rhs.Grasses.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Grass>());
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.Items.Set(
                    rhs.Trees.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Tree>());
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.Items.Set(
                    rhs.Flora.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Flora>());
            }
            if (mask?.Furnature ?? true)
            {
                this.Furnature.Items.Set(
                    rhs.Furnature.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Furnature>());
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.Items.Set(
                    rhs.Weapons.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weapon>());
            }
            if (mask?.Ammo ?? true)
            {
                this.Ammo.Items.Set(
                    rhs.Ammo.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ammo>());
            }
            if (mask?.NPCs ?? true)
            {
                this.NPCs.Items.Set(
                    rhs.NPCs.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<NPC>());
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.Items.Set(
                    rhs.Creatures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Creature>());
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.Items.Set(
                    rhs.LeveledCreatures.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledCreature>());
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.Items.Set(
                    rhs.SoulGems.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoulGem>());
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.Items.Set(
                    rhs.Keys.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Key>());
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.Items.Set(
                    rhs.Potions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Potion>());
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.Items.Set(
                    rhs.Subspaces.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Subspace>());
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.Items.Set(
                    rhs.SigilStones.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SigilStone>());
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.Items.Set(
                    rhs.LeveledItems.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledItem>());
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.Items.Set(
                    rhs.Weathers.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weather>());
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.Items.Set(
                    rhs.Climates.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Climate>());
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.Items.Set(
                    rhs.Regions.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Region>());
            }
            if (mask?.Cells ?? true)
            {
                this.Cells.Items.AddRange(
                    rhs.Cells.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CellBlock>());
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.Items.Set(
                    rhs.Worldspaces.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Worldspace>());
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.Items.Set(
                    rhs.DialogTopics.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DialogTopic>());
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.Items.Set(
                    rhs.Quests.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Quest>());
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.Items.Set(
                    rhs.IdleAnimations.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<IdleAnimation>());
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.Items.Set(
                    rhs.AIPackages.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AIPackage>());
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.Items.Set(
                    rhs.CombatStyles.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CombatStyle>());
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.Items.Set(
                    rhs.LoadScreens.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LoadScreen>());
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.Items.Set(
                    rhs.LeveledSpells.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledSpell>());
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.Items.Set(
                    rhs.AnimatedObjects.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AnimatedObject>());
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.Items.Set(
                    rhs.Waters.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Water>());
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.Items.Set(
                    rhs.EffectShaders.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<EffectShader>());
            }
            Dictionary<FormKey, IMajorRecordCommon> router = new Dictionary<FormKey, IMajorRecordCommon>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, IMajorRecordCommon>(dup.OriginalFormKey, dup.Record)));
            var package = new LinkingPackage<OblivionMod>(this, default);
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links.WhereCastable<ILinkGetter, IFormIDLink>())
                {
                    if (link.TryResolveFormKey(package, out var formKey)
                        && router.TryGetValue(formKey, out var duppedRecord))
                    {
                        link.FormKey = duppedRecord.FormKey;
                    }
                }
            }
            return router;
        }

        public void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.EnumerateMajorRecords().Count();
            count += GameSettings.Items.Count > 0 ? 1 : 0;
            count += Globals.Items.Count > 0 ? 1 : 0;
            count += Classes.Items.Count > 0 ? 1 : 0;
            count += Factions.Items.Count > 0 ? 1 : 0;
            count += Hairs.Items.Count > 0 ? 1 : 0;
            count += Eyes.Items.Count > 0 ? 1 : 0;
            count += Races.Items.Count > 0 ? 1 : 0;
            count += Sounds.Items.Count > 0 ? 1 : 0;
            count += Skills.Items.Count > 0 ? 1 : 0;
            count += MagicEffects.Items.Count > 0 ? 1 : 0;
            count += Scripts.Items.Count > 0 ? 1 : 0;
            count += LandTextures.Items.Count > 0 ? 1 : 0;
            count += Enchantments.Items.Count > 0 ? 1 : 0;
            count += Spells.Items.Count > 0 ? 1 : 0;
            count += Birthsigns.Items.Count > 0 ? 1 : 0;
            count += Activators.Items.Count > 0 ? 1 : 0;
            count += AlchemicalApparatus.Items.Count > 0 ? 1 : 0;
            count += Armors.Items.Count > 0 ? 1 : 0;
            count += Books.Items.Count > 0 ? 1 : 0;
            count += Clothes.Items.Count > 0 ? 1 : 0;
            count += Containers.Items.Count > 0 ? 1 : 0;
            count += Doors.Items.Count > 0 ? 1 : 0;
            count += Ingredients.Items.Count > 0 ? 1 : 0;
            count += Lights.Items.Count > 0 ? 1 : 0;
            count += Miscellaneous.Items.Count > 0 ? 1 : 0;
            count += Statics.Items.Count > 0 ? 1 : 0;
            count += Grasses.Items.Count > 0 ? 1 : 0;
            count += Trees.Items.Count > 0 ? 1 : 0;
            count += Flora.Items.Count > 0 ? 1 : 0;
            count += Furnature.Items.Count > 0 ? 1 : 0;
            count += Weapons.Items.Count > 0 ? 1 : 0;
            count += Ammo.Items.Count > 0 ? 1 : 0;
            count += NPCs.Items.Count > 0 ? 1 : 0;
            count += Creatures.Items.Count > 0 ? 1 : 0;
            count += LeveledCreatures.Items.Count > 0 ? 1 : 0;
            count += SoulGems.Items.Count > 0 ? 1 : 0;
            count += Keys.Items.Count > 0 ? 1 : 0;
            count += Potions.Items.Count > 0 ? 1 : 0;
            count += Subspaces.Items.Count > 0 ? 1 : 0;
            count += SigilStones.Items.Count > 0 ? 1 : 0;
            count += LeveledItems.Items.Count > 0 ? 1 : 0;
            count += Weathers.Items.Count > 0 ? 1 : 0;
            count += Climates.Items.Count > 0 ? 1 : 0;
            count += Regions.Items.Count > 0 ? 1 : 0;
            count += Cells.Items.Count > 0 ? 1 : 0;
            count += Worldspaces.Items.Count > 0 ? 1 : 0;
            count += DialogTopics.Items.Count > 0 ? 1 : 0;
            count += Quests.Items.Count > 0 ? 1 : 0;
            count += IdleAnimations.Items.Count > 0 ? 1 : 0;
            count += AIPackages.Items.Count > 0 ? 1 : 0;
            count += CombatStyles.Items.Count > 0 ? 1 : 0;
            count += LoadScreens.Items.Count > 0 ? 1 : 0;
            count += LeveledSpells.Items.Count > 0 ? 1 : 0;
            count += AnimatedObjects.Items.Count > 0 ? 1 : 0;
            count += Waters.Items.Count > 0 ? 1 : 0;
            count += EffectShaders.Items.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        public IEnumerable<ILinkGetter> Links => OblivionModCommon.Instance.GetLinks(this);
        public static Task<OblivionMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey)
        {
            return CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: null);
        }

        public static async Task<(OblivionMod Mod, OblivionMod_ErrorMask ErrorMask)> CreateFromXmlFolderWithErrorMask(
            DirectoryPath dir,
            ModKey modKey)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = await CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: errorMaskBuilder);
            var errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
            return (ret, errorMask);
        }

        public static async Task<OblivionMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey,
            ErrorMaskBuilder errorMask)
        {
            var item = new OblivionMod(modKey);
            var tasks = new List<Task>();
            item.ModHeader.CopyInFromXml(
                path: Path.Combine(dir.Path, "ModHeader.xml"),
                errorMask: errorMask,
                translationMask: null);
            tasks.Add(Task.Run(() => item.GameSettings.CreateFromXmlFolder<GameSetting>(
                dir: dir,
                name: nameof(GameSettings),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.GameSettings)));
            tasks.Add(Task.Run(() => item.Globals.CreateFromXmlFolder<Global>(
                dir: dir,
                name: nameof(Globals),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Globals)));
            tasks.Add(Task.Run(() => item.Classes.CreateFromXmlFolder<Class>(
                dir: dir,
                name: nameof(Classes),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Classes)));
            tasks.Add(Task.Run(() => item.Factions.CreateFromXmlFolder<Faction>(
                dir: dir,
                name: nameof(Factions),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Factions)));
            tasks.Add(Task.Run(() => item.Hairs.CreateFromXmlFolder<Hair>(
                dir: dir,
                name: nameof(Hairs),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Hairs)));
            tasks.Add(Task.Run(() => item.Eyes.CreateFromXmlFolder<Eye>(
                dir: dir,
                name: nameof(Eyes),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Eyes)));
            tasks.Add(Task.Run(() => item.Races.CreateFromXmlFolder<Race>(
                dir: dir,
                name: nameof(Races),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Races)));
            tasks.Add(Task.Run(() => item.Sounds.CreateFromXmlFolder<Sound>(
                dir: dir,
                name: nameof(Sounds),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Sounds)));
            tasks.Add(Task.Run(() => item.Skills.CreateFromXmlFolder<SkillRecord>(
                dir: dir,
                name: nameof(Skills),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Skills)));
            tasks.Add(Task.Run(() => item.MagicEffects.CreateFromXmlFolder<MagicEffect>(
                dir: dir,
                name: nameof(MagicEffects),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.MagicEffects)));
            tasks.Add(Task.Run(() => item.CreateFromXmlFolderScripts(
                dir: dir,
                name: nameof(Scripts),
                index: (int)OblivionMod_FieldIndex.Scripts,
                errorMask: errorMask)));
            tasks.Add(Task.Run(() => item.LandTextures.CreateFromXmlFolder<LandTexture>(
                dir: dir,
                name: nameof(LandTextures),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.LandTextures)));
            tasks.Add(Task.Run(() => item.Enchantments.CreateFromXmlFolder<Enchantment>(
                dir: dir,
                name: nameof(Enchantments),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Enchantments)));
            tasks.Add(Task.Run(() => item.Spells.CreateFromXmlFolder<SpellUnleveled>(
                dir: dir,
                name: nameof(Spells),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Spells)));
            tasks.Add(Task.Run(() => item.Birthsigns.CreateFromXmlFolder<Birthsign>(
                dir: dir,
                name: nameof(Birthsigns),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Birthsigns)));
            tasks.Add(Task.Run(() => item.Activators.CreateFromXmlFolder<Activator>(
                dir: dir,
                name: nameof(Activators),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Activators)));
            tasks.Add(Task.Run(() => item.AlchemicalApparatus.CreateFromXmlFolder<AlchemicalApparatus>(
                dir: dir,
                name: nameof(AlchemicalApparatus),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.AlchemicalApparatus)));
            tasks.Add(Task.Run(() => item.Armors.CreateFromXmlFolder<Armor>(
                dir: dir,
                name: nameof(Armors),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Armors)));
            tasks.Add(Task.Run(() => item.Books.CreateFromXmlFolder<Book>(
                dir: dir,
                name: nameof(Books),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Books)));
            tasks.Add(Task.Run(() => item.Clothes.CreateFromXmlFolder<Clothing>(
                dir: dir,
                name: nameof(Clothes),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Clothes)));
            tasks.Add(Task.Run(() => item.Containers.CreateFromXmlFolder<Container>(
                dir: dir,
                name: nameof(Containers),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Containers)));
            tasks.Add(Task.Run(() => item.Doors.CreateFromXmlFolder<Door>(
                dir: dir,
                name: nameof(Doors),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Doors)));
            tasks.Add(Task.Run(() => item.Ingredients.CreateFromXmlFolder<Ingredient>(
                dir: dir,
                name: nameof(Ingredients),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Ingredients)));
            tasks.Add(Task.Run(() => item.Lights.CreateFromXmlFolder<Light>(
                dir: dir,
                name: nameof(Lights),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Lights)));
            tasks.Add(Task.Run(() => item.Miscellaneous.CreateFromXmlFolder<Miscellaneous>(
                dir: dir,
                name: nameof(Miscellaneous),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Miscellaneous)));
            tasks.Add(Task.Run(() => item.Statics.CreateFromXmlFolder<Static>(
                dir: dir,
                name: nameof(Statics),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Statics)));
            tasks.Add(Task.Run(() => item.Grasses.CreateFromXmlFolder<Grass>(
                dir: dir,
                name: nameof(Grasses),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Grasses)));
            tasks.Add(Task.Run(() => item.Trees.CreateFromXmlFolder<Tree>(
                dir: dir,
                name: nameof(Trees),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Trees)));
            tasks.Add(Task.Run(() => item.Flora.CreateFromXmlFolder<Flora>(
                dir: dir,
                name: nameof(Flora),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Flora)));
            tasks.Add(Task.Run(() => item.Furnature.CreateFromXmlFolder<Furnature>(
                dir: dir,
                name: nameof(Furnature),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Furnature)));
            tasks.Add(Task.Run(() => item.Weapons.CreateFromXmlFolder<Weapon>(
                dir: dir,
                name: nameof(Weapons),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Weapons)));
            tasks.Add(Task.Run(() => item.Ammo.CreateFromXmlFolder<Ammo>(
                dir: dir,
                name: nameof(Ammo),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Ammo)));
            tasks.Add(Task.Run(() => item.NPCs.CreateFromXmlFolder<NPC>(
                dir: dir,
                name: nameof(NPCs),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.NPCs)));
            tasks.Add(Task.Run(() => item.Creatures.CreateFromXmlFolder<Creature>(
                dir: dir,
                name: nameof(Creatures),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Creatures)));
            tasks.Add(Task.Run(() => item.LeveledCreatures.CreateFromXmlFolder<LeveledCreature>(
                dir: dir,
                name: nameof(LeveledCreatures),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.LeveledCreatures)));
            tasks.Add(Task.Run(() => item.SoulGems.CreateFromXmlFolder<SoulGem>(
                dir: dir,
                name: nameof(SoulGems),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.SoulGems)));
            tasks.Add(Task.Run(() => item.Keys.CreateFromXmlFolder<Key>(
                dir: dir,
                name: nameof(Keys),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Keys)));
            tasks.Add(Task.Run(() => item.Potions.CreateFromXmlFolder<Potion>(
                dir: dir,
                name: nameof(Potions),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Potions)));
            tasks.Add(Task.Run(() => item.Subspaces.CreateFromXmlFolder<Subspace>(
                dir: dir,
                name: nameof(Subspaces),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Subspaces)));
            tasks.Add(Task.Run(() => item.SigilStones.CreateFromXmlFolder<SigilStone>(
                dir: dir,
                name: nameof(SigilStones),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.SigilStones)));
            tasks.Add(Task.Run(() => item.LeveledItems.CreateFromXmlFolder<LeveledItem>(
                dir: dir,
                name: nameof(LeveledItems),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.LeveledItems)));
            tasks.Add(Task.Run(() => item.Weathers.CreateFromXmlFolder<Weather>(
                dir: dir,
                name: nameof(Weathers),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Weathers)));
            tasks.Add(Task.Run(() => item.Climates.CreateFromXmlFolder<Climate>(
                dir: dir,
                name: nameof(Climates),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Climates)));
            tasks.Add(Task.Run(() => item.Regions.CreateFromXmlFolder<Region>(
                dir: dir,
                name: nameof(Regions),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Regions)));
            tasks.Add(Task.Run(() => item.Cells.CreateFromXmlFolder<CellBlock>(
                dir: dir,
                name: nameof(Cells),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Cells)));
            tasks.Add(Task.Run(() => item.CreateFromXmlFolderWorldspaces(
                dir: dir,
                name: nameof(Worldspaces),
                index: (int)OblivionMod_FieldIndex.Worldspaces,
                errorMask: errorMask)));
            tasks.Add(Task.Run(() => item.DialogTopics.CreateFromXmlFolder<DialogTopic>(
                dir: dir,
                name: nameof(DialogTopics),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.DialogTopics)));
            tasks.Add(Task.Run(() => item.Quests.CreateFromXmlFolder<Quest>(
                dir: dir,
                name: nameof(Quests),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Quests)));
            tasks.Add(Task.Run(() => item.IdleAnimations.CreateFromXmlFolder<IdleAnimation>(
                dir: dir,
                name: nameof(IdleAnimations),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.IdleAnimations)));
            tasks.Add(Task.Run(() => item.AIPackages.CreateFromXmlFolder<AIPackage>(
                dir: dir,
                name: nameof(AIPackages),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.AIPackages)));
            tasks.Add(Task.Run(() => item.CombatStyles.CreateFromXmlFolder<CombatStyle>(
                dir: dir,
                name: nameof(CombatStyles),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.CombatStyles)));
            tasks.Add(Task.Run(() => item.LoadScreens.CreateFromXmlFolder<LoadScreen>(
                dir: dir,
                name: nameof(LoadScreens),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.LoadScreens)));
            tasks.Add(Task.Run(() => item.LeveledSpells.CreateFromXmlFolder<LeveledSpell>(
                dir: dir,
                name: nameof(LeveledSpells),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.LeveledSpells)));
            tasks.Add(Task.Run(() => item.AnimatedObjects.CreateFromXmlFolder<AnimatedObject>(
                dir: dir,
                name: nameof(AnimatedObjects),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.AnimatedObjects)));
            tasks.Add(Task.Run(() => item.Waters.CreateFromXmlFolder<Water>(
                dir: dir,
                name: nameof(Waters),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.Waters)));
            tasks.Add(Task.Run(() => item.EffectShaders.CreateFromXmlFolder<EffectShader>(
                dir: dir,
                name: nameof(EffectShaders),
                errorMask: errorMask,
                index: (int)OblivionMod_FieldIndex.EffectShaders)));
            await Task.WhenAll(tasks);
            return item;
        }

        public async Task<OblivionMod_ErrorMask> WriteToXmlFolder(
            DirectoryPath dir,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = null;
            dir.Create();
            using (new FolderCleaner(dir, FolderCleaner.CleanType.AccessTime))
            {
                var tasks = new List<Task>();
                tasks.Add(Task.Run(() => this.ModHeader.WriteToXml(
                    path: Path.Combine(dir.Path, "ModHeader.xml"),
                    errorMask: errorMaskBuilder,
                    translationMask: null)));
                tasks.Add(Task.Run(() => GameSettings.WriteToXmlFolder<GameSetting, GameSetting_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(GameSettings),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.GameSettings)));
                tasks.Add(Task.Run(() => Globals.WriteToXmlFolder<Global, Global_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Globals),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Globals)));
                tasks.Add(Task.Run(() => Classes.WriteToXmlFolder<Class, Class_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Classes),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Classes)));
                tasks.Add(Task.Run(() => Factions.WriteToXmlFolder<Faction, Faction_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Factions),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Factions)));
                tasks.Add(Task.Run(() => Hairs.WriteToXmlFolder<Hair, Hair_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Hairs),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Hairs)));
                tasks.Add(Task.Run(() => Eyes.WriteToXmlFolder<Eye, Eye_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Eyes),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Eyes)));
                tasks.Add(Task.Run(() => Races.WriteToXmlFolder<Race, Race_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Races),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Races)));
                tasks.Add(Task.Run(() => Sounds.WriteToXmlFolder<Sound, Sound_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Sounds),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Sounds)));
                tasks.Add(Task.Run(() => Skills.WriteToXmlFolder<SkillRecord, SkillRecord_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Skills),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Skills)));
                tasks.Add(Task.Run(() => MagicEffects.WriteToXmlFolder<MagicEffect, MagicEffect_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(MagicEffects),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.MagicEffects)));
                tasks.Add(Task.Run(() => WriteToXmlFolderScripts(
                    dir: dir,
                    name: nameof(Scripts),
                    index: (int)OblivionMod_FieldIndex.Scripts,
                    errorMask: errorMaskBuilder)));
                tasks.Add(Task.Run(() => LandTextures.WriteToXmlFolder<LandTexture, LandTexture_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LandTextures),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.LandTextures)));
                tasks.Add(Task.Run(() => Enchantments.WriteToXmlFolder<Enchantment, Enchantment_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Enchantments),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Enchantments)));
                tasks.Add(Task.Run(() => Spells.WriteToXmlFolder<SpellUnleveled, SpellUnleveled_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Spells),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Spells)));
                tasks.Add(Task.Run(() => Birthsigns.WriteToXmlFolder<Birthsign, Birthsign_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Birthsigns),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Birthsigns)));
                tasks.Add(Task.Run(() => Activators.WriteToXmlFolder<Activator, Activator_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Activators),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Activators)));
                tasks.Add(Task.Run(() => AlchemicalApparatus.WriteToXmlFolder<AlchemicalApparatus, AlchemicalApparatus_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(AlchemicalApparatus),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.AlchemicalApparatus)));
                tasks.Add(Task.Run(() => Armors.WriteToXmlFolder<Armor, Armor_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Armors),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Armors)));
                tasks.Add(Task.Run(() => Books.WriteToXmlFolder<Book, Book_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Books),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Books)));
                tasks.Add(Task.Run(() => Clothes.WriteToXmlFolder<Clothing, Clothing_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Clothes),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Clothes)));
                tasks.Add(Task.Run(() => Containers.WriteToXmlFolder<Container, Container_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Containers),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Containers)));
                tasks.Add(Task.Run(() => Doors.WriteToXmlFolder<Door, Door_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Doors),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Doors)));
                tasks.Add(Task.Run(() => Ingredients.WriteToXmlFolder<Ingredient, Ingredient_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Ingredients),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Ingredients)));
                tasks.Add(Task.Run(() => Lights.WriteToXmlFolder<Light, Light_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Lights),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Lights)));
                tasks.Add(Task.Run(() => Miscellaneous.WriteToXmlFolder<Miscellaneous, Miscellaneous_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Miscellaneous),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Miscellaneous)));
                tasks.Add(Task.Run(() => Statics.WriteToXmlFolder<Static, Static_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Statics),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Statics)));
                tasks.Add(Task.Run(() => Grasses.WriteToXmlFolder<Grass, Grass_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Grasses),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Grasses)));
                tasks.Add(Task.Run(() => Trees.WriteToXmlFolder<Tree, Tree_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Trees),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Trees)));
                tasks.Add(Task.Run(() => Flora.WriteToXmlFolder<Flora, Flora_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Flora),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Flora)));
                tasks.Add(Task.Run(() => Furnature.WriteToXmlFolder<Furnature, Furnature_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Furnature),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Furnature)));
                tasks.Add(Task.Run(() => Weapons.WriteToXmlFolder<Weapon, Weapon_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Weapons),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Weapons)));
                tasks.Add(Task.Run(() => Ammo.WriteToXmlFolder<Ammo, Ammo_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Ammo),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Ammo)));
                tasks.Add(Task.Run(() => NPCs.WriteToXmlFolder<NPC, NPC_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(NPCs),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.NPCs)));
                tasks.Add(Task.Run(() => Creatures.WriteToXmlFolder<Creature, Creature_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Creatures),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Creatures)));
                tasks.Add(Task.Run(() => LeveledCreatures.WriteToXmlFolder<LeveledCreature, LeveledCreature_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LeveledCreatures),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.LeveledCreatures)));
                tasks.Add(Task.Run(() => SoulGems.WriteToXmlFolder<SoulGem, SoulGem_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(SoulGems),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.SoulGems)));
                tasks.Add(Task.Run(() => Keys.WriteToXmlFolder<Key, Key_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Keys),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Keys)));
                tasks.Add(Task.Run(() => Potions.WriteToXmlFolder<Potion, Potion_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Potions),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Potions)));
                tasks.Add(Task.Run(() => Subspaces.WriteToXmlFolder<Subspace, Subspace_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Subspaces),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Subspaces)));
                tasks.Add(Task.Run(() => SigilStones.WriteToXmlFolder<SigilStone, SigilStone_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(SigilStones),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.SigilStones)));
                tasks.Add(Task.Run(() => LeveledItems.WriteToXmlFolder<LeveledItem, LeveledItem_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LeveledItems),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.LeveledItems)));
                tasks.Add(Task.Run(() => Weathers.WriteToXmlFolder<Weather, Weather_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Weathers),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Weathers)));
                tasks.Add(Task.Run(() => Climates.WriteToXmlFolder<Climate, Climate_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Climates),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Climates)));
                tasks.Add(Task.Run(() => Regions.WriteToXmlFolder<Region, Region_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Regions),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Regions)));
                tasks.Add(Task.Run(() => Cells.WriteToXmlFolder(
                    dir: dir.Path,
                    name: nameof(Cells),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Cells)));
                tasks.Add(Task.Run(() => WriteToXmlFolderWorldspaces(
                    dir: dir,
                    name: nameof(Worldspaces),
                    index: (int)OblivionMod_FieldIndex.Worldspaces,
                    errorMask: errorMaskBuilder)));
                tasks.Add(Task.Run(() => DialogTopics.WriteToXmlFolder<DialogTopic, DialogTopic_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(DialogTopics),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.DialogTopics)));
                tasks.Add(Task.Run(() => Quests.WriteToXmlFolder<Quest, Quest_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Quests),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Quests)));
                tasks.Add(Task.Run(() => IdleAnimations.WriteToXmlFolder<IdleAnimation, IdleAnimation_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(IdleAnimations),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.IdleAnimations)));
                tasks.Add(Task.Run(() => AIPackages.WriteToXmlFolder<AIPackage, AIPackage_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(AIPackages),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.AIPackages)));
                tasks.Add(Task.Run(() => CombatStyles.WriteToXmlFolder<CombatStyle, CombatStyle_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(CombatStyles),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.CombatStyles)));
                tasks.Add(Task.Run(() => LoadScreens.WriteToXmlFolder<LoadScreen, LoadScreen_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LoadScreens),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.LoadScreens)));
                tasks.Add(Task.Run(() => LeveledSpells.WriteToXmlFolder<LeveledSpell, LeveledSpell_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LeveledSpells),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.LeveledSpells)));
                tasks.Add(Task.Run(() => AnimatedObjects.WriteToXmlFolder<AnimatedObject, AnimatedObject_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(AnimatedObjects),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.AnimatedObjects)));
                tasks.Add(Task.Run(() => Waters.WriteToXmlFolder<Water, Water_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Waters),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.Waters)));
                tasks.Add(Task.Run(() => EffectShaders.WriteToXmlFolder<EffectShader, EffectShader_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(EffectShaders),
                    errorMask: errorMaskBuilder,
                    index: (int)OblivionMod_FieldIndex.EffectShaders)));
                await Task.WhenAll(tasks);
            }
            return null;
        }
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<OblivionMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask importMask = null)
        {
            return await CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null).ConfigureAwait(false);
        }

        [DebuggerStepThrough]
        public static async Task<(OblivionMod Object, OblivionMod_ErrorMask ErrorMask)> CreateFromBinaryWithErrorMask(
            MutagenFrame frame,
            ModKey modKey,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = await CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder).ConfigureAwait(false);
            return (ret, OblivionMod_ErrorMask.Factory(errorMaskBuilder));
        }

        public static async Task<OblivionMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            var ret = new OblivionMod(modKey);
            await ((OblivionModSetterCommon)((IOblivionModGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        public static async Task<OblivionMod> CreateFromBinary(
            string path,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<(OblivionMod Object, OblivionMod_ErrorMask ErrorMask)> CreateFromBinaryWithErrorMask(
            string path,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CreateFromBinaryWithErrorMask(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<OblivionMod> CreateFromBinary(
            string path,
            ErrorMaskBuilder errorMask,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static async Task<OblivionMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<(OblivionMod Object, OblivionMod_ErrorMask ErrorMask)> CreateFromBinaryWithErrorMask(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinaryWithErrorMask(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<OblivionMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        public static IOblivionModGetter CreateFromBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            ModKey modKey)
        {
            return OblivionModBinaryWrapper.OblivionModFactory(
                new BinaryMemoryReadStream(bytes),
                modKey: modKey);
        }

        public static IOblivionModGetter CreateFromBinaryWrapper(
            string path,
            ModKey? modKeyOverride = null)
        {
            return CreateFromBinaryWrapper(
                stream: new BinaryReadStream(path),
                modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)));
        }

        public static IOblivionModGetter CreateFromBinaryWrapper(
            IBinaryReadStream stream,
            ModKey modKey)
        {
            return OblivionModBinaryWrapper.OblivionModFactory(
                stream: stream,
                modKey: modKey);
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IOblivionModGetter)rhs, include);

        void IClearable.Clear()
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static OblivionMod GetNew()
        {
            return new OblivionMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IOblivionMod :
        IOblivionModGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IOblivionMod>
    {
        new ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
        new Group<Hair> Hairs { get; }
        new Group<Eye> Eyes { get; }
        new Group<Race> Races { get; }
        new Group<Sound> Sounds { get; }
        new Group<SkillRecord> Skills { get; }
        new Group<MagicEffect> MagicEffects { get; }
        new Group<Script> Scripts { get; }
        new Group<LandTexture> LandTextures { get; }
        new Group<Enchantment> Enchantments { get; }
        new Group<SpellUnleveled> Spells { get; }
        new Group<Birthsign> Birthsigns { get; }
        new Group<Activator> Activators { get; }
        new Group<AlchemicalApparatus> AlchemicalApparatus { get; }
        new Group<Armor> Armors { get; }
        new Group<Book> Books { get; }
        new Group<Clothing> Clothes { get; }
        new Group<Container> Containers { get; }
        new Group<Door> Doors { get; }
        new Group<Ingredient> Ingredients { get; }
        new Group<Light> Lights { get; }
        new Group<Miscellaneous> Miscellaneous { get; }
        new Group<Static> Statics { get; }
        new Group<Grass> Grasses { get; }
        new Group<Tree> Trees { get; }
        new Group<Flora> Flora { get; }
        new Group<Furnature> Furnature { get; }
        new Group<Weapon> Weapons { get; }
        new Group<Ammo> Ammo { get; }
        new Group<NPC> NPCs { get; }
        new Group<Creature> Creatures { get; }
        new Group<LeveledCreature> LeveledCreatures { get; }
        new Group<SoulGem> SoulGems { get; }
        new Group<Key> Keys { get; }
        new Group<Potion> Potions { get; }
        new Group<Subspace> Subspaces { get; }
        new Group<SigilStone> SigilStones { get; }
        new Group<LeveledItem> LeveledItems { get; }
        new Group<Weather> Weathers { get; }
        new Group<Climate> Climates { get; }
        new Group<Region> Regions { get; }
        new ListGroup<CellBlock> Cells { get; }
        new Group<Worldspace> Worldspaces { get; }
        new Group<DialogTopic> DialogTopics { get; }
        new Group<Quest> Quests { get; }
        new Group<IdleAnimation> IdleAnimations { get; }
        new Group<AIPackage> AIPackages { get; }
        new Group<CombatStyle> CombatStyles { get; }
        new Group<LoadScreen> LoadScreens { get; }
        new Group<LeveledSpell> LeveledSpells { get; }
        new Group<AnimatedObject> AnimatedObjects { get; }
        new Group<Water> Waters { get; }
        new Group<EffectShader> EffectShaders { get; }
    }

    public partial interface IOblivionModGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IOblivionModGetter>,
        IXmlItem,
        ILinkContainer
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region ModHeader
        IModHeaderGetter ModHeader { get; }
        #endregion
        #region GameSettings
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        #endregion
        #region Globals
        IGroupGetter<IGlobalGetter> Globals { get; }
        #endregion
        #region Classes
        IGroupGetter<IClassGetter> Classes { get; }
        #endregion
        #region Factions
        IGroupGetter<IFactionGetter> Factions { get; }
        #endregion
        #region Hairs
        IGroupGetter<IHairGetter> Hairs { get; }
        #endregion
        #region Eyes
        IGroupGetter<IEyeGetter> Eyes { get; }
        #endregion
        #region Races
        IGroupGetter<IRaceGetter> Races { get; }
        #endregion
        #region Sounds
        IGroupGetter<ISoundGetter> Sounds { get; }
        #endregion
        #region Skills
        IGroupGetter<ISkillRecordGetter> Skills { get; }
        #endregion
        #region MagicEffects
        IGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        #endregion
        #region Scripts
        IGroupGetter<IScriptGetter> Scripts { get; }
        #endregion
        #region LandTextures
        IGroupGetter<ILandTextureGetter> LandTextures { get; }
        #endregion
        #region Enchantments
        IGroupGetter<IEnchantmentGetter> Enchantments { get; }
        #endregion
        #region Spells
        IGroupGetter<ISpellUnleveledGetter> Spells { get; }
        #endregion
        #region Birthsigns
        IGroupGetter<IBirthsignGetter> Birthsigns { get; }
        #endregion
        #region Activators
        IGroupGetter<IActivatorGetter> Activators { get; }
        #endregion
        #region AlchemicalApparatus
        IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus { get; }
        #endregion
        #region Armors
        IGroupGetter<IArmorGetter> Armors { get; }
        #endregion
        #region Books
        IGroupGetter<IBookGetter> Books { get; }
        #endregion
        #region Clothes
        IGroupGetter<IClothingGetter> Clothes { get; }
        #endregion
        #region Containers
        IGroupGetter<IContainerGetter> Containers { get; }
        #endregion
        #region Doors
        IGroupGetter<IDoorGetter> Doors { get; }
        #endregion
        #region Ingredients
        IGroupGetter<IIngredientGetter> Ingredients { get; }
        #endregion
        #region Lights
        IGroupGetter<ILightGetter> Lights { get; }
        #endregion
        #region Miscellaneous
        IGroupGetter<IMiscellaneousGetter> Miscellaneous { get; }
        #endregion
        #region Statics
        IGroupGetter<IStaticGetter> Statics { get; }
        #endregion
        #region Grasses
        IGroupGetter<IGrassGetter> Grasses { get; }
        #endregion
        #region Trees
        IGroupGetter<ITreeGetter> Trees { get; }
        #endregion
        #region Flora
        IGroupGetter<IFloraGetter> Flora { get; }
        #endregion
        #region Furnature
        IGroupGetter<IFurnatureGetter> Furnature { get; }
        #endregion
        #region Weapons
        IGroupGetter<IWeaponGetter> Weapons { get; }
        #endregion
        #region Ammo
        IGroupGetter<IAmmoGetter> Ammo { get; }
        #endregion
        #region NPCs
        IGroupGetter<INPCGetter> NPCs { get; }
        #endregion
        #region Creatures
        IGroupGetter<ICreatureGetter> Creatures { get; }
        #endregion
        #region LeveledCreatures
        IGroupGetter<ILeveledCreatureGetter> LeveledCreatures { get; }
        #endregion
        #region SoulGems
        IGroupGetter<ISoulGemGetter> SoulGems { get; }
        #endregion
        #region Keys
        IGroupGetter<IKeyGetter> Keys { get; }
        #endregion
        #region Potions
        IGroupGetter<IPotionGetter> Potions { get; }
        #endregion
        #region Subspaces
        IGroupGetter<ISubspaceGetter> Subspaces { get; }
        #endregion
        #region SigilStones
        IGroupGetter<ISigilStoneGetter> SigilStones { get; }
        #endregion
        #region LeveledItems
        IGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        #endregion
        #region Weathers
        IGroupGetter<IWeatherGetter> Weathers { get; }
        #endregion
        #region Climates
        IGroupGetter<IClimateGetter> Climates { get; }
        #endregion
        #region Regions
        IGroupGetter<IRegionGetter> Regions { get; }
        #endregion
        #region Cells
        IListGroupGetter<ICellBlockGetter> Cells { get; }
        #endregion
        #region Worldspaces
        IGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        #endregion
        #region DialogTopics
        IGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        #endregion
        #region Quests
        IGroupGetter<IQuestGetter> Quests { get; }
        #endregion
        #region IdleAnimations
        IGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        #endregion
        #region AIPackages
        IGroupGetter<IAIPackageGetter> AIPackages { get; }
        #endregion
        #region CombatStyles
        IGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        #endregion
        #region LoadScreens
        IGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        #endregion
        #region LeveledSpells
        IGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        #endregion
        #region AnimatedObjects
        IGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        #endregion
        #region Waters
        IGroupGetter<IWaterGetter> Waters { get; }
        #endregion
        #region EffectShaders
        IGroupGetter<IEffectShaderGetter> EffectShaders { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class OblivionModMixIn
    {
        public static void Clear(this IOblivionMod item)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static OblivionMod_Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static OblivionMod_Mask<bool> GetHasBeenSetMask(this IOblivionModGetter item)
        {
            var ret = new OblivionMod_Mask<bool>();
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IOblivionModGetter item,
            IOblivionModGetter rhs)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IOblivionMod lhs,
            IOblivionModGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            OblivionMod_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            OblivionMod_TranslationMask copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IOblivionMod item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IOblivionMod item,
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            string path,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            string path,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            OblivionMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IOblivionMod item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            OblivionMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetGroupGetter<T>(this IOblivionModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this IOblivionMod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()).GetGroup<T>(obj: obj);
        }

        public static Task WriteToBinaryAsync(
            this IOblivionModGetter item,
            Stream stream,
            ModKey modKey)
        {
            return OblivionModCommon.WriteAsync(
                item: item,
                stream: stream,
                modKey: modKey);
        }

        public static async Task WriteToBinaryAsync(
            this IOblivionModGetter item,
            string path,
            ModKey? modKeyOverride)
        {
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                await OblivionModCommon.WriteAsync(
                    item: item,
                    stream: stream,
                    modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)));
            }
        }
        public static void WriteToBinaryParallel(
            this IOblivionModGetter item,
            Stream stream,
            ModKey modKey)
        {
            OblivionModCommon.WriteParallel(
                item: item,
                stream: stream,
                modKey: modKey);
        }

        public static void WriteToBinaryParallel(
            this IOblivionModGetter item,
            string path,
            ModKey? modKeyOverride)
        {
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                OblivionModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)));
            }
        }

        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IOblivionModGetter obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()).EnumerateMajorRecords(obj: obj);
        }

        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IOblivionModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IOblivionMod obj)
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()).EnumerateMajorRecords(obj: obj);
        }

        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IOblivionMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask importMask = null)
        {
            await CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null).ConfigureAwait(false);
        }

        [DebuggerStepThrough]
        public static async Task<OblivionMod_ErrorMask> CopyInFromBinaryWithErrorMask(
            this IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            await CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder).ConfigureAwait(false);
            return OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            await ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<OblivionMod_ErrorMask> CopyInFromBinaryWithErrorMask(
            this IOblivionMod item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CopyInFromBinaryWithErrorMask(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            string path,
            ErrorMaskBuilder errorMask,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<OblivionMod_ErrorMask> CopyInFromBinaryWithErrorMask(
            this IOblivionMod item,
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                return await CopyInFromBinaryWithErrorMask(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task CopyInFromBinary(
            this IOblivionMod item,
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Oblivion))
            {
                var frame = new MutagenFrame(reader);
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
        Skills = 9,
        MagicEffects = 10,
        Scripts = 11,
        LandTextures = 12,
        Enchantments = 13,
        Spells = 14,
        Birthsigns = 15,
        Activators = 16,
        AlchemicalApparatus = 17,
        Armors = 18,
        Books = 19,
        Clothes = 20,
        Containers = 21,
        Doors = 22,
        Ingredients = 23,
        Lights = 24,
        Miscellaneous = 25,
        Statics = 26,
        Grasses = 27,
        Trees = 28,
        Flora = 29,
        Furnature = 30,
        Weapons = 31,
        Ammo = 32,
        NPCs = 33,
        Creatures = 34,
        LeveledCreatures = 35,
        SoulGems = 36,
        Keys = 37,
        Potions = 38,
        Subspaces = 39,
        SigilStones = 40,
        LeveledItems = 41,
        Weathers = 42,
        Climates = 43,
        Regions = 44,
        Cells = 45,
        Worldspaces = 46,
        DialogTopics = 47,
        Quests = 48,
        IdleAnimations = 49,
        AIPackages = 50,
        CombatStyles = 51,
        LoadScreens = 52,
        LeveledSpells = 53,
        AnimatedObjects = 54,
        Waters = 55,
        EffectShaders = 56,
    }
    #endregion

    #region Registration
    public class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort AdditionalFieldCount = 57;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(OblivionMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODHEADER":
                    return (ushort)OblivionMod_FieldIndex.ModHeader;
                case "GAMESETTINGS":
                    return (ushort)OblivionMod_FieldIndex.GameSettings;
                case "GLOBALS":
                    return (ushort)OblivionMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)OblivionMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)OblivionMod_FieldIndex.Factions;
                case "HAIRS":
                    return (ushort)OblivionMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)OblivionMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)OblivionMod_FieldIndex.Races;
                case "SOUNDS":
                    return (ushort)OblivionMod_FieldIndex.Sounds;
                case "SKILLS":
                    return (ushort)OblivionMod_FieldIndex.Skills;
                case "MAGICEFFECTS":
                    return (ushort)OblivionMod_FieldIndex.MagicEffects;
                case "SCRIPTS":
                    return (ushort)OblivionMod_FieldIndex.Scripts;
                case "LANDTEXTURES":
                    return (ushort)OblivionMod_FieldIndex.LandTextures;
                case "ENCHANTMENTS":
                    return (ushort)OblivionMod_FieldIndex.Enchantments;
                case "SPELLS":
                    return (ushort)OblivionMod_FieldIndex.Spells;
                case "BIRTHSIGNS":
                    return (ushort)OblivionMod_FieldIndex.Birthsigns;
                case "ACTIVATORS":
                    return (ushort)OblivionMod_FieldIndex.Activators;
                case "ALCHEMICALAPPARATUS":
                    return (ushort)OblivionMod_FieldIndex.AlchemicalApparatus;
                case "ARMORS":
                    return (ushort)OblivionMod_FieldIndex.Armors;
                case "BOOKS":
                    return (ushort)OblivionMod_FieldIndex.Books;
                case "CLOTHES":
                    return (ushort)OblivionMod_FieldIndex.Clothes;
                case "CONTAINERS":
                    return (ushort)OblivionMod_FieldIndex.Containers;
                case "DOORS":
                    return (ushort)OblivionMod_FieldIndex.Doors;
                case "INGREDIENTS":
                    return (ushort)OblivionMod_FieldIndex.Ingredients;
                case "LIGHTS":
                    return (ushort)OblivionMod_FieldIndex.Lights;
                case "MISCELLANEOUS":
                    return (ushort)OblivionMod_FieldIndex.Miscellaneous;
                case "STATICS":
                    return (ushort)OblivionMod_FieldIndex.Statics;
                case "GRASSES":
                    return (ushort)OblivionMod_FieldIndex.Grasses;
                case "TREES":
                    return (ushort)OblivionMod_FieldIndex.Trees;
                case "FLORA":
                    return (ushort)OblivionMod_FieldIndex.Flora;
                case "FURNATURE":
                    return (ushort)OblivionMod_FieldIndex.Furnature;
                case "WEAPONS":
                    return (ushort)OblivionMod_FieldIndex.Weapons;
                case "AMMO":
                    return (ushort)OblivionMod_FieldIndex.Ammo;
                case "NPCS":
                    return (ushort)OblivionMod_FieldIndex.NPCs;
                case "CREATURES":
                    return (ushort)OblivionMod_FieldIndex.Creatures;
                case "LEVELEDCREATURES":
                    return (ushort)OblivionMod_FieldIndex.LeveledCreatures;
                case "SOULGEMS":
                    return (ushort)OblivionMod_FieldIndex.SoulGems;
                case "KEYS":
                    return (ushort)OblivionMod_FieldIndex.Keys;
                case "POTIONS":
                    return (ushort)OblivionMod_FieldIndex.Potions;
                case "SUBSPACES":
                    return (ushort)OblivionMod_FieldIndex.Subspaces;
                case "SIGILSTONES":
                    return (ushort)OblivionMod_FieldIndex.SigilStones;
                case "LEVELEDITEMS":
                    return (ushort)OblivionMod_FieldIndex.LeveledItems;
                case "WEATHERS":
                    return (ushort)OblivionMod_FieldIndex.Weathers;
                case "CLIMATES":
                    return (ushort)OblivionMod_FieldIndex.Climates;
                case "REGIONS":
                    return (ushort)OblivionMod_FieldIndex.Regions;
                case "CELLS":
                    return (ushort)OblivionMod_FieldIndex.Cells;
                case "WORLDSPACES":
                    return (ushort)OblivionMod_FieldIndex.Worldspaces;
                case "DIALOGTOPICS":
                    return (ushort)OblivionMod_FieldIndex.DialogTopics;
                case "QUESTS":
                    return (ushort)OblivionMod_FieldIndex.Quests;
                case "IDLEANIMATIONS":
                    return (ushort)OblivionMod_FieldIndex.IdleAnimations;
                case "AIPACKAGES":
                    return (ushort)OblivionMod_FieldIndex.AIPackages;
                case "COMBATSTYLES":
                    return (ushort)OblivionMod_FieldIndex.CombatStyles;
                case "LOADSCREENS":
                    return (ushort)OblivionMod_FieldIndex.LoadScreens;
                case "LEVELEDSPELLS":
                    return (ushort)OblivionMod_FieldIndex.LeveledSpells;
                case "ANIMATEDOBJECTS":
                    return (ushort)OblivionMod_FieldIndex.AnimatedObjects;
                case "WATERS":
                    return (ushort)OblivionMod_FieldIndex.Waters;
                case "EFFECTSHADERS":
                    return (ushort)OblivionMod_FieldIndex.EffectShaders;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                    return "ModHeader";
                case OblivionMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case OblivionMod_FieldIndex.Globals:
                    return "Globals";
                case OblivionMod_FieldIndex.Classes:
                    return "Classes";
                case OblivionMod_FieldIndex.Factions:
                    return "Factions";
                case OblivionMod_FieldIndex.Hairs:
                    return "Hairs";
                case OblivionMod_FieldIndex.Eyes:
                    return "Eyes";
                case OblivionMod_FieldIndex.Races:
                    return "Races";
                case OblivionMod_FieldIndex.Sounds:
                    return "Sounds";
                case OblivionMod_FieldIndex.Skills:
                    return "Skills";
                case OblivionMod_FieldIndex.MagicEffects:
                    return "MagicEffects";
                case OblivionMod_FieldIndex.Scripts:
                    return "Scripts";
                case OblivionMod_FieldIndex.LandTextures:
                    return "LandTextures";
                case OblivionMod_FieldIndex.Enchantments:
                    return "Enchantments";
                case OblivionMod_FieldIndex.Spells:
                    return "Spells";
                case OblivionMod_FieldIndex.Birthsigns:
                    return "Birthsigns";
                case OblivionMod_FieldIndex.Activators:
                    return "Activators";
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return "AlchemicalApparatus";
                case OblivionMod_FieldIndex.Armors:
                    return "Armors";
                case OblivionMod_FieldIndex.Books:
                    return "Books";
                case OblivionMod_FieldIndex.Clothes:
                    return "Clothes";
                case OblivionMod_FieldIndex.Containers:
                    return "Containers";
                case OblivionMod_FieldIndex.Doors:
                    return "Doors";
                case OblivionMod_FieldIndex.Ingredients:
                    return "Ingredients";
                case OblivionMod_FieldIndex.Lights:
                    return "Lights";
                case OblivionMod_FieldIndex.Miscellaneous:
                    return "Miscellaneous";
                case OblivionMod_FieldIndex.Statics:
                    return "Statics";
                case OblivionMod_FieldIndex.Grasses:
                    return "Grasses";
                case OblivionMod_FieldIndex.Trees:
                    return "Trees";
                case OblivionMod_FieldIndex.Flora:
                    return "Flora";
                case OblivionMod_FieldIndex.Furnature:
                    return "Furnature";
                case OblivionMod_FieldIndex.Weapons:
                    return "Weapons";
                case OblivionMod_FieldIndex.Ammo:
                    return "Ammo";
                case OblivionMod_FieldIndex.NPCs:
                    return "NPCs";
                case OblivionMod_FieldIndex.Creatures:
                    return "Creatures";
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return "LeveledCreatures";
                case OblivionMod_FieldIndex.SoulGems:
                    return "SoulGems";
                case OblivionMod_FieldIndex.Keys:
                    return "Keys";
                case OblivionMod_FieldIndex.Potions:
                    return "Potions";
                case OblivionMod_FieldIndex.Subspaces:
                    return "Subspaces";
                case OblivionMod_FieldIndex.SigilStones:
                    return "SigilStones";
                case OblivionMod_FieldIndex.LeveledItems:
                    return "LeveledItems";
                case OblivionMod_FieldIndex.Weathers:
                    return "Weathers";
                case OblivionMod_FieldIndex.Climates:
                    return "Climates";
                case OblivionMod_FieldIndex.Regions:
                    return "Regions";
                case OblivionMod_FieldIndex.Cells:
                    return "Cells";
                case OblivionMod_FieldIndex.Worldspaces:
                    return "Worldspaces";
                case OblivionMod_FieldIndex.DialogTopics:
                    return "DialogTopics";
                case OblivionMod_FieldIndex.Quests:
                    return "Quests";
                case OblivionMod_FieldIndex.IdleAnimations:
                    return "IdleAnimations";
                case OblivionMod_FieldIndex.AIPackages:
                    return "AIPackages";
                case OblivionMod_FieldIndex.CombatStyles:
                    return "CombatStyles";
                case OblivionMod_FieldIndex.LoadScreens:
                    return "LoadScreens";
                case OblivionMod_FieldIndex.LeveledSpells:
                    return "LeveledSpells";
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return "AnimatedObjects";
                case OblivionMod_FieldIndex.Waters:
                    return "Waters";
                case OblivionMod_FieldIndex.EffectShaders:
                    return "EffectShaders";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Cells:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                case OblivionMod_FieldIndex.Cells:
                    return true;
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                case OblivionMod_FieldIndex.Skills:
                case OblivionMod_FieldIndex.MagicEffects:
                case OblivionMod_FieldIndex.Scripts:
                case OblivionMod_FieldIndex.LandTextures:
                case OblivionMod_FieldIndex.Enchantments:
                case OblivionMod_FieldIndex.Spells:
                case OblivionMod_FieldIndex.Birthsigns:
                case OblivionMod_FieldIndex.Activators:
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                case OblivionMod_FieldIndex.Armors:
                case OblivionMod_FieldIndex.Books:
                case OblivionMod_FieldIndex.Clothes:
                case OblivionMod_FieldIndex.Containers:
                case OblivionMod_FieldIndex.Doors:
                case OblivionMod_FieldIndex.Ingredients:
                case OblivionMod_FieldIndex.Lights:
                case OblivionMod_FieldIndex.Miscellaneous:
                case OblivionMod_FieldIndex.Statics:
                case OblivionMod_FieldIndex.Grasses:
                case OblivionMod_FieldIndex.Trees:
                case OblivionMod_FieldIndex.Flora:
                case OblivionMod_FieldIndex.Furnature:
                case OblivionMod_FieldIndex.Weapons:
                case OblivionMod_FieldIndex.Ammo:
                case OblivionMod_FieldIndex.NPCs:
                case OblivionMod_FieldIndex.Creatures:
                case OblivionMod_FieldIndex.LeveledCreatures:
                case OblivionMod_FieldIndex.SoulGems:
                case OblivionMod_FieldIndex.Keys:
                case OblivionMod_FieldIndex.Potions:
                case OblivionMod_FieldIndex.Subspaces:
                case OblivionMod_FieldIndex.SigilStones:
                case OblivionMod_FieldIndex.LeveledItems:
                case OblivionMod_FieldIndex.Weathers:
                case OblivionMod_FieldIndex.Climates:
                case OblivionMod_FieldIndex.Regions:
                case OblivionMod_FieldIndex.Worldspaces:
                case OblivionMod_FieldIndex.DialogTopics:
                case OblivionMod_FieldIndex.Quests:
                case OblivionMod_FieldIndex.IdleAnimations:
                case OblivionMod_FieldIndex.AIPackages:
                case OblivionMod_FieldIndex.CombatStyles:
                case OblivionMod_FieldIndex.LoadScreens:
                case OblivionMod_FieldIndex.LeveledSpells:
                case OblivionMod_FieldIndex.AnimatedObjects:
                case OblivionMod_FieldIndex.Waters:
                case OblivionMod_FieldIndex.EffectShaders:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                    return typeof(ModHeader);
                case OblivionMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case OblivionMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case OblivionMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case OblivionMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case OblivionMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case OblivionMod_FieldIndex.Eyes:
                    return typeof(Group<Eye>);
                case OblivionMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case OblivionMod_FieldIndex.Sounds:
                    return typeof(Group<Sound>);
                case OblivionMod_FieldIndex.Skills:
                    return typeof(Group<SkillRecord>);
                case OblivionMod_FieldIndex.MagicEffects:
                    return typeof(Group<MagicEffect>);
                case OblivionMod_FieldIndex.Scripts:
                    return typeof(Group<Script>);
                case OblivionMod_FieldIndex.LandTextures:
                    return typeof(Group<LandTexture>);
                case OblivionMod_FieldIndex.Enchantments:
                    return typeof(Group<Enchantment>);
                case OblivionMod_FieldIndex.Spells:
                    return typeof(Group<SpellUnleveled>);
                case OblivionMod_FieldIndex.Birthsigns:
                    return typeof(Group<Birthsign>);
                case OblivionMod_FieldIndex.Activators:
                    return typeof(Group<Activator>);
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return typeof(Group<AlchemicalApparatus>);
                case OblivionMod_FieldIndex.Armors:
                    return typeof(Group<Armor>);
                case OblivionMod_FieldIndex.Books:
                    return typeof(Group<Book>);
                case OblivionMod_FieldIndex.Clothes:
                    return typeof(Group<Clothing>);
                case OblivionMod_FieldIndex.Containers:
                    return typeof(Group<Container>);
                case OblivionMod_FieldIndex.Doors:
                    return typeof(Group<Door>);
                case OblivionMod_FieldIndex.Ingredients:
                    return typeof(Group<Ingredient>);
                case OblivionMod_FieldIndex.Lights:
                    return typeof(Group<Light>);
                case OblivionMod_FieldIndex.Miscellaneous:
                    return typeof(Group<Miscellaneous>);
                case OblivionMod_FieldIndex.Statics:
                    return typeof(Group<Static>);
                case OblivionMod_FieldIndex.Grasses:
                    return typeof(Group<Grass>);
                case OblivionMod_FieldIndex.Trees:
                    return typeof(Group<Tree>);
                case OblivionMod_FieldIndex.Flora:
                    return typeof(Group<Flora>);
                case OblivionMod_FieldIndex.Furnature:
                    return typeof(Group<Furnature>);
                case OblivionMod_FieldIndex.Weapons:
                    return typeof(Group<Weapon>);
                case OblivionMod_FieldIndex.Ammo:
                    return typeof(Group<Ammo>);
                case OblivionMod_FieldIndex.NPCs:
                    return typeof(Group<NPC>);
                case OblivionMod_FieldIndex.Creatures:
                    return typeof(Group<Creature>);
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return typeof(Group<LeveledCreature>);
                case OblivionMod_FieldIndex.SoulGems:
                    return typeof(Group<SoulGem>);
                case OblivionMod_FieldIndex.Keys:
                    return typeof(Group<Key>);
                case OblivionMod_FieldIndex.Potions:
                    return typeof(Group<Potion>);
                case OblivionMod_FieldIndex.Subspaces:
                    return typeof(Group<Subspace>);
                case OblivionMod_FieldIndex.SigilStones:
                    return typeof(Group<SigilStone>);
                case OblivionMod_FieldIndex.LeveledItems:
                    return typeof(Group<LeveledItem>);
                case OblivionMod_FieldIndex.Weathers:
                    return typeof(Group<Weather>);
                case OblivionMod_FieldIndex.Climates:
                    return typeof(Group<Climate>);
                case OblivionMod_FieldIndex.Regions:
                    return typeof(Group<Region>);
                case OblivionMod_FieldIndex.Cells:
                    return typeof(ListGroup<CellBlock>);
                case OblivionMod_FieldIndex.Worldspaces:
                    return typeof(Group<Worldspace>);
                case OblivionMod_FieldIndex.DialogTopics:
                    return typeof(Group<DialogTopic>);
                case OblivionMod_FieldIndex.Quests:
                    return typeof(Group<Quest>);
                case OblivionMod_FieldIndex.IdleAnimations:
                    return typeof(Group<IdleAnimation>);
                case OblivionMod_FieldIndex.AIPackages:
                    return typeof(Group<AIPackage>);
                case OblivionMod_FieldIndex.CombatStyles:
                    return typeof(Group<CombatStyle>);
                case OblivionMod_FieldIndex.LoadScreens:
                    return typeof(Group<LoadScreen>);
                case OblivionMod_FieldIndex.LeveledSpells:
                    return typeof(Group<LeveledSpell>);
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return typeof(Group<AnimatedObject>);
                case OblivionMod_FieldIndex.Waters:
                    return typeof(Group<Water>);
                case OblivionMod_FieldIndex.EffectShaders:
                    return typeof(Group<EffectShader>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(OblivionModXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TES4_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        CLAS_HEADER,
                        FACT_HEADER,
                        HAIR_HEADER,
                        EYES_HEADER,
                        RACE_HEADER,
                        SOUN_HEADER,
                        SKIL_HEADER,
                        MGEF_HEADER,
                        SCPT_HEADER,
                        LTEX_HEADER,
                        ENCH_HEADER,
                        SPEL_HEADER,
                        BSGN_HEADER,
                        ACTI_HEADER,
                        APPA_HEADER,
                        ARMO_HEADER,
                        BOOK_HEADER,
                        CLOT_HEADER,
                        CONT_HEADER,
                        DOOR_HEADER,
                        INGR_HEADER,
                        LIGH_HEADER,
                        MISC_HEADER,
                        STAT_HEADER,
                        GRAS_HEADER,
                        TREE_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        WEAP_HEADER,
                        AMMO_HEADER,
                        NPC__HEADER,
                        CREA_HEADER,
                        LVLC_HEADER,
                        SLGM_HEADER,
                        KEYM_HEADER,
                        ALCH_HEADER,
                        SBSP_HEADER,
                        SGST_HEADER,
                        LVLI_HEADER,
                        WTHR_HEADER,
                        CLMT_HEADER,
                        REGN_HEADER,
                        CELL_HEADER,
                        WRLD_HEADER,
                        DIAL_HEADER,
                        QUST_HEADER,
                        IDLE_HEADER,
                        PACK_HEADER,
                        CSTY_HEADER,
                        LSCR_HEADER,
                        LVSP_HEADER,
                        ANIO_HEADER,
                        WATR_HEADER,
                        EFSH_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 57;
        public static readonly Type BinaryWriteTranslation = typeof(OblivionModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class OblivionModSetterCommon
    {
        public static readonly OblivionModSetterCommon Instance = new OblivionModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IOblivionMod item)
        {
            ClearPartial();
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IOblivionMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ModHeader":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.ModHeader);
                        item.ModHeader.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Cells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                        item.Cells.CopyInFromXml<CellBlock>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            IOblivionMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    OblivionModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IOblivionMod obj)
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return item as IMajorRecordCommon;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IOblivionMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return item as TMajor;
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IOblivionMod item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            IOblivionMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            GroupMask importMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.ModHeader);
                        item.ModHeader.CopyInFromBinary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                            await item.GameSettings.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.GameSettings);
                }
                case 0x424F4C47: // GLOB
                {
                    if (importMask?.Globals ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                            await item.Globals.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    if (importMask?.Classes ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                            await item.Classes.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    if (importMask?.Factions ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                            await item.Factions.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Factions);
                }
                case 0x52494148: // HAIR
                {
                    if (importMask?.Hairs ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                            await item.Hairs.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Hairs);
                }
                case 0x53455945: // EYES
                {
                    if (importMask?.Eyes ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                            await item.Eyes.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Eyes);
                }
                case 0x45434152: // RACE
                {
                    if (importMask?.Races ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                            await item.Races.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Races);
                }
                case 0x4E554F53: // SOUN
                {
                    if (importMask?.Sounds ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                            await item.Sounds.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Sounds);
                }
                case 0x4C494B53: // SKIL
                {
                    if (importMask?.Skills ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                            await item.Skills.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Skills);
                }
                case 0x4645474D: // MGEF
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                            await item.MagicEffects.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.MagicEffects);
                }
                case 0x54504353: // SCPT
                {
                    if (importMask?.Scripts ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                            await item.Scripts.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Scripts);
                }
                case 0x5845544C: // LTEX
                {
                    if (importMask?.LandTextures ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                            await item.LandTextures.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LandTextures);
                }
                case 0x48434E45: // ENCH
                {
                    if (importMask?.Enchantments ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                            await item.Enchantments.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Enchantments);
                }
                case 0x4C455053: // SPEL
                {
                    if (importMask?.Spells ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                            await item.Spells.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Spells);
                }
                case 0x4E475342: // BSGN
                {
                    if (importMask?.Birthsigns ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                            await item.Birthsigns.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Birthsigns);
                }
                case 0x49544341: // ACTI
                {
                    if (importMask?.Activators ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                            await item.Activators.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Activators);
                }
                case 0x41505041: // APPA
                {
                    if (importMask?.AlchemicalApparatus ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                            await item.AlchemicalApparatus.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                }
                case 0x4F4D5241: // ARMO
                {
                    if (importMask?.Armors ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                            await item.Armors.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Armors);
                }
                case 0x4B4F4F42: // BOOK
                {
                    if (importMask?.Books ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                            await item.Books.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Books);
                }
                case 0x544F4C43: // CLOT
                {
                    if (importMask?.Clothes ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                            await item.Clothes.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Clothes);
                }
                case 0x544E4F43: // CONT
                {
                    if (importMask?.Containers ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                            await item.Containers.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Containers);
                }
                case 0x524F4F44: // DOOR
                {
                    if (importMask?.Doors ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                            await item.Doors.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Doors);
                }
                case 0x52474E49: // INGR
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                            await item.Ingredients.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ingredients);
                }
                case 0x4847494C: // LIGH
                {
                    if (importMask?.Lights ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                            await item.Lights.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Lights);
                }
                case 0x4353494D: // MISC
                {
                    if (importMask?.Miscellaneous ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                            await item.Miscellaneous.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Miscellaneous);
                }
                case 0x54415453: // STAT
                {
                    if (importMask?.Statics ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                            await item.Statics.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Statics);
                }
                case 0x53415247: // GRAS
                {
                    if (importMask?.Grasses ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                            await item.Grasses.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Grasses);
                }
                case 0x45455254: // TREE
                {
                    if (importMask?.Trees ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                            await item.Trees.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Trees);
                }
                case 0x524F4C46: // FLOR
                {
                    if (importMask?.Flora ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                            await item.Flora.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Flora);
                }
                case 0x4E525546: // FURN
                {
                    if (importMask?.Furnature ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furnature);
                            await item.Furnature.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Furnature);
                }
                case 0x50414557: // WEAP
                {
                    if (importMask?.Weapons ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                            await item.Weapons.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weapons);
                }
                case 0x4F4D4D41: // AMMO
                {
                    if (importMask?.Ammo ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammo);
                            await item.Ammo.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ammo);
                }
                case 0x5F43504E: // NPC_
                {
                    if (importMask?.NPCs ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.NPCs);
                            await item.NPCs.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.NPCs);
                }
                case 0x41455243: // CREA
                {
                    if (importMask?.Creatures ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                            await item.Creatures.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Creatures);
                }
                case 0x434C564C: // LVLC
                {
                    if (importMask?.LeveledCreatures ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                            await item.LeveledCreatures.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledCreatures);
                }
                case 0x4D474C53: // SLGM
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                            await item.SoulGems.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SoulGems);
                }
                case 0x4D59454B: // KEYM
                {
                    if (importMask?.Keys ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                            await item.Keys.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Keys);
                }
                case 0x48434C41: // ALCH
                {
                    if (importMask?.Potions ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                            await item.Potions.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Potions);
                }
                case 0x50534253: // SBSP
                {
                    if (importMask?.Subspaces ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                            await item.Subspaces.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Subspaces);
                }
                case 0x54534753: // SGST
                {
                    if (importMask?.SigilStones ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                            await item.SigilStones.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SigilStones);
                }
                case 0x494C564C: // LVLI
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                            await item.LeveledItems.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledItems);
                }
                case 0x52485457: // WTHR
                {
                    if (importMask?.Weathers ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                            await item.Weathers.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weathers);
                }
                case 0x544D4C43: // CLMT
                {
                    if (importMask?.Climates ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                            await item.Climates.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Climates);
                }
                case 0x4E474552: // REGN
                {
                    if (importMask?.Regions ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                            await item.Regions.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Regions);
                }
                case 0x4C4C4543: // CELL
                {
                    if (importMask?.Cells ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                            await item.Cells.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Cells);
                }
                case 0x444C5257: // WRLD
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                            await item.Worldspaces.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Worldspaces);
                }
                case 0x4C414944: // DIAL
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                            await item.DialogTopics.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.DialogTopics);
                }
                case 0x54535551: // QUST
                {
                    if (importMask?.Quests ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                            await item.Quests.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Quests);
                }
                case 0x454C4449: // IDLE
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                            await item.IdleAnimations.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.IdleAnimations);
                }
                case 0x4B434150: // PACK
                {
                    if (importMask?.AIPackages ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                            await item.AIPackages.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AIPackages);
                }
                case 0x59545343: // CSTY
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                            await item.CombatStyles.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.CombatStyles);
                }
                case 0x5243534C: // LSCR
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                            await item.LoadScreens.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LoadScreens);
                }
                case 0x5053564C: // LVSP
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                            await item.LeveledSpells.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledSpells);
                }
                case 0x4F494E41: // ANIO
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                            await item.AnimatedObjects.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AnimatedObjects);
                }
                case 0x52544157: // WATR
                {
                    if (importMask?.Waters ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                            await item.Waters.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Waters);
                }
                case 0x48534645: // EFSH
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                            await item.EffectShaders.CopyInFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.EffectShaders);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public async Task CopyInFromBinary(
            IOblivionMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            var masterReferences = new MasterReferences(item.ModHeader.MasterReferences, modKey);
            await UtilityAsyncTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes).ConfigureAwait(false);
        }
        
        #endregion
        
    }
    public partial class OblivionModCommon
    {
        public static readonly OblivionModCommon Instance = new OblivionModCommon();

        public OblivionMod_Mask<bool> GetEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OblivionMod_Mask<bool>();
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.Sounds = MaskItemExt.Factory(item.Sounds.GetEqualsMask(rhs.Sounds, include), include);
            ret.Skills = MaskItemExt.Factory(item.Skills.GetEqualsMask(rhs.Skills, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.Scripts = MaskItemExt.Factory(item.Scripts.GetEqualsMask(rhs.Scripts, include), include);
            ret.LandTextures = MaskItemExt.Factory(item.LandTextures.GetEqualsMask(rhs.LandTextures, include), include);
            ret.Enchantments = MaskItemExt.Factory(item.Enchantments.GetEqualsMask(rhs.Enchantments, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Birthsigns = MaskItemExt.Factory(item.Birthsigns.GetEqualsMask(rhs.Birthsigns, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.AlchemicalApparatus = MaskItemExt.Factory(item.AlchemicalApparatus.GetEqualsMask(rhs.AlchemicalApparatus, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Clothes = MaskItemExt.Factory(item.Clothes.GetEqualsMask(rhs.Clothes, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.Miscellaneous = MaskItemExt.Factory(item.Miscellaneous.GetEqualsMask(rhs.Miscellaneous, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Flora = MaskItemExt.Factory(item.Flora.GetEqualsMask(rhs.Flora, include), include);
            ret.Furnature = MaskItemExt.Factory(item.Furnature.GetEqualsMask(rhs.Furnature, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammo = MaskItemExt.Factory(item.Ammo.GetEqualsMask(rhs.Ammo, include), include);
            ret.NPCs = MaskItemExt.Factory(item.NPCs.GetEqualsMask(rhs.NPCs, include), include);
            ret.Creatures = MaskItemExt.Factory(item.Creatures.GetEqualsMask(rhs.Creatures, include), include);
            ret.LeveledCreatures = MaskItemExt.Factory(item.LeveledCreatures.GetEqualsMask(rhs.LeveledCreatures, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Potions = MaskItemExt.Factory(item.Potions.GetEqualsMask(rhs.Potions, include), include);
            ret.Subspaces = MaskItemExt.Factory(item.Subspaces.GetEqualsMask(rhs.Subspaces, include), include);
            ret.SigilStones = MaskItemExt.Factory(item.SigilStones.GetEqualsMask(rhs.SigilStones, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.AIPackages = MaskItemExt.Factory(item.AIPackages.GetEqualsMask(rhs.AIPackages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
        }
        
        public string ToString(
            IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"OblivionMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (OblivionMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IOblivionModGetter item,
            FileGeneration fg,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.ToString(fg, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.ToString(fg, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.ToString(fg, "Races");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                item.Sounds?.ToString(fg, "Sounds");
            }
            if (printMask?.Skills?.Overall ?? true)
            {
                item.Skills?.ToString(fg, "Skills");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.ToString(fg, "MagicEffects");
            }
            if (printMask?.Scripts?.Overall ?? true)
            {
                item.Scripts?.ToString(fg, "Scripts");
            }
            if (printMask?.LandTextures?.Overall ?? true)
            {
                item.LandTextures?.ToString(fg, "LandTextures");
            }
            if (printMask?.Enchantments?.Overall ?? true)
            {
                item.Enchantments?.ToString(fg, "Enchantments");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.ToString(fg, "Spells");
            }
            if (printMask?.Birthsigns?.Overall ?? true)
            {
                item.Birthsigns?.ToString(fg, "Birthsigns");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.ToString(fg, "Activators");
            }
            if (printMask?.AlchemicalApparatus?.Overall ?? true)
            {
                item.AlchemicalApparatus?.ToString(fg, "AlchemicalApparatus");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.ToString(fg, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.ToString(fg, "Books");
            }
            if (printMask?.Clothes?.Overall ?? true)
            {
                item.Clothes?.ToString(fg, "Clothes");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.ToString(fg, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.ToString(fg, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.ToString(fg, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.ToString(fg, "Lights");
            }
            if (printMask?.Miscellaneous?.Overall ?? true)
            {
                item.Miscellaneous?.ToString(fg, "Miscellaneous");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.ToString(fg, "Statics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.ToString(fg, "Trees");
            }
            if (printMask?.Flora?.Overall ?? true)
            {
                item.Flora?.ToString(fg, "Flora");
            }
            if (printMask?.Furnature?.Overall ?? true)
            {
                item.Furnature?.ToString(fg, "Furnature");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.ToString(fg, "Weapons");
            }
            if (printMask?.Ammo?.Overall ?? true)
            {
                item.Ammo?.ToString(fg, "Ammo");
            }
            if (printMask?.NPCs?.Overall ?? true)
            {
                item.NPCs?.ToString(fg, "NPCs");
            }
            if (printMask?.Creatures?.Overall ?? true)
            {
                item.Creatures?.ToString(fg, "Creatures");
            }
            if (printMask?.LeveledCreatures?.Overall ?? true)
            {
                item.LeveledCreatures?.ToString(fg, "LeveledCreatures");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.ToString(fg, "SoulGems");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.ToString(fg, "Keys");
            }
            if (printMask?.Potions?.Overall ?? true)
            {
                item.Potions?.ToString(fg, "Potions");
            }
            if (printMask?.Subspaces?.Overall ?? true)
            {
                item.Subspaces?.ToString(fg, "Subspaces");
            }
            if (printMask?.SigilStones?.Overall ?? true)
            {
                item.SigilStones?.ToString(fg, "SigilStones");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.ToString(fg, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.ToString(fg, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.ToString(fg, "Climates");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.ToString(fg, "Regions");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.ToString(fg, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.ToString(fg, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.ToString(fg, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.ToString(fg, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.ToString(fg, "IdleAnimations");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                item.AIPackages?.ToString(fg, "AIPackages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.ToString(fg, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.ToString(fg, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.ToString(fg, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.ToString(fg, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.ToString(fg, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.ToString(fg, "EffectShaders");
            }
        }
        
        public bool HasBeenSet(
            IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IOblivionModGetter item,
            OblivionMod_Mask<bool> mask)
        {
            mask.ModHeader = new MaskItem<bool, ModHeader_Mask<bool>>(true, item.ModHeader.GetHasBeenSetMask());
            mask.GameSettings = new MaskItem<bool, Group_Mask<bool>>(true, item.GameSettings.GetHasBeenSetMask());
            mask.Globals = new MaskItem<bool, Group_Mask<bool>>(true, item.Globals.GetHasBeenSetMask());
            mask.Classes = new MaskItem<bool, Group_Mask<bool>>(true, item.Classes.GetHasBeenSetMask());
            mask.Factions = new MaskItem<bool, Group_Mask<bool>>(true, item.Factions.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, Group_Mask<bool>>(true, item.Hairs.GetHasBeenSetMask());
            mask.Eyes = new MaskItem<bool, Group_Mask<bool>>(true, item.Eyes.GetHasBeenSetMask());
            mask.Races = new MaskItem<bool, Group_Mask<bool>>(true, item.Races.GetHasBeenSetMask());
            mask.Sounds = new MaskItem<bool, Group_Mask<bool>>(true, item.Sounds.GetHasBeenSetMask());
            mask.Skills = new MaskItem<bool, Group_Mask<bool>>(true, item.Skills.GetHasBeenSetMask());
            mask.MagicEffects = new MaskItem<bool, Group_Mask<bool>>(true, item.MagicEffects.GetHasBeenSetMask());
            mask.Scripts = new MaskItem<bool, Group_Mask<bool>>(true, item.Scripts.GetHasBeenSetMask());
            mask.LandTextures = new MaskItem<bool, Group_Mask<bool>>(true, item.LandTextures.GetHasBeenSetMask());
            mask.Enchantments = new MaskItem<bool, Group_Mask<bool>>(true, item.Enchantments.GetHasBeenSetMask());
            mask.Spells = new MaskItem<bool, Group_Mask<bool>>(true, item.Spells.GetHasBeenSetMask());
            mask.Birthsigns = new MaskItem<bool, Group_Mask<bool>>(true, item.Birthsigns.GetHasBeenSetMask());
            mask.Activators = new MaskItem<bool, Group_Mask<bool>>(true, item.Activators.GetHasBeenSetMask());
            mask.AlchemicalApparatus = new MaskItem<bool, Group_Mask<bool>>(true, item.AlchemicalApparatus.GetHasBeenSetMask());
            mask.Armors = new MaskItem<bool, Group_Mask<bool>>(true, item.Armors.GetHasBeenSetMask());
            mask.Books = new MaskItem<bool, Group_Mask<bool>>(true, item.Books.GetHasBeenSetMask());
            mask.Clothes = new MaskItem<bool, Group_Mask<bool>>(true, item.Clothes.GetHasBeenSetMask());
            mask.Containers = new MaskItem<bool, Group_Mask<bool>>(true, item.Containers.GetHasBeenSetMask());
            mask.Doors = new MaskItem<bool, Group_Mask<bool>>(true, item.Doors.GetHasBeenSetMask());
            mask.Ingredients = new MaskItem<bool, Group_Mask<bool>>(true, item.Ingredients.GetHasBeenSetMask());
            mask.Lights = new MaskItem<bool, Group_Mask<bool>>(true, item.Lights.GetHasBeenSetMask());
            mask.Miscellaneous = new MaskItem<bool, Group_Mask<bool>>(true, item.Miscellaneous.GetHasBeenSetMask());
            mask.Statics = new MaskItem<bool, Group_Mask<bool>>(true, item.Statics.GetHasBeenSetMask());
            mask.Grasses = new MaskItem<bool, Group_Mask<bool>>(true, item.Grasses.GetHasBeenSetMask());
            mask.Trees = new MaskItem<bool, Group_Mask<bool>>(true, item.Trees.GetHasBeenSetMask());
            mask.Flora = new MaskItem<bool, Group_Mask<bool>>(true, item.Flora.GetHasBeenSetMask());
            mask.Furnature = new MaskItem<bool, Group_Mask<bool>>(true, item.Furnature.GetHasBeenSetMask());
            mask.Weapons = new MaskItem<bool, Group_Mask<bool>>(true, item.Weapons.GetHasBeenSetMask());
            mask.Ammo = new MaskItem<bool, Group_Mask<bool>>(true, item.Ammo.GetHasBeenSetMask());
            mask.NPCs = new MaskItem<bool, Group_Mask<bool>>(true, item.NPCs.GetHasBeenSetMask());
            mask.Creatures = new MaskItem<bool, Group_Mask<bool>>(true, item.Creatures.GetHasBeenSetMask());
            mask.LeveledCreatures = new MaskItem<bool, Group_Mask<bool>>(true, item.LeveledCreatures.GetHasBeenSetMask());
            mask.SoulGems = new MaskItem<bool, Group_Mask<bool>>(true, item.SoulGems.GetHasBeenSetMask());
            mask.Keys = new MaskItem<bool, Group_Mask<bool>>(true, item.Keys.GetHasBeenSetMask());
            mask.Potions = new MaskItem<bool, Group_Mask<bool>>(true, item.Potions.GetHasBeenSetMask());
            mask.Subspaces = new MaskItem<bool, Group_Mask<bool>>(true, item.Subspaces.GetHasBeenSetMask());
            mask.SigilStones = new MaskItem<bool, Group_Mask<bool>>(true, item.SigilStones.GetHasBeenSetMask());
            mask.LeveledItems = new MaskItem<bool, Group_Mask<bool>>(true, item.LeveledItems.GetHasBeenSetMask());
            mask.Weathers = new MaskItem<bool, Group_Mask<bool>>(true, item.Weathers.GetHasBeenSetMask());
            mask.Climates = new MaskItem<bool, Group_Mask<bool>>(true, item.Climates.GetHasBeenSetMask());
            mask.Regions = new MaskItem<bool, Group_Mask<bool>>(true, item.Regions.GetHasBeenSetMask());
            mask.Cells = new MaskItem<bool, ListGroup_Mask<bool>>(true, item.Cells.GetHasBeenSetMask());
            mask.Worldspaces = new MaskItem<bool, Group_Mask<bool>>(true, item.Worldspaces.GetHasBeenSetMask());
            mask.DialogTopics = new MaskItem<bool, Group_Mask<bool>>(true, item.DialogTopics.GetHasBeenSetMask());
            mask.Quests = new MaskItem<bool, Group_Mask<bool>>(true, item.Quests.GetHasBeenSetMask());
            mask.IdleAnimations = new MaskItem<bool, Group_Mask<bool>>(true, item.IdleAnimations.GetHasBeenSetMask());
            mask.AIPackages = new MaskItem<bool, Group_Mask<bool>>(true, item.AIPackages.GetHasBeenSetMask());
            mask.CombatStyles = new MaskItem<bool, Group_Mask<bool>>(true, item.CombatStyles.GetHasBeenSetMask());
            mask.LoadScreens = new MaskItem<bool, Group_Mask<bool>>(true, item.LoadScreens.GetHasBeenSetMask());
            mask.LeveledSpells = new MaskItem<bool, Group_Mask<bool>>(true, item.LeveledSpells.GetHasBeenSetMask());
            mask.AnimatedObjects = new MaskItem<bool, Group_Mask<bool>>(true, item.AnimatedObjects.GetHasBeenSetMask());
            mask.Waters = new MaskItem<bool, Group_Mask<bool>>(true, item.Waters.GetHasBeenSetMask());
            mask.EffectShaders = new MaskItem<bool, Group_Mask<bool>>(true, item.EffectShaders.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IOblivionModGetter lhs,
            IOblivionModGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            if (!object.Equals(lhs.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(lhs.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(lhs.Races, rhs.Races)) return false;
            if (!object.Equals(lhs.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(lhs.Skills, rhs.Skills)) return false;
            if (!object.Equals(lhs.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(lhs.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(lhs.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(lhs.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(lhs.Spells, rhs.Spells)) return false;
            if (!object.Equals(lhs.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(lhs.Activators, rhs.Activators)) return false;
            if (!object.Equals(lhs.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(lhs.Armors, rhs.Armors)) return false;
            if (!object.Equals(lhs.Books, rhs.Books)) return false;
            if (!object.Equals(lhs.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(lhs.Containers, rhs.Containers)) return false;
            if (!object.Equals(lhs.Doors, rhs.Doors)) return false;
            if (!object.Equals(lhs.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(lhs.Lights, rhs.Lights)) return false;
            if (!object.Equals(lhs.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(lhs.Statics, rhs.Statics)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Trees, rhs.Trees)) return false;
            if (!object.Equals(lhs.Flora, rhs.Flora)) return false;
            if (!object.Equals(lhs.Furnature, rhs.Furnature)) return false;
            if (!object.Equals(lhs.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(lhs.Ammo, rhs.Ammo)) return false;
            if (!object.Equals(lhs.NPCs, rhs.NPCs)) return false;
            if (!object.Equals(lhs.Creatures, rhs.Creatures)) return false;
            if (!object.Equals(lhs.LeveledCreatures, rhs.LeveledCreatures)) return false;
            if (!object.Equals(lhs.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(lhs.Keys, rhs.Keys)) return false;
            if (!object.Equals(lhs.Potions, rhs.Potions)) return false;
            if (!object.Equals(lhs.Subspaces, rhs.Subspaces)) return false;
            if (!object.Equals(lhs.SigilStones, rhs.SigilStones)) return false;
            if (!object.Equals(lhs.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(lhs.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(lhs.Climates, rhs.Climates)) return false;
            if (!object.Equals(lhs.Regions, rhs.Regions)) return false;
            if (!object.Equals(lhs.Cells, rhs.Cells)) return false;
            if (!object.Equals(lhs.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(lhs.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(lhs.Quests, rhs.Quests)) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(lhs.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(lhs.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(lhs.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(lhs.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(lhs.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(lhs.Waters, rhs.Waters)) return false;
            if (!object.Equals(lhs.EffectShaders, rhs.EffectShaders)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IOblivionModGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ModHeader).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GameSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Globals).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Classes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Factions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Hairs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Eyes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Races).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Sounds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Skills).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagicEffects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Scripts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LandTextures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Enchantments).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Birthsigns).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Activators).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AlchemicalApparatus).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Armors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Books).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Clothes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Containers).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Doors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Ingredients).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Lights).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Miscellaneous).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Statics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Grasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Trees).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flora).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Furnature).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weapons).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Ammo).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NPCs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Creatures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeveledCreatures).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SoulGems).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Keys).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Potions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Subspaces).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SigilStones).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeveledItems).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weathers).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Climates).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Regions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Cells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Worldspaces).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DialogTopics).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Quests).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.IdleAnimations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIPackages).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CombatStyles).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LoadScreens).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LeveledSpells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AnimatedObjects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Waters).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EffectShaders).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return OblivionMod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<T>(IOblivionModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            switch (typeof(T).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.Items;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.Items;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.Items;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.Items;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs.Items;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    return obj.Eyes.Items;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races.Items;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    return obj.Sounds.Items;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    return obj.Skills.Items;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects.Items;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    return obj.Scripts.Items;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    return obj.LandTextures.Items;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    return obj.Enchantments.Items;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    return obj.Spells.Items;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    return obj.Birthsigns.Items;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators.Items;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatus.Items;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors.Items;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books.Items;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    return obj.Clothes.Items;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers.Items;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors.Items;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients.Items;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights.Items;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    return obj.Miscellaneous.Items;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics.Items;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses.Items;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees.Items;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Flora.Items;
                case "Furnature":
                case "IFurnatureGetter":
                case "IFurnature":
                case "IFurnatureInternal":
                    return obj.Furnature.Items;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons.Items;
                case "Ammo":
                case "IAmmoGetter":
                case "IAmmo":
                case "IAmmoInternal":
                    return obj.Ammo.Items;
                case "NPC":
                case "INPCGetter":
                case "INPC":
                case "INPCInternal":
                    return obj.NPCs.Items;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    return obj.Creatures.Items;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    return obj.LeveledCreatures.Items;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems.Items;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys.Items;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    return obj.Potions.Items;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    return obj.Subspaces.Items;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    return obj.SigilStones.Items;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems.Items;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers.Items;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates.Items;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions.Items;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Items;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces.Items;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics.Items;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests.Items;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations.Items;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    return obj.AIPackages.Items;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles.Items;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens.Items;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells.Items;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects.Items;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters.Items;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders.Items;
                default:
                    throw new ArgumentException($"Unknown group type: {typeof(T)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            IOblivionModGetter item,
            Stream stream,
            ModKey modKey)
        {
            var masterRefs = new MasterReferences(item.MasterReferences, modKey);
            item.ModHeader.WriteToBinary(
                new MutagenWriter(stream, MetaDataConstants.Oblivion),
                masterRefs);
            Stream[] outputStreams = new Stream[56];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, masterRefs, 0, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Globals, masterRefs, 1, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Classes, masterRefs, 2, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Factions, masterRefs, 3, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Hairs, masterRefs, 4, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Eyes, masterRefs, 5, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Races, masterRefs, 6, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Sounds, masterRefs, 7, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Skills, masterRefs, 8, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, masterRefs, 9, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Scripts, masterRefs, 10, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LandTextures, masterRefs, 11, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Enchantments, masterRefs, 12, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Spells, masterRefs, 13, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Birthsigns, masterRefs, 14, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Activators, masterRefs, 15, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatus, masterRefs, 16, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Armors, masterRefs, 17, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Books, masterRefs, 18, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Clothes, masterRefs, 19, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Containers, masterRefs, 20, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Doors, masterRefs, 21, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, masterRefs, 22, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Lights, masterRefs, 23, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Miscellaneous, masterRefs, 24, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Statics, masterRefs, 25, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Grasses, masterRefs, 26, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Trees, masterRefs, 27, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Flora, masterRefs, 28, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Furnature, masterRefs, 29, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Weapons, masterRefs, 30, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ammo, masterRefs, 31, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.NPCs, masterRefs, 32, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Creatures, masterRefs, 33, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledCreatures, masterRefs, 34, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, masterRefs, 35, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Keys, masterRefs, 36, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Potions, masterRefs, 37, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Subspaces, masterRefs, 38, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SigilStones, masterRefs, 39, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, masterRefs, 40, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Weathers, masterRefs, 41, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Climates, masterRefs, 42, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Regions, masterRefs, 43, outputStreams));
            toDo.Add(() => WriteCellsParallel(item.Cells, masterRefs, 44, outputStreams));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, masterRefs, 45, outputStreams));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, masterRefs, 46, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Quests, masterRefs, 47, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, masterRefs, 48, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AIPackages, masterRefs, 49, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, masterRefs, 50, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, masterRefs, 51, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, masterRefs, 52, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, masterRefs, 53, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Waters, masterRefs, 54, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, masterRefs, 55, outputStreams));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferences masters,
            int targetIndex,
            Stream[] streamDepositArray)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.Items.Count == 0) return;
            var cuts = group.Items.Items.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[MetaDataConstants.Oblivion.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), Group_Registration.GRUP_HEADER.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, MetaDataConstants.Oblivion, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.Write_Embedded<T>(group, stream, default, default);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, MetaDataConstants.Oblivion, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream, masters);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public static async Task WriteAsync(
            IOblivionModGetter item,
            Stream stream,
            ModKey modKey)
        {
            var masterRefs = new MasterReferences(item.MasterReferences, modKey);
            item.ModHeader.WriteToBinary(
                new MutagenWriter(stream, MetaDataConstants.Oblivion),
                masterRefs);
            List<Task<IEnumerable<Stream>>> outputStreams = new List<Task<IEnumerable<Stream>>>();
            outputStreams.Add(WriteGroupAsync(item.GameSettings, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Globals, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Classes, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Factions, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Hairs, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Eyes, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Races, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Sounds, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Skills, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.MagicEffects, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Scripts, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LandTextures, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Enchantments, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Spells, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Birthsigns, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Activators, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.AlchemicalApparatus, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Armors, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Books, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Clothes, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Containers, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Doors, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Ingredients, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Lights, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Miscellaneous, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Statics, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Grasses, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Trees, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Flora, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Furnature, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Weapons, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Ammo, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.NPCs, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Creatures, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LeveledCreatures, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.SoulGems, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Keys, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Potions, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Subspaces, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.SigilStones, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LeveledItems, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Weathers, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Climates, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Regions, masterRefs));
            outputStreams.Add(WriteCellsAsync(item.Cells, masterRefs));
            outputStreams.Add(WriteWorldspacesAsync(item.Worldspaces, masterRefs));
            outputStreams.Add(WriteDialogTopicsAsync(item.DialogTopics, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Quests, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.IdleAnimations, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.AIPackages, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.CombatStyles, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LoadScreens, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LeveledSpells, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.AnimatedObjects, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Waters, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.EffectShaders, masterRefs));
            await UtilityTranslation.CompileStreamsInto(
                outputStreams,
                stream);
        }
        
        public static async Task<IEnumerable<Stream>> WriteGroupAsync<T>(
            IGroupGetter<T> group,
            MasterReferences masters)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.Items.Count == 0) return EnumerableExt<Stream>.Empty;
            List<Task<Stream>> streams = new List<Task<Stream>>();
            byte[] groupBytes = new byte[MetaDataConstants.Oblivion.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), Group_Registration.GRUP_HEADER.TypeInt);
            using (var stream = new MutagenWriter(new MemoryStream(groupBytes), MetaDataConstants.Oblivion))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.Write_Embedded<T>(group, stream, default, default);
            }
            streams.Add(Task.FromResult<Stream>(new MemoryStream(groupBytes)));
            foreach (var cutItems in group.Items.Cut(CutCount))
            {
                streams.Add(
                    Task.Run<Stream>(() =>
                    {
                        MemoryTributary trib = new MemoryTributary();
                        using (var stream = new MutagenWriter(trib, MetaDataConstants.Oblivion, dispose: false))
                        {
                            foreach (var item in cutItems)
                            {
                                item.Value.WriteToBinary(stream, masters);
                            }
                        }
                        return trib;
                    }));
            }
            return await UtilityTranslation.CompileSetGroupLength(streams, groupBytes);
        }
        
        public IEnumerable<ILinkGetter> GetLinks(IOblivionModGetter obj)
        {
            if (obj.GameSettings is ILinkContainer GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Globals is ILinkContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Classes is ILinkContainer ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Factions is ILinkContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Hairs is ILinkContainer HairslinkCont)
            {
                foreach (var item in HairslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Eyes is ILinkContainer EyeslinkCont)
            {
                foreach (var item in EyeslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Races is ILinkContainer RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Sounds is ILinkContainer SoundslinkCont)
            {
                foreach (var item in SoundslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Skills is ILinkContainer SkillslinkCont)
            {
                foreach (var item in SkillslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.MagicEffects is ILinkContainer MagicEffectslinkCont)
            {
                foreach (var item in MagicEffectslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Scripts is ILinkContainer ScriptslinkCont)
            {
                foreach (var item in ScriptslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LandTextures is ILinkContainer LandTextureslinkCont)
            {
                foreach (var item in LandTextureslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Enchantments is ILinkContainer EnchantmentslinkCont)
            {
                foreach (var item in EnchantmentslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Spells is ILinkContainer SpellslinkCont)
            {
                foreach (var item in SpellslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Birthsigns is ILinkContainer BirthsignslinkCont)
            {
                foreach (var item in BirthsignslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Activators is ILinkContainer ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.AlchemicalApparatus is ILinkContainer AlchemicalApparatuslinkCont)
            {
                foreach (var item in AlchemicalApparatuslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Armors is ILinkContainer ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Books is ILinkContainer BookslinkCont)
            {
                foreach (var item in BookslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Clothes is ILinkContainer ClotheslinkCont)
            {
                foreach (var item in ClotheslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Containers is ILinkContainer ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Doors is ILinkContainer DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Ingredients is ILinkContainer IngredientslinkCont)
            {
                foreach (var item in IngredientslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Lights is ILinkContainer LightslinkCont)
            {
                foreach (var item in LightslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Miscellaneous is ILinkContainer MiscellaneouslinkCont)
            {
                foreach (var item in MiscellaneouslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Statics is ILinkContainer StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Grasses is ILinkContainer GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Trees is ILinkContainer TreeslinkCont)
            {
                foreach (var item in TreeslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Flora is ILinkContainer FloralinkCont)
            {
                foreach (var item in FloralinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Furnature is ILinkContainer FurnaturelinkCont)
            {
                foreach (var item in FurnaturelinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Weapons is ILinkContainer WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Ammo is ILinkContainer AmmolinkCont)
            {
                foreach (var item in AmmolinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.NPCs is ILinkContainer NPCslinkCont)
            {
                foreach (var item in NPCslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Creatures is ILinkContainer CreatureslinkCont)
            {
                foreach (var item in CreatureslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LeveledCreatures is ILinkContainer LeveledCreatureslinkCont)
            {
                foreach (var item in LeveledCreatureslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.SoulGems is ILinkContainer SoulGemslinkCont)
            {
                foreach (var item in SoulGemslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Keys is ILinkContainer KeyslinkCont)
            {
                foreach (var item in KeyslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Potions is ILinkContainer PotionslinkCont)
            {
                foreach (var item in PotionslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Subspaces is ILinkContainer SubspaceslinkCont)
            {
                foreach (var item in SubspaceslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.SigilStones is ILinkContainer SigilStoneslinkCont)
            {
                foreach (var item in SigilStoneslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is ILinkContainer LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Weathers is ILinkContainer WeatherslinkCont)
            {
                foreach (var item in WeatherslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Climates is ILinkContainer ClimateslinkCont)
            {
                foreach (var item in ClimateslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Regions is ILinkContainer RegionslinkCont)
            {
                foreach (var item in RegionslinkCont.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Cells.Links)
            {
                yield return item;
            }
            if (obj.Worldspaces is ILinkContainer WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.DialogTopics is ILinkContainer DialogTopicslinkCont)
            {
                foreach (var item in DialogTopicslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Quests is ILinkContainer QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.IdleAnimations is ILinkContainer IdleAnimationslinkCont)
            {
                foreach (var item in IdleAnimationslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.AIPackages is ILinkContainer AIPackageslinkCont)
            {
                foreach (var item in AIPackageslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyles is ILinkContainer CombatStyleslinkCont)
            {
                foreach (var item in CombatStyleslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LoadScreens is ILinkContainer LoadScreenslinkCont)
            {
                foreach (var item in LoadScreenslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LeveledSpells is ILinkContainer LeveledSpellslinkCont)
            {
                foreach (var item in LeveledSpellslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is ILinkContainer AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Waters is ILinkContainer WaterslinkCont)
            {
                foreach (var item in WaterslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is ILinkContainer EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IOblivionModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Skills.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scripts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Enchantments.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Birthsigns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Clothes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Miscellaneous.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Flora.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furnature.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammo.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NPCs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Creatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Potions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Subspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SigilStones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IOblivionModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords<IGameSettingGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords<IGlobalGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords<IClassGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords<IFactionGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords<IHairGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords<IEyeGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords<IRaceGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    foreach (var item in obj.Sounds.EnumerateMajorRecords<ISoundGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    foreach (var item in obj.Skills.EnumerateMajorRecords<ISkillRecordGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords<IMagicEffectGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    foreach (var item in obj.Scripts.EnumerateMajorRecords<IScriptGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    foreach (var item in obj.LandTextures.EnumerateMajorRecords<ILandTextureGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    foreach (var item in obj.Enchantments.EnumerateMajorRecords<IEnchantmentGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "SpellUnleveled":
                case "ISpellUnleveledGetter":
                case "ISpellUnleveled":
                case "ISpellUnleveledInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords<ISpellUnleveledGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    foreach (var item in obj.Birthsigns.EnumerateMajorRecords<IBirthsignGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords<IActivatorGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords<IAlchemicalApparatusGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords<IArmorGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords<IBookGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    foreach (var item in obj.Clothes.EnumerateMajorRecords<IClothingGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords<IContainerGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords<IDoorGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords<IIngredientGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords<ILightGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    foreach (var item in obj.Miscellaneous.EnumerateMajorRecords<IMiscellaneousGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords<IStaticGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords<IGrassGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords<ITreeGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Flora.EnumerateMajorRecords<IFloraGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Furnature":
                case "IFurnatureGetter":
                case "IFurnature":
                case "IFurnatureInternal":
                    foreach (var item in obj.Furnature.EnumerateMajorRecords<IFurnatureGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords<IWeaponGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Ammo":
                case "IAmmoGetter":
                case "IAmmo":
                case "IAmmoInternal":
                    foreach (var item in obj.Ammo.EnumerateMajorRecords<IAmmoGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "NPC":
                case "INPCGetter":
                case "INPC":
                case "INPCInternal":
                    foreach (var item in obj.NPCs.EnumerateMajorRecords<INPCGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    foreach (var item in obj.Creatures.EnumerateMajorRecords<ICreatureGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords<ILeveledCreatureGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords<ISoulGemGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords<IKeyGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    foreach (var item in obj.Potions.EnumerateMajorRecords<IPotionGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    foreach (var item in obj.Subspaces.EnumerateMajorRecords<ISubspaceGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    foreach (var item in obj.SigilStones.EnumerateMajorRecords<ISigilStoneGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords<ILeveledItemGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords<IWeatherGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords<IClimateGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords<IRegionGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    foreach (var item in obj.Cells.EnumerateMajorRecords<ICellBlockGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords<IWorldspaceGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords<IDialogTopicGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords<IQuestGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords<IIdleAnimationGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    foreach (var item in obj.AIPackages.EnumerateMajorRecords<IAIPackageGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords<ICombatStyleGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords<ILoadScreenGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords<ILeveledSpellGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords<IAnimatedObjectGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords<IWaterGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords<IEffectShaderGetter>())
                    {
                        yield return item as TMajor;
                    }
                    yield break;
                default:
                    break;
            }
        }
        
        #endregion
        
    }
    public partial class OblivionModSetterTranslationCommon
    {
        public static readonly OblivionModSetterTranslationCommon Instance = new OblivionModSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IOblivionMod item,
            IOblivionModGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyFieldsFrom(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyFieldsFrom(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyFieldsFrom(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyFieldsFrom(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyFieldsFrom(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyFieldsFrom(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyFieldsFrom(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyFieldsFrom(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                try
                {
                    item.Sounds.DeepCopyFieldsFrom(
                        rhs: rhs.Sounds,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Sounds));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                try
                {
                    item.Skills.DeepCopyFieldsFrom(
                        rhs: rhs.Skills,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Skills));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyFieldsFrom(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                try
                {
                    item.Scripts.DeepCopyFieldsFrom(
                        rhs: rhs.Scripts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Scripts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                try
                {
                    item.LandTextures.DeepCopyFieldsFrom(
                        rhs: rhs.LandTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LandTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                try
                {
                    item.Enchantments.DeepCopyFieldsFrom(
                        rhs: rhs.Enchantments,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Enchantments));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyFieldsFrom(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                try
                {
                    item.Birthsigns.DeepCopyFieldsFrom(
                        rhs: rhs.Birthsigns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Birthsigns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyFieldsFrom(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                try
                {
                    item.AlchemicalApparatus.DeepCopyFieldsFrom(
                        rhs: rhs.AlchemicalApparatus,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AlchemicalApparatus));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyFieldsFrom(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyFieldsFrom(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                try
                {
                    item.Clothes.DeepCopyFieldsFrom(
                        rhs: rhs.Clothes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Clothes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyFieldsFrom(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyFieldsFrom(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyFieldsFrom(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyFieldsFrom(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                try
                {
                    item.Miscellaneous.DeepCopyFieldsFrom(
                        rhs: rhs.Miscellaneous,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Miscellaneous));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyFieldsFrom(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyFieldsFrom(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyFieldsFrom(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                try
                {
                    item.Flora.DeepCopyFieldsFrom(
                        rhs: rhs.Flora,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Flora));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furnature) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furnature);
                try
                {
                    item.Furnature.DeepCopyFieldsFrom(
                        rhs: rhs.Furnature,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Furnature));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyFieldsFrom(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammo) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammo);
                try
                {
                    item.Ammo.DeepCopyFieldsFrom(
                        rhs: rhs.Ammo,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ammo));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.NPCs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.NPCs);
                try
                {
                    item.NPCs.DeepCopyFieldsFrom(
                        rhs: rhs.NPCs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.NPCs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                try
                {
                    item.Creatures.DeepCopyFieldsFrom(
                        rhs: rhs.Creatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Creatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                try
                {
                    item.LeveledCreatures.DeepCopyFieldsFrom(
                        rhs: rhs.LeveledCreatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledCreatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyFieldsFrom(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyFieldsFrom(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                try
                {
                    item.Potions.DeepCopyFieldsFrom(
                        rhs: rhs.Potions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Potions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                try
                {
                    item.Subspaces.DeepCopyFieldsFrom(
                        rhs: rhs.Subspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Subspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                try
                {
                    item.SigilStones.DeepCopyFieldsFrom(
                        rhs: rhs.SigilStones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SigilStones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyFieldsFrom(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyFieldsFrom(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyFieldsFrom(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyFieldsFrom(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyFieldsFrom(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyFieldsFrom(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyFieldsFrom(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyFieldsFrom(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyFieldsFrom(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.DeepCopyFieldsFrom(
                        rhs: rhs.AIPackages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AIPackages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyFieldsFrom(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyFieldsFrom(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyFieldsFrom(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyFieldsFrom(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyFieldsFrom(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyFieldsFrom(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            OblivionMod_TranslationMask copyMask = null)
        {
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask copyMask = null)
        {
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            OblivionMod ret = (OblivionMod)((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class OblivionMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;
        protected object CommonInstance() => OblivionModCommon.Instance;
        protected object CommonSetterInstance()
        {
            return OblivionModSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        object IOblivionModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class OblivionModXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static OblivionModXmlWriteTranslation Instance = new OblivionModXmlWriteTranslation();

        public static void WriteToNodeXml(
            IOblivionModGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.ModHeader) ?? true))
            {
                var loquiItem = item.ModHeader;
                ((ModHeaderXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.ModHeader),
                    fieldIndex: (int)OblivionMod_FieldIndex.ModHeader,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.ModHeader));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                var loquiItem = item.GameSettings;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IGameSettingGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                var loquiItem = item.Globals;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IGlobalGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Globals),
                    fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Globals));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                var loquiItem = item.Classes;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IClassGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Classes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Classes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                var loquiItem = item.Factions;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IFactionGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Factions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Factions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                var loquiItem = item.Hairs;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IHairGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Hairs),
                    fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Hairs));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                var loquiItem = item.Eyes;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IEyeGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Eyes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Eyes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                var loquiItem = item.Races;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IRaceGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Races),
                    fieldIndex: (int)OblivionMod_FieldIndex.Races,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Races));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                var loquiItem = item.Sounds;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISoundGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Sounds),
                    fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Sounds));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                var loquiItem = item.Skills;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISkillRecordGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Skills),
                    fieldIndex: (int)OblivionMod_FieldIndex.Skills,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Skills));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                var loquiItem = item.MagicEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IMagicEffectGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.MagicEffects),
                    fieldIndex: (int)OblivionMod_FieldIndex.MagicEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.MagicEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                var loquiItem = item.Scripts;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IScriptGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Scripts),
                    fieldIndex: (int)OblivionMod_FieldIndex.Scripts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Scripts));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                var loquiItem = item.LandTextures;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILandTextureGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LandTextures),
                    fieldIndex: (int)OblivionMod_FieldIndex.LandTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LandTextures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                var loquiItem = item.Enchantments;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IEnchantmentGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Enchantments),
                    fieldIndex: (int)OblivionMod_FieldIndex.Enchantments,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Enchantments));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                var loquiItem = item.Spells;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISpellUnleveledGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Spells),
                    fieldIndex: (int)OblivionMod_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Spells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                var loquiItem = item.Birthsigns;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IBirthsignGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Birthsigns),
                    fieldIndex: (int)OblivionMod_FieldIndex.Birthsigns,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Birthsigns));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                var loquiItem = item.Activators;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IActivatorGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Activators),
                    fieldIndex: (int)OblivionMod_FieldIndex.Activators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Activators));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                var loquiItem = item.AlchemicalApparatus;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IAlchemicalApparatusGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.AlchemicalApparatus),
                    fieldIndex: (int)OblivionMod_FieldIndex.AlchemicalApparatus,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AlchemicalApparatus));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                var loquiItem = item.Armors;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IArmorGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Armors),
                    fieldIndex: (int)OblivionMod_FieldIndex.Armors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Armors));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                var loquiItem = item.Books;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IBookGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Books),
                    fieldIndex: (int)OblivionMod_FieldIndex.Books,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Books));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                var loquiItem = item.Clothes;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IClothingGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Clothes),
                    fieldIndex: (int)OblivionMod_FieldIndex.Clothes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Clothes));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                var loquiItem = item.Containers;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IContainerGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Containers),
                    fieldIndex: (int)OblivionMod_FieldIndex.Containers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Containers));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                var loquiItem = item.Doors;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IDoorGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Doors),
                    fieldIndex: (int)OblivionMod_FieldIndex.Doors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Doors));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                var loquiItem = item.Ingredients;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IIngredientGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Ingredients),
                    fieldIndex: (int)OblivionMod_FieldIndex.Ingredients,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ingredients));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                var loquiItem = item.Lights;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILightGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Lights),
                    fieldIndex: (int)OblivionMod_FieldIndex.Lights,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Lights));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                var loquiItem = item.Miscellaneous;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IMiscellaneousGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Miscellaneous),
                    fieldIndex: (int)OblivionMod_FieldIndex.Miscellaneous,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Miscellaneous));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                var loquiItem = item.Statics;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IStaticGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Statics),
                    fieldIndex: (int)OblivionMod_FieldIndex.Statics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Statics));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                var loquiItem = item.Grasses;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IGrassGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)OblivionMod_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Grasses));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                var loquiItem = item.Trees;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ITreeGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Trees),
                    fieldIndex: (int)OblivionMod_FieldIndex.Trees,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Trees));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                var loquiItem = item.Flora;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IFloraGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Flora),
                    fieldIndex: (int)OblivionMod_FieldIndex.Flora,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Flora));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furnature) ?? true))
            {
                var loquiItem = item.Furnature;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IFurnatureGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Furnature),
                    fieldIndex: (int)OblivionMod_FieldIndex.Furnature,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Furnature));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                var loquiItem = item.Weapons;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IWeaponGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Weapons),
                    fieldIndex: (int)OblivionMod_FieldIndex.Weapons,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weapons));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammo) ?? true))
            {
                var loquiItem = item.Ammo;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IAmmoGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Ammo),
                    fieldIndex: (int)OblivionMod_FieldIndex.Ammo,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ammo));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.NPCs) ?? true))
            {
                var loquiItem = item.NPCs;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<INPCGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.NPCs),
                    fieldIndex: (int)OblivionMod_FieldIndex.NPCs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.NPCs));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                var loquiItem = item.Creatures;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ICreatureGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Creatures),
                    fieldIndex: (int)OblivionMod_FieldIndex.Creatures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Creatures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                var loquiItem = item.LeveledCreatures;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILeveledCreatureGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LeveledCreatures),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledCreatures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledCreatures));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                var loquiItem = item.SoulGems;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISoulGemGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.SoulGems),
                    fieldIndex: (int)OblivionMod_FieldIndex.SoulGems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SoulGems));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                var loquiItem = item.Keys;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IKeyGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Keys),
                    fieldIndex: (int)OblivionMod_FieldIndex.Keys,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Keys));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                var loquiItem = item.Potions;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IPotionGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Potions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Potions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Potions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                var loquiItem = item.Subspaces;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISubspaceGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Subspaces),
                    fieldIndex: (int)OblivionMod_FieldIndex.Subspaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Subspaces));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                var loquiItem = item.SigilStones;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ISigilStoneGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.SigilStones),
                    fieldIndex: (int)OblivionMod_FieldIndex.SigilStones,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SigilStones));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                var loquiItem = item.LeveledItems;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILeveledItemGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LeveledItems),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledItems));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                var loquiItem = item.Weathers;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IWeatherGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Weathers),
                    fieldIndex: (int)OblivionMod_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weathers));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                var loquiItem = item.Climates;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IClimateGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Climates),
                    fieldIndex: (int)OblivionMod_FieldIndex.Climates,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Climates));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                var loquiItem = item.Regions;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IRegionGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Regions),
                    fieldIndex: (int)OblivionMod_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Regions));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                var loquiItem = item.Cells;
                ((ListGroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ICellBlockGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Cells),
                    fieldIndex: (int)OblivionMod_FieldIndex.Cells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Cells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                var loquiItem = item.Worldspaces;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IWorldspaceGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Worldspaces),
                    fieldIndex: (int)OblivionMod_FieldIndex.Worldspaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Worldspaces));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                var loquiItem = item.DialogTopics;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IDialogTopicGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.DialogTopics),
                    fieldIndex: (int)OblivionMod_FieldIndex.DialogTopics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.DialogTopics));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                var loquiItem = item.Quests;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IQuestGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Quests),
                    fieldIndex: (int)OblivionMod_FieldIndex.Quests,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Quests));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                var loquiItem = item.IdleAnimations;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IIdleAnimationGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.IdleAnimations),
                    fieldIndex: (int)OblivionMod_FieldIndex.IdleAnimations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.IdleAnimations));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                var loquiItem = item.AIPackages;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IAIPackageGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.AIPackages),
                    fieldIndex: (int)OblivionMod_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AIPackages));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                var loquiItem = item.CombatStyles;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ICombatStyleGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.CombatStyles),
                    fieldIndex: (int)OblivionMod_FieldIndex.CombatStyles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.CombatStyles));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                var loquiItem = item.LoadScreens;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILoadScreenGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LoadScreens),
                    fieldIndex: (int)OblivionMod_FieldIndex.LoadScreens,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LoadScreens));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                var loquiItem = item.LeveledSpells;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILeveledSpellGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LeveledSpells),
                    fieldIndex: (int)OblivionMod_FieldIndex.LeveledSpells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledSpells));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                var loquiItem = item.AnimatedObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IAnimatedObjectGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.AnimatedObjects),
                    fieldIndex: (int)OblivionMod_FieldIndex.AnimatedObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AnimatedObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                var loquiItem = item.Waters;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IWaterGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Waters),
                    fieldIndex: (int)OblivionMod_FieldIndex.Waters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Waters));
            }
            if ((translationMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                var loquiItem = item.EffectShaders;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IEffectShaderGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.EffectShaders),
                    fieldIndex: (int)OblivionMod_FieldIndex.EffectShaders,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)OblivionMod_FieldIndex.EffectShaders));
            }
        }

        public void Write(
            XElement node,
            IOblivionModGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.OblivionMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.OblivionMod");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IOblivionModGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IOblivionModGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IOblivionModGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class OblivionModXmlCreateTranslation
    {
        public readonly static OblivionModXmlCreateTranslation Instance = new OblivionModXmlCreateTranslation();

        public static void FillPublicXml(
            IOblivionMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    OblivionModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IOblivionMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                        item.GameSettings.CopyInFromXml<GameSetting>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                        item.Globals.CopyInFromXml<Global>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                        item.Classes.CopyInFromXml<Class>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                        item.Factions.CopyInFromXml<Faction>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                        item.Hairs.CopyInFromXml<Hair>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                        item.Eyes.CopyInFromXml<Eye>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Races":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                        item.Races.CopyInFromXml<Race>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                        item.Sounds.CopyInFromXml<Sound>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Skills":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                        item.Skills.CopyInFromXml<SkillRecord>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicEffects":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                        item.MagicEffects.CopyInFromXml<MagicEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scripts":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                        item.Scripts.CopyInFromXml<Script>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LandTextures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                        item.LandTextures.CopyInFromXml<LandTexture>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantments":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                        item.Enchantments.CopyInFromXml<Enchantment>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                        item.Spells.CopyInFromXml<SpellUnleveled>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Birthsigns":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                        item.Birthsigns.CopyInFromXml<Birthsign>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Activators":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                        item.Activators.CopyInFromXml<Activator>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemicalApparatus":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                        item.AlchemicalApparatus.CopyInFromXml<AlchemicalApparatus>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Armors":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                        item.Armors.CopyInFromXml<Armor>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Books":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                        item.Books.CopyInFromXml<Book>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Clothes":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                        item.Clothes.CopyInFromXml<Clothing>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Containers":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                        item.Containers.CopyInFromXml<Container>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Doors":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                        item.Doors.CopyInFromXml<Door>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredients":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                        item.Ingredients.CopyInFromXml<Ingredient>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lights":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                        item.Lights.CopyInFromXml<Light>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Miscellaneous":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                        item.Miscellaneous.CopyInFromXml<Miscellaneous>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Statics":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                        item.Statics.CopyInFromXml<Static>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                        item.Grasses.CopyInFromXml<Grass>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Trees":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                        item.Trees.CopyInFromXml<Tree>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flora":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                        item.Flora.CopyInFromXml<Flora>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Furnature":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furnature);
                        item.Furnature.CopyInFromXml<Furnature>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weapons":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                        item.Weapons.CopyInFromXml<Weapon>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ammo":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammo);
                        item.Ammo.CopyInFromXml<Ammo>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NPCs":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.NPCs);
                        item.NPCs.CopyInFromXml<NPC>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Creatures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                        item.Creatures.CopyInFromXml<Creature>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledCreatures":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                        item.LeveledCreatures.CopyInFromXml<LeveledCreature>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulGems":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                        item.SoulGems.CopyInFromXml<SoulGem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keys":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                        item.Keys.CopyInFromXml<Key>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Potions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                        item.Potions.CopyInFromXml<Potion>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Subspaces":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                        item.Subspaces.CopyInFromXml<Subspace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SigilStones":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                        item.SigilStones.CopyInFromXml<SigilStone>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledItems":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                        item.LeveledItems.CopyInFromXml<LeveledItem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weathers":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                        item.Weathers.CopyInFromXml<Weather>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climates":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                        item.Climates.CopyInFromXml<Climate>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                        item.Regions.CopyInFromXml<Region>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspaces":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                        item.Worldspaces.CopyInFromXml<Worldspace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogTopics":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                        item.DialogTopics.CopyInFromXml<DialogTopic>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quests":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                        item.Quests.CopyInFromXml<Quest>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimations":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                        item.IdleAnimations.CopyInFromXml<IdleAnimation>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                        item.AIPackages.CopyInFromXml<AIPackage>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyles":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                        item.CombatStyles.CopyInFromXml<CombatStyle>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoadScreens":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                        item.LoadScreens.CopyInFromXml<LoadScreen>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledSpells":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                        item.LeveledSpells.CopyInFromXml<LeveledSpell>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AnimatedObjects":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                        item.AnimatedObjects.CopyInFromXml<AnimatedObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Waters":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                        item.Waters.CopyInFromXml<Water>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShaders":
                    try
                    {
                        errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                        item.EffectShaders.CopyInFromXml<EffectShader>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class OblivionModXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IOblivionModGetter item,
            XElement node,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            OblivionMod_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((OblivionModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            string path,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((OblivionModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            XElement node,
            string name = null,
            OblivionMod_TranslationMask translationMask = null)
        {
            ((OblivionModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((OblivionModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IOblivionModGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((OblivionModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public class OblivionMod_Mask<T> : IMask<T>, IEquatable<OblivionMod_Mask<T>>
    {
        #region Ctors
        public OblivionMod_Mask()
        {
        }

        public OblivionMod_Mask(T initialValue)
        {
            this.ModHeader = new MaskItem<T, ModHeader_Mask<T>>(initialValue, new ModHeader_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Classes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Factions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Eyes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Races = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Skills = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.MagicEffects = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Scripts = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LandTextures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Enchantments = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Spells = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Birthsigns = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Activators = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AlchemicalApparatus = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Armors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Books = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Clothes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Containers = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Doors = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ingredients = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Lights = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Miscellaneous = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Statics = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Grasses = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Trees = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Flora = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Furnature = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Weapons = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Ammo = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.NPCs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Creatures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledCreatures = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.SoulGems = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Keys = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Potions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Subspaces = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.SigilStones = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledItems = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Weathers = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Climates = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Regions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Cells = new MaskItem<T, ListGroup_Mask<T>>(initialValue, new ListGroup_Mask<T>(initialValue));
            this.Worldspaces = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.DialogTopics = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Quests = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.IdleAnimations = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AIPackages = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.CombatStyles = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LoadScreens = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.LeveledSpells = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.AnimatedObjects = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Waters = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.EffectShaders = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, ModHeader_Mask<T>> ModHeader { get; set; }
        public MaskItem<T, Group_Mask<T>> GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>> Globals { get; set; }
        public MaskItem<T, Group_Mask<T>> Classes { get; set; }
        public MaskItem<T, Group_Mask<T>> Factions { get; set; }
        public MaskItem<T, Group_Mask<T>> Hairs { get; set; }
        public MaskItem<T, Group_Mask<T>> Eyes { get; set; }
        public MaskItem<T, Group_Mask<T>> Races { get; set; }
        public MaskItem<T, Group_Mask<T>> Sounds { get; set; }
        public MaskItem<T, Group_Mask<T>> Skills { get; set; }
        public MaskItem<T, Group_Mask<T>> MagicEffects { get; set; }
        public MaskItem<T, Group_Mask<T>> Scripts { get; set; }
        public MaskItem<T, Group_Mask<T>> LandTextures { get; set; }
        public MaskItem<T, Group_Mask<T>> Enchantments { get; set; }
        public MaskItem<T, Group_Mask<T>> Spells { get; set; }
        public MaskItem<T, Group_Mask<T>> Birthsigns { get; set; }
        public MaskItem<T, Group_Mask<T>> Activators { get; set; }
        public MaskItem<T, Group_Mask<T>> AlchemicalApparatus { get; set; }
        public MaskItem<T, Group_Mask<T>> Armors { get; set; }
        public MaskItem<T, Group_Mask<T>> Books { get; set; }
        public MaskItem<T, Group_Mask<T>> Clothes { get; set; }
        public MaskItem<T, Group_Mask<T>> Containers { get; set; }
        public MaskItem<T, Group_Mask<T>> Doors { get; set; }
        public MaskItem<T, Group_Mask<T>> Ingredients { get; set; }
        public MaskItem<T, Group_Mask<T>> Lights { get; set; }
        public MaskItem<T, Group_Mask<T>> Miscellaneous { get; set; }
        public MaskItem<T, Group_Mask<T>> Statics { get; set; }
        public MaskItem<T, Group_Mask<T>> Grasses { get; set; }
        public MaskItem<T, Group_Mask<T>> Trees { get; set; }
        public MaskItem<T, Group_Mask<T>> Flora { get; set; }
        public MaskItem<T, Group_Mask<T>> Furnature { get; set; }
        public MaskItem<T, Group_Mask<T>> Weapons { get; set; }
        public MaskItem<T, Group_Mask<T>> Ammo { get; set; }
        public MaskItem<T, Group_Mask<T>> NPCs { get; set; }
        public MaskItem<T, Group_Mask<T>> Creatures { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledCreatures { get; set; }
        public MaskItem<T, Group_Mask<T>> SoulGems { get; set; }
        public MaskItem<T, Group_Mask<T>> Keys { get; set; }
        public MaskItem<T, Group_Mask<T>> Potions { get; set; }
        public MaskItem<T, Group_Mask<T>> Subspaces { get; set; }
        public MaskItem<T, Group_Mask<T>> SigilStones { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledItems { get; set; }
        public MaskItem<T, Group_Mask<T>> Weathers { get; set; }
        public MaskItem<T, Group_Mask<T>> Climates { get; set; }
        public MaskItem<T, Group_Mask<T>> Regions { get; set; }
        public MaskItem<T, ListGroup_Mask<T>> Cells { get; set; }
        public MaskItem<T, Group_Mask<T>> Worldspaces { get; set; }
        public MaskItem<T, Group_Mask<T>> DialogTopics { get; set; }
        public MaskItem<T, Group_Mask<T>> Quests { get; set; }
        public MaskItem<T, Group_Mask<T>> IdleAnimations { get; set; }
        public MaskItem<T, Group_Mask<T>> AIPackages { get; set; }
        public MaskItem<T, Group_Mask<T>> CombatStyles { get; set; }
        public MaskItem<T, Group_Mask<T>> LoadScreens { get; set; }
        public MaskItem<T, Group_Mask<T>> LeveledSpells { get; set; }
        public MaskItem<T, Group_Mask<T>> AnimatedObjects { get; set; }
        public MaskItem<T, Group_Mask<T>> Waters { get; set; }
        public MaskItem<T, Group_Mask<T>> EffectShaders { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.Races, rhs.Races)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            if (!object.Equals(this.Skills, rhs.Skills)) return false;
            if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
            if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
            if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
            if (!object.Equals(this.Activators, rhs.Activators)) return false;
            if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
            if (!object.Equals(this.Armors, rhs.Armors)) return false;
            if (!object.Equals(this.Books, rhs.Books)) return false;
            if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
            if (!object.Equals(this.Containers, rhs.Containers)) return false;
            if (!object.Equals(this.Doors, rhs.Doors)) return false;
            if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(this.Lights, rhs.Lights)) return false;
            if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
            if (!object.Equals(this.Statics, rhs.Statics)) return false;
            if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(this.Trees, rhs.Trees)) return false;
            if (!object.Equals(this.Flora, rhs.Flora)) return false;
            if (!object.Equals(this.Furnature, rhs.Furnature)) return false;
            if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(this.Ammo, rhs.Ammo)) return false;
            if (!object.Equals(this.NPCs, rhs.NPCs)) return false;
            if (!object.Equals(this.Creatures, rhs.Creatures)) return false;
            if (!object.Equals(this.LeveledCreatures, rhs.LeveledCreatures)) return false;
            if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(this.Keys, rhs.Keys)) return false;
            if (!object.Equals(this.Potions, rhs.Potions)) return false;
            if (!object.Equals(this.Subspaces, rhs.Subspaces)) return false;
            if (!object.Equals(this.SigilStones, rhs.SigilStones)) return false;
            if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(this.Climates, rhs.Climates)) return false;
            if (!object.Equals(this.Regions, rhs.Regions)) return false;
            if (!object.Equals(this.Cells, rhs.Cells)) return false;
            if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(this.Quests, rhs.Quests)) return false;
            if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
            if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(this.Waters, rhs.Waters)) return false;
            if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ModHeader?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            ret = ret.CombineHashCode(this.Classes?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.Races?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            ret = ret.CombineHashCode(this.Skills?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicEffects?.GetHashCode());
            ret = ret.CombineHashCode(this.Scripts?.GetHashCode());
            ret = ret.CombineHashCode(this.LandTextures?.GetHashCode());
            ret = ret.CombineHashCode(this.Enchantments?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Birthsigns?.GetHashCode());
            ret = ret.CombineHashCode(this.Activators?.GetHashCode());
            ret = ret.CombineHashCode(this.AlchemicalApparatus?.GetHashCode());
            ret = ret.CombineHashCode(this.Armors?.GetHashCode());
            ret = ret.CombineHashCode(this.Books?.GetHashCode());
            ret = ret.CombineHashCode(this.Clothes?.GetHashCode());
            ret = ret.CombineHashCode(this.Containers?.GetHashCode());
            ret = ret.CombineHashCode(this.Doors?.GetHashCode());
            ret = ret.CombineHashCode(this.Ingredients?.GetHashCode());
            ret = ret.CombineHashCode(this.Lights?.GetHashCode());
            ret = ret.CombineHashCode(this.Miscellaneous?.GetHashCode());
            ret = ret.CombineHashCode(this.Statics?.GetHashCode());
            ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Trees?.GetHashCode());
            ret = ret.CombineHashCode(this.Flora?.GetHashCode());
            ret = ret.CombineHashCode(this.Furnature?.GetHashCode());
            ret = ret.CombineHashCode(this.Weapons?.GetHashCode());
            ret = ret.CombineHashCode(this.Ammo?.GetHashCode());
            ret = ret.CombineHashCode(this.NPCs?.GetHashCode());
            ret = ret.CombineHashCode(this.Creatures?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledCreatures?.GetHashCode());
            ret = ret.CombineHashCode(this.SoulGems?.GetHashCode());
            ret = ret.CombineHashCode(this.Keys?.GetHashCode());
            ret = ret.CombineHashCode(this.Potions?.GetHashCode());
            ret = ret.CombineHashCode(this.Subspaces?.GetHashCode());
            ret = ret.CombineHashCode(this.SigilStones?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledItems?.GetHashCode());
            ret = ret.CombineHashCode(this.Weathers?.GetHashCode());
            ret = ret.CombineHashCode(this.Climates?.GetHashCode());
            ret = ret.CombineHashCode(this.Regions?.GetHashCode());
            ret = ret.CombineHashCode(this.Cells?.GetHashCode());
            ret = ret.CombineHashCode(this.Worldspaces?.GetHashCode());
            ret = ret.CombineHashCode(this.DialogTopics?.GetHashCode());
            ret = ret.CombineHashCode(this.Quests?.GetHashCode());
            ret = ret.CombineHashCode(this.IdleAnimations?.GetHashCode());
            ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
            ret = ret.CombineHashCode(this.CombatStyles?.GetHashCode());
            ret = ret.CombineHashCode(this.LoadScreens?.GetHashCode());
            ret = ret.CombineHashCode(this.LeveledSpells?.GetHashCode());
            ret = ret.CombineHashCode(this.AnimatedObjects?.GetHashCode());
            ret = ret.CombineHashCode(this.Waters?.GetHashCode());
            ret = ret.CombineHashCode(this.EffectShaders?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (ModHeader != null)
            {
                if (!eval(this.ModHeader.Overall)) return false;
                if (this.ModHeader.Specific != null && !this.ModHeader.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (this.GameSettings.Specific != null && !this.GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (this.Globals.Specific != null && !this.Globals.Specific.AllEqual(eval)) return false;
            }
            if (Classes != null)
            {
                if (!eval(this.Classes.Overall)) return false;
                if (this.Classes.Specific != null && !this.Classes.Specific.AllEqual(eval)) return false;
            }
            if (Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null && !this.Factions.Specific.AllEqual(eval)) return false;
            }
            if (Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (this.Hairs.Specific != null && !this.Hairs.Specific.AllEqual(eval)) return false;
            }
            if (Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (this.Eyes.Specific != null && !this.Eyes.Specific.AllEqual(eval)) return false;
            }
            if (Races != null)
            {
                if (!eval(this.Races.Overall)) return false;
                if (this.Races.Specific != null && !this.Races.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (this.Sounds.Specific != null && !this.Sounds.Specific.AllEqual(eval)) return false;
            }
            if (Skills != null)
            {
                if (!eval(this.Skills.Overall)) return false;
                if (this.Skills.Specific != null && !this.Skills.Specific.AllEqual(eval)) return false;
            }
            if (MagicEffects != null)
            {
                if (!eval(this.MagicEffects.Overall)) return false;
                if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.AllEqual(eval)) return false;
            }
            if (Scripts != null)
            {
                if (!eval(this.Scripts.Overall)) return false;
                if (this.Scripts.Specific != null && !this.Scripts.Specific.AllEqual(eval)) return false;
            }
            if (LandTextures != null)
            {
                if (!eval(this.LandTextures.Overall)) return false;
                if (this.LandTextures.Specific != null && !this.LandTextures.Specific.AllEqual(eval)) return false;
            }
            if (Enchantments != null)
            {
                if (!eval(this.Enchantments.Overall)) return false;
                if (this.Enchantments.Specific != null && !this.Enchantments.Specific.AllEqual(eval)) return false;
            }
            if (Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (this.Spells.Specific != null && !this.Spells.Specific.AllEqual(eval)) return false;
            }
            if (Birthsigns != null)
            {
                if (!eval(this.Birthsigns.Overall)) return false;
                if (this.Birthsigns.Specific != null && !this.Birthsigns.Specific.AllEqual(eval)) return false;
            }
            if (Activators != null)
            {
                if (!eval(this.Activators.Overall)) return false;
                if (this.Activators.Specific != null && !this.Activators.Specific.AllEqual(eval)) return false;
            }
            if (AlchemicalApparatus != null)
            {
                if (!eval(this.AlchemicalApparatus.Overall)) return false;
                if (this.AlchemicalApparatus.Specific != null && !this.AlchemicalApparatus.Specific.AllEqual(eval)) return false;
            }
            if (Armors != null)
            {
                if (!eval(this.Armors.Overall)) return false;
                if (this.Armors.Specific != null && !this.Armors.Specific.AllEqual(eval)) return false;
            }
            if (Books != null)
            {
                if (!eval(this.Books.Overall)) return false;
                if (this.Books.Specific != null && !this.Books.Specific.AllEqual(eval)) return false;
            }
            if (Clothes != null)
            {
                if (!eval(this.Clothes.Overall)) return false;
                if (this.Clothes.Specific != null && !this.Clothes.Specific.AllEqual(eval)) return false;
            }
            if (Containers != null)
            {
                if (!eval(this.Containers.Overall)) return false;
                if (this.Containers.Specific != null && !this.Containers.Specific.AllEqual(eval)) return false;
            }
            if (Doors != null)
            {
                if (!eval(this.Doors.Overall)) return false;
                if (this.Doors.Specific != null && !this.Doors.Specific.AllEqual(eval)) return false;
            }
            if (Ingredients != null)
            {
                if (!eval(this.Ingredients.Overall)) return false;
                if (this.Ingredients.Specific != null && !this.Ingredients.Specific.AllEqual(eval)) return false;
            }
            if (Lights != null)
            {
                if (!eval(this.Lights.Overall)) return false;
                if (this.Lights.Specific != null && !this.Lights.Specific.AllEqual(eval)) return false;
            }
            if (Miscellaneous != null)
            {
                if (!eval(this.Miscellaneous.Overall)) return false;
                if (this.Miscellaneous.Specific != null && !this.Miscellaneous.Specific.AllEqual(eval)) return false;
            }
            if (Statics != null)
            {
                if (!eval(this.Statics.Overall)) return false;
                if (this.Statics.Specific != null && !this.Statics.Specific.AllEqual(eval)) return false;
            }
            if (Grasses != null)
            {
                if (!eval(this.Grasses.Overall)) return false;
                if (this.Grasses.Specific != null && !this.Grasses.Specific.AllEqual(eval)) return false;
            }
            if (Trees != null)
            {
                if (!eval(this.Trees.Overall)) return false;
                if (this.Trees.Specific != null && !this.Trees.Specific.AllEqual(eval)) return false;
            }
            if (Flora != null)
            {
                if (!eval(this.Flora.Overall)) return false;
                if (this.Flora.Specific != null && !this.Flora.Specific.AllEqual(eval)) return false;
            }
            if (Furnature != null)
            {
                if (!eval(this.Furnature.Overall)) return false;
                if (this.Furnature.Specific != null && !this.Furnature.Specific.AllEqual(eval)) return false;
            }
            if (Weapons != null)
            {
                if (!eval(this.Weapons.Overall)) return false;
                if (this.Weapons.Specific != null && !this.Weapons.Specific.AllEqual(eval)) return false;
            }
            if (Ammo != null)
            {
                if (!eval(this.Ammo.Overall)) return false;
                if (this.Ammo.Specific != null && !this.Ammo.Specific.AllEqual(eval)) return false;
            }
            if (NPCs != null)
            {
                if (!eval(this.NPCs.Overall)) return false;
                if (this.NPCs.Specific != null && !this.NPCs.Specific.AllEqual(eval)) return false;
            }
            if (Creatures != null)
            {
                if (!eval(this.Creatures.Overall)) return false;
                if (this.Creatures.Specific != null && !this.Creatures.Specific.AllEqual(eval)) return false;
            }
            if (LeveledCreatures != null)
            {
                if (!eval(this.LeveledCreatures.Overall)) return false;
                if (this.LeveledCreatures.Specific != null && !this.LeveledCreatures.Specific.AllEqual(eval)) return false;
            }
            if (SoulGems != null)
            {
                if (!eval(this.SoulGems.Overall)) return false;
                if (this.SoulGems.Specific != null && !this.SoulGems.Specific.AllEqual(eval)) return false;
            }
            if (Keys != null)
            {
                if (!eval(this.Keys.Overall)) return false;
                if (this.Keys.Specific != null && !this.Keys.Specific.AllEqual(eval)) return false;
            }
            if (Potions != null)
            {
                if (!eval(this.Potions.Overall)) return false;
                if (this.Potions.Specific != null && !this.Potions.Specific.AllEqual(eval)) return false;
            }
            if (Subspaces != null)
            {
                if (!eval(this.Subspaces.Overall)) return false;
                if (this.Subspaces.Specific != null && !this.Subspaces.Specific.AllEqual(eval)) return false;
            }
            if (SigilStones != null)
            {
                if (!eval(this.SigilStones.Overall)) return false;
                if (this.SigilStones.Specific != null && !this.SigilStones.Specific.AllEqual(eval)) return false;
            }
            if (LeveledItems != null)
            {
                if (!eval(this.LeveledItems.Overall)) return false;
                if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.AllEqual(eval)) return false;
            }
            if (Weathers != null)
            {
                if (!eval(this.Weathers.Overall)) return false;
                if (this.Weathers.Specific != null && !this.Weathers.Specific.AllEqual(eval)) return false;
            }
            if (Climates != null)
            {
                if (!eval(this.Climates.Overall)) return false;
                if (this.Climates.Specific != null && !this.Climates.Specific.AllEqual(eval)) return false;
            }
            if (Regions != null)
            {
                if (!eval(this.Regions.Overall)) return false;
                if (this.Regions.Specific != null && !this.Regions.Specific.AllEqual(eval)) return false;
            }
            if (Cells != null)
            {
                if (!eval(this.Cells.Overall)) return false;
                if (this.Cells.Specific != null && !this.Cells.Specific.AllEqual(eval)) return false;
            }
            if (Worldspaces != null)
            {
                if (!eval(this.Worldspaces.Overall)) return false;
                if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.AllEqual(eval)) return false;
            }
            if (DialogTopics != null)
            {
                if (!eval(this.DialogTopics.Overall)) return false;
                if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.AllEqual(eval)) return false;
            }
            if (Quests != null)
            {
                if (!eval(this.Quests.Overall)) return false;
                if (this.Quests.Specific != null && !this.Quests.Specific.AllEqual(eval)) return false;
            }
            if (IdleAnimations != null)
            {
                if (!eval(this.IdleAnimations.Overall)) return false;
                if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.AllEqual(eval)) return false;
            }
            if (AIPackages != null)
            {
                if (!eval(this.AIPackages.Overall)) return false;
                if (this.AIPackages.Specific != null && !this.AIPackages.Specific.AllEqual(eval)) return false;
            }
            if (CombatStyles != null)
            {
                if (!eval(this.CombatStyles.Overall)) return false;
                if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.AllEqual(eval)) return false;
            }
            if (LoadScreens != null)
            {
                if (!eval(this.LoadScreens.Overall)) return false;
                if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.AllEqual(eval)) return false;
            }
            if (LeveledSpells != null)
            {
                if (!eval(this.LeveledSpells.Overall)) return false;
                if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.AllEqual(eval)) return false;
            }
            if (AnimatedObjects != null)
            {
                if (!eval(this.AnimatedObjects.Overall)) return false;
                if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.AllEqual(eval)) return false;
            }
            if (Waters != null)
            {
                if (!eval(this.Waters.Overall)) return false;
                if (this.Waters.Specific != null && !this.Waters.Specific.AllEqual(eval)) return false;
            }
            if (EffectShaders != null)
            {
                if (!eval(this.EffectShaders.Overall)) return false;
                if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public OblivionMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.ModHeader != null)
            {
                obj.ModHeader = new MaskItem<R, ModHeader_Mask<R>>();
                obj.ModHeader.Overall = eval(this.ModHeader.Overall);
                if (this.ModHeader.Specific != null)
                {
                    obj.ModHeader.Specific = this.ModHeader.Specific.Translate(eval);
                }
            }
            if (this.GameSettings != null)
            {
                obj.GameSettings = new MaskItem<R, Group_Mask<R>>();
                obj.GameSettings.Overall = eval(this.GameSettings.Overall);
                if (this.GameSettings.Specific != null)
                {
                    obj.GameSettings.Specific = this.GameSettings.Specific.Translate(eval);
                }
            }
            if (this.Globals != null)
            {
                obj.Globals = new MaskItem<R, Group_Mask<R>>();
                obj.Globals.Overall = eval(this.Globals.Overall);
                if (this.Globals.Specific != null)
                {
                    obj.Globals.Specific = this.Globals.Specific.Translate(eval);
                }
            }
            if (this.Classes != null)
            {
                obj.Classes = new MaskItem<R, Group_Mask<R>>();
                obj.Classes.Overall = eval(this.Classes.Overall);
                if (this.Classes.Specific != null)
                {
                    obj.Classes.Specific = this.Classes.Specific.Translate(eval);
                }
            }
            if (this.Factions != null)
            {
                obj.Factions = new MaskItem<R, Group_Mask<R>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (this.Factions.Specific != null)
                {
                    obj.Factions.Specific = this.Factions.Specific.Translate(eval);
                }
            }
            if (this.Hairs != null)
            {
                obj.Hairs = new MaskItem<R, Group_Mask<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (this.Hairs.Specific != null)
                {
                    obj.Hairs.Specific = this.Hairs.Specific.Translate(eval);
                }
            }
            if (this.Eyes != null)
            {
                obj.Eyes = new MaskItem<R, Group_Mask<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (this.Eyes.Specific != null)
                {
                    obj.Eyes.Specific = this.Eyes.Specific.Translate(eval);
                }
            }
            if (this.Races != null)
            {
                obj.Races = new MaskItem<R, Group_Mask<R>>();
                obj.Races.Overall = eval(this.Races.Overall);
                if (this.Races.Specific != null)
                {
                    obj.Races.Specific = this.Races.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, Group_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
            if (this.Skills != null)
            {
                obj.Skills = new MaskItem<R, Group_Mask<R>>();
                obj.Skills.Overall = eval(this.Skills.Overall);
                if (this.Skills.Specific != null)
                {
                    obj.Skills.Specific = this.Skills.Specific.Translate(eval);
                }
            }
            if (this.MagicEffects != null)
            {
                obj.MagicEffects = new MaskItem<R, Group_Mask<R>>();
                obj.MagicEffects.Overall = eval(this.MagicEffects.Overall);
                if (this.MagicEffects.Specific != null)
                {
                    obj.MagicEffects.Specific = this.MagicEffects.Specific.Translate(eval);
                }
            }
            if (this.Scripts != null)
            {
                obj.Scripts = new MaskItem<R, Group_Mask<R>>();
                obj.Scripts.Overall = eval(this.Scripts.Overall);
                if (this.Scripts.Specific != null)
                {
                    obj.Scripts.Specific = this.Scripts.Specific.Translate(eval);
                }
            }
            if (this.LandTextures != null)
            {
                obj.LandTextures = new MaskItem<R, Group_Mask<R>>();
                obj.LandTextures.Overall = eval(this.LandTextures.Overall);
                if (this.LandTextures.Specific != null)
                {
                    obj.LandTextures.Specific = this.LandTextures.Specific.Translate(eval);
                }
            }
            if (this.Enchantments != null)
            {
                obj.Enchantments = new MaskItem<R, Group_Mask<R>>();
                obj.Enchantments.Overall = eval(this.Enchantments.Overall);
                if (this.Enchantments.Specific != null)
                {
                    obj.Enchantments.Specific = this.Enchantments.Specific.Translate(eval);
                }
            }
            if (this.Spells != null)
            {
                obj.Spells = new MaskItem<R, Group_Mask<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (this.Spells.Specific != null)
                {
                    obj.Spells.Specific = this.Spells.Specific.Translate(eval);
                }
            }
            if (this.Birthsigns != null)
            {
                obj.Birthsigns = new MaskItem<R, Group_Mask<R>>();
                obj.Birthsigns.Overall = eval(this.Birthsigns.Overall);
                if (this.Birthsigns.Specific != null)
                {
                    obj.Birthsigns.Specific = this.Birthsigns.Specific.Translate(eval);
                }
            }
            if (this.Activators != null)
            {
                obj.Activators = new MaskItem<R, Group_Mask<R>>();
                obj.Activators.Overall = eval(this.Activators.Overall);
                if (this.Activators.Specific != null)
                {
                    obj.Activators.Specific = this.Activators.Specific.Translate(eval);
                }
            }
            if (this.AlchemicalApparatus != null)
            {
                obj.AlchemicalApparatus = new MaskItem<R, Group_Mask<R>>();
                obj.AlchemicalApparatus.Overall = eval(this.AlchemicalApparatus.Overall);
                if (this.AlchemicalApparatus.Specific != null)
                {
                    obj.AlchemicalApparatus.Specific = this.AlchemicalApparatus.Specific.Translate(eval);
                }
            }
            if (this.Armors != null)
            {
                obj.Armors = new MaskItem<R, Group_Mask<R>>();
                obj.Armors.Overall = eval(this.Armors.Overall);
                if (this.Armors.Specific != null)
                {
                    obj.Armors.Specific = this.Armors.Specific.Translate(eval);
                }
            }
            if (this.Books != null)
            {
                obj.Books = new MaskItem<R, Group_Mask<R>>();
                obj.Books.Overall = eval(this.Books.Overall);
                if (this.Books.Specific != null)
                {
                    obj.Books.Specific = this.Books.Specific.Translate(eval);
                }
            }
            if (this.Clothes != null)
            {
                obj.Clothes = new MaskItem<R, Group_Mask<R>>();
                obj.Clothes.Overall = eval(this.Clothes.Overall);
                if (this.Clothes.Specific != null)
                {
                    obj.Clothes.Specific = this.Clothes.Specific.Translate(eval);
                }
            }
            if (this.Containers != null)
            {
                obj.Containers = new MaskItem<R, Group_Mask<R>>();
                obj.Containers.Overall = eval(this.Containers.Overall);
                if (this.Containers.Specific != null)
                {
                    obj.Containers.Specific = this.Containers.Specific.Translate(eval);
                }
            }
            if (this.Doors != null)
            {
                obj.Doors = new MaskItem<R, Group_Mask<R>>();
                obj.Doors.Overall = eval(this.Doors.Overall);
                if (this.Doors.Specific != null)
                {
                    obj.Doors.Specific = this.Doors.Specific.Translate(eval);
                }
            }
            if (this.Ingredients != null)
            {
                obj.Ingredients = new MaskItem<R, Group_Mask<R>>();
                obj.Ingredients.Overall = eval(this.Ingredients.Overall);
                if (this.Ingredients.Specific != null)
                {
                    obj.Ingredients.Specific = this.Ingredients.Specific.Translate(eval);
                }
            }
            if (this.Lights != null)
            {
                obj.Lights = new MaskItem<R, Group_Mask<R>>();
                obj.Lights.Overall = eval(this.Lights.Overall);
                if (this.Lights.Specific != null)
                {
                    obj.Lights.Specific = this.Lights.Specific.Translate(eval);
                }
            }
            if (this.Miscellaneous != null)
            {
                obj.Miscellaneous = new MaskItem<R, Group_Mask<R>>();
                obj.Miscellaneous.Overall = eval(this.Miscellaneous.Overall);
                if (this.Miscellaneous.Specific != null)
                {
                    obj.Miscellaneous.Specific = this.Miscellaneous.Specific.Translate(eval);
                }
            }
            if (this.Statics != null)
            {
                obj.Statics = new MaskItem<R, Group_Mask<R>>();
                obj.Statics.Overall = eval(this.Statics.Overall);
                if (this.Statics.Specific != null)
                {
                    obj.Statics.Specific = this.Statics.Specific.Translate(eval);
                }
            }
            if (this.Grasses != null)
            {
                obj.Grasses = new MaskItem<R, Group_Mask<R>>();
                obj.Grasses.Overall = eval(this.Grasses.Overall);
                if (this.Grasses.Specific != null)
                {
                    obj.Grasses.Specific = this.Grasses.Specific.Translate(eval);
                }
            }
            if (this.Trees != null)
            {
                obj.Trees = new MaskItem<R, Group_Mask<R>>();
                obj.Trees.Overall = eval(this.Trees.Overall);
                if (this.Trees.Specific != null)
                {
                    obj.Trees.Specific = this.Trees.Specific.Translate(eval);
                }
            }
            if (this.Flora != null)
            {
                obj.Flora = new MaskItem<R, Group_Mask<R>>();
                obj.Flora.Overall = eval(this.Flora.Overall);
                if (this.Flora.Specific != null)
                {
                    obj.Flora.Specific = this.Flora.Specific.Translate(eval);
                }
            }
            if (this.Furnature != null)
            {
                obj.Furnature = new MaskItem<R, Group_Mask<R>>();
                obj.Furnature.Overall = eval(this.Furnature.Overall);
                if (this.Furnature.Specific != null)
                {
                    obj.Furnature.Specific = this.Furnature.Specific.Translate(eval);
                }
            }
            if (this.Weapons != null)
            {
                obj.Weapons = new MaskItem<R, Group_Mask<R>>();
                obj.Weapons.Overall = eval(this.Weapons.Overall);
                if (this.Weapons.Specific != null)
                {
                    obj.Weapons.Specific = this.Weapons.Specific.Translate(eval);
                }
            }
            if (this.Ammo != null)
            {
                obj.Ammo = new MaskItem<R, Group_Mask<R>>();
                obj.Ammo.Overall = eval(this.Ammo.Overall);
                if (this.Ammo.Specific != null)
                {
                    obj.Ammo.Specific = this.Ammo.Specific.Translate(eval);
                }
            }
            if (this.NPCs != null)
            {
                obj.NPCs = new MaskItem<R, Group_Mask<R>>();
                obj.NPCs.Overall = eval(this.NPCs.Overall);
                if (this.NPCs.Specific != null)
                {
                    obj.NPCs.Specific = this.NPCs.Specific.Translate(eval);
                }
            }
            if (this.Creatures != null)
            {
                obj.Creatures = new MaskItem<R, Group_Mask<R>>();
                obj.Creatures.Overall = eval(this.Creatures.Overall);
                if (this.Creatures.Specific != null)
                {
                    obj.Creatures.Specific = this.Creatures.Specific.Translate(eval);
                }
            }
            if (this.LeveledCreatures != null)
            {
                obj.LeveledCreatures = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledCreatures.Overall = eval(this.LeveledCreatures.Overall);
                if (this.LeveledCreatures.Specific != null)
                {
                    obj.LeveledCreatures.Specific = this.LeveledCreatures.Specific.Translate(eval);
                }
            }
            if (this.SoulGems != null)
            {
                obj.SoulGems = new MaskItem<R, Group_Mask<R>>();
                obj.SoulGems.Overall = eval(this.SoulGems.Overall);
                if (this.SoulGems.Specific != null)
                {
                    obj.SoulGems.Specific = this.SoulGems.Specific.Translate(eval);
                }
            }
            if (this.Keys != null)
            {
                obj.Keys = new MaskItem<R, Group_Mask<R>>();
                obj.Keys.Overall = eval(this.Keys.Overall);
                if (this.Keys.Specific != null)
                {
                    obj.Keys.Specific = this.Keys.Specific.Translate(eval);
                }
            }
            if (this.Potions != null)
            {
                obj.Potions = new MaskItem<R, Group_Mask<R>>();
                obj.Potions.Overall = eval(this.Potions.Overall);
                if (this.Potions.Specific != null)
                {
                    obj.Potions.Specific = this.Potions.Specific.Translate(eval);
                }
            }
            if (this.Subspaces != null)
            {
                obj.Subspaces = new MaskItem<R, Group_Mask<R>>();
                obj.Subspaces.Overall = eval(this.Subspaces.Overall);
                if (this.Subspaces.Specific != null)
                {
                    obj.Subspaces.Specific = this.Subspaces.Specific.Translate(eval);
                }
            }
            if (this.SigilStones != null)
            {
                obj.SigilStones = new MaskItem<R, Group_Mask<R>>();
                obj.SigilStones.Overall = eval(this.SigilStones.Overall);
                if (this.SigilStones.Specific != null)
                {
                    obj.SigilStones.Specific = this.SigilStones.Specific.Translate(eval);
                }
            }
            if (this.LeveledItems != null)
            {
                obj.LeveledItems = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledItems.Overall = eval(this.LeveledItems.Overall);
                if (this.LeveledItems.Specific != null)
                {
                    obj.LeveledItems.Specific = this.LeveledItems.Specific.Translate(eval);
                }
            }
            if (this.Weathers != null)
            {
                obj.Weathers = new MaskItem<R, Group_Mask<R>>();
                obj.Weathers.Overall = eval(this.Weathers.Overall);
                if (this.Weathers.Specific != null)
                {
                    obj.Weathers.Specific = this.Weathers.Specific.Translate(eval);
                }
            }
            if (this.Climates != null)
            {
                obj.Climates = new MaskItem<R, Group_Mask<R>>();
                obj.Climates.Overall = eval(this.Climates.Overall);
                if (this.Climates.Specific != null)
                {
                    obj.Climates.Specific = this.Climates.Specific.Translate(eval);
                }
            }
            if (this.Regions != null)
            {
                obj.Regions = new MaskItem<R, Group_Mask<R>>();
                obj.Regions.Overall = eval(this.Regions.Overall);
                if (this.Regions.Specific != null)
                {
                    obj.Regions.Specific = this.Regions.Specific.Translate(eval);
                }
            }
            if (this.Cells != null)
            {
                obj.Cells = new MaskItem<R, ListGroup_Mask<R>>();
                obj.Cells.Overall = eval(this.Cells.Overall);
                if (this.Cells.Specific != null)
                {
                    obj.Cells.Specific = this.Cells.Specific.Translate(eval);
                }
            }
            if (this.Worldspaces != null)
            {
                obj.Worldspaces = new MaskItem<R, Group_Mask<R>>();
                obj.Worldspaces.Overall = eval(this.Worldspaces.Overall);
                if (this.Worldspaces.Specific != null)
                {
                    obj.Worldspaces.Specific = this.Worldspaces.Specific.Translate(eval);
                }
            }
            if (this.DialogTopics != null)
            {
                obj.DialogTopics = new MaskItem<R, Group_Mask<R>>();
                obj.DialogTopics.Overall = eval(this.DialogTopics.Overall);
                if (this.DialogTopics.Specific != null)
                {
                    obj.DialogTopics.Specific = this.DialogTopics.Specific.Translate(eval);
                }
            }
            if (this.Quests != null)
            {
                obj.Quests = new MaskItem<R, Group_Mask<R>>();
                obj.Quests.Overall = eval(this.Quests.Overall);
                if (this.Quests.Specific != null)
                {
                    obj.Quests.Specific = this.Quests.Specific.Translate(eval);
                }
            }
            if (this.IdleAnimations != null)
            {
                obj.IdleAnimations = new MaskItem<R, Group_Mask<R>>();
                obj.IdleAnimations.Overall = eval(this.IdleAnimations.Overall);
                if (this.IdleAnimations.Specific != null)
                {
                    obj.IdleAnimations.Specific = this.IdleAnimations.Specific.Translate(eval);
                }
            }
            if (this.AIPackages != null)
            {
                obj.AIPackages = new MaskItem<R, Group_Mask<R>>();
                obj.AIPackages.Overall = eval(this.AIPackages.Overall);
                if (this.AIPackages.Specific != null)
                {
                    obj.AIPackages.Specific = this.AIPackages.Specific.Translate(eval);
                }
            }
            if (this.CombatStyles != null)
            {
                obj.CombatStyles = new MaskItem<R, Group_Mask<R>>();
                obj.CombatStyles.Overall = eval(this.CombatStyles.Overall);
                if (this.CombatStyles.Specific != null)
                {
                    obj.CombatStyles.Specific = this.CombatStyles.Specific.Translate(eval);
                }
            }
            if (this.LoadScreens != null)
            {
                obj.LoadScreens = new MaskItem<R, Group_Mask<R>>();
                obj.LoadScreens.Overall = eval(this.LoadScreens.Overall);
                if (this.LoadScreens.Specific != null)
                {
                    obj.LoadScreens.Specific = this.LoadScreens.Specific.Translate(eval);
                }
            }
            if (this.LeveledSpells != null)
            {
                obj.LeveledSpells = new MaskItem<R, Group_Mask<R>>();
                obj.LeveledSpells.Overall = eval(this.LeveledSpells.Overall);
                if (this.LeveledSpells.Specific != null)
                {
                    obj.LeveledSpells.Specific = this.LeveledSpells.Specific.Translate(eval);
                }
            }
            if (this.AnimatedObjects != null)
            {
                obj.AnimatedObjects = new MaskItem<R, Group_Mask<R>>();
                obj.AnimatedObjects.Overall = eval(this.AnimatedObjects.Overall);
                if (this.AnimatedObjects.Specific != null)
                {
                    obj.AnimatedObjects.Specific = this.AnimatedObjects.Specific.Translate(eval);
                }
            }
            if (this.Waters != null)
            {
                obj.Waters = new MaskItem<R, Group_Mask<R>>();
                obj.Waters.Overall = eval(this.Waters.Overall);
                if (this.Waters.Specific != null)
                {
                    obj.Waters.Specific = this.Waters.Specific.Translate(eval);
                }
            }
            if (this.EffectShaders != null)
            {
                obj.EffectShaders = new MaskItem<R, Group_Mask<R>>();
                obj.EffectShaders.Overall = eval(this.EffectShaders.Overall);
                if (this.EffectShaders.Specific != null)
                {
                    obj.EffectShaders.Specific = this.EffectShaders.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ModHeader?.Overall ?? true)
                {
                    ModHeader?.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings?.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals?.ToString(fg);
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    Classes?.ToString(fg);
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    Factions?.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    Hairs?.ToString(fg);
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    Eyes?.ToString(fg);
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    Races?.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds?.ToString(fg);
                }
                if (printMask?.Skills?.Overall ?? true)
                {
                    Skills?.ToString(fg);
                }
                if (printMask?.MagicEffects?.Overall ?? true)
                {
                    MagicEffects?.ToString(fg);
                }
                if (printMask?.Scripts?.Overall ?? true)
                {
                    Scripts?.ToString(fg);
                }
                if (printMask?.LandTextures?.Overall ?? true)
                {
                    LandTextures?.ToString(fg);
                }
                if (printMask?.Enchantments?.Overall ?? true)
                {
                    Enchantments?.ToString(fg);
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    Spells?.ToString(fg);
                }
                if (printMask?.Birthsigns?.Overall ?? true)
                {
                    Birthsigns?.ToString(fg);
                }
                if (printMask?.Activators?.Overall ?? true)
                {
                    Activators?.ToString(fg);
                }
                if (printMask?.AlchemicalApparatus?.Overall ?? true)
                {
                    AlchemicalApparatus?.ToString(fg);
                }
                if (printMask?.Armors?.Overall ?? true)
                {
                    Armors?.ToString(fg);
                }
                if (printMask?.Books?.Overall ?? true)
                {
                    Books?.ToString(fg);
                }
                if (printMask?.Clothes?.Overall ?? true)
                {
                    Clothes?.ToString(fg);
                }
                if (printMask?.Containers?.Overall ?? true)
                {
                    Containers?.ToString(fg);
                }
                if (printMask?.Doors?.Overall ?? true)
                {
                    Doors?.ToString(fg);
                }
                if (printMask?.Ingredients?.Overall ?? true)
                {
                    Ingredients?.ToString(fg);
                }
                if (printMask?.Lights?.Overall ?? true)
                {
                    Lights?.ToString(fg);
                }
                if (printMask?.Miscellaneous?.Overall ?? true)
                {
                    Miscellaneous?.ToString(fg);
                }
                if (printMask?.Statics?.Overall ?? true)
                {
                    Statics?.ToString(fg);
                }
                if (printMask?.Grasses?.Overall ?? true)
                {
                    Grasses?.ToString(fg);
                }
                if (printMask?.Trees?.Overall ?? true)
                {
                    Trees?.ToString(fg);
                }
                if (printMask?.Flora?.Overall ?? true)
                {
                    Flora?.ToString(fg);
                }
                if (printMask?.Furnature?.Overall ?? true)
                {
                    Furnature?.ToString(fg);
                }
                if (printMask?.Weapons?.Overall ?? true)
                {
                    Weapons?.ToString(fg);
                }
                if (printMask?.Ammo?.Overall ?? true)
                {
                    Ammo?.ToString(fg);
                }
                if (printMask?.NPCs?.Overall ?? true)
                {
                    NPCs?.ToString(fg);
                }
                if (printMask?.Creatures?.Overall ?? true)
                {
                    Creatures?.ToString(fg);
                }
                if (printMask?.LeveledCreatures?.Overall ?? true)
                {
                    LeveledCreatures?.ToString(fg);
                }
                if (printMask?.SoulGems?.Overall ?? true)
                {
                    SoulGems?.ToString(fg);
                }
                if (printMask?.Keys?.Overall ?? true)
                {
                    Keys?.ToString(fg);
                }
                if (printMask?.Potions?.Overall ?? true)
                {
                    Potions?.ToString(fg);
                }
                if (printMask?.Subspaces?.Overall ?? true)
                {
                    Subspaces?.ToString(fg);
                }
                if (printMask?.SigilStones?.Overall ?? true)
                {
                    SigilStones?.ToString(fg);
                }
                if (printMask?.LeveledItems?.Overall ?? true)
                {
                    LeveledItems?.ToString(fg);
                }
                if (printMask?.Weathers?.Overall ?? true)
                {
                    Weathers?.ToString(fg);
                }
                if (printMask?.Climates?.Overall ?? true)
                {
                    Climates?.ToString(fg);
                }
                if (printMask?.Regions?.Overall ?? true)
                {
                    Regions?.ToString(fg);
                }
                if (printMask?.Cells?.Overall ?? true)
                {
                    Cells?.ToString(fg);
                }
                if (printMask?.Worldspaces?.Overall ?? true)
                {
                    Worldspaces?.ToString(fg);
                }
                if (printMask?.DialogTopics?.Overall ?? true)
                {
                    DialogTopics?.ToString(fg);
                }
                if (printMask?.Quests?.Overall ?? true)
                {
                    Quests?.ToString(fg);
                }
                if (printMask?.IdleAnimations?.Overall ?? true)
                {
                    IdleAnimations?.ToString(fg);
                }
                if (printMask?.AIPackages?.Overall ?? true)
                {
                    AIPackages?.ToString(fg);
                }
                if (printMask?.CombatStyles?.Overall ?? true)
                {
                    CombatStyles?.ToString(fg);
                }
                if (printMask?.LoadScreens?.Overall ?? true)
                {
                    LoadScreens?.ToString(fg);
                }
                if (printMask?.LeveledSpells?.Overall ?? true)
                {
                    LeveledSpells?.ToString(fg);
                }
                if (printMask?.AnimatedObjects?.Overall ?? true)
                {
                    AnimatedObjects?.ToString(fg);
                }
                if (printMask?.Waters?.Overall ?? true)
                {
                    Waters?.ToString(fg);
                }
                if (printMask?.EffectShaders?.Overall ?? true)
                {
                    EffectShaders?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMod_ErrorMask : IErrorMask, IErrorMask<OblivionMod_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, ModHeader_ErrorMask> ModHeader;
        public MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> GameSettings;
        public MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> Globals;
        public MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> Classes;
        public MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> Factions;
        public MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> Hairs;
        public MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> Eyes;
        public MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> Races;
        public MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> Sounds;
        public MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>> Skills;
        public MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>> MagicEffects;
        public MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>> Scripts;
        public MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>> LandTextures;
        public MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>> Enchantments;
        public MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>> Spells;
        public MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>> Birthsigns;
        public MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>> Activators;
        public MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>> AlchemicalApparatus;
        public MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>> Armors;
        public MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>> Books;
        public MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>> Clothes;
        public MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>> Containers;
        public MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>> Doors;
        public MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>> Ingredients;
        public MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>> Lights;
        public MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>> Miscellaneous;
        public MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>> Statics;
        public MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>> Grasses;
        public MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>> Trees;
        public MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>> Flora;
        public MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>> Furnature;
        public MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>> Weapons;
        public MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>> Ammo;
        public MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>> NPCs;
        public MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>> Creatures;
        public MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>> LeveledCreatures;
        public MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>> SoulGems;
        public MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>> Keys;
        public MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>> Potions;
        public MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>> Subspaces;
        public MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>> SigilStones;
        public MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>> LeveledItems;
        public MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>> Weathers;
        public MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>> Climates;
        public MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>> Regions;
        public MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>> Cells;
        public MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>> Worldspaces;
        public MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>> DialogTopics;
        public MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>> Quests;
        public MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>> IdleAnimations;
        public MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>> AIPackages;
        public MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>> CombatStyles;
        public MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>> LoadScreens;
        public MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>> LeveledSpells;
        public MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>> AnimatedObjects;
        public MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>> Waters;
        public MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>> EffectShaders;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                    return ModHeader;
                case OblivionMod_FieldIndex.GameSettings:
                    return GameSettings;
                case OblivionMod_FieldIndex.Globals:
                    return Globals;
                case OblivionMod_FieldIndex.Classes:
                    return Classes;
                case OblivionMod_FieldIndex.Factions:
                    return Factions;
                case OblivionMod_FieldIndex.Hairs:
                    return Hairs;
                case OblivionMod_FieldIndex.Eyes:
                    return Eyes;
                case OblivionMod_FieldIndex.Races:
                    return Races;
                case OblivionMod_FieldIndex.Sounds:
                    return Sounds;
                case OblivionMod_FieldIndex.Skills:
                    return Skills;
                case OblivionMod_FieldIndex.MagicEffects:
                    return MagicEffects;
                case OblivionMod_FieldIndex.Scripts:
                    return Scripts;
                case OblivionMod_FieldIndex.LandTextures:
                    return LandTextures;
                case OblivionMod_FieldIndex.Enchantments:
                    return Enchantments;
                case OblivionMod_FieldIndex.Spells:
                    return Spells;
                case OblivionMod_FieldIndex.Birthsigns:
                    return Birthsigns;
                case OblivionMod_FieldIndex.Activators:
                    return Activators;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    return AlchemicalApparatus;
                case OblivionMod_FieldIndex.Armors:
                    return Armors;
                case OblivionMod_FieldIndex.Books:
                    return Books;
                case OblivionMod_FieldIndex.Clothes:
                    return Clothes;
                case OblivionMod_FieldIndex.Containers:
                    return Containers;
                case OblivionMod_FieldIndex.Doors:
                    return Doors;
                case OblivionMod_FieldIndex.Ingredients:
                    return Ingredients;
                case OblivionMod_FieldIndex.Lights:
                    return Lights;
                case OblivionMod_FieldIndex.Miscellaneous:
                    return Miscellaneous;
                case OblivionMod_FieldIndex.Statics:
                    return Statics;
                case OblivionMod_FieldIndex.Grasses:
                    return Grasses;
                case OblivionMod_FieldIndex.Trees:
                    return Trees;
                case OblivionMod_FieldIndex.Flora:
                    return Flora;
                case OblivionMod_FieldIndex.Furnature:
                    return Furnature;
                case OblivionMod_FieldIndex.Weapons:
                    return Weapons;
                case OblivionMod_FieldIndex.Ammo:
                    return Ammo;
                case OblivionMod_FieldIndex.NPCs:
                    return NPCs;
                case OblivionMod_FieldIndex.Creatures:
                    return Creatures;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    return LeveledCreatures;
                case OblivionMod_FieldIndex.SoulGems:
                    return SoulGems;
                case OblivionMod_FieldIndex.Keys:
                    return Keys;
                case OblivionMod_FieldIndex.Potions:
                    return Potions;
                case OblivionMod_FieldIndex.Subspaces:
                    return Subspaces;
                case OblivionMod_FieldIndex.SigilStones:
                    return SigilStones;
                case OblivionMod_FieldIndex.LeveledItems:
                    return LeveledItems;
                case OblivionMod_FieldIndex.Weathers:
                    return Weathers;
                case OblivionMod_FieldIndex.Climates:
                    return Climates;
                case OblivionMod_FieldIndex.Regions:
                    return Regions;
                case OblivionMod_FieldIndex.Cells:
                    return Cells;
                case OblivionMod_FieldIndex.Worldspaces:
                    return Worldspaces;
                case OblivionMod_FieldIndex.DialogTopics:
                    return DialogTopics;
                case OblivionMod_FieldIndex.Quests:
                    return Quests;
                case OblivionMod_FieldIndex.IdleAnimations:
                    return IdleAnimations;
                case OblivionMod_FieldIndex.AIPackages:
                    return AIPackages;
                case OblivionMod_FieldIndex.CombatStyles:
                    return CombatStyles;
                case OblivionMod_FieldIndex.LoadScreens:
                    return LoadScreens;
                case OblivionMod_FieldIndex.LeveledSpells:
                    return LeveledSpells;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    return AnimatedObjects;
                case OblivionMod_FieldIndex.Waters:
                    return Waters;
                case OblivionMod_FieldIndex.EffectShaders:
                    return EffectShaders;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                    this.ModHeader = new MaskItem<Exception, ModHeader_ErrorMask>(ex, null);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    this.Creatures = new MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    this.LeveledCreatures = new MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    this.SoulGems = new MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Keys:
                    this.Keys = new MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Potions:
                    this.Potions = new MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    this.Subspaces = new MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    this.SigilStones = new MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    this.LeveledItems = new MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    this.Weathers = new MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Climates:
                    this.Climates = new MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Regions:
                    this.Regions = new MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Cells:
                    this.Cells = new MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    this.Worldspaces = new MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    this.DialogTopics = new MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Quests:
                    this.Quests = new MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    this.IdleAnimations = new MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    this.AIPackages = new MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    this.CombatStyles = new MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    this.LoadScreens = new MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    this.LeveledSpells = new MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    this.AnimatedObjects = new MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Waters:
                    this.Waters = new MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    this.EffectShaders = new MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.ModHeader:
                    this.ModHeader = (MaskItem<Exception, ModHeader_ErrorMask>)obj;
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = (MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = (MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Skills:
                    this.Skills = (MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.MagicEffects:
                    this.MagicEffects = (MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Scripts:
                    this.Scripts = (MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LandTextures:
                    this.LandTextures = (MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Enchantments:
                    this.Enchantments = (MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Birthsigns:
                    this.Birthsigns = (MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Activators:
                    this.Activators = (MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AlchemicalApparatus:
                    this.AlchemicalApparatus = (MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Armors:
                    this.Armors = (MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Books:
                    this.Books = (MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Clothes:
                    this.Clothes = (MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Containers:
                    this.Containers = (MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Doors:
                    this.Doors = (MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ingredients:
                    this.Ingredients = (MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Lights:
                    this.Lights = (MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Miscellaneous:
                    this.Miscellaneous = (MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Statics:
                    this.Statics = (MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Grasses:
                    this.Grasses = (MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Trees:
                    this.Trees = (MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Flora:
                    this.Flora = (MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Furnature:
                    this.Furnature = (MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Weapons:
                    this.Weapons = (MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Ammo:
                    this.Ammo = (MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.NPCs:
                    this.NPCs = (MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Creatures:
                    this.Creatures = (MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledCreatures:
                    this.LeveledCreatures = (MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.SoulGems:
                    this.SoulGems = (MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Keys:
                    this.Keys = (MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Potions:
                    this.Potions = (MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Subspaces:
                    this.Subspaces = (MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.SigilStones:
                    this.SigilStones = (MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledItems:
                    this.LeveledItems = (MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Weathers:
                    this.Weathers = (MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Climates:
                    this.Climates = (MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Regions:
                    this.Regions = (MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Cells:
                    this.Cells = (MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Worldspaces:
                    this.Worldspaces = (MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.DialogTopics:
                    this.DialogTopics = (MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Quests:
                    this.Quests = (MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.IdleAnimations:
                    this.IdleAnimations = (MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AIPackages:
                    this.AIPackages = (MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.CombatStyles:
                    this.CombatStyles = (MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LoadScreens:
                    this.LoadScreens = (MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.LeveledSpells:
                    this.LeveledSpells = (MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.AnimatedObjects:
                    this.AnimatedObjects = (MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Waters:
                    this.Waters = (MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.EffectShaders:
                    this.EffectShaders = (MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ModHeader != null) return true;
            if (GameSettings != null) return true;
            if (Globals != null) return true;
            if (Classes != null) return true;
            if (Factions != null) return true;
            if (Hairs != null) return true;
            if (Eyes != null) return true;
            if (Races != null) return true;
            if (Sounds != null) return true;
            if (Skills != null) return true;
            if (MagicEffects != null) return true;
            if (Scripts != null) return true;
            if (LandTextures != null) return true;
            if (Enchantments != null) return true;
            if (Spells != null) return true;
            if (Birthsigns != null) return true;
            if (Activators != null) return true;
            if (AlchemicalApparatus != null) return true;
            if (Armors != null) return true;
            if (Books != null) return true;
            if (Clothes != null) return true;
            if (Containers != null) return true;
            if (Doors != null) return true;
            if (Ingredients != null) return true;
            if (Lights != null) return true;
            if (Miscellaneous != null) return true;
            if (Statics != null) return true;
            if (Grasses != null) return true;
            if (Trees != null) return true;
            if (Flora != null) return true;
            if (Furnature != null) return true;
            if (Weapons != null) return true;
            if (Ammo != null) return true;
            if (NPCs != null) return true;
            if (Creatures != null) return true;
            if (LeveledCreatures != null) return true;
            if (SoulGems != null) return true;
            if (Keys != null) return true;
            if (Potions != null) return true;
            if (Subspaces != null) return true;
            if (SigilStones != null) return true;
            if (LeveledItems != null) return true;
            if (Weathers != null) return true;
            if (Climates != null) return true;
            if (Regions != null) return true;
            if (Cells != null) return true;
            if (Worldspaces != null) return true;
            if (DialogTopics != null) return true;
            if (Quests != null) return true;
            if (IdleAnimations != null) return true;
            if (AIPackages != null) return true;
            if (CombatStyles != null) return true;
            if (LoadScreens != null) return true;
            if (LeveledSpells != null) return true;
            if (AnimatedObjects != null) return true;
            if (Waters != null) return true;
            if (EffectShaders != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            ModHeader?.ToString(fg);
            GameSettings?.ToString(fg);
            Globals?.ToString(fg);
            Classes?.ToString(fg);
            Factions?.ToString(fg);
            Hairs?.ToString(fg);
            Eyes?.ToString(fg);
            Races?.ToString(fg);
            Sounds?.ToString(fg);
            Skills?.ToString(fg);
            MagicEffects?.ToString(fg);
            Scripts?.ToString(fg);
            LandTextures?.ToString(fg);
            Enchantments?.ToString(fg);
            Spells?.ToString(fg);
            Birthsigns?.ToString(fg);
            Activators?.ToString(fg);
            AlchemicalApparatus?.ToString(fg);
            Armors?.ToString(fg);
            Books?.ToString(fg);
            Clothes?.ToString(fg);
            Containers?.ToString(fg);
            Doors?.ToString(fg);
            Ingredients?.ToString(fg);
            Lights?.ToString(fg);
            Miscellaneous?.ToString(fg);
            Statics?.ToString(fg);
            Grasses?.ToString(fg);
            Trees?.ToString(fg);
            Flora?.ToString(fg);
            Furnature?.ToString(fg);
            Weapons?.ToString(fg);
            Ammo?.ToString(fg);
            NPCs?.ToString(fg);
            Creatures?.ToString(fg);
            LeveledCreatures?.ToString(fg);
            SoulGems?.ToString(fg);
            Keys?.ToString(fg);
            Potions?.ToString(fg);
            Subspaces?.ToString(fg);
            SigilStones?.ToString(fg);
            LeveledItems?.ToString(fg);
            Weathers?.ToString(fg);
            Climates?.ToString(fg);
            Regions?.ToString(fg);
            Cells?.ToString(fg);
            Worldspaces?.ToString(fg);
            DialogTopics?.ToString(fg);
            Quests?.ToString(fg);
            IdleAnimations?.ToString(fg);
            AIPackages?.ToString(fg);
            CombatStyles?.ToString(fg);
            LoadScreens?.ToString(fg);
            LeveledSpells?.ToString(fg);
            AnimatedObjects?.ToString(fg);
            Waters?.ToString(fg);
            EffectShaders?.ToString(fg);
        }
        #endregion

        #region Combine
        public OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask rhs)
        {
            var ret = new OblivionMod_ErrorMask();
            ret.ModHeader = new MaskItem<Exception, ModHeader_ErrorMask>(this.ModHeader.Overall.Combine(rhs.ModHeader.Overall), ((IErrorMask<ModHeader_ErrorMask>)this.ModHeader.Specific).Combine(rhs.ModHeader.Specific));
            ret.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(this.GameSettings.Overall.Combine(rhs.GameSettings.Overall), ((IErrorMask<Group_ErrorMask<GameSetting_ErrorMask>>)this.GameSettings.Specific).Combine(rhs.GameSettings.Specific));
            ret.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(this.Globals.Overall.Combine(rhs.Globals.Overall), ((IErrorMask<Group_ErrorMask<Global_ErrorMask>>)this.Globals.Specific).Combine(rhs.Globals.Specific));
            ret.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(this.Classes.Overall.Combine(rhs.Classes.Overall), ((IErrorMask<Group_ErrorMask<Class_ErrorMask>>)this.Classes.Specific).Combine(rhs.Classes.Specific));
            ret.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(this.Factions.Overall.Combine(rhs.Factions.Overall), ((IErrorMask<Group_ErrorMask<Faction_ErrorMask>>)this.Factions.Specific).Combine(rhs.Factions.Specific));
            ret.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), ((IErrorMask<Group_ErrorMask<Hair_ErrorMask>>)this.Hairs.Specific).Combine(rhs.Hairs.Specific));
            ret.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), ((IErrorMask<Group_ErrorMask<Eye_ErrorMask>>)this.Eyes.Specific).Combine(rhs.Eyes.Specific));
            ret.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(this.Races.Overall.Combine(rhs.Races.Overall), ((IErrorMask<Group_ErrorMask<Race_ErrorMask>>)this.Races.Specific).Combine(rhs.Races.Specific));
            ret.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), ((IErrorMask<Group_ErrorMask<Sound_ErrorMask>>)this.Sounds.Specific).Combine(rhs.Sounds.Specific));
            ret.Skills = new MaskItem<Exception, Group_ErrorMask<SkillRecord_ErrorMask>>(this.Skills.Overall.Combine(rhs.Skills.Overall), ((IErrorMask<Group_ErrorMask<SkillRecord_ErrorMask>>)this.Skills.Specific).Combine(rhs.Skills.Specific));
            ret.MagicEffects = new MaskItem<Exception, Group_ErrorMask<MagicEffect_ErrorMask>>(this.MagicEffects.Overall.Combine(rhs.MagicEffects.Overall), ((IErrorMask<Group_ErrorMask<MagicEffect_ErrorMask>>)this.MagicEffects.Specific).Combine(rhs.MagicEffects.Specific));
            ret.Scripts = new MaskItem<Exception, Group_ErrorMask<Script_ErrorMask>>(this.Scripts.Overall.Combine(rhs.Scripts.Overall), ((IErrorMask<Group_ErrorMask<Script_ErrorMask>>)this.Scripts.Specific).Combine(rhs.Scripts.Specific));
            ret.LandTextures = new MaskItem<Exception, Group_ErrorMask<LandTexture_ErrorMask>>(this.LandTextures.Overall.Combine(rhs.LandTextures.Overall), ((IErrorMask<Group_ErrorMask<LandTexture_ErrorMask>>)this.LandTextures.Specific).Combine(rhs.LandTextures.Specific));
            ret.Enchantments = new MaskItem<Exception, Group_ErrorMask<Enchantment_ErrorMask>>(this.Enchantments.Overall.Combine(rhs.Enchantments.Overall), ((IErrorMask<Group_ErrorMask<Enchantment_ErrorMask>>)this.Enchantments.Specific).Combine(rhs.Enchantments.Specific));
            ret.Spells = new MaskItem<Exception, Group_ErrorMask<SpellUnleveled_ErrorMask>>(this.Spells.Overall.Combine(rhs.Spells.Overall), ((IErrorMask<Group_ErrorMask<SpellUnleveled_ErrorMask>>)this.Spells.Specific).Combine(rhs.Spells.Specific));
            ret.Birthsigns = new MaskItem<Exception, Group_ErrorMask<Birthsign_ErrorMask>>(this.Birthsigns.Overall.Combine(rhs.Birthsigns.Overall), ((IErrorMask<Group_ErrorMask<Birthsign_ErrorMask>>)this.Birthsigns.Specific).Combine(rhs.Birthsigns.Specific));
            ret.Activators = new MaskItem<Exception, Group_ErrorMask<Activator_ErrorMask>>(this.Activators.Overall.Combine(rhs.Activators.Overall), ((IErrorMask<Group_ErrorMask<Activator_ErrorMask>>)this.Activators.Specific).Combine(rhs.Activators.Specific));
            ret.AlchemicalApparatus = new MaskItem<Exception, Group_ErrorMask<AlchemicalApparatus_ErrorMask>>(this.AlchemicalApparatus.Overall.Combine(rhs.AlchemicalApparatus.Overall), ((IErrorMask<Group_ErrorMask<AlchemicalApparatus_ErrorMask>>)this.AlchemicalApparatus.Specific).Combine(rhs.AlchemicalApparatus.Specific));
            ret.Armors = new MaskItem<Exception, Group_ErrorMask<Armor_ErrorMask>>(this.Armors.Overall.Combine(rhs.Armors.Overall), ((IErrorMask<Group_ErrorMask<Armor_ErrorMask>>)this.Armors.Specific).Combine(rhs.Armors.Specific));
            ret.Books = new MaskItem<Exception, Group_ErrorMask<Book_ErrorMask>>(this.Books.Overall.Combine(rhs.Books.Overall), ((IErrorMask<Group_ErrorMask<Book_ErrorMask>>)this.Books.Specific).Combine(rhs.Books.Specific));
            ret.Clothes = new MaskItem<Exception, Group_ErrorMask<Clothing_ErrorMask>>(this.Clothes.Overall.Combine(rhs.Clothes.Overall), ((IErrorMask<Group_ErrorMask<Clothing_ErrorMask>>)this.Clothes.Specific).Combine(rhs.Clothes.Specific));
            ret.Containers = new MaskItem<Exception, Group_ErrorMask<Container_ErrorMask>>(this.Containers.Overall.Combine(rhs.Containers.Overall), ((IErrorMask<Group_ErrorMask<Container_ErrorMask>>)this.Containers.Specific).Combine(rhs.Containers.Specific));
            ret.Doors = new MaskItem<Exception, Group_ErrorMask<Door_ErrorMask>>(this.Doors.Overall.Combine(rhs.Doors.Overall), ((IErrorMask<Group_ErrorMask<Door_ErrorMask>>)this.Doors.Specific).Combine(rhs.Doors.Specific));
            ret.Ingredients = new MaskItem<Exception, Group_ErrorMask<Ingredient_ErrorMask>>(this.Ingredients.Overall.Combine(rhs.Ingredients.Overall), ((IErrorMask<Group_ErrorMask<Ingredient_ErrorMask>>)this.Ingredients.Specific).Combine(rhs.Ingredients.Specific));
            ret.Lights = new MaskItem<Exception, Group_ErrorMask<Light_ErrorMask>>(this.Lights.Overall.Combine(rhs.Lights.Overall), ((IErrorMask<Group_ErrorMask<Light_ErrorMask>>)this.Lights.Specific).Combine(rhs.Lights.Specific));
            ret.Miscellaneous = new MaskItem<Exception, Group_ErrorMask<Miscellaneous_ErrorMask>>(this.Miscellaneous.Overall.Combine(rhs.Miscellaneous.Overall), ((IErrorMask<Group_ErrorMask<Miscellaneous_ErrorMask>>)this.Miscellaneous.Specific).Combine(rhs.Miscellaneous.Specific));
            ret.Statics = new MaskItem<Exception, Group_ErrorMask<Static_ErrorMask>>(this.Statics.Overall.Combine(rhs.Statics.Overall), ((IErrorMask<Group_ErrorMask<Static_ErrorMask>>)this.Statics.Specific).Combine(rhs.Statics.Specific));
            ret.Grasses = new MaskItem<Exception, Group_ErrorMask<Grass_ErrorMask>>(this.Grasses.Overall.Combine(rhs.Grasses.Overall), ((IErrorMask<Group_ErrorMask<Grass_ErrorMask>>)this.Grasses.Specific).Combine(rhs.Grasses.Specific));
            ret.Trees = new MaskItem<Exception, Group_ErrorMask<Tree_ErrorMask>>(this.Trees.Overall.Combine(rhs.Trees.Overall), ((IErrorMask<Group_ErrorMask<Tree_ErrorMask>>)this.Trees.Specific).Combine(rhs.Trees.Specific));
            ret.Flora = new MaskItem<Exception, Group_ErrorMask<Flora_ErrorMask>>(this.Flora.Overall.Combine(rhs.Flora.Overall), ((IErrorMask<Group_ErrorMask<Flora_ErrorMask>>)this.Flora.Specific).Combine(rhs.Flora.Specific));
            ret.Furnature = new MaskItem<Exception, Group_ErrorMask<Furnature_ErrorMask>>(this.Furnature.Overall.Combine(rhs.Furnature.Overall), ((IErrorMask<Group_ErrorMask<Furnature_ErrorMask>>)this.Furnature.Specific).Combine(rhs.Furnature.Specific));
            ret.Weapons = new MaskItem<Exception, Group_ErrorMask<Weapon_ErrorMask>>(this.Weapons.Overall.Combine(rhs.Weapons.Overall), ((IErrorMask<Group_ErrorMask<Weapon_ErrorMask>>)this.Weapons.Specific).Combine(rhs.Weapons.Specific));
            ret.Ammo = new MaskItem<Exception, Group_ErrorMask<Ammo_ErrorMask>>(this.Ammo.Overall.Combine(rhs.Ammo.Overall), ((IErrorMask<Group_ErrorMask<Ammo_ErrorMask>>)this.Ammo.Specific).Combine(rhs.Ammo.Specific));
            ret.NPCs = new MaskItem<Exception, Group_ErrorMask<NPC_ErrorMask>>(this.NPCs.Overall.Combine(rhs.NPCs.Overall), ((IErrorMask<Group_ErrorMask<NPC_ErrorMask>>)this.NPCs.Specific).Combine(rhs.NPCs.Specific));
            ret.Creatures = new MaskItem<Exception, Group_ErrorMask<Creature_ErrorMask>>(this.Creatures.Overall.Combine(rhs.Creatures.Overall), ((IErrorMask<Group_ErrorMask<Creature_ErrorMask>>)this.Creatures.Specific).Combine(rhs.Creatures.Specific));
            ret.LeveledCreatures = new MaskItem<Exception, Group_ErrorMask<LeveledCreature_ErrorMask>>(this.LeveledCreatures.Overall.Combine(rhs.LeveledCreatures.Overall), ((IErrorMask<Group_ErrorMask<LeveledCreature_ErrorMask>>)this.LeveledCreatures.Specific).Combine(rhs.LeveledCreatures.Specific));
            ret.SoulGems = new MaskItem<Exception, Group_ErrorMask<SoulGem_ErrorMask>>(this.SoulGems.Overall.Combine(rhs.SoulGems.Overall), ((IErrorMask<Group_ErrorMask<SoulGem_ErrorMask>>)this.SoulGems.Specific).Combine(rhs.SoulGems.Specific));
            ret.Keys = new MaskItem<Exception, Group_ErrorMask<Key_ErrorMask>>(this.Keys.Overall.Combine(rhs.Keys.Overall), ((IErrorMask<Group_ErrorMask<Key_ErrorMask>>)this.Keys.Specific).Combine(rhs.Keys.Specific));
            ret.Potions = new MaskItem<Exception, Group_ErrorMask<Potion_ErrorMask>>(this.Potions.Overall.Combine(rhs.Potions.Overall), ((IErrorMask<Group_ErrorMask<Potion_ErrorMask>>)this.Potions.Specific).Combine(rhs.Potions.Specific));
            ret.Subspaces = new MaskItem<Exception, Group_ErrorMask<Subspace_ErrorMask>>(this.Subspaces.Overall.Combine(rhs.Subspaces.Overall), ((IErrorMask<Group_ErrorMask<Subspace_ErrorMask>>)this.Subspaces.Specific).Combine(rhs.Subspaces.Specific));
            ret.SigilStones = new MaskItem<Exception, Group_ErrorMask<SigilStone_ErrorMask>>(this.SigilStones.Overall.Combine(rhs.SigilStones.Overall), ((IErrorMask<Group_ErrorMask<SigilStone_ErrorMask>>)this.SigilStones.Specific).Combine(rhs.SigilStones.Specific));
            ret.LeveledItems = new MaskItem<Exception, Group_ErrorMask<LeveledItem_ErrorMask>>(this.LeveledItems.Overall.Combine(rhs.LeveledItems.Overall), ((IErrorMask<Group_ErrorMask<LeveledItem_ErrorMask>>)this.LeveledItems.Specific).Combine(rhs.LeveledItems.Specific));
            ret.Weathers = new MaskItem<Exception, Group_ErrorMask<Weather_ErrorMask>>(this.Weathers.Overall.Combine(rhs.Weathers.Overall), ((IErrorMask<Group_ErrorMask<Weather_ErrorMask>>)this.Weathers.Specific).Combine(rhs.Weathers.Specific));
            ret.Climates = new MaskItem<Exception, Group_ErrorMask<Climate_ErrorMask>>(this.Climates.Overall.Combine(rhs.Climates.Overall), ((IErrorMask<Group_ErrorMask<Climate_ErrorMask>>)this.Climates.Specific).Combine(rhs.Climates.Specific));
            ret.Regions = new MaskItem<Exception, Group_ErrorMask<Region_ErrorMask>>(this.Regions.Overall.Combine(rhs.Regions.Overall), ((IErrorMask<Group_ErrorMask<Region_ErrorMask>>)this.Regions.Specific).Combine(rhs.Regions.Specific));
            ret.Cells = new MaskItem<Exception, ListGroup_ErrorMask<CellBlock_ErrorMask>>(this.Cells.Overall.Combine(rhs.Cells.Overall), ((IErrorMask<ListGroup_ErrorMask<CellBlock_ErrorMask>>)this.Cells.Specific).Combine(rhs.Cells.Specific));
            ret.Worldspaces = new MaskItem<Exception, Group_ErrorMask<Worldspace_ErrorMask>>(this.Worldspaces.Overall.Combine(rhs.Worldspaces.Overall), ((IErrorMask<Group_ErrorMask<Worldspace_ErrorMask>>)this.Worldspaces.Specific).Combine(rhs.Worldspaces.Specific));
            ret.DialogTopics = new MaskItem<Exception, Group_ErrorMask<DialogTopic_ErrorMask>>(this.DialogTopics.Overall.Combine(rhs.DialogTopics.Overall), ((IErrorMask<Group_ErrorMask<DialogTopic_ErrorMask>>)this.DialogTopics.Specific).Combine(rhs.DialogTopics.Specific));
            ret.Quests = new MaskItem<Exception, Group_ErrorMask<Quest_ErrorMask>>(this.Quests.Overall.Combine(rhs.Quests.Overall), ((IErrorMask<Group_ErrorMask<Quest_ErrorMask>>)this.Quests.Specific).Combine(rhs.Quests.Specific));
            ret.IdleAnimations = new MaskItem<Exception, Group_ErrorMask<IdleAnimation_ErrorMask>>(this.IdleAnimations.Overall.Combine(rhs.IdleAnimations.Overall), ((IErrorMask<Group_ErrorMask<IdleAnimation_ErrorMask>>)this.IdleAnimations.Specific).Combine(rhs.IdleAnimations.Specific));
            ret.AIPackages = new MaskItem<Exception, Group_ErrorMask<AIPackage_ErrorMask>>(this.AIPackages.Overall.Combine(rhs.AIPackages.Overall), ((IErrorMask<Group_ErrorMask<AIPackage_ErrorMask>>)this.AIPackages.Specific).Combine(rhs.AIPackages.Specific));
            ret.CombatStyles = new MaskItem<Exception, Group_ErrorMask<CombatStyle_ErrorMask>>(this.CombatStyles.Overall.Combine(rhs.CombatStyles.Overall), ((IErrorMask<Group_ErrorMask<CombatStyle_ErrorMask>>)this.CombatStyles.Specific).Combine(rhs.CombatStyles.Specific));
            ret.LoadScreens = new MaskItem<Exception, Group_ErrorMask<LoadScreen_ErrorMask>>(this.LoadScreens.Overall.Combine(rhs.LoadScreens.Overall), ((IErrorMask<Group_ErrorMask<LoadScreen_ErrorMask>>)this.LoadScreens.Specific).Combine(rhs.LoadScreens.Specific));
            ret.LeveledSpells = new MaskItem<Exception, Group_ErrorMask<LeveledSpell_ErrorMask>>(this.LeveledSpells.Overall.Combine(rhs.LeveledSpells.Overall), ((IErrorMask<Group_ErrorMask<LeveledSpell_ErrorMask>>)this.LeveledSpells.Specific).Combine(rhs.LeveledSpells.Specific));
            ret.AnimatedObjects = new MaskItem<Exception, Group_ErrorMask<AnimatedObject_ErrorMask>>(this.AnimatedObjects.Overall.Combine(rhs.AnimatedObjects.Overall), ((IErrorMask<Group_ErrorMask<AnimatedObject_ErrorMask>>)this.AnimatedObjects.Specific).Combine(rhs.AnimatedObjects.Specific));
            ret.Waters = new MaskItem<Exception, Group_ErrorMask<Water_ErrorMask>>(this.Waters.Overall.Combine(rhs.Waters.Overall), ((IErrorMask<Group_ErrorMask<Water_ErrorMask>>)this.Waters.Specific).Combine(rhs.Waters.Specific));
            ret.EffectShaders = new MaskItem<Exception, Group_ErrorMask<EffectShader_ErrorMask>>(this.EffectShaders.Overall.Combine(rhs.EffectShaders.Overall), ((IErrorMask<Group_ErrorMask<EffectShader_ErrorMask>>)this.EffectShaders.Specific).Combine(rhs.EffectShaders.Specific));
            return ret;
        }
        public static OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask lhs, OblivionMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static OblivionMod_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new OblivionMod_ErrorMask();
        }
        #endregion

    }
    public class OblivionMod_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, ModHeader_TranslationMask> ModHeader;
        public MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>> GameSettings;
        public MaskItem<bool, Group_TranslationMask<Global_TranslationMask>> Globals;
        public MaskItem<bool, Group_TranslationMask<Class_TranslationMask>> Classes;
        public MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>> Factions;
        public MaskItem<bool, Group_TranslationMask<Hair_TranslationMask>> Hairs;
        public MaskItem<bool, Group_TranslationMask<Eye_TranslationMask>> Eyes;
        public MaskItem<bool, Group_TranslationMask<Race_TranslationMask>> Races;
        public MaskItem<bool, Group_TranslationMask<Sound_TranslationMask>> Sounds;
        public MaskItem<bool, Group_TranslationMask<SkillRecord_TranslationMask>> Skills;
        public MaskItem<bool, Group_TranslationMask<MagicEffect_TranslationMask>> MagicEffects;
        public MaskItem<bool, Group_TranslationMask<Script_TranslationMask>> Scripts;
        public MaskItem<bool, Group_TranslationMask<LandTexture_TranslationMask>> LandTextures;
        public MaskItem<bool, Group_TranslationMask<Enchantment_TranslationMask>> Enchantments;
        public MaskItem<bool, Group_TranslationMask<SpellUnleveled_TranslationMask>> Spells;
        public MaskItem<bool, Group_TranslationMask<Birthsign_TranslationMask>> Birthsigns;
        public MaskItem<bool, Group_TranslationMask<Activator_TranslationMask>> Activators;
        public MaskItem<bool, Group_TranslationMask<AlchemicalApparatus_TranslationMask>> AlchemicalApparatus;
        public MaskItem<bool, Group_TranslationMask<Armor_TranslationMask>> Armors;
        public MaskItem<bool, Group_TranslationMask<Book_TranslationMask>> Books;
        public MaskItem<bool, Group_TranslationMask<Clothing_TranslationMask>> Clothes;
        public MaskItem<bool, Group_TranslationMask<Container_TranslationMask>> Containers;
        public MaskItem<bool, Group_TranslationMask<Door_TranslationMask>> Doors;
        public MaskItem<bool, Group_TranslationMask<Ingredient_TranslationMask>> Ingredients;
        public MaskItem<bool, Group_TranslationMask<Light_TranslationMask>> Lights;
        public MaskItem<bool, Group_TranslationMask<Miscellaneous_TranslationMask>> Miscellaneous;
        public MaskItem<bool, Group_TranslationMask<Static_TranslationMask>> Statics;
        public MaskItem<bool, Group_TranslationMask<Grass_TranslationMask>> Grasses;
        public MaskItem<bool, Group_TranslationMask<Tree_TranslationMask>> Trees;
        public MaskItem<bool, Group_TranslationMask<Flora_TranslationMask>> Flora;
        public MaskItem<bool, Group_TranslationMask<Furnature_TranslationMask>> Furnature;
        public MaskItem<bool, Group_TranslationMask<Weapon_TranslationMask>> Weapons;
        public MaskItem<bool, Group_TranslationMask<Ammo_TranslationMask>> Ammo;
        public MaskItem<bool, Group_TranslationMask<NPC_TranslationMask>> NPCs;
        public MaskItem<bool, Group_TranslationMask<Creature_TranslationMask>> Creatures;
        public MaskItem<bool, Group_TranslationMask<LeveledCreature_TranslationMask>> LeveledCreatures;
        public MaskItem<bool, Group_TranslationMask<SoulGem_TranslationMask>> SoulGems;
        public MaskItem<bool, Group_TranslationMask<Key_TranslationMask>> Keys;
        public MaskItem<bool, Group_TranslationMask<Potion_TranslationMask>> Potions;
        public MaskItem<bool, Group_TranslationMask<Subspace_TranslationMask>> Subspaces;
        public MaskItem<bool, Group_TranslationMask<SigilStone_TranslationMask>> SigilStones;
        public MaskItem<bool, Group_TranslationMask<LeveledItem_TranslationMask>> LeveledItems;
        public MaskItem<bool, Group_TranslationMask<Weather_TranslationMask>> Weathers;
        public MaskItem<bool, Group_TranslationMask<Climate_TranslationMask>> Climates;
        public MaskItem<bool, Group_TranslationMask<Region_TranslationMask>> Regions;
        public MaskItem<bool, ListGroup_TranslationMask<CellBlock_TranslationMask>> Cells;
        public MaskItem<bool, Group_TranslationMask<Worldspace_TranslationMask>> Worldspaces;
        public MaskItem<bool, Group_TranslationMask<DialogTopic_TranslationMask>> DialogTopics;
        public MaskItem<bool, Group_TranslationMask<Quest_TranslationMask>> Quests;
        public MaskItem<bool, Group_TranslationMask<IdleAnimation_TranslationMask>> IdleAnimations;
        public MaskItem<bool, Group_TranslationMask<AIPackage_TranslationMask>> AIPackages;
        public MaskItem<bool, Group_TranslationMask<CombatStyle_TranslationMask>> CombatStyles;
        public MaskItem<bool, Group_TranslationMask<LoadScreen_TranslationMask>> LoadScreens;
        public MaskItem<bool, Group_TranslationMask<LeveledSpell_TranslationMask>> LeveledSpells;
        public MaskItem<bool, Group_TranslationMask<AnimatedObject_TranslationMask>> AnimatedObjects;
        public MaskItem<bool, Group_TranslationMask<Water_TranslationMask>> Waters;
        public MaskItem<bool, Group_TranslationMask<EffectShader_TranslationMask>> EffectShaders;
        #endregion

        #region Ctors
        public OblivionMod_TranslationMask()
        {
        }

        public OblivionMod_TranslationMask(bool defaultOn)
        {
            this.ModHeader = new MaskItem<bool, ModHeader_TranslationMask>(defaultOn, null);
            this.GameSettings = new MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>>(defaultOn, null);
            this.Globals = new MaskItem<bool, Group_TranslationMask<Global_TranslationMask>>(defaultOn, null);
            this.Classes = new MaskItem<bool, Group_TranslationMask<Class_TranslationMask>>(defaultOn, null);
            this.Factions = new MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>>(defaultOn, null);
            this.Hairs = new MaskItem<bool, Group_TranslationMask<Hair_TranslationMask>>(defaultOn, null);
            this.Eyes = new MaskItem<bool, Group_TranslationMask<Eye_TranslationMask>>(defaultOn, null);
            this.Races = new MaskItem<bool, Group_TranslationMask<Race_TranslationMask>>(defaultOn, null);
            this.Sounds = new MaskItem<bool, Group_TranslationMask<Sound_TranslationMask>>(defaultOn, null);
            this.Skills = new MaskItem<bool, Group_TranslationMask<SkillRecord_TranslationMask>>(defaultOn, null);
            this.MagicEffects = new MaskItem<bool, Group_TranslationMask<MagicEffect_TranslationMask>>(defaultOn, null);
            this.Scripts = new MaskItem<bool, Group_TranslationMask<Script_TranslationMask>>(defaultOn, null);
            this.LandTextures = new MaskItem<bool, Group_TranslationMask<LandTexture_TranslationMask>>(defaultOn, null);
            this.Enchantments = new MaskItem<bool, Group_TranslationMask<Enchantment_TranslationMask>>(defaultOn, null);
            this.Spells = new MaskItem<bool, Group_TranslationMask<SpellUnleveled_TranslationMask>>(defaultOn, null);
            this.Birthsigns = new MaskItem<bool, Group_TranslationMask<Birthsign_TranslationMask>>(defaultOn, null);
            this.Activators = new MaskItem<bool, Group_TranslationMask<Activator_TranslationMask>>(defaultOn, null);
            this.AlchemicalApparatus = new MaskItem<bool, Group_TranslationMask<AlchemicalApparatus_TranslationMask>>(defaultOn, null);
            this.Armors = new MaskItem<bool, Group_TranslationMask<Armor_TranslationMask>>(defaultOn, null);
            this.Books = new MaskItem<bool, Group_TranslationMask<Book_TranslationMask>>(defaultOn, null);
            this.Clothes = new MaskItem<bool, Group_TranslationMask<Clothing_TranslationMask>>(defaultOn, null);
            this.Containers = new MaskItem<bool, Group_TranslationMask<Container_TranslationMask>>(defaultOn, null);
            this.Doors = new MaskItem<bool, Group_TranslationMask<Door_TranslationMask>>(defaultOn, null);
            this.Ingredients = new MaskItem<bool, Group_TranslationMask<Ingredient_TranslationMask>>(defaultOn, null);
            this.Lights = new MaskItem<bool, Group_TranslationMask<Light_TranslationMask>>(defaultOn, null);
            this.Miscellaneous = new MaskItem<bool, Group_TranslationMask<Miscellaneous_TranslationMask>>(defaultOn, null);
            this.Statics = new MaskItem<bool, Group_TranslationMask<Static_TranslationMask>>(defaultOn, null);
            this.Grasses = new MaskItem<bool, Group_TranslationMask<Grass_TranslationMask>>(defaultOn, null);
            this.Trees = new MaskItem<bool, Group_TranslationMask<Tree_TranslationMask>>(defaultOn, null);
            this.Flora = new MaskItem<bool, Group_TranslationMask<Flora_TranslationMask>>(defaultOn, null);
            this.Furnature = new MaskItem<bool, Group_TranslationMask<Furnature_TranslationMask>>(defaultOn, null);
            this.Weapons = new MaskItem<bool, Group_TranslationMask<Weapon_TranslationMask>>(defaultOn, null);
            this.Ammo = new MaskItem<bool, Group_TranslationMask<Ammo_TranslationMask>>(defaultOn, null);
            this.NPCs = new MaskItem<bool, Group_TranslationMask<NPC_TranslationMask>>(defaultOn, null);
            this.Creatures = new MaskItem<bool, Group_TranslationMask<Creature_TranslationMask>>(defaultOn, null);
            this.LeveledCreatures = new MaskItem<bool, Group_TranslationMask<LeveledCreature_TranslationMask>>(defaultOn, null);
            this.SoulGems = new MaskItem<bool, Group_TranslationMask<SoulGem_TranslationMask>>(defaultOn, null);
            this.Keys = new MaskItem<bool, Group_TranslationMask<Key_TranslationMask>>(defaultOn, null);
            this.Potions = new MaskItem<bool, Group_TranslationMask<Potion_TranslationMask>>(defaultOn, null);
            this.Subspaces = new MaskItem<bool, Group_TranslationMask<Subspace_TranslationMask>>(defaultOn, null);
            this.SigilStones = new MaskItem<bool, Group_TranslationMask<SigilStone_TranslationMask>>(defaultOn, null);
            this.LeveledItems = new MaskItem<bool, Group_TranslationMask<LeveledItem_TranslationMask>>(defaultOn, null);
            this.Weathers = new MaskItem<bool, Group_TranslationMask<Weather_TranslationMask>>(defaultOn, null);
            this.Climates = new MaskItem<bool, Group_TranslationMask<Climate_TranslationMask>>(defaultOn, null);
            this.Regions = new MaskItem<bool, Group_TranslationMask<Region_TranslationMask>>(defaultOn, null);
            this.Cells = new MaskItem<bool, ListGroup_TranslationMask<CellBlock_TranslationMask>>(defaultOn, null);
            this.Worldspaces = new MaskItem<bool, Group_TranslationMask<Worldspace_TranslationMask>>(defaultOn, null);
            this.DialogTopics = new MaskItem<bool, Group_TranslationMask<DialogTopic_TranslationMask>>(defaultOn, null);
            this.Quests = new MaskItem<bool, Group_TranslationMask<Quest_TranslationMask>>(defaultOn, null);
            this.IdleAnimations = new MaskItem<bool, Group_TranslationMask<IdleAnimation_TranslationMask>>(defaultOn, null);
            this.AIPackages = new MaskItem<bool, Group_TranslationMask<AIPackage_TranslationMask>>(defaultOn, null);
            this.CombatStyles = new MaskItem<bool, Group_TranslationMask<CombatStyle_TranslationMask>>(defaultOn, null);
            this.LoadScreens = new MaskItem<bool, Group_TranslationMask<LoadScreen_TranslationMask>>(defaultOn, null);
            this.LeveledSpells = new MaskItem<bool, Group_TranslationMask<LeveledSpell_TranslationMask>>(defaultOn, null);
            this.AnimatedObjects = new MaskItem<bool, Group_TranslationMask<AnimatedObject_TranslationMask>>(defaultOn, null);
            this.Waters = new MaskItem<bool, Group_TranslationMask<Water_TranslationMask>>(defaultOn, null);
            this.EffectShaders = new MaskItem<bool, Group_TranslationMask<EffectShader_TranslationMask>>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ModHeader?.Overall ?? true, ModHeader?.Specific?.GetCrystal()));
            ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
            ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
            ret.Add((Classes?.Overall ?? true, Classes?.Specific?.GetCrystal()));
            ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
            ret.Add((Hairs?.Overall ?? true, Hairs?.Specific?.GetCrystal()));
            ret.Add((Eyes?.Overall ?? true, Eyes?.Specific?.GetCrystal()));
            ret.Add((Races?.Overall ?? true, Races?.Specific?.GetCrystal()));
            ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            ret.Add((Skills?.Overall ?? true, Skills?.Specific?.GetCrystal()));
            ret.Add((MagicEffects?.Overall ?? true, MagicEffects?.Specific?.GetCrystal()));
            ret.Add((Scripts?.Overall ?? true, Scripts?.Specific?.GetCrystal()));
            ret.Add((LandTextures?.Overall ?? true, LandTextures?.Specific?.GetCrystal()));
            ret.Add((Enchantments?.Overall ?? true, Enchantments?.Specific?.GetCrystal()));
            ret.Add((Spells?.Overall ?? true, Spells?.Specific?.GetCrystal()));
            ret.Add((Birthsigns?.Overall ?? true, Birthsigns?.Specific?.GetCrystal()));
            ret.Add((Activators?.Overall ?? true, Activators?.Specific?.GetCrystal()));
            ret.Add((AlchemicalApparatus?.Overall ?? true, AlchemicalApparatus?.Specific?.GetCrystal()));
            ret.Add((Armors?.Overall ?? true, Armors?.Specific?.GetCrystal()));
            ret.Add((Books?.Overall ?? true, Books?.Specific?.GetCrystal()));
            ret.Add((Clothes?.Overall ?? true, Clothes?.Specific?.GetCrystal()));
            ret.Add((Containers?.Overall ?? true, Containers?.Specific?.GetCrystal()));
            ret.Add((Doors?.Overall ?? true, Doors?.Specific?.GetCrystal()));
            ret.Add((Ingredients?.Overall ?? true, Ingredients?.Specific?.GetCrystal()));
            ret.Add((Lights?.Overall ?? true, Lights?.Specific?.GetCrystal()));
            ret.Add((Miscellaneous?.Overall ?? true, Miscellaneous?.Specific?.GetCrystal()));
            ret.Add((Statics?.Overall ?? true, Statics?.Specific?.GetCrystal()));
            ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
            ret.Add((Trees?.Overall ?? true, Trees?.Specific?.GetCrystal()));
            ret.Add((Flora?.Overall ?? true, Flora?.Specific?.GetCrystal()));
            ret.Add((Furnature?.Overall ?? true, Furnature?.Specific?.GetCrystal()));
            ret.Add((Weapons?.Overall ?? true, Weapons?.Specific?.GetCrystal()));
            ret.Add((Ammo?.Overall ?? true, Ammo?.Specific?.GetCrystal()));
            ret.Add((NPCs?.Overall ?? true, NPCs?.Specific?.GetCrystal()));
            ret.Add((Creatures?.Overall ?? true, Creatures?.Specific?.GetCrystal()));
            ret.Add((LeveledCreatures?.Overall ?? true, LeveledCreatures?.Specific?.GetCrystal()));
            ret.Add((SoulGems?.Overall ?? true, SoulGems?.Specific?.GetCrystal()));
            ret.Add((Keys?.Overall ?? true, Keys?.Specific?.GetCrystal()));
            ret.Add((Potions?.Overall ?? true, Potions?.Specific?.GetCrystal()));
            ret.Add((Subspaces?.Overall ?? true, Subspaces?.Specific?.GetCrystal()));
            ret.Add((SigilStones?.Overall ?? true, SigilStones?.Specific?.GetCrystal()));
            ret.Add((LeveledItems?.Overall ?? true, LeveledItems?.Specific?.GetCrystal()));
            ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
            ret.Add((Climates?.Overall ?? true, Climates?.Specific?.GetCrystal()));
            ret.Add((Regions?.Overall ?? true, Regions?.Specific?.GetCrystal()));
            ret.Add((Cells?.Overall ?? true, Cells?.Specific?.GetCrystal()));
            ret.Add((Worldspaces?.Overall ?? true, Worldspaces?.Specific?.GetCrystal()));
            ret.Add((DialogTopics?.Overall ?? true, DialogTopics?.Specific?.GetCrystal()));
            ret.Add((Quests?.Overall ?? true, Quests?.Specific?.GetCrystal()));
            ret.Add((IdleAnimations?.Overall ?? true, IdleAnimations?.Specific?.GetCrystal()));
            ret.Add((AIPackages?.Overall ?? true, AIPackages?.Specific?.GetCrystal()));
            ret.Add((CombatStyles?.Overall ?? true, CombatStyles?.Specific?.GetCrystal()));
            ret.Add((LoadScreens?.Overall ?? true, LoadScreens?.Specific?.GetCrystal()));
            ret.Add((LeveledSpells?.Overall ?? true, LeveledSpells?.Specific?.GetCrystal()));
            ret.Add((AnimatedObjects?.Overall ?? true, AnimatedObjects?.Specific?.GetCrystal()));
            ret.Add((Waters?.Overall ?? true, Waters?.Specific?.GetCrystal()));
            ret.Add((EffectShaders?.Overall ?? true, EffectShaders?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Mutagen
namespace Mutagen.Bethesda.Oblivion
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool Sounds;
        public bool Skills;
        public bool MagicEffects;
        public bool Scripts;
        public bool LandTextures;
        public bool Enchantments;
        public bool Spells;
        public bool Birthsigns;
        public bool Activators;
        public bool AlchemicalApparatus;
        public bool Armors;
        public bool Books;
        public bool Clothes;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool Miscellaneous;
        public bool Statics;
        public bool Grasses;
        public bool Trees;
        public bool Flora;
        public bool Furnature;
        public bool Weapons;
        public bool Ammo;
        public bool NPCs;
        public bool Creatures;
        public bool LeveledCreatures;
        public bool SoulGems;
        public bool Keys;
        public bool Potions;
        public bool Subspaces;
        public bool SigilStones;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool Regions;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool AIPackages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            Sounds = defaultValue;
            Skills = defaultValue;
            MagicEffects = defaultValue;
            Scripts = defaultValue;
            LandTextures = defaultValue;
            Enchantments = defaultValue;
            Spells = defaultValue;
            Birthsigns = defaultValue;
            Activators = defaultValue;
            AlchemicalApparatus = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Clothes = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            Miscellaneous = defaultValue;
            Statics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Flora = defaultValue;
            Furnature = defaultValue;
            Weapons = defaultValue;
            Ammo = defaultValue;
            NPCs = defaultValue;
            Creatures = defaultValue;
            LeveledCreatures = defaultValue;
            SoulGems = defaultValue;
            Keys = defaultValue;
            Potions = defaultValue;
            Subspaces = defaultValue;
            SigilStones = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            Regions = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            AIPackages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class OblivionModBinaryWriteTranslation
    {
        public readonly static OblivionModBinaryWriteTranslation Instance = new OblivionModBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IOblivionModGetter item,
            MutagenWriter writer,
            GroupMask importMask,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MasterReferences masterReferences = new MasterReferences(item.ModHeader.MasterReferences, modKey);
            {
                var loquiItem = item.ModHeader;
                ((ModHeaderBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (importMask?.GameSettings ?? true)
            {
                if (item.GameSettings.Items.Count > 0)
                {
                    var loquiItem = item.GameSettings;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Globals ?? true)
            {
                if (item.Globals.Items.Count > 0)
                {
                    var loquiItem = item.Globals;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Classes ?? true)
            {
                if (item.Classes.Items.Count > 0)
                {
                    var loquiItem = item.Classes;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Factions ?? true)
            {
                if (item.Factions.Items.Count > 0)
                {
                    var loquiItem = item.Factions;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                if (item.Hairs.Items.Count > 0)
                {
                    var loquiItem = item.Hairs;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                if (item.Eyes.Items.Count > 0)
                {
                    var loquiItem = item.Eyes;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IEyeGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Races ?? true)
            {
                if (item.Races.Items.Count > 0)
                {
                    var loquiItem = item.Races;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Sounds ?? true)
            {
                if (item.Sounds.Items.Count > 0)
                {
                    var loquiItem = item.Sounds;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISoundGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Skills ?? true)
            {
                if (item.Skills.Items.Count > 0)
                {
                    var loquiItem = item.Skills;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISkillRecordGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                if (item.MagicEffects.Items.Count > 0)
                {
                    var loquiItem = item.MagicEffects;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Scripts ?? true)
            {
                if (item.Scripts.Items.Count > 0)
                {
                    var loquiItem = item.Scripts;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IScriptGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LandTextures ?? true)
            {
                if (item.LandTextures.Items.Count > 0)
                {
                    var loquiItem = item.LandTextures;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILandTextureGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Enchantments ?? true)
            {
                if (item.Enchantments.Items.Count > 0)
                {
                    var loquiItem = item.Enchantments;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IEnchantmentGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Spells ?? true)
            {
                if (item.Spells.Items.Count > 0)
                {
                    var loquiItem = item.Spells;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISpellUnleveledGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Birthsigns ?? true)
            {
                if (item.Birthsigns.Items.Count > 0)
                {
                    var loquiItem = item.Birthsigns;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IBirthsignGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Activators ?? true)
            {
                if (item.Activators.Items.Count > 0)
                {
                    var loquiItem = item.Activators;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.AlchemicalApparatus ?? true)
            {
                if (item.AlchemicalApparatus.Items.Count > 0)
                {
                    var loquiItem = item.AlchemicalApparatus;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Armors ?? true)
            {
                if (item.Armors.Items.Count > 0)
                {
                    var loquiItem = item.Armors;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Books ?? true)
            {
                if (item.Books.Items.Count > 0)
                {
                    var loquiItem = item.Books;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Clothes ?? true)
            {
                if (item.Clothes.Items.Count > 0)
                {
                    var loquiItem = item.Clothes;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IClothingGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Containers ?? true)
            {
                if (item.Containers.Items.Count > 0)
                {
                    var loquiItem = item.Containers;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Doors ?? true)
            {
                if (item.Doors.Items.Count > 0)
                {
                    var loquiItem = item.Doors;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                if (item.Ingredients.Items.Count > 0)
                {
                    var loquiItem = item.Ingredients;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Lights ?? true)
            {
                if (item.Lights.Items.Count > 0)
                {
                    var loquiItem = item.Lights;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Miscellaneous ?? true)
            {
                if (item.Miscellaneous.Items.Count > 0)
                {
                    var loquiItem = item.Miscellaneous;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IMiscellaneousGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Statics ?? true)
            {
                if (item.Statics.Items.Count > 0)
                {
                    var loquiItem = item.Statics;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                if (item.Grasses.Items.Count > 0)
                {
                    var loquiItem = item.Grasses;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Trees ?? true)
            {
                if (item.Trees.Items.Count > 0)
                {
                    var loquiItem = item.Trees;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Flora ?? true)
            {
                if (item.Flora.Items.Count > 0)
                {
                    var loquiItem = item.Flora;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Furnature ?? true)
            {
                if (item.Furnature.Items.Count > 0)
                {
                    var loquiItem = item.Furnature;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IFurnatureGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                if (item.Weapons.Items.Count > 0)
                {
                    var loquiItem = item.Weapons;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Ammo ?? true)
            {
                if (item.Ammo.Items.Count > 0)
                {
                    var loquiItem = item.Ammo;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IAmmoGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.NPCs ?? true)
            {
                if (item.NPCs.Items.Count > 0)
                {
                    var loquiItem = item.NPCs;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<INPCGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Creatures ?? true)
            {
                if (item.Creatures.Items.Count > 0)
                {
                    var loquiItem = item.Creatures;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ICreatureGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LeveledCreatures ?? true)
            {
                if (item.LeveledCreatures.Items.Count > 0)
                {
                    var loquiItem = item.LeveledCreatures;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILeveledCreatureGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                if (item.SoulGems.Items.Count > 0)
                {
                    var loquiItem = item.SoulGems;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Keys ?? true)
            {
                if (item.Keys.Items.Count > 0)
                {
                    var loquiItem = item.Keys;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Potions ?? true)
            {
                if (item.Potions.Items.Count > 0)
                {
                    var loquiItem = item.Potions;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IPotionGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Subspaces ?? true)
            {
                if (item.Subspaces.Items.Count > 0)
                {
                    var loquiItem = item.Subspaces;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISubspaceGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.SigilStones ?? true)
            {
                if (item.SigilStones.Items.Count > 0)
                {
                    var loquiItem = item.SigilStones;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ISigilStoneGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                if (item.LeveledItems.Items.Count > 0)
                {
                    var loquiItem = item.LeveledItems;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                if (item.Weathers.Items.Count > 0)
                {
                    var loquiItem = item.Weathers;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Climates ?? true)
            {
                if (item.Climates.Items.Count > 0)
                {
                    var loquiItem = item.Climates;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Regions ?? true)
            {
                if (item.Regions.Items.Count > 0)
                {
                    var loquiItem = item.Regions;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Cells ?? true)
            {
                if (item.Cells.Items.Count > 0)
                {
                    var loquiItem = item.Cells;
                    ((ListGroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                if (item.Worldspaces.Items.Count > 0)
                {
                    var loquiItem = item.Worldspaces;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                if (item.DialogTopics.Items.Count > 0)
                {
                    var loquiItem = item.DialogTopics;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Quests ?? true)
            {
                if (item.Quests.Items.Count > 0)
                {
                    var loquiItem = item.Quests;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                if (item.IdleAnimations.Items.Count > 0)
                {
                    var loquiItem = item.IdleAnimations;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.AIPackages ?? true)
            {
                if (item.AIPackages.Items.Count > 0)
                {
                    var loquiItem = item.AIPackages;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IAIPackageGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                if (item.CombatStyles.Items.Count > 0)
                {
                    var loquiItem = item.CombatStyles;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                if (item.LoadScreens.Items.Count > 0)
                {
                    var loquiItem = item.LoadScreens;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                if (item.LeveledSpells.Items.Count > 0)
                {
                    var loquiItem = item.LeveledSpells;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                if (item.AnimatedObjects.Items.Count > 0)
                {
                    var loquiItem = item.AnimatedObjects;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Waters ?? true)
            {
                if (item.Waters.Items.Count > 0)
                {
                    var loquiItem = item.Waters;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                if (item.EffectShaders.Items.Count > 0)
                {
                    var loquiItem = item.EffectShaders;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: loquiItem,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IOblivionModGetter item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            Write(
                item: (IOblivionModGetter)item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class OblivionModBinaryCreateTranslation
    {
        public readonly static OblivionModBinaryCreateTranslation Instance = new OblivionModBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class OblivionModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IOblivionModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            OblivionModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = OblivionMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            string path,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                    WriteToBinary(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            bool doMasks = true,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                    WriteToBinary(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            Stream stream,
            ModKey modKey,
            out OblivionMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, meta: item.GameMode, dispose: false))
            {
                WriteToBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, meta: item.GameMode, dispose: false))
            {
                WriteToBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    errorMask: errorMask);
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            OblivionModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            GroupMask importMask = null)
        {
            OblivionModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                    OblivionModBinaryWriteTranslation.Instance.Write(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, meta: item.GameMode, dispose: false))
            {
                OblivionModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class OblivionModBinaryWrapper : IOblivionModGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;
        protected object CommonInstance() => OblivionModCommon.Instance;
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        object IOblivionModGetter.CommonSetterInstance() => null;
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IOblivionModGetter)rhs, include);

        public GameMode GameMode => GameMode.Oblivion;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, ModKey? modKey) => this.WriteToBinary(path, modKey, importMask: null);
        Task IModGetter.WriteToBinaryAsync(string path, ModKey? modKey) => this.WriteToBinaryAsync(path, modKey);
        void IModGetter.WriteToBinaryParallel(string path, ModKey? modKey) => this.WriteToBinaryParallel(path, modKey);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public IEnumerable<ILinkGetter> Links => OblivionModCommon.Instance.GetLinks(this);
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        protected object XmlWriteTranslator => OblivionModXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((OblivionModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        public ModKey ModKey { get; }
        private readonly BinaryWrapperFactoryPackage _package = new BinaryWrapperFactoryPackage(GameMode.Oblivion);
        private readonly IBinaryReadStream _data;

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private bool _ModHeader_IsSet => _ModHeaderLocation.HasValue;
        private IModHeaderGetter _ModHeader => _ModHeader_IsSet ? ModHeaderBinaryWrapper.ModHeaderFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ModHeaderLocation.Value.Min, _ModHeaderLocation.Value.Max)), _package) : default;
        public IModHeaderGetter ModHeader => _ModHeader ?? new ModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private bool _GameSettings_IsSet => _GameSettingsLocation.HasValue;
        private IGroupGetter<IGameSettingGetter> _GameSettings => _GameSettings_IsSet ? GroupBinaryWrapper<IGameSettingGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _GameSettingsLocation.Value.Min, _GameSettingsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private bool _Globals_IsSet => _GlobalsLocation.HasValue;
        private IGroupGetter<IGlobalGetter> _Globals => _Globals_IsSet ? GroupBinaryWrapper<IGlobalGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _GlobalsLocation.Value.Min, _GlobalsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private bool _Classes_IsSet => _ClassesLocation.HasValue;
        private IGroupGetter<IClassGetter> _Classes => _Classes_IsSet ? GroupBinaryWrapper<IClassGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ClassesLocation.Value.Min, _ClassesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private bool _Factions_IsSet => _FactionsLocation.HasValue;
        private IGroupGetter<IFactionGetter> _Factions => _Factions_IsSet ? GroupBinaryWrapper<IFactionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _FactionsLocation.Value.Min, _FactionsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        #region Hairs
        private RangeInt64? _HairsLocation;
        private bool _Hairs_IsSet => _HairsLocation.HasValue;
        private IGroupGetter<IHairGetter> _Hairs => _Hairs_IsSet ? GroupBinaryWrapper<IHairGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _HairsLocation.Value.Min, _HairsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IHairGetter> Hairs => _Hairs ?? new Group<Hair>(this);
        #endregion
        #region Eyes
        private RangeInt64? _EyesLocation;
        private bool _Eyes_IsSet => _EyesLocation.HasValue;
        private IGroupGetter<IEyeGetter> _Eyes => _Eyes_IsSet ? GroupBinaryWrapper<IEyeGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _EyesLocation.Value.Min, _EyesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IEyeGetter> Eyes => _Eyes ?? new Group<Eye>(this);
        #endregion
        #region Races
        private RangeInt64? _RacesLocation;
        private bool _Races_IsSet => _RacesLocation.HasValue;
        private IGroupGetter<IRaceGetter> _Races => _Races_IsSet ? GroupBinaryWrapper<IRaceGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _RacesLocation.Value.Min, _RacesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IRaceGetter> Races => _Races ?? new Group<Race>(this);
        #endregion
        #region Sounds
        private RangeInt64? _SoundsLocation;
        private bool _Sounds_IsSet => _SoundsLocation.HasValue;
        private IGroupGetter<ISoundGetter> _Sounds => _Sounds_IsSet ? GroupBinaryWrapper<ISoundGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SoundsLocation.Value.Min, _SoundsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISoundGetter> Sounds => _Sounds ?? new Group<Sound>(this);
        #endregion
        #region Skills
        private RangeInt64? _SkillsLocation;
        private bool _Skills_IsSet => _SkillsLocation.HasValue;
        private IGroupGetter<ISkillRecordGetter> _Skills => _Skills_IsSet ? GroupBinaryWrapper<ISkillRecordGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SkillsLocation.Value.Min, _SkillsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISkillRecordGetter> Skills => _Skills ?? new Group<SkillRecord>(this);
        #endregion
        #region MagicEffects
        private RangeInt64? _MagicEffectsLocation;
        private bool _MagicEffects_IsSet => _MagicEffectsLocation.HasValue;
        private IGroupGetter<IMagicEffectGetter> _MagicEffects => _MagicEffects_IsSet ? GroupBinaryWrapper<IMagicEffectGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _MagicEffectsLocation.Value.Min, _MagicEffectsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Group<MagicEffect>(this);
        #endregion
        #region Scripts
        private RangeInt64? _ScriptsLocation;
        private bool _Scripts_IsSet => _ScriptsLocation.HasValue;
        private IGroupGetter<IScriptGetter> _Scripts => _Scripts_IsSet ? GroupBinaryWrapper<IScriptGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ScriptsLocation.Value.Min, _ScriptsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IScriptGetter> Scripts => _Scripts ?? new Group<Script>(this);
        #endregion
        #region LandTextures
        private RangeInt64? _LandTexturesLocation;
        private bool _LandTextures_IsSet => _LandTexturesLocation.HasValue;
        private IGroupGetter<ILandTextureGetter> _LandTextures => _LandTextures_IsSet ? GroupBinaryWrapper<ILandTextureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LandTexturesLocation.Value.Min, _LandTexturesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILandTextureGetter> LandTextures => _LandTextures ?? new Group<LandTexture>(this);
        #endregion
        #region Enchantments
        private RangeInt64? _EnchantmentsLocation;
        private bool _Enchantments_IsSet => _EnchantmentsLocation.HasValue;
        private IGroupGetter<IEnchantmentGetter> _Enchantments => _Enchantments_IsSet ? GroupBinaryWrapper<IEnchantmentGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _EnchantmentsLocation.Value.Min, _EnchantmentsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IEnchantmentGetter> Enchantments => _Enchantments ?? new Group<Enchantment>(this);
        #endregion
        #region Spells
        private RangeInt64? _SpellsLocation;
        private bool _Spells_IsSet => _SpellsLocation.HasValue;
        private IGroupGetter<ISpellUnleveledGetter> _Spells => _Spells_IsSet ? GroupBinaryWrapper<ISpellUnleveledGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SpellsLocation.Value.Min, _SpellsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISpellUnleveledGetter> Spells => _Spells ?? new Group<SpellUnleveled>(this);
        #endregion
        #region Birthsigns
        private RangeInt64? _BirthsignsLocation;
        private bool _Birthsigns_IsSet => _BirthsignsLocation.HasValue;
        private IGroupGetter<IBirthsignGetter> _Birthsigns => _Birthsigns_IsSet ? GroupBinaryWrapper<IBirthsignGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _BirthsignsLocation.Value.Min, _BirthsignsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IBirthsignGetter> Birthsigns => _Birthsigns ?? new Group<Birthsign>(this);
        #endregion
        #region Activators
        private RangeInt64? _ActivatorsLocation;
        private bool _Activators_IsSet => _ActivatorsLocation.HasValue;
        private IGroupGetter<IActivatorGetter> _Activators => _Activators_IsSet ? GroupBinaryWrapper<IActivatorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ActivatorsLocation.Value.Min, _ActivatorsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IActivatorGetter> Activators => _Activators ?? new Group<Activator>(this);
        #endregion
        #region AlchemicalApparatus
        private RangeInt64? _AlchemicalApparatusLocation;
        private bool _AlchemicalApparatus_IsSet => _AlchemicalApparatusLocation.HasValue;
        private IGroupGetter<IAlchemicalApparatusGetter> _AlchemicalApparatus => _AlchemicalApparatus_IsSet ? GroupBinaryWrapper<IAlchemicalApparatusGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _AlchemicalApparatusLocation.Value.Min, _AlchemicalApparatusLocation.Value.Max)), _package) : default;
        public IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus => _AlchemicalApparatus ?? new Group<AlchemicalApparatus>(this);
        #endregion
        #region Armors
        private RangeInt64? _ArmorsLocation;
        private bool _Armors_IsSet => _ArmorsLocation.HasValue;
        private IGroupGetter<IArmorGetter> _Armors => _Armors_IsSet ? GroupBinaryWrapper<IArmorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ArmorsLocation.Value.Min, _ArmorsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IArmorGetter> Armors => _Armors ?? new Group<Armor>(this);
        #endregion
        #region Books
        private RangeInt64? _BooksLocation;
        private bool _Books_IsSet => _BooksLocation.HasValue;
        private IGroupGetter<IBookGetter> _Books => _Books_IsSet ? GroupBinaryWrapper<IBookGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _BooksLocation.Value.Min, _BooksLocation.Value.Max)), _package) : default;
        public IGroupGetter<IBookGetter> Books => _Books ?? new Group<Book>(this);
        #endregion
        #region Clothes
        private RangeInt64? _ClothesLocation;
        private bool _Clothes_IsSet => _ClothesLocation.HasValue;
        private IGroupGetter<IClothingGetter> _Clothes => _Clothes_IsSet ? GroupBinaryWrapper<IClothingGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ClothesLocation.Value.Min, _ClothesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IClothingGetter> Clothes => _Clothes ?? new Group<Clothing>(this);
        #endregion
        #region Containers
        private RangeInt64? _ContainersLocation;
        private bool _Containers_IsSet => _ContainersLocation.HasValue;
        private IGroupGetter<IContainerGetter> _Containers => _Containers_IsSet ? GroupBinaryWrapper<IContainerGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ContainersLocation.Value.Min, _ContainersLocation.Value.Max)), _package) : default;
        public IGroupGetter<IContainerGetter> Containers => _Containers ?? new Group<Container>(this);
        #endregion
        #region Doors
        private RangeInt64? _DoorsLocation;
        private bool _Doors_IsSet => _DoorsLocation.HasValue;
        private IGroupGetter<IDoorGetter> _Doors => _Doors_IsSet ? GroupBinaryWrapper<IDoorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _DoorsLocation.Value.Min, _DoorsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IDoorGetter> Doors => _Doors ?? new Group<Door>(this);
        #endregion
        #region Ingredients
        private RangeInt64? _IngredientsLocation;
        private bool _Ingredients_IsSet => _IngredientsLocation.HasValue;
        private IGroupGetter<IIngredientGetter> _Ingredients => _Ingredients_IsSet ? GroupBinaryWrapper<IIngredientGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _IngredientsLocation.Value.Min, _IngredientsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Group<Ingredient>(this);
        #endregion
        #region Lights
        private RangeInt64? _LightsLocation;
        private bool _Lights_IsSet => _LightsLocation.HasValue;
        private IGroupGetter<ILightGetter> _Lights => _Lights_IsSet ? GroupBinaryWrapper<ILightGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LightsLocation.Value.Min, _LightsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILightGetter> Lights => _Lights ?? new Group<Light>(this);
        #endregion
        #region Miscellaneous
        private RangeInt64? _MiscellaneousLocation;
        private bool _Miscellaneous_IsSet => _MiscellaneousLocation.HasValue;
        private IGroupGetter<IMiscellaneousGetter> _Miscellaneous => _Miscellaneous_IsSet ? GroupBinaryWrapper<IMiscellaneousGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _MiscellaneousLocation.Value.Min, _MiscellaneousLocation.Value.Max)), _package) : default;
        public IGroupGetter<IMiscellaneousGetter> Miscellaneous => _Miscellaneous ?? new Group<Miscellaneous>(this);
        #endregion
        #region Statics
        private RangeInt64? _StaticsLocation;
        private bool _Statics_IsSet => _StaticsLocation.HasValue;
        private IGroupGetter<IStaticGetter> _Statics => _Statics_IsSet ? GroupBinaryWrapper<IStaticGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _StaticsLocation.Value.Min, _StaticsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IStaticGetter> Statics => _Statics ?? new Group<Static>(this);
        #endregion
        #region Grasses
        private RangeInt64? _GrassesLocation;
        private bool _Grasses_IsSet => _GrassesLocation.HasValue;
        private IGroupGetter<IGrassGetter> _Grasses => _Grasses_IsSet ? GroupBinaryWrapper<IGrassGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _GrassesLocation.Value.Min, _GrassesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IGrassGetter> Grasses => _Grasses ?? new Group<Grass>(this);
        #endregion
        #region Trees
        private RangeInt64? _TreesLocation;
        private bool _Trees_IsSet => _TreesLocation.HasValue;
        private IGroupGetter<ITreeGetter> _Trees => _Trees_IsSet ? GroupBinaryWrapper<ITreeGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _TreesLocation.Value.Min, _TreesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ITreeGetter> Trees => _Trees ?? new Group<Tree>(this);
        #endregion
        #region Flora
        private RangeInt64? _FloraLocation;
        private bool _Flora_IsSet => _FloraLocation.HasValue;
        private IGroupGetter<IFloraGetter> _Flora => _Flora_IsSet ? GroupBinaryWrapper<IFloraGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _FloraLocation.Value.Min, _FloraLocation.Value.Max)), _package) : default;
        public IGroupGetter<IFloraGetter> Flora => _Flora ?? new Group<Flora>(this);
        #endregion
        #region Furnature
        private RangeInt64? _FurnatureLocation;
        private bool _Furnature_IsSet => _FurnatureLocation.HasValue;
        private IGroupGetter<IFurnatureGetter> _Furnature => _Furnature_IsSet ? GroupBinaryWrapper<IFurnatureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _FurnatureLocation.Value.Min, _FurnatureLocation.Value.Max)), _package) : default;
        public IGroupGetter<IFurnatureGetter> Furnature => _Furnature ?? new Group<Furnature>(this);
        #endregion
        #region Weapons
        private RangeInt64? _WeaponsLocation;
        private bool _Weapons_IsSet => _WeaponsLocation.HasValue;
        private IGroupGetter<IWeaponGetter> _Weapons => _Weapons_IsSet ? GroupBinaryWrapper<IWeaponGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _WeaponsLocation.Value.Min, _WeaponsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Group<Weapon>(this);
        #endregion
        #region Ammo
        private RangeInt64? _AmmoLocation;
        private bool _Ammo_IsSet => _AmmoLocation.HasValue;
        private IGroupGetter<IAmmoGetter> _Ammo => _Ammo_IsSet ? GroupBinaryWrapper<IAmmoGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _AmmoLocation.Value.Min, _AmmoLocation.Value.Max)), _package) : default;
        public IGroupGetter<IAmmoGetter> Ammo => _Ammo ?? new Group<Ammo>(this);
        #endregion
        #region NPCs
        private RangeInt64? _NPCsLocation;
        private bool _NPCs_IsSet => _NPCsLocation.HasValue;
        private IGroupGetter<INPCGetter> _NPCs => _NPCs_IsSet ? GroupBinaryWrapper<INPCGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _NPCsLocation.Value.Min, _NPCsLocation.Value.Max)), _package) : default;
        public IGroupGetter<INPCGetter> NPCs => _NPCs ?? new Group<NPC>(this);
        #endregion
        #region Creatures
        private RangeInt64? _CreaturesLocation;
        private bool _Creatures_IsSet => _CreaturesLocation.HasValue;
        private IGroupGetter<ICreatureGetter> _Creatures => _Creatures_IsSet ? GroupBinaryWrapper<ICreatureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _CreaturesLocation.Value.Min, _CreaturesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ICreatureGetter> Creatures => _Creatures ?? new Group<Creature>(this);
        #endregion
        #region LeveledCreatures
        private RangeInt64? _LeveledCreaturesLocation;
        private bool _LeveledCreatures_IsSet => _LeveledCreaturesLocation.HasValue;
        private IGroupGetter<ILeveledCreatureGetter> _LeveledCreatures => _LeveledCreatures_IsSet ? GroupBinaryWrapper<ILeveledCreatureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LeveledCreaturesLocation.Value.Min, _LeveledCreaturesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILeveledCreatureGetter> LeveledCreatures => _LeveledCreatures ?? new Group<LeveledCreature>(this);
        #endregion
        #region SoulGems
        private RangeInt64? _SoulGemsLocation;
        private bool _SoulGems_IsSet => _SoulGemsLocation.HasValue;
        private IGroupGetter<ISoulGemGetter> _SoulGems => _SoulGems_IsSet ? GroupBinaryWrapper<ISoulGemGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SoulGemsLocation.Value.Min, _SoulGemsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new Group<SoulGem>(this);
        #endregion
        #region Keys
        private RangeInt64? _KeysLocation;
        private bool _Keys_IsSet => _KeysLocation.HasValue;
        private IGroupGetter<IKeyGetter> _Keys => _Keys_IsSet ? GroupBinaryWrapper<IKeyGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _KeysLocation.Value.Min, _KeysLocation.Value.Max)), _package) : default;
        public IGroupGetter<IKeyGetter> Keys => _Keys ?? new Group<Key>(this);
        #endregion
        #region Potions
        private RangeInt64? _PotionsLocation;
        private bool _Potions_IsSet => _PotionsLocation.HasValue;
        private IGroupGetter<IPotionGetter> _Potions => _Potions_IsSet ? GroupBinaryWrapper<IPotionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _PotionsLocation.Value.Min, _PotionsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IPotionGetter> Potions => _Potions ?? new Group<Potion>(this);
        #endregion
        #region Subspaces
        private RangeInt64? _SubspacesLocation;
        private bool _Subspaces_IsSet => _SubspacesLocation.HasValue;
        private IGroupGetter<ISubspaceGetter> _Subspaces => _Subspaces_IsSet ? GroupBinaryWrapper<ISubspaceGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SubspacesLocation.Value.Min, _SubspacesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISubspaceGetter> Subspaces => _Subspaces ?? new Group<Subspace>(this);
        #endregion
        #region SigilStones
        private RangeInt64? _SigilStonesLocation;
        private bool _SigilStones_IsSet => _SigilStonesLocation.HasValue;
        private IGroupGetter<ISigilStoneGetter> _SigilStones => _SigilStones_IsSet ? GroupBinaryWrapper<ISigilStoneGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _SigilStonesLocation.Value.Min, _SigilStonesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ISigilStoneGetter> SigilStones => _SigilStones ?? new Group<SigilStone>(this);
        #endregion
        #region LeveledItems
        private RangeInt64? _LeveledItemsLocation;
        private bool _LeveledItems_IsSet => _LeveledItemsLocation.HasValue;
        private IGroupGetter<ILeveledItemGetter> _LeveledItems => _LeveledItems_IsSet ? GroupBinaryWrapper<ILeveledItemGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LeveledItemsLocation.Value.Min, _LeveledItemsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Group<LeveledItem>(this);
        #endregion
        #region Weathers
        private RangeInt64? _WeathersLocation;
        private bool _Weathers_IsSet => _WeathersLocation.HasValue;
        private IGroupGetter<IWeatherGetter> _Weathers => _Weathers_IsSet ? GroupBinaryWrapper<IWeatherGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _WeathersLocation.Value.Min, _WeathersLocation.Value.Max)), _package) : default;
        public IGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new Group<Weather>(this);
        #endregion
        #region Climates
        private RangeInt64? _ClimatesLocation;
        private bool _Climates_IsSet => _ClimatesLocation.HasValue;
        private IGroupGetter<IClimateGetter> _Climates => _Climates_IsSet ? GroupBinaryWrapper<IClimateGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _ClimatesLocation.Value.Min, _ClimatesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IClimateGetter> Climates => _Climates ?? new Group<Climate>(this);
        #endregion
        #region Regions
        private RangeInt64? _RegionsLocation;
        private bool _Regions_IsSet => _RegionsLocation.HasValue;
        private IGroupGetter<IRegionGetter> _Regions => _Regions_IsSet ? GroupBinaryWrapper<IRegionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _RegionsLocation.Value.Min, _RegionsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IRegionGetter> Regions => _Regions ?? new Group<Region>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private bool _Cells_IsSet => _CellsLocation.HasValue;
        private IListGroupGetter<ICellBlockGetter> _Cells => _Cells_IsSet ? ListGroupBinaryWrapper<ICellBlockGetter>.ListGroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _CellsLocation.Value.Min, _CellsLocation.Value.Max)), _package) : default;
        public IListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new ListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private RangeInt64? _WorldspacesLocation;
        private bool _Worldspaces_IsSet => _WorldspacesLocation.HasValue;
        private IGroupGetter<IWorldspaceGetter> _Worldspaces => _Worldspaces_IsSet ? GroupBinaryWrapper<IWorldspaceGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _WorldspacesLocation.Value.Min, _WorldspacesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new Group<Worldspace>(this);
        #endregion
        #region DialogTopics
        private RangeInt64? _DialogTopicsLocation;
        private bool _DialogTopics_IsSet => _DialogTopicsLocation.HasValue;
        private IGroupGetter<IDialogTopicGetter> _DialogTopics => _DialogTopics_IsSet ? GroupBinaryWrapper<IDialogTopicGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _DialogTopicsLocation.Value.Min, _DialogTopicsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new Group<DialogTopic>(this);
        #endregion
        #region Quests
        private RangeInt64? _QuestsLocation;
        private bool _Quests_IsSet => _QuestsLocation.HasValue;
        private IGroupGetter<IQuestGetter> _Quests => _Quests_IsSet ? GroupBinaryWrapper<IQuestGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _QuestsLocation.Value.Min, _QuestsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IQuestGetter> Quests => _Quests ?? new Group<Quest>(this);
        #endregion
        #region IdleAnimations
        private RangeInt64? _IdleAnimationsLocation;
        private bool _IdleAnimations_IsSet => _IdleAnimationsLocation.HasValue;
        private IGroupGetter<IIdleAnimationGetter> _IdleAnimations => _IdleAnimations_IsSet ? GroupBinaryWrapper<IIdleAnimationGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _IdleAnimationsLocation.Value.Min, _IdleAnimationsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new Group<IdleAnimation>(this);
        #endregion
        #region AIPackages
        private RangeInt64? _AIPackagesLocation;
        private bool _AIPackages_IsSet => _AIPackagesLocation.HasValue;
        private IGroupGetter<IAIPackageGetter> _AIPackages => _AIPackages_IsSet ? GroupBinaryWrapper<IAIPackageGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _AIPackagesLocation.Value.Min, _AIPackagesLocation.Value.Max)), _package) : default;
        public IGroupGetter<IAIPackageGetter> AIPackages => _AIPackages ?? new Group<AIPackage>(this);
        #endregion
        #region CombatStyles
        private RangeInt64? _CombatStylesLocation;
        private bool _CombatStyles_IsSet => _CombatStylesLocation.HasValue;
        private IGroupGetter<ICombatStyleGetter> _CombatStyles => _CombatStyles_IsSet ? GroupBinaryWrapper<ICombatStyleGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _CombatStylesLocation.Value.Min, _CombatStylesLocation.Value.Max)), _package) : default;
        public IGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new Group<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private RangeInt64? _LoadScreensLocation;
        private bool _LoadScreens_IsSet => _LoadScreensLocation.HasValue;
        private IGroupGetter<ILoadScreenGetter> _LoadScreens => _LoadScreens_IsSet ? GroupBinaryWrapper<ILoadScreenGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LoadScreensLocation.Value.Min, _LoadScreensLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new Group<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private RangeInt64? _LeveledSpellsLocation;
        private bool _LeveledSpells_IsSet => _LeveledSpellsLocation.HasValue;
        private IGroupGetter<ILeveledSpellGetter> _LeveledSpells => _LeveledSpells_IsSet ? GroupBinaryWrapper<ILeveledSpellGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _LeveledSpellsLocation.Value.Min, _LeveledSpellsLocation.Value.Max)), _package) : default;
        public IGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new Group<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private RangeInt64? _AnimatedObjectsLocation;
        private bool _AnimatedObjects_IsSet => _AnimatedObjectsLocation.HasValue;
        private IGroupGetter<IAnimatedObjectGetter> _AnimatedObjects => _AnimatedObjects_IsSet ? GroupBinaryWrapper<IAnimatedObjectGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _AnimatedObjectsLocation.Value.Min, _AnimatedObjectsLocation.Value.Max)), _package) : default;
        public IGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new Group<AnimatedObject>(this);
        #endregion
        #region Waters
        private RangeInt64? _WatersLocation;
        private bool _Waters_IsSet => _WatersLocation.HasValue;
        private IGroupGetter<IWaterGetter> _Waters => _Waters_IsSet ? GroupBinaryWrapper<IWaterGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _WatersLocation.Value.Min, _WatersLocation.Value.Max)), _package) : default;
        public IGroupGetter<IWaterGetter> Waters => _Waters ?? new Group<Water>(this);
        #endregion
        #region EffectShaders
        private RangeInt64? _EffectShadersLocation;
        private bool _EffectShaders_IsSet => _EffectShadersLocation.HasValue;
        private IGroupGetter<IEffectShaderGetter> _EffectShaders => _EffectShaders_IsSet ? GroupBinaryWrapper<IEffectShaderGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryWrapper.LockExtractMemory(_data, _EffectShadersLocation.Value.Min, _EffectShadersLocation.Value.Max)), _package) : default;
        public IGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new Group<EffectShader>(this);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            long finalPos,
            int offset);

        protected OblivionModBinaryWrapper(
            IBinaryReadStream stream,
            ModKey modKey)
        {
            this.ModKey = modKey;
            this._data = stream;
        }

        public static OblivionModBinaryWrapper OblivionModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey)
        {
            return OblivionModFactory(
                stream: new BinaryMemoryReadStream(data),
                modKey: modKey);
        }

        public static OblivionModBinaryWrapper OblivionModFactory(
            IBinaryReadStream stream,
            ModKey modKey)
        {
            var ret = new OblivionModBinaryWrapper(
                stream: stream,
                modKey: modKey);
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            BinaryWrapper.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            UtilityTranslation.FillEdidLinkCache<IMagicEffectGetter>(
                mod: ret,
                recordType: MagicEffect_Registration.MGEF_HEADER,
                package: ret._package);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MasterReferences = new MasterReferences(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                                 FileSize_IsSet = master.FileSize_IsSet
                            })
                            .ToList(),
                        this.ModKey);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.GameSettings);
                }
                case 0x424F4C47: // GLOB
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Factions);
                }
                case 0x52494148: // HAIR
                {
                    _HairsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Hairs);
                }
                case 0x53455945: // EYES
                {
                    _EyesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Eyes);
                }
                case 0x45434152: // RACE
                {
                    _RacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Races);
                }
                case 0x4E554F53: // SOUN
                {
                    _SoundsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Sounds);
                }
                case 0x4C494B53: // SKIL
                {
                    _SkillsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Skills);
                }
                case 0x4645474D: // MGEF
                {
                    _MagicEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.MagicEffects);
                }
                case 0x54504353: // SCPT
                {
                    _ScriptsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Scripts);
                }
                case 0x5845544C: // LTEX
                {
                    _LandTexturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LandTextures);
                }
                case 0x48434E45: // ENCH
                {
                    _EnchantmentsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Enchantments);
                }
                case 0x4C455053: // SPEL
                {
                    _SpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Spells);
                }
                case 0x4E475342: // BSGN
                {
                    _BirthsignsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Birthsigns);
                }
                case 0x49544341: // ACTI
                {
                    _ActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Activators);
                }
                case 0x41505041: // APPA
                {
                    _AlchemicalApparatusLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                }
                case 0x4F4D5241: // ARMO
                {
                    _ArmorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Armors);
                }
                case 0x4B4F4F42: // BOOK
                {
                    _BooksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Books);
                }
                case 0x544F4C43: // CLOT
                {
                    _ClothesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Clothes);
                }
                case 0x544E4F43: // CONT
                {
                    _ContainersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Containers);
                }
                case 0x524F4F44: // DOOR
                {
                    _DoorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Doors);
                }
                case 0x52474E49: // INGR
                {
                    _IngredientsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ingredients);
                }
                case 0x4847494C: // LIGH
                {
                    _LightsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Lights);
                }
                case 0x4353494D: // MISC
                {
                    _MiscellaneousLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Miscellaneous);
                }
                case 0x54415453: // STAT
                {
                    _StaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Statics);
                }
                case 0x53415247: // GRAS
                {
                    _GrassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Grasses);
                }
                case 0x45455254: // TREE
                {
                    _TreesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Trees);
                }
                case 0x524F4C46: // FLOR
                {
                    _FloraLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Flora);
                }
                case 0x4E525546: // FURN
                {
                    _FurnatureLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Furnature);
                }
                case 0x50414557: // WEAP
                {
                    _WeaponsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weapons);
                }
                case 0x4F4D4D41: // AMMO
                {
                    _AmmoLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Ammo);
                }
                case 0x5F43504E: // NPC_
                {
                    _NPCsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.NPCs);
                }
                case 0x41455243: // CREA
                {
                    _CreaturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Creatures);
                }
                case 0x434C564C: // LVLC
                {
                    _LeveledCreaturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledCreatures);
                }
                case 0x4D474C53: // SLGM
                {
                    _SoulGemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SoulGems);
                }
                case 0x4D59454B: // KEYM
                {
                    _KeysLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Keys);
                }
                case 0x48434C41: // ALCH
                {
                    _PotionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Potions);
                }
                case 0x50534253: // SBSP
                {
                    _SubspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Subspaces);
                }
                case 0x54534753: // SGST
                {
                    _SigilStonesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.SigilStones);
                }
                case 0x494C564C: // LVLI
                {
                    _LeveledItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledItems);
                }
                case 0x52485457: // WTHR
                {
                    _WeathersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Weathers);
                }
                case 0x544D4C43: // CLMT
                {
                    _ClimatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Climates);
                }
                case 0x4E474552: // REGN
                {
                    _RegionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Regions);
                }
                case 0x4C4C4543: // CELL
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Cells);
                }
                case 0x444C5257: // WRLD
                {
                    _WorldspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Worldspaces);
                }
                case 0x4C414944: // DIAL
                {
                    _DialogTopicsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.DialogTopics);
                }
                case 0x54535551: // QUST
                {
                    _QuestsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Quests);
                }
                case 0x454C4449: // IDLE
                {
                    _IdleAnimationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.IdleAnimations);
                }
                case 0x4B434150: // PACK
                {
                    _AIPackagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AIPackages);
                }
                case 0x59545343: // CSTY
                {
                    _CombatStylesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.CombatStyles);
                }
                case 0x5243534C: // LSCR
                {
                    _LoadScreensLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LoadScreens);
                }
                case 0x5053564C: // LVSP
                {
                    _LeveledSpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.LeveledSpells);
                }
                case 0x4F494E41: // ANIO
                {
                    _AnimatedObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.AnimatedObjects);
                }
                case 0x52544157: // WATR
                {
                    _WatersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.Waters);
                }
                case 0x48534645: // EFSH
                {
                    _EffectShadersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)OblivionMod_FieldIndex.EffectShaders);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

}
#endregion

#endregion

