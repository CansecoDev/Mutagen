/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AlternateTexture :
        IAlternateTexture,
        ILoquiObjectSetter<AlternateTexture>,
        IEquatable<AlternateTexture>,
        IEqualsMask
    {
        #region Ctor
        public AlternateTexture()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; }
        #endregion
        #region NexTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<TextureSet> _NexTexture = new FormIDLink<TextureSet>();
        public IFormIDLink<TextureSet> NexTexture => this._NexTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<ITextureSetGetter> IAlternateTextureGetter.NexTexture => this.NexTexture;
        #endregion
        #region Index
        public Int32 Index { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AlternateTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IAlternateTextureGetter rhs)) return false;
            return ((AlternateTextureCommon)((IAlternateTextureGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(AlternateTexture obj)
        {
            return ((AlternateTextureCommon)((IAlternateTextureGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((AlternateTextureCommon)((IAlternateTextureGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AlternateTextureXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AlternateTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AlternateTexture CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AlternateTexture CreateFromXml(
            XElement node,
            out AlternateTexture_ErrorMask errorMask,
            bool doMasks = true,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AlternateTexture_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AlternateTexture CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new AlternateTexture() : null;
                    break;
                default:
                    break;
            }
            var ret = new AlternateTexture();
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AlternateTexture CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AlternateTexture CreateFromXml(
            string path,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlternateTexture CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AlternateTexture CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static AlternateTexture CreateFromXml(
            Stream stream,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlternateTexture CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AlternateTexture_FieldIndex)index)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => AlternateTextureCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AlternateTextureBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((AlternateTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AlternateTexture CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static AlternateTexture CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new AlternateTexture();
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlternateTextureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static AlternateTexture GetNew()
        {
            return new AlternateTexture();
        }

    }
    #endregion

    #region Interface
    public partial interface IAlternateTexture :
        IAlternateTextureGetter,
        ILoquiObjectSetter<IAlternateTexture>
    {
        new String Name { get; set; }

        new IFormIDLink<TextureSet> NexTexture { get; }
        new Int32 Index { get; set; }

    }

    public partial interface IAlternateTextureGetter :
        ILoquiObject,
        ILoquiObject<IAlternateTextureGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Name
        String Name { get; }

        #endregion
        #region NexTexture
        IFormIDLinkGetter<ITextureSetGetter> NexTexture { get; }
        #endregion
        #region Index
        Int32 Index { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class AlternateTextureMixIn
    {
        public static void Clear(this IAlternateTexture item)
        {
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static AlternateTexture_Mask<bool> GetEqualsMask(
            this IAlternateTextureGetter item,
            IAlternateTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAlternateTextureGetter item,
            string name = null,
            AlternateTexture_Mask<bool> printMask = null)
        {
            return ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAlternateTextureGetter item,
            FileGeneration fg,
            string name = null,
            AlternateTexture_Mask<bool> printMask = null)
        {
            ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAlternateTextureGetter item,
            AlternateTexture_Mask<bool?> checkMask)
        {
            return ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AlternateTexture_Mask<bool> GetHasBeenSetMask(this IAlternateTextureGetter item)
        {
            var ret = new AlternateTexture_Mask<bool>();
            ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAlternateTextureGetter item,
            IAlternateTextureGetter rhs)
        {
            return ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IAlternateTexture lhs,
            IAlternateTextureGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IAlternateTexture lhs,
            IAlternateTextureGetter rhs,
            AlternateTexture_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IAlternateTexture lhs,
            IAlternateTextureGetter rhs,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AlternateTextureSetterTranslationCommon)((IAlternateTextureGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AlternateTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IAlternateTexture lhs,
            IAlternateTextureGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((AlternateTextureSetterTranslationCommon)((IAlternateTextureGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AlternateTexture DeepCopy(
            this IAlternateTextureGetter item,
            AlternateTexture_TranslationMask copyMask = null)
        {
            return ((AlternateTextureSetterTranslationCommon)((IAlternateTextureGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AlternateTexture DeepCopy(
            this IAlternateTextureGetter item,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask copyMask = null)
        {
            return ((AlternateTextureSetterTranslationCommon)((IAlternateTextureGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AlternateTexture DeepCopy(
            this IAlternateTextureGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((AlternateTextureSetterTranslationCommon)((IAlternateTextureGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlternateTexture item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlternateTexture item,
            XElement node,
            out AlternateTexture_ErrorMask errorMask,
            bool doMasks = true,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AlternateTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            string path,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            string path,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            string path,
            ErrorMaskBuilder errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            AlternateTexture_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            Stream stream,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlternateTexture item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAlternateTexture item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAlternateTexture item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((AlternateTextureSetterCommon)((IAlternateTextureGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AlternateTexture_FieldIndex
    {
        Name = 0,
        NexTexture = 1,
        Index = 2,
    }
    #endregion

    #region Registration
    public partial class AlternateTexture_Registration : ILoquiRegistration
    {
        public static readonly AlternateTexture_Registration Instance = new AlternateTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 43,
            version: 0);

        public const string GUID = "8001a465-c267-45ee-81b5-a51613668e74";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(AlternateTexture_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlternateTexture_ErrorMask);

        public static readonly Type ClassType = typeof(AlternateTexture);

        public static readonly Type GetterType = typeof(IAlternateTextureGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAlternateTexture);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.AlternateTexture";

        public const string Name = "AlternateTexture";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)AlternateTexture_FieldIndex.Name;
                case "NEXTEXTURE":
                    return (ushort)AlternateTexture_FieldIndex.NexTexture;
                case "INDEX":
                    return (ushort)AlternateTexture_FieldIndex.Index;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                    return "Name";
                case AlternateTexture_FieldIndex.NexTexture:
                    return "NexTexture";
                case AlternateTexture_FieldIndex.Index:
                    return "Index";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                case AlternateTexture_FieldIndex.NexTexture:
                case AlternateTexture_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                    return typeof(String);
                case AlternateTexture_FieldIndex.NexTexture:
                    return typeof(IFormIDLink<TextureSet>);
                case AlternateTexture_FieldIndex.Index:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AlternateTextureXmlWriteTranslation);
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(AlternateTextureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AlternateTextureSetterCommon
    {
        public static readonly AlternateTextureSetterCommon Instance = new AlternateTextureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAlternateTexture item)
        {
            ClearPartial();
            item.Name = default(String);
            item.NexTexture.Unset();
            item.Index = default(Int32);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IAlternateTexture item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AlternateTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IAlternateTexture item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                frame: frame,
                parseWhole: true);
            item.NexTexture.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.NULL);
            item.Index = frame.ReadInt32();
        }
        
        public void CopyInFromBinary(
            IAlternateTexture item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AlternateTextureCommon
    {
        public static readonly AlternateTextureCommon Instance = new AlternateTextureCommon();

        public AlternateTexture_Mask<bool> GetEqualsMask(
            IAlternateTextureGetter item,
            IAlternateTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AlternateTexture_Mask<bool>();
            ((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAlternateTextureGetter item,
            IAlternateTextureGetter rhs,
            AlternateTexture_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.NexTexture = object.Equals(item.NexTexture, rhs.NexTexture);
            ret.Index = item.Index == rhs.Index;
        }
        
        public string ToString(
            IAlternateTextureGetter item,
            string name = null,
            AlternateTexture_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAlternateTextureGetter item,
            FileGeneration fg,
            string name = null,
            AlternateTexture_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AlternateTexture =>");
            }
            else
            {
                fg.AppendLine($"{name} (AlternateTexture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAlternateTextureGetter item,
            FileGeneration fg,
            AlternateTexture_Mask<bool> printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.NexTexture ?? true)
            {
                fg.AppendLine($"NexTexture => {item.NexTexture}");
            }
            if (printMask?.Index ?? true)
            {
                fg.AppendLine($"Index => {item.Index}");
            }
        }
        
        public bool HasBeenSet(
            IAlternateTextureGetter item,
            AlternateTexture_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IAlternateTextureGetter item,
            AlternateTexture_Mask<bool> mask)
        {
            mask.Name = true;
            mask.NexTexture = true;
            mask.Index = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAlternateTextureGetter lhs,
            IAlternateTextureGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.NexTexture.Equals(rhs.NexTexture)) return false;
            if (lhs.Index != rhs.Index) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAlternateTextureGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Name).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NexTexture).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Index).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AlternateTexture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAlternateTextureGetter obj)
        {
            yield return obj.NexTexture;
            yield break;
        }
        
        #endregion
        
    }
    public partial class AlternateTextureSetterTranslationCommon
    {
        public static readonly AlternateTextureSetterTranslationCommon Instance = new AlternateTextureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IAlternateTexture item,
            IAlternateTextureGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.NexTexture) ?? true))
            {
                item.NexTexture.FormKey = rhs.NexTexture.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
        }
        
        #endregion
        
        public AlternateTexture DeepCopy(
            IAlternateTextureGetter item,
            AlternateTexture_TranslationMask copyMask = null)
        {
            AlternateTexture ret = (AlternateTexture)((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AlternateTexture DeepCopy(
            IAlternateTextureGetter item,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask copyMask = null)
        {
            AlternateTexture ret = (AlternateTexture)((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AlternateTexture DeepCopy(
            IAlternateTextureGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            AlternateTexture ret = (AlternateTexture)((AlternateTextureCommon)((IAlternateTextureGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AlternateTexture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlternateTexture_Registration.Instance;
        public static AlternateTexture_Registration Registration => AlternateTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AlternateTextureCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AlternateTextureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AlternateTextureSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlternateTextureXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static AlternateTextureXmlWriteTranslation Instance = new AlternateTextureXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAlternateTextureGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)AlternateTexture_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.NexTexture) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NexTexture),
                    item: item.NexTexture?.FormKey,
                    fieldIndex: (int)AlternateTexture_FieldIndex.NexTexture,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AlternateTexture_FieldIndex.Index) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index,
                    fieldIndex: (int)AlternateTexture_FieldIndex.Index,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAlternateTextureGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.AlternateTexture");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.AlternateTexture");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IAlternateTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IAlternateTextureGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IAlternateTextureGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class AlternateTextureXmlCreateTranslation
    {
        public readonly static AlternateTextureXmlCreateTranslation Instance = new AlternateTextureXmlCreateTranslation();

        public static void FillPublicXml(
            IAlternateTexture item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AlternateTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAlternateTexture item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)AlternateTexture_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NexTexture":
                    try
                    {
                        errorMask?.PushIndex((int)AlternateTexture_FieldIndex.NexTexture);
                        item.NexTexture.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            defaultVal: FormKey.NULL);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Index":
                    try
                    {
                        errorMask?.PushIndex((int)AlternateTexture_FieldIndex.Index);
                        item.Index = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class AlternateTextureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAlternateTextureGetter item,
            XElement node,
            out AlternateTexture_ErrorMask errorMask,
            bool doMasks = true,
            AlternateTexture_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((AlternateTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlternateTexture_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            string path,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            Stream stream,
            out AlternateTexture_ErrorMask errorMask,
            AlternateTexture_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((AlternateTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            XElement node,
            string name = null,
            AlternateTexture_TranslationMask translationMask = null)
        {
            ((AlternateTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AlternateTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAlternateTextureGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((AlternateTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class AlternateTexture_Mask<T> : IMask<T>, IEquatable<AlternateTexture_Mask<T>>
    {
        #region Ctors
        public AlternateTexture_Mask()
        {
        }

        public AlternateTexture_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.NexTexture = initialValue;
            this.Index = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        public T NexTexture;
        public T Index;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AlternateTexture_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlternateTexture_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.NexTexture, rhs.NexTexture)) return false;
            if (!object.Equals(this.Index, rhs.Index)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.NexTexture?.GetHashCode());
            ret = ret.CombineHashCode(this.Index?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Name)) return false;
            if (!eval(this.NexTexture)) return false;
            if (!eval(this.Index)) return false;
            return true;
        }
        #endregion

        #region Translate
        public AlternateTexture_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AlternateTexture_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AlternateTexture_Mask<R> obj, Func<T, R> eval)
        {
            obj.Name = eval(this.Name);
            obj.NexTexture = eval(this.NexTexture);
            obj.Index = eval(this.Index);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AlternateTexture_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AlternateTexture_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AlternateTexture_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.NexTexture ?? true)
                {
                    fg.AppendLine($"NexTexture => {NexTexture}");
                }
                if (printMask?.Index ?? true)
                {
                    fg.AppendLine($"Index => {Index}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AlternateTexture_ErrorMask : IErrorMask, IErrorMask<AlternateTexture_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Name;
        public Exception NexTexture;
        public Exception Index;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                    return Name;
                case AlternateTexture_FieldIndex.NexTexture:
                    return NexTexture;
                case AlternateTexture_FieldIndex.Index:
                    return Index;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case AlternateTexture_FieldIndex.NexTexture:
                    this.NexTexture = ex;
                    break;
                case AlternateTexture_FieldIndex.Index:
                    this.Index = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AlternateTexture_FieldIndex enu = (AlternateTexture_FieldIndex)index;
            switch (enu)
            {
                case AlternateTexture_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case AlternateTexture_FieldIndex.NexTexture:
                    this.NexTexture = (Exception)obj;
                    break;
                case AlternateTexture_FieldIndex.Index:
                    this.Index = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (NexTexture != null) return true;
            if (Index != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AlternateTexture_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"NexTexture => {NexTexture}");
            fg.AppendLine($"Index => {Index}");
        }
        #endregion

        #region Combine
        public AlternateTexture_ErrorMask Combine(AlternateTexture_ErrorMask rhs)
        {
            var ret = new AlternateTexture_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.NexTexture = this.NexTexture.Combine(rhs.NexTexture);
            ret.Index = this.Index.Combine(rhs.Index);
            return ret;
        }
        public static AlternateTexture_ErrorMask Combine(AlternateTexture_ErrorMask lhs, AlternateTexture_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AlternateTexture_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AlternateTexture_ErrorMask();
        }
        #endregion

    }
    public class AlternateTexture_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public bool NexTexture;
        public bool Index;
        #endregion

        #region Ctors
        public AlternateTexture_TranslationMask()
        {
        }

        public AlternateTexture_TranslationMask(bool defaultOn)
        {
            this.Name = defaultOn;
            this.NexTexture = defaultOn;
            this.Index = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Name, null));
            ret.Add((NexTexture, null));
            ret.Add((Index, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlternateTextureBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AlternateTextureBinaryWriteTranslation Instance = new AlternateTextureBinaryWriteTranslation();

        public static void Write_Embedded(
            IAlternateTextureGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                binaryType: StringBinaryType.PrependLength);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NexTexture,
                masterReferences: masterReferences);
            writer.Write(item.Index);
        }

        public void Write(
            MutagenWriter writer,
            IAlternateTextureGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IAlternateTextureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AlternateTextureBinaryCreateTranslation
    {
        public readonly static AlternateTextureBinaryCreateTranslation Instance = new AlternateTextureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AlternateTextureBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAlternateTextureGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((AlternateTextureBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlternateTextureBinaryOverlay :
        BinaryOverlay,
        IAlternateTextureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlternateTexture_Registration.Instance;
        public static AlternateTexture_Registration Registration => AlternateTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AlternateTextureCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AlternateTextureSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAlternateTextureGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlternateTextureGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => AlternateTextureCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AlternateTextureXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((AlternateTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AlternateTextureBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((AlternateTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormIDLinkGetter<ITextureSetGetter> NexTexture => new FormIDLink<ITextureSetGetter>(FormKey.Factory(_package.MasterReferences, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public Int32 Index => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AlternateTextureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AlternateTextureBinaryOverlay AlternateTextureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new AlternateTextureBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 8),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

