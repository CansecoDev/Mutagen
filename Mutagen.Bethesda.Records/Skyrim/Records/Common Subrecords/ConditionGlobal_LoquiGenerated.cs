/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ConditionGlobal :
        Condition,
        IConditionGlobal,
        ILoquiObjectSetter<ConditionGlobal>,
        IEquatable<ConditionGlobal>,
        IEqualsMask
    {
        #region Ctor
        public ConditionGlobal()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ComparisonValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormIDLink<Global> _ComparisonValue = new FormIDLink<Global>();
        public IFormIDLink<Global> ComparisonValue => this._ComparisonValue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormIDLinkGetter<IGlobalGetter> IConditionGlobalGetter.ComparisonValue => this.ComparisonValue;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ConditionGlobalMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IConditionGlobalGetter rhs)) return false;
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ConditionGlobal obj)
        {
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ConditionGlobalCommon)((IConditionGlobalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ConditionGlobalXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConditionGlobalXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ConditionGlobal CreateFromXml(
            XElement node,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ConditionGlobal CreateFromXml(
            XElement node,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConditionGlobal.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ConditionGlobal CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ConditionGlobal();
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ConditionGlobal CreateFromXml(
            string path,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ConditionGlobal CreateFromXml(
            string path,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ConditionGlobal CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ConditionGlobal CreateFromXml(
            Stream stream,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ConditionGlobal CreateFromXml(
            Stream stream,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ConditionGlobal CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            Condition.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.ComparisonValue = initialValue;
                this.Data = new MaskItem<T, ConditionData.Mask<T>?>(initialValue, new ConditionData.Mask<T>(initialValue));
            }

            public Mask(
                T CompareOperator,
                T Flags,
                T Unknown1,
                T ComparisonValue,
                T Data)
            : base(
                CompareOperator: CompareOperator,
                Flags: Flags,
                Unknown1: Unknown1)
            {
                this.ComparisonValue = ComparisonValue;
                this.Data = new MaskItem<T, ConditionData.Mask<T>?>(Data, new ConditionData.Mask<T>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T ComparisonValue;
            public MaskItem<T, ConditionData.Mask<T>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ComparisonValue, rhs.ComparisonValue)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.ComparisonValue?.GetHashCode());
                ret = ret.CombineHashCode(this.Data?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.ComparisonValue)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.AllEqual(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new ConditionGlobal.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ComparisonValue = eval(this.ComparisonValue);
                obj.Data = this.Data == null ? null : new MaskItem<R, ConditionData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ConditionGlobal.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ConditionGlobal.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ConditionGlobal.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ComparisonValue ?? true)
                    {
                        fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Condition.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ComparisonValue;
            public MaskItem<Exception?, ConditionData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
                switch (enu)
                {
                    case ConditionGlobal_FieldIndex.ComparisonValue:
                        return ComparisonValue;
                    case ConditionGlobal_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
                switch (enu)
                {
                    case ConditionGlobal_FieldIndex.ComparisonValue:
                        this.ComparisonValue = ex;
                        break;
                    case ConditionGlobal_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ConditionData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
                switch (enu)
                {
                    case ConditionGlobal_FieldIndex.ComparisonValue:
                        this.ComparisonValue = (Exception)obj;
                        break;
                    case ConditionGlobal_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ConditionData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ComparisonValue != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"ComparisonValue => {ComparisonValue}");
                Data?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ComparisonValue = this.ComparisonValue.Combine(rhs.ComparisonValue);
                ret.Data = new MaskItem<Exception?, ConditionData.ErrorMask?>(ExceptionExt.Combine(this.Data?.Overall, rhs.Data?.Overall), (this.Data?.Specific as IErrorMask<ConditionData.ErrorMask>)?.Combine(rhs.Data?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Condition.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ComparisonValue;
            public MaskItem<bool, ConditionData.TranslationMask?> Data;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ComparisonValue = defaultOn;
                this.Data = new MaskItem<bool, ConditionData.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ComparisonValue, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ConditionGlobal_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => ConditionGlobalCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConditionGlobalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionGlobalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new ConditionGlobal CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static ConditionGlobal CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new ConditionGlobal();
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGlobalGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ConditionGlobal GetNew()
        {
            return new ConditionGlobal();
        }

    }
    #endregion

    #region Interface
    public partial interface IConditionGlobal :
        IConditionGlobalGetter,
        ICondition,
        ILoquiObjectSetter<IConditionGlobal>
    {
        new IFormIDLink<Global> ComparisonValue { get; }
        new ConditionData Data { get; set; }
    }

    public partial interface IConditionGlobalGetter :
        IConditionGetter,
        ILoquiObject<IConditionGlobalGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IFormIDLinkGetter<IGlobalGetter> ComparisonValue { get; }
        IConditionDataGetter Data { get; }

    }

    #endregion

    #region Common MixIn
    public static class ConditionGlobalMixIn
    {
        public static void Clear(this IConditionGlobal item)
        {
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ConditionGlobal.Mask<bool> GetEqualsMask(
            this IConditionGlobalGetter item,
            IConditionGlobalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IConditionGlobalGetter item,
            string? name = null,
            ConditionGlobal.Mask<bool>? printMask = null)
        {
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IConditionGlobalGetter item,
            FileGeneration fg,
            string? name = null,
            ConditionGlobal.Mask<bool>? printMask = null)
        {
            ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IConditionGlobalGetter item,
            ConditionGlobal.Mask<bool?> checkMask)
        {
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ConditionGlobal.Mask<bool> GetHasBeenSetMask(this IConditionGlobalGetter item)
        {
            var ret = new ConditionGlobal.Mask<bool>(false);
            ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IConditionGlobalGetter item,
            IConditionGlobalGetter rhs)
        {
            return ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IConditionGlobal lhs,
            IConditionGlobalGetter rhs,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionGlobalSetterTranslationCommon)((IConditionGlobalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ConditionGlobal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IConditionGlobal lhs,
            IConditionGlobalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConditionGlobalSetterTranslationCommon)((IConditionGlobalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ConditionGlobal DeepCopy(
            this IConditionGlobalGetter item,
            ConditionGlobal.TranslationMask? copyMask = null)
        {
            return ((ConditionGlobalSetterTranslationCommon)((IConditionGlobalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ConditionGlobal DeepCopy(
            this IConditionGlobalGetter item,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? copyMask = null)
        {
            return ((ConditionGlobalSetterTranslationCommon)((IConditionGlobalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ConditionGlobal DeepCopy(
            this IConditionGlobalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConditionGlobalSetterTranslationCommon)((IConditionGlobalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IConditionGlobal item,
            XElement node,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IConditionGlobal item,
            XElement node,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConditionGlobal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            string path,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            string path,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            string path,
            ErrorMaskBuilder? errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            Stream stream,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            Stream stream,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConditionGlobal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ConditionGlobal.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IConditionGlobal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IConditionGlobal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionGlobalSetterCommon)((IConditionGlobalGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ConditionGlobal_FieldIndex
    {
        CompareOperator = 0,
        Flags = 1,
        Unknown1 = 2,
        ComparisonValue = 3,
        Data = 4,
    }
    #endregion

    #region Registration
    public partial class ConditionGlobal_Registration : ILoquiRegistration
    {
        public static readonly ConditionGlobal_Registration Instance = new ConditionGlobal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 37,
            version: 0);

        public const string GUID = "cafedc3d-b9cf-4eb9-92fc-dd38838b19ce";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ConditionGlobal.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ConditionGlobal.ErrorMask);

        public static readonly Type ClassType = typeof(ConditionGlobal);

        public static readonly Type GetterType = typeof(IConditionGlobalGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IConditionGlobal);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ConditionGlobal";

        public const string Name = "ConditionGlobal";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPARISONVALUE":
                    return (ushort)ConditionGlobal_FieldIndex.ComparisonValue;
                case "DATA":
                    return (ushort)ConditionGlobal_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                case ConditionGlobal_FieldIndex.Data:
                    return false;
                default:
                    return Condition_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.Data:
                    return true;
                case ConditionGlobal_FieldIndex.ComparisonValue:
                    return false;
                default:
                    return Condition_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                case ConditionGlobal_FieldIndex.Data:
                    return false;
                default:
                    return Condition_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                    return "ComparisonValue";
                case ConditionGlobal_FieldIndex.Data:
                    return "Data";
                default:
                    return Condition_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                case ConditionGlobal_FieldIndex.Data:
                    return false;
                default:
                    return Condition_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                case ConditionGlobal_FieldIndex.Data:
                    return false;
                default:
                    return Condition_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ConditionGlobal_FieldIndex enu = (ConditionGlobal_FieldIndex)index;
            switch (enu)
            {
                case ConditionGlobal_FieldIndex.ComparisonValue:
                    return typeof(IFormIDLink<Global>);
                case ConditionGlobal_FieldIndex.Data:
                    return typeof(ConditionData);
                default:
                    return Condition_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ConditionGlobalXmlWriteTranslation);
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CTDA_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ConditionGlobalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ConditionGlobalSetterCommon : ConditionSetterCommon
    {
        public new static readonly ConditionGlobalSetterCommon Instance = new ConditionGlobalSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IConditionGlobal item)
        {
            ClearPartial();
            item.ComparisonValue.Unset();
            item.Data.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ICondition item)
        {
            Clear(item: (IConditionGlobal)item);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IConditionGlobal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionGlobalXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IConditionGlobal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            ConditionSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
            item.ComparisonValue.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            ConditionGlobalBinaryCreateTranslation.FillBinaryDataCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }
        
        public void CopyInFromBinary(
            IConditionGlobal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ConditionGlobal_Registration.CTDA_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            ConditionGlobalBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item,
                masterReferences: masterReferences);
        }
        
        #endregion
        
    }
    public partial class ConditionGlobalCommon : ConditionCommon
    {
        public new static readonly ConditionGlobalCommon Instance = new ConditionGlobalCommon();

        public ConditionGlobal.Mask<bool> GetEqualsMask(
            IConditionGlobalGetter item,
            IConditionGlobalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ConditionGlobal.Mask<bool>(false);
            ((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConditionGlobalGetter item,
            IConditionGlobalGetter rhs,
            ConditionGlobal.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ComparisonValue = object.Equals(item.ComparisonValue, rhs.ComparisonValue);
            ret.Data = MaskItemExt.Factory(item.Data.GetEqualsMask(rhs.Data, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IConditionGlobalGetter item,
            string? name = null,
            ConditionGlobal.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IConditionGlobalGetter item,
            FileGeneration fg,
            string? name = null,
            ConditionGlobal.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ConditionGlobal =>");
            }
            else
            {
                fg.AppendLine($"{name} (ConditionGlobal) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IConditionGlobalGetter item,
            FileGeneration fg,
            ConditionGlobal.Mask<bool>? printMask = null)
        {
            ConditionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ComparisonValue ?? true)
            {
                fg.AppendLine($"ComparisonValue => {item.ComparisonValue}");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                item.Data?.ToString(fg, "Data");
            }
        }
        
        public bool HasBeenSet(
            IConditionGlobalGetter item,
            ConditionGlobal.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IConditionGlobalGetter item,
            ConditionGlobal.Mask<bool> mask)
        {
            mask.ComparisonValue = true;
            mask.Data = new MaskItem<bool, ConditionData.Mask<bool>?>(true, item.Data?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ConditionGlobal_FieldIndex ConvertFieldIndex(Condition_FieldIndex index)
        {
            switch (index)
            {
                case Condition_FieldIndex.CompareOperator:
                    return (ConditionGlobal_FieldIndex)((int)index);
                case Condition_FieldIndex.Flags:
                    return (ConditionGlobal_FieldIndex)((int)index);
                case Condition_FieldIndex.Unknown1:
                    return (ConditionGlobal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConditionGlobalGetter? lhs,
            IConditionGlobalGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.ComparisonValue.Equals(rhs.ComparisonValue)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            return true;
        }
        
        public override bool Equals(
            IConditionGetter? lhs,
            IConditionGetter? rhs)
        {
            return Equals(
                lhs: (IConditionGlobalGetter?)lhs,
                rhs: rhs as IConditionGlobalGetter);
        }
        
        public virtual int GetHashCode(IConditionGlobalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ComparisonValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Data).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IConditionGetter item)
        {
            return GetHashCode(item: (IConditionGlobalGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ConditionGlobal.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IConditionGlobalGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.ComparisonValue;
            if (obj.Data is ILinkContainer DatalinkCont)
            {
                foreach (var item in DatalinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ConditionGlobalSetterTranslationCommon : ConditionSetterTranslationCommon
    {
        public new static readonly ConditionGlobalSetterTranslationCommon Instance = new ConditionGlobalSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IConditionGlobal item,
            IConditionGlobalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ConditionGlobal_FieldIndex.ComparisonValue) ?? true))
            {
                item.ComparisonValue.FormKey = rhs.ComparisonValue.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)ConditionGlobal_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)ConditionGlobal_FieldIndex.Data);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ConditionGlobal_FieldIndex.Data) ?? true))
                    {
                        item.Data = rhs.Data.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ConditionGlobal_FieldIndex.Data),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            ICondition item,
            IConditionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IConditionGlobal)item,
                rhs: (IConditionGlobalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ConditionGlobal DeepCopy(
            IConditionGlobalGetter item,
            ConditionGlobal.TranslationMask? copyMask = null)
        {
            ConditionGlobal ret = (ConditionGlobal)((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ConditionGlobal DeepCopy(
            IConditionGlobalGetter item,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? copyMask = null)
        {
            ConditionGlobal ret = (ConditionGlobal)((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ConditionGlobal DeepCopy(
            IConditionGlobalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ConditionGlobal ret = (ConditionGlobal)((ConditionGlobalCommon)((IConditionGlobalGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ConditionGlobal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConditionGlobal_Registration.Instance;
        public new static ConditionGlobal_Registration Registration => ConditionGlobal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConditionGlobalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ConditionGlobalSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConditionGlobalSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConditionGlobalXmlWriteTranslation :
        ConditionXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ConditionGlobalXmlWriteTranslation Instance = new ConditionGlobalXmlWriteTranslation();

        public static void WriteToNodeXml(
            IConditionGlobalGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ConditionXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)ConditionGlobal_FieldIndex.ComparisonValue) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ComparisonValue),
                    item: item.ComparisonValue.FormKey,
                    fieldIndex: (int)ConditionGlobal_FieldIndex.ComparisonValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ConditionGlobal_FieldIndex.Data) ?? true))
            {
                var loquiItem = item.Data;
                ((ConditionDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Data),
                    fieldIndex: (int)ConditionGlobal_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ConditionGlobal_FieldIndex.Data));
            }
        }

        public void Write(
            XElement node,
            IConditionGlobalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ConditionGlobal");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ConditionGlobal");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConditionGlobalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IConditionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConditionGlobalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ConditionGlobalXmlCreateTranslation : ConditionXmlCreateTranslation
    {
        public new readonly static ConditionGlobalXmlCreateTranslation Instance = new ConditionGlobalXmlCreateTranslation();

        public static void FillPublicXml(
            IConditionGlobal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConditionGlobalXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IConditionGlobal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ComparisonValue":
                    try
                    {
                        errorMask?.PushIndex((int)ConditionGlobal_FieldIndex.ComparisonValue);
                        item.ComparisonValue.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    try
                    {
                        errorMask?.PushIndex((int)ConditionGlobal_FieldIndex.Data);
                        item.Data = LoquiXmlTranslation<ConditionData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ConditionGlobal_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ConditionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ConditionGlobalXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IConditionGlobalGetter item,
            XElement node,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ConditionGlobalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConditionGlobal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IConditionGlobalGetter item,
            string path,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConditionGlobalGetter item,
            Stream stream,
            out ConditionGlobal.ErrorMask errorMask,
            ConditionGlobal.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConditionGlobalBinaryWriteTranslation :
        ConditionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ConditionGlobalBinaryWriteTranslation Instance = new ConditionGlobalBinaryWriteTranslation();

        static partial void WriteBinaryDataCustom(
            MutagenWriter writer,
            IConditionGlobalGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryData(
            MutagenWriter writer,
            IConditionGlobalGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryDataCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IConditionGlobalGetter obj,
            MasterReferences masterReferences);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IConditionGlobalGetter obj,
            MasterReferences masterReferences)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj,
                masterReferences: masterReferences);
        }
        public static void Write_Embedded(
            IConditionGlobalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ConditionBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ComparisonValue,
                masterReferences: masterReferences);
            ConditionGlobalBinaryWriteTranslation.WriteBinaryData(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IConditionGlobalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ConditionGlobal_Registration.CTDA_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IConditionGlobalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IConditionGlobalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ConditionGlobalBinaryCreateTranslation : ConditionBinaryCreateTranslation
    {
        public new readonly static ConditionGlobalBinaryCreateTranslation Instance = new ConditionGlobalBinaryCreateTranslation();

        static partial void FillBinaryDataCustom(
            MutagenFrame frame,
            IConditionGlobal item,
            MasterReferences masterReferences);

        public static void FillBinaryDataCustomPublic(
            MutagenFrame frame,
            IConditionGlobal item,
            MasterReferences masterReferences)
        {
            FillBinaryDataCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IConditionGlobal obj,
            MasterReferences masterReferences);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IConditionGlobal obj,
            MasterReferences masterReferences)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj,
                masterReferences: masterReferences);
        }
    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ConditionGlobalBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConditionGlobalBinaryOverlay :
        ConditionBinaryOverlay,
        IConditionGlobalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConditionGlobal_Registration.Instance;
        public new static ConditionGlobal_Registration Registration => ConditionGlobal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConditionGlobalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConditionGlobalSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConditionGlobalGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ConditionGlobalCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ConditionGlobalXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConditionGlobalXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConditionGlobalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ConditionGlobalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormIDLinkGetter<IGlobalGetter> ComparisonValue => new FormIDLink<IGlobalGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        public IConditionDataGetter Data => GetDataCustom(location: 8);
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ConditionGlobalBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ConditionGlobalBinaryOverlay ConditionGlobalFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ConditionGlobalBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            ret.CustomEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

