/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FunctionConditionData :
        ConditionData,
        IFunctionConditionDataInternal,
        ILoquiObjectSetter<FunctionConditionData>,
        IEquatable<FunctionConditionData>,
        IEqualsMask
    {
        #region Ctor
        public FunctionConditionData()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Function
        public UInt16 Function { get; set; }
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; }
        #endregion
        #region ParameterOneRecord
        public IFormIDLink<SkyrimMajorRecord> ParameterOneRecord { get; set; }
        IFormIDLinkGetter<ISkyrimMajorRecordGetter> IFunctionConditionDataGetter.ParameterOneRecord => this.ParameterOneRecord;
        IFormIDLink<SkyrimMajorRecord> IFunctionConditionDataInternal.ParameterOneRecord
        {
            get => this.ParameterOneRecord;
            set => this.ParameterOneRecord = value;
        }
        #endregion
        #region ParameterOneNumber
        public Int32 ParameterOneNumber { get; set; }
        Int32 IFunctionConditionDataInternal.ParameterOneNumber
        {
            get => this.ParameterOneNumber;
            set => this.ParameterOneNumber = value;
        }
        #endregion
        #region ParameterOneString
        public bool ParameterOneString_IsSet
        {
            get => _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterOneString];
            set => _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterOneString] = value;
        }
        bool IFunctionConditionDataGetter.ParameterOneString_IsSet => ParameterOneString_IsSet;
        private String _ParameterOneString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ParameterOneString
        {
            get => this._ParameterOneString;
            set => ParameterOneString_Set(value);
        }
        String IFunctionConditionDataGetter.ParameterOneString => this.ParameterOneString;
        public void ParameterOneString_Set(
            String value,
            bool markSet = true)
        {
            _ParameterOneString = value;
            _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterOneString] = markSet;
        }
        public void ParameterOneString_Unset()
        {
            this.ParameterOneString_Set(default(String), false);
        }
        String IFunctionConditionDataInternal.ParameterOneString
        {
            get => this.ParameterOneString;
            set => this.ParameterOneString = value;
        }
        #endregion
        #region ParameterTwoRecord
        public IFormIDLink<SkyrimMajorRecord> ParameterTwoRecord { get; set; }
        IFormIDLinkGetter<ISkyrimMajorRecordGetter> IFunctionConditionDataGetter.ParameterTwoRecord => this.ParameterTwoRecord;
        IFormIDLink<SkyrimMajorRecord> IFunctionConditionDataInternal.ParameterTwoRecord
        {
            get => this.ParameterTwoRecord;
            set => this.ParameterTwoRecord = value;
        }
        #endregion
        #region ParameterTwoNumber
        public Int32 ParameterTwoNumber { get; set; }
        Int32 IFunctionConditionDataInternal.ParameterTwoNumber
        {
            get => this.ParameterTwoNumber;
            set => this.ParameterTwoNumber = value;
        }
        #endregion
        #region ParameterTwoString
        public bool ParameterTwoString_IsSet
        {
            get => _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterTwoString];
            set => _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterTwoString] = value;
        }
        bool IFunctionConditionDataGetter.ParameterTwoString_IsSet => ParameterTwoString_IsSet;
        private String _ParameterTwoString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ParameterTwoString
        {
            get => this._ParameterTwoString;
            set => ParameterTwoString_Set(value);
        }
        String IFunctionConditionDataGetter.ParameterTwoString => this.ParameterTwoString;
        public void ParameterTwoString_Set(
            String value,
            bool markSet = true)
        {
            _ParameterTwoString = value;
            _hasBeenSetTracker[(int)FunctionConditionData_FieldIndex.ParameterTwoString] = markSet;
        }
        public void ParameterTwoString_Unset()
        {
            this.ParameterTwoString_Set(default(String), false);
        }
        String IFunctionConditionDataInternal.ParameterTwoString
        {
            get => this.ParameterTwoString;
            set => this.ParameterTwoString = value;
        }
        #endregion
        #region Unknown3
        public Int32 Unknown3 { get; set; }
        #endregion
        #region Unknown4
        public Int32 Unknown4 { get; set; }
        #endregion
        #region Unknown5
        public readonly static Int32 _Unknown5_Default = -1;
        public Int32 Unknown5 { get; set; }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FunctionConditionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFunctionConditionDataGetter rhs)) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(FunctionConditionData obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => FunctionConditionDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FunctionConditionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FunctionConditionData CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FunctionConditionData CreateFromXml(
            XElement node,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static FunctionConditionData CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new FunctionConditionData() : null;
                    break;
                default:
                    break;
            }
            var ret = new FunctionConditionData();
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((FunctionConditionData_FieldIndex)index)
            {
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return _hasBeenSetTracker[index];
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public override IEnumerable<ILinkGetter> Links => FunctionConditionDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new FunctionConditionData();
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFunctionConditionDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static FunctionConditionData GetNew()
        {
            return new FunctionConditionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFunctionConditionData :
        IFunctionConditionDataGetter,
        IConditionData,
        ILoquiObjectSetter<IFunctionConditionDataInternal>
    {
        new UInt16 Function { get; set; }

        new UInt16 Unknown2 { get; set; }

        new Int32 Unknown3 { get; set; }

        new Int32 Unknown4 { get; set; }

        new Int32 Unknown5 { get; set; }

    }

    public partial interface IFunctionConditionDataInternal :
        IFunctionConditionData,
        IFunctionConditionDataGetter
    {
        new IFormIDLink<SkyrimMajorRecord> ParameterOneRecord { get; set; }

        new Int32 ParameterOneNumber { get; set; }

        new String ParameterOneString { get; set; }
        new bool ParameterOneString_IsSet { get; set; }
        void ParameterOneString_Set(String value, bool hasBeenSet = true);
        void ParameterOneString_Unset();

        new IFormIDLink<SkyrimMajorRecord> ParameterTwoRecord { get; set; }

        new Int32 ParameterTwoNumber { get; set; }

        new String ParameterTwoString { get; set; }
        new bool ParameterTwoString_IsSet { get; set; }
        void ParameterTwoString_Set(String value, bool hasBeenSet = true);
        void ParameterTwoString_Unset();

    }

    public partial interface IFunctionConditionDataGetter :
        IConditionDataGetter,
        ILoquiObject<IFunctionConditionDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        #region Function
        UInt16 Function { get; }

        #endregion
        #region Unknown2
        UInt16 Unknown2 { get; }

        #endregion
        #region ParameterOneRecord
        IFormIDLinkGetter<ISkyrimMajorRecordGetter> ParameterOneRecord { get; }

        #endregion
        #region ParameterOneNumber
        Int32 ParameterOneNumber { get; }

        #endregion
        #region ParameterOneString
        String ParameterOneString { get; }
        bool ParameterOneString_IsSet { get; }

        #endregion
        #region ParameterTwoRecord
        IFormIDLinkGetter<ISkyrimMajorRecordGetter> ParameterTwoRecord { get; }

        #endregion
        #region ParameterTwoNumber
        Int32 ParameterTwoNumber { get; }

        #endregion
        #region ParameterTwoString
        String ParameterTwoString { get; }
        bool ParameterTwoString_IsSet { get; }

        #endregion
        #region Unknown3
        Int32 Unknown3 { get; }

        #endregion
        #region Unknown4
        Int32 Unknown4 { get; }

        #endregion
        #region Unknown5
        Int32 Unknown5 { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class FunctionConditionDataMixIn
    {
        public static void Clear(this IFunctionConditionDataInternal item)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static FunctionConditionData_Mask<bool> GetEqualsMask(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFunctionConditionDataGetter item,
            string name = null,
            FunctionConditionData_Mask<bool> printMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFunctionConditionDataGetter item,
            FileGeneration fg,
            string name = null,
            FunctionConditionData_Mask<bool> printMask = null)
        {
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFunctionConditionDataGetter item,
            FunctionConditionData_Mask<bool?> checkMask)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FunctionConditionData_Mask<bool> GetHasBeenSetMask(this IFunctionConditionDataGetter item)
        {
            var ret = new FunctionConditionData_Mask<bool>();
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IFunctionConditionDataInternal lhs,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IFunctionConditionDataInternal lhs,
            IFunctionConditionDataGetter rhs,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IFunctionConditionDataInternal lhs,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            FunctionConditionData_TranslationMask copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            FunctionConditionData_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public new static void CopyInFromBinary(
            this IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FunctionConditionData_FieldIndex
    {
        Function = 0,
        Unknown2 = 1,
        ParameterOneRecord = 2,
        ParameterOneNumber = 3,
        ParameterOneString = 4,
        ParameterTwoRecord = 5,
        ParameterTwoNumber = 6,
        ParameterTwoString = 7,
        Unknown3 = 8,
        Unknown4 = 9,
        Unknown5 = 10,
    }
    #endregion

    #region Registration
    public partial class FunctionConditionData_Registration : ILoquiRegistration
    {
        public static readonly FunctionConditionData_Registration Instance = new FunctionConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 39,
            version: 0);

        public const string GUID = "c7686727-e470-4c34-80ce-423cf65c7b92";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(FunctionConditionData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(FunctionConditionData_ErrorMask);

        public static readonly Type ClassType = typeof(FunctionConditionData);

        public static readonly Type GetterType = typeof(IFunctionConditionDataGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFunctionConditionData);

        public static readonly Type InternalSetterType = typeof(IFunctionConditionDataInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.FunctionConditionData";

        public const string Name = "FunctionConditionData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FUNCTION":
                    return (ushort)FunctionConditionData_FieldIndex.Function;
                case "UNKNOWN2":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown2;
                case "PARAMETERONERECORD":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneRecord;
                case "PARAMETERONENUMBER":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneNumber;
                case "PARAMETERONESTRING":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneString;
                case "PARAMETERTWORECORD":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoRecord;
                case "PARAMETERTWONUMBER":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoNumber;
                case "PARAMETERTWOSTRING":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoString;
                case "UNKNOWN3":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown3;
                case "UNKNOWN4":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown4;
                case "UNKNOWN5":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown5;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    return "Function";
                case FunctionConditionData_FieldIndex.Unknown2:
                    return "Unknown2";
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    return "ParameterOneRecord";
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    return "ParameterOneNumber";
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return "ParameterOneString";
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    return "ParameterTwoRecord";
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    return "ParameterTwoNumber";
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return "ParameterTwoString";
                case FunctionConditionData_FieldIndex.Unknown3:
                    return "Unknown3";
                case FunctionConditionData_FieldIndex.Unknown4:
                    return "Unknown4";
                case FunctionConditionData_FieldIndex.Unknown5:
                    return "Unknown5";
                default:
                    return ConditionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    return typeof(UInt16);
                case FunctionConditionData_FieldIndex.Unknown2:
                    return typeof(UInt16);
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    return typeof(IFormIDLink<SkyrimMajorRecord>);
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return typeof(String);
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    return typeof(IFormIDLink<SkyrimMajorRecord>);
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return typeof(String);
                case FunctionConditionData_FieldIndex.Unknown3:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.Unknown4:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.Unknown5:
                    return typeof(Int32);
                default:
                    return ConditionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FunctionConditionDataXmlWriteTranslation);
        public const int NumStructFields = 11;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FunctionConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FunctionConditionDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly FunctionConditionDataSetterCommon Instance = new FunctionConditionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFunctionConditionDataInternal item)
        {
            ClearPartial();
            item.Function = default(UInt16);
            item.Unknown2 = default(UInt16);
            item.ParameterOneRecord.Unset();
            item.ParameterTwoRecord.Unset();
            item.Unknown3 = default(Int32);
            item.Unknown4 = default(Int32);
            item.Unknown5 = FunctionConditionData._Unknown5_Default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IFunctionConditionDataInternal)item);
        }
        
        #region Xml Translation
        public new void CopyInFromXml(
            IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FunctionConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            item.Function = frame.ReadUInt16();
            item.Unknown2 = frame.ReadUInt16();
            FunctionConditionDataBinaryCreateTranslation.FillBinaryParameterParsingCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }
        
        public new void CopyInFromBinary(
            IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataCommon : ConditionDataCommon
    {
        public new static readonly FunctionConditionDataCommon Instance = new FunctionConditionDataCommon();

        public FunctionConditionData_Mask<bool> GetEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FunctionConditionData_Mask<bool>();
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Function = item.Function == rhs.Function;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ParameterOneRecord = object.Equals(item.ParameterOneRecord, rhs.ParameterOneRecord);
            ret.ParameterOneNumber = item.ParameterOneNumber == rhs.ParameterOneNumber;
            ret.ParameterOneString = item.ParameterOneString_IsSet == rhs.ParameterOneString_IsSet && string.Equals(item.ParameterOneString, rhs.ParameterOneString);
            ret.ParameterTwoRecord = object.Equals(item.ParameterTwoRecord, rhs.ParameterTwoRecord);
            ret.ParameterTwoNumber = item.ParameterTwoNumber == rhs.ParameterTwoNumber;
            ret.ParameterTwoString = item.ParameterTwoString_IsSet == rhs.ParameterTwoString_IsSet && string.Equals(item.ParameterTwoString, rhs.ParameterTwoString);
            ret.Unknown3 = item.Unknown3 == rhs.Unknown3;
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.Unknown5 = item.Unknown5 == rhs.Unknown5;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFunctionConditionDataGetter item,
            string name = null,
            FunctionConditionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            string name = null,
            FunctionConditionData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FunctionConditionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (FunctionConditionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            FunctionConditionData_Mask<bool> printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Function ?? true)
            {
                fg.AppendLine($"Function => {item.Function}");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {item.Unknown2}");
            }
            if (printMask?.ParameterOneRecord ?? true)
            {
                fg.AppendLine($"ParameterOneRecord => {item.ParameterOneRecord}");
            }
            if (printMask?.ParameterOneNumber ?? true)
            {
                fg.AppendLine($"ParameterOneNumber => {item.ParameterOneNumber}");
            }
            if (printMask?.ParameterOneString ?? true)
            {
                fg.AppendLine($"ParameterOneString => {item.ParameterOneString}");
            }
            if (printMask?.ParameterTwoRecord ?? true)
            {
                fg.AppendLine($"ParameterTwoRecord => {item.ParameterTwoRecord}");
            }
            if (printMask?.ParameterTwoNumber ?? true)
            {
                fg.AppendLine($"ParameterTwoNumber => {item.ParameterTwoNumber}");
            }
            if (printMask?.ParameterTwoString ?? true)
            {
                fg.AppendLine($"ParameterTwoString => {item.ParameterTwoString}");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {item.Unknown3}");
            }
            if (printMask?.Unknown4 ?? true)
            {
                fg.AppendLine($"Unknown4 => {item.Unknown4}");
            }
            if (printMask?.Unknown5 ?? true)
            {
                fg.AppendLine($"Unknown5 => {item.Unknown5}");
            }
        }
        
        public bool HasBeenSet(
            IFunctionConditionDataGetter item,
            FunctionConditionData_Mask<bool?> checkMask)
        {
            if (checkMask.ParameterOneString.HasValue && checkMask.ParameterOneString.Value != item.ParameterOneString_IsSet) return false;
            if (checkMask.ParameterTwoString.HasValue && checkMask.ParameterTwoString.Value != item.ParameterTwoString_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFunctionConditionDataGetter item,
            FunctionConditionData_Mask<bool> mask)
        {
            mask.Function = true;
            mask.Unknown2 = true;
            mask.ParameterOneRecord = true;
            mask.ParameterOneNumber = true;
            mask.ParameterOneString = item.ParameterOneString_IsSet;
            mask.ParameterTwoRecord = true;
            mask.ParameterTwoNumber = true;
            mask.ParameterTwoString = item.ParameterTwoString_IsSet;
            mask.Unknown3 = true;
            mask.Unknown4 = true;
            mask.Unknown5 = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static FunctionConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFunctionConditionDataGetter lhs,
            IFunctionConditionDataGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Function != rhs.Function) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (!lhs.ParameterOneRecord.Equals(rhs.ParameterOneRecord)) return false;
            if (lhs.ParameterOneNumber != rhs.ParameterOneNumber) return false;
            if (lhs.ParameterOneString_IsSet != rhs.ParameterOneString_IsSet) return false;
            if (lhs.ParameterOneString_IsSet)
            {
                if (!string.Equals(lhs.ParameterOneString, rhs.ParameterOneString)) return false;
            }
            if (!lhs.ParameterTwoRecord.Equals(rhs.ParameterTwoRecord)) return false;
            if (lhs.ParameterTwoNumber != rhs.ParameterTwoNumber) return false;
            if (lhs.ParameterTwoString_IsSet != rhs.ParameterTwoString_IsSet) return false;
            if (lhs.ParameterTwoString_IsSet)
            {
                if (!string.Equals(lhs.ParameterTwoString, rhs.ParameterTwoString)) return false;
            }
            if (lhs.Unknown3 != rhs.Unknown3) return false;
            if (lhs.Unknown4 != rhs.Unknown4) return false;
            if (lhs.Unknown5 != rhs.Unknown5) return false;
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter lhs,
            IConditionDataGetter rhs)
        {
            return Equals(
                lhs: (IFunctionConditionDataGetter)lhs,
                rhs: rhs as IFunctionConditionDataGetter);
        }
        
        public virtual int GetHashCode(IFunctionConditionDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Function).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterOneRecord).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterOneNumber).CombineHashCode(ret);
            if (item.ParameterOneString_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ParameterOneString).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ParameterTwoRecord).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterTwoNumber).CombineHashCode(ret);
            if (item.ParameterTwoString_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ParameterTwoString).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Unknown3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown4).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown5).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IFunctionConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FunctionConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFunctionConditionDataGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.ParameterOneRecord;
            yield return obj.ParameterTwoRecord;
            yield break;
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly FunctionConditionDataSetterTranslationCommon Instance = new FunctionConditionDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IFunctionConditionDataInternal item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                item.ParameterOneRecord.FormKey = rhs.ParameterOneRecord.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                item.ParameterOneNumber = rhs.ParameterOneNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneString);
                try
                {
                    if (rhs.ParameterOneString_IsSet)
                    {
                        item.ParameterOneString = rhs.ParameterOneString;
                    }
                    else
                    {
                        item.ParameterOneString_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                item.ParameterTwoRecord.FormKey = rhs.ParameterTwoRecord.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                item.ParameterTwoNumber = rhs.ParameterTwoNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoString);
                try
                {
                    if (rhs.ParameterTwoString_IsSet)
                    {
                        item.ParameterTwoString = rhs.ParameterTwoString;
                    }
                    else
                    {
                        item.ParameterTwoString_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyFieldsFrom(
                (IFunctionConditionData)item,
                (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IFunctionConditionData item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                item.Function = rhs.Function;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5;
            }
        }
        
        
        public override void DeepCopyFieldsFrom(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IFunctionConditionData)item,
                rhs: (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            FunctionConditionData_TranslationMask copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FunctionConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration Registration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FunctionConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataXmlWriteTranslation :
        ConditionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FunctionConditionDataXmlWriteTranslation Instance = new FunctionConditionDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFunctionConditionDataGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            ConditionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Function),
                    item: item.Function,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Function,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneRecord),
                    item: item.ParameterOneRecord?.FormKey,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneRecord,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneNumber),
                    item: item.ParameterOneNumber,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneNumber,
                    errorMask: errorMask);
            }
            if (item.ParameterOneString_IsSet
                && (translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneString),
                    item: item.ParameterOneString,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneString,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoRecord),
                    item: item.ParameterTwoRecord?.FormKey,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoRecord,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoNumber),
                    item: item.ParameterTwoNumber,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoNumber,
                    errorMask: errorMask);
            }
            if (item.ParameterTwoString_IsSet
                && (translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoString),
                    item: item.ParameterTwoString,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoString,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown3) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown3),
                    item: item.Unknown3,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown4) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown4),
                    item: item.Unknown4,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown4,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown5) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown5),
                    item: item.Unknown5,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown5,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FunctionConditionData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FunctionConditionData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IConditionDataGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FunctionConditionDataXmlCreateTranslation : ConditionDataXmlCreateTranslation
    {
        public new readonly static FunctionConditionDataXmlCreateTranslation Instance = new FunctionConditionDataXmlCreateTranslation();

        public static void FillPublicXml(
            IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FunctionConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFunctionConditionDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Function":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Function);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 FunctionParse,
                            errorMask: errorMask))
                        {
                            item.Function = FunctionParse;
                        }
                        else
                        {
                            item.Function = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown2);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 Unknown2Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown2 = Unknown2Parse;
                        }
                        else
                        {
                            item.Unknown2 = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneRecord":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneRecord);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out IFormIDLink<SkyrimMajorRecord> ParameterOneRecordParse,
                            errorMask: errorMask))
                        {
                            item.ParameterOneRecord = ParameterOneRecordParse;
                        }
                        else
                        {
                            item.ParameterOneRecord = default(IFormIDLink<SkyrimMajorRecord>);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneNumber":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneNumber);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ParameterOneNumberParse,
                            errorMask: errorMask))
                        {
                            item.ParameterOneNumber = ParameterOneNumberParse;
                        }
                        else
                        {
                            item.ParameterOneNumber = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneString":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneString);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ParameterOneStringParse,
                            errorMask: errorMask))
                        {
                            item.ParameterOneString = ParameterOneStringParse;
                        }
                        else
                        {
                            item.ParameterOneString = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoRecord":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoRecord);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out IFormIDLink<SkyrimMajorRecord> ParameterTwoRecordParse,
                            errorMask: errorMask))
                        {
                            item.ParameterTwoRecord = ParameterTwoRecordParse;
                        }
                        else
                        {
                            item.ParameterTwoRecord = default(IFormIDLink<SkyrimMajorRecord>);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoNumber":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoNumber);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 ParameterTwoNumberParse,
                            errorMask: errorMask))
                        {
                            item.ParameterTwoNumber = ParameterTwoNumberParse;
                        }
                        else
                        {
                            item.ParameterTwoNumber = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoString":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoString);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String ParameterTwoStringParse,
                            errorMask: errorMask))
                        {
                            item.ParameterTwoString = ParameterTwoStringParse;
                        }
                        else
                        {
                            item.ParameterTwoString = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown3":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown3);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 Unknown3Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown3 = Unknown3Parse;
                        }
                        else
                        {
                            item.Unknown3 = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown4":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown4);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 Unknown4Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown4 = Unknown4Parse;
                        }
                        else
                        {
                            item.Unknown4 = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown5":
                    try
                    {
                        errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown5);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 Unknown5Parse,
                            errorMask: errorMask))
                        {
                            item.Unknown5 = Unknown5Parse;
                        }
                        else
                        {
                            item.Unknown5 = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FunctionConditionDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            XElement node,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true,
            FunctionConditionData_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FunctionConditionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            string path,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            Stream stream,
            out FunctionConditionData_ErrorMask errorMask,
            FunctionConditionData_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class FunctionConditionData_Mask<T> : ConditionData_Mask<T>, IMask<T>, IEquatable<FunctionConditionData_Mask<T>>
    {
        #region Ctors
        public FunctionConditionData_Mask()
        {
        }

        public FunctionConditionData_Mask(T initialValue)
        {
            this.Function = initialValue;
            this.Unknown2 = initialValue;
            this.ParameterOneRecord = initialValue;
            this.ParameterOneNumber = initialValue;
            this.ParameterOneString = initialValue;
            this.ParameterTwoRecord = initialValue;
            this.ParameterTwoNumber = initialValue;
            this.ParameterTwoString = initialValue;
            this.Unknown3 = initialValue;
            this.Unknown4 = initialValue;
            this.Unknown5 = initialValue;
        }
        #endregion

        #region Members
        public T Function;
        public T Unknown2;
        public T ParameterOneRecord;
        public T ParameterOneNumber;
        public T ParameterOneString;
        public T ParameterTwoRecord;
        public T ParameterTwoNumber;
        public T ParameterTwoString;
        public T Unknown3;
        public T Unknown4;
        public T Unknown5;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is FunctionConditionData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(FunctionConditionData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Function, rhs.Function)) return false;
            if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
            if (!object.Equals(this.ParameterOneRecord, rhs.ParameterOneRecord)) return false;
            if (!object.Equals(this.ParameterOneNumber, rhs.ParameterOneNumber)) return false;
            if (!object.Equals(this.ParameterOneString, rhs.ParameterOneString)) return false;
            if (!object.Equals(this.ParameterTwoRecord, rhs.ParameterTwoRecord)) return false;
            if (!object.Equals(this.ParameterTwoNumber, rhs.ParameterTwoNumber)) return false;
            if (!object.Equals(this.ParameterTwoString, rhs.ParameterTwoString)) return false;
            if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
            if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
            if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Function?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown2?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterOneRecord?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterOneNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterOneString?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterTwoRecord?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterTwoNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.ParameterTwoString?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown3?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown4?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown5?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Function)) return false;
            if (!eval(this.Unknown2)) return false;
            if (!eval(this.ParameterOneRecord)) return false;
            if (!eval(this.ParameterOneNumber)) return false;
            if (!eval(this.ParameterOneString)) return false;
            if (!eval(this.ParameterTwoRecord)) return false;
            if (!eval(this.ParameterTwoNumber)) return false;
            if (!eval(this.ParameterTwoString)) return false;
            if (!eval(this.Unknown3)) return false;
            if (!eval(this.Unknown4)) return false;
            if (!eval(this.Unknown5)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new FunctionConditionData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new FunctionConditionData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(FunctionConditionData_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Function = eval(this.Function);
            obj.Unknown2 = eval(this.Unknown2);
            obj.ParameterOneRecord = eval(this.ParameterOneRecord);
            obj.ParameterOneNumber = eval(this.ParameterOneNumber);
            obj.ParameterOneString = eval(this.ParameterOneString);
            obj.ParameterTwoRecord = eval(this.ParameterTwoRecord);
            obj.ParameterTwoNumber = eval(this.ParameterTwoNumber);
            obj.ParameterTwoString = eval(this.ParameterTwoString);
            obj.Unknown3 = eval(this.Unknown3);
            obj.Unknown4 = eval(this.Unknown4);
            obj.Unknown5 = eval(this.Unknown5);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(FunctionConditionData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, FunctionConditionData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(FunctionConditionData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Function ?? true)
                {
                    fg.AppendLine($"Function => {Function}");
                }
                if (printMask?.Unknown2 ?? true)
                {
                    fg.AppendLine($"Unknown2 => {Unknown2}");
                }
                if (printMask?.ParameterOneRecord ?? true)
                {
                    fg.AppendLine($"ParameterOneRecord => {ParameterOneRecord}");
                }
                if (printMask?.ParameterOneNumber ?? true)
                {
                    fg.AppendLine($"ParameterOneNumber => {ParameterOneNumber}");
                }
                if (printMask?.ParameterOneString ?? true)
                {
                    fg.AppendLine($"ParameterOneString => {ParameterOneString}");
                }
                if (printMask?.ParameterTwoRecord ?? true)
                {
                    fg.AppendLine($"ParameterTwoRecord => {ParameterTwoRecord}");
                }
                if (printMask?.ParameterTwoNumber ?? true)
                {
                    fg.AppendLine($"ParameterTwoNumber => {ParameterTwoNumber}");
                }
                if (printMask?.ParameterTwoString ?? true)
                {
                    fg.AppendLine($"ParameterTwoString => {ParameterTwoString}");
                }
                if (printMask?.Unknown3 ?? true)
                {
                    fg.AppendLine($"Unknown3 => {Unknown3}");
                }
                if (printMask?.Unknown4 ?? true)
                {
                    fg.AppendLine($"Unknown4 => {Unknown4}");
                }
                if (printMask?.Unknown5 ?? true)
                {
                    fg.AppendLine($"Unknown5 => {Unknown5}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class FunctionConditionData_ErrorMask : ConditionData_ErrorMask, IErrorMask<FunctionConditionData_ErrorMask>
    {
        #region Members
        public Exception Function;
        public Exception Unknown2;
        public Exception ParameterOneRecord;
        public Exception ParameterOneNumber;
        public Exception ParameterOneString;
        public Exception ParameterTwoRecord;
        public Exception ParameterTwoNumber;
        public Exception ParameterTwoString;
        public Exception Unknown3;
        public Exception Unknown4;
        public Exception Unknown5;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    return Function;
                case FunctionConditionData_FieldIndex.Unknown2:
                    return Unknown2;
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    return ParameterOneRecord;
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    return ParameterOneNumber;
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return ParameterOneString;
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    return ParameterTwoRecord;
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    return ParameterTwoNumber;
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return ParameterTwoString;
                case FunctionConditionData_FieldIndex.Unknown3:
                    return Unknown3;
                case FunctionConditionData_FieldIndex.Unknown4:
                    return Unknown4;
                case FunctionConditionData_FieldIndex.Unknown5:
                    return Unknown5;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    this.Function = ex;
                    break;
                case FunctionConditionData_FieldIndex.Unknown2:
                    this.Unknown2 = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    this.ParameterOneRecord = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    this.ParameterOneNumber = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    this.ParameterOneString = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    this.ParameterTwoRecord = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    this.ParameterTwoNumber = ex;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    this.ParameterTwoString = ex;
                    break;
                case FunctionConditionData_FieldIndex.Unknown3:
                    this.Unknown3 = ex;
                    break;
                case FunctionConditionData_FieldIndex.Unknown4:
                    this.Unknown4 = ex;
                    break;
                case FunctionConditionData_FieldIndex.Unknown5:
                    this.Unknown5 = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    this.Function = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.Unknown2:
                    this.Unknown2 = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    this.ParameterOneRecord = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    this.ParameterOneNumber = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    this.ParameterOneString = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    this.ParameterTwoRecord = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    this.ParameterTwoNumber = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    this.ParameterTwoString = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.Unknown3:
                    this.Unknown3 = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.Unknown4:
                    this.Unknown4 = (Exception)obj;
                    break;
                case FunctionConditionData_FieldIndex.Unknown5:
                    this.Unknown5 = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Function != null) return true;
            if (Unknown2 != null) return true;
            if (ParameterOneRecord != null) return true;
            if (ParameterOneNumber != null) return true;
            if (ParameterOneString != null) return true;
            if (ParameterTwoRecord != null) return true;
            if (ParameterTwoNumber != null) return true;
            if (ParameterTwoString != null) return true;
            if (Unknown3 != null) return true;
            if (Unknown4 != null) return true;
            if (Unknown5 != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("FunctionConditionData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Function => {Function}");
            fg.AppendLine($"Unknown2 => {Unknown2}");
            fg.AppendLine($"ParameterOneRecord => {ParameterOneRecord}");
            fg.AppendLine($"ParameterOneNumber => {ParameterOneNumber}");
            fg.AppendLine($"ParameterOneString => {ParameterOneString}");
            fg.AppendLine($"ParameterTwoRecord => {ParameterTwoRecord}");
            fg.AppendLine($"ParameterTwoNumber => {ParameterTwoNumber}");
            fg.AppendLine($"ParameterTwoString => {ParameterTwoString}");
            fg.AppendLine($"Unknown3 => {Unknown3}");
            fg.AppendLine($"Unknown4 => {Unknown4}");
            fg.AppendLine($"Unknown5 => {Unknown5}");
        }
        #endregion

        #region Combine
        public FunctionConditionData_ErrorMask Combine(FunctionConditionData_ErrorMask rhs)
        {
            var ret = new FunctionConditionData_ErrorMask();
            ret.Function = this.Function.Combine(rhs.Function);
            ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
            ret.ParameterOneRecord = this.ParameterOneRecord.Combine(rhs.ParameterOneRecord);
            ret.ParameterOneNumber = this.ParameterOneNumber.Combine(rhs.ParameterOneNumber);
            ret.ParameterOneString = this.ParameterOneString.Combine(rhs.ParameterOneString);
            ret.ParameterTwoRecord = this.ParameterTwoRecord.Combine(rhs.ParameterTwoRecord);
            ret.ParameterTwoNumber = this.ParameterTwoNumber.Combine(rhs.ParameterTwoNumber);
            ret.ParameterTwoString = this.ParameterTwoString.Combine(rhs.ParameterTwoString);
            ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
            ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
            ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
            return ret;
        }
        public static FunctionConditionData_ErrorMask Combine(FunctionConditionData_ErrorMask lhs, FunctionConditionData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static FunctionConditionData_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new FunctionConditionData_ErrorMask();
        }
        #endregion

    }
    public class FunctionConditionData_TranslationMask : ConditionData_TranslationMask
    {
        #region Members
        public bool Function;
        public bool Unknown2;
        public bool ParameterOneRecord;
        public bool ParameterOneNumber;
        public bool ParameterOneString;
        public bool ParameterTwoRecord;
        public bool ParameterTwoNumber;
        public bool ParameterTwoString;
        public bool Unknown3;
        public bool Unknown4;
        public bool Unknown5;
        #endregion

        #region Ctors
        public FunctionConditionData_TranslationMask()
            : base()
        {
        }

        public FunctionConditionData_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Function = defaultOn;
            this.Unknown2 = defaultOn;
            this.ParameterOneRecord = defaultOn;
            this.ParameterOneNumber = defaultOn;
            this.ParameterOneString = defaultOn;
            this.ParameterTwoRecord = defaultOn;
            this.ParameterTwoNumber = defaultOn;
            this.ParameterTwoString = defaultOn;
            this.Unknown3 = defaultOn;
            this.Unknown4 = defaultOn;
            this.Unknown5 = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Function, null));
            ret.Add((Unknown2, null));
            ret.Add((ParameterOneRecord, null));
            ret.Add((ParameterOneNumber, null));
            ret.Add((ParameterOneString, null));
            ret.Add((ParameterTwoRecord, null));
            ret.Add((ParameterTwoNumber, null));
            ret.Add((ParameterTwoString, null));
            ret.Add((Unknown3, null));
            ret.Add((Unknown4, null));
            ret.Add((Unknown5, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FunctionConditionDataBinaryWriteTranslation Instance = new FunctionConditionDataBinaryWriteTranslation();

        static partial void WriteBinaryParameterParsingCustom(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinaryParameterParsing(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinaryParameterParsingCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_Embedded(
            IFunctionConditionDataGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            writer.Write(item.Function);
            writer.Write(item.Unknown2);
            FunctionConditionDataBinaryWriteTranslation.WriteBinaryParameterParsing(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class FunctionConditionDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new readonly static FunctionConditionDataBinaryCreateTranslation Instance = new FunctionConditionDataBinaryCreateTranslation();

        static partial void FillBinaryParameterParsingCustom(
            MutagenFrame frame,
            IFunctionConditionDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinaryParameterParsingCustomPublic(
            MutagenFrame frame,
            IFunctionConditionDataInternal item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinaryParameterParsingCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FunctionConditionDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFunctionConditionDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out FunctionConditionData_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((FunctionConditionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = FunctionConditionData_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataBinaryWrapper :
        ConditionDataBinaryWrapper,
        IFunctionConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration Registration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFunctionConditionDataGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => FunctionConditionDataCommon.Instance.GetLinks(this);
        protected override object XmlWriteTranslator => FunctionConditionDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((FunctionConditionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public UInt16 Function => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0, 2));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(2, 2));
        #region ParameterParsing
        partial void ParameterParsingCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FunctionConditionDataBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FunctionConditionDataBinaryWrapper FunctionConditionDataFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new FunctionConditionDataBinaryWrapper(
                bytes: stream.RemainingMemory.Slice(0, 4),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

