/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FunctionConditionData :
        ConditionData,
        IFunctionConditionDataInternal,
        ILoquiObjectSetter<FunctionConditionData>,
        IEquatable<FunctionConditionData>,
        IEqualsMask
    {
        #region Ctor
        public FunctionConditionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Function
        public UInt16 Function { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region ParameterOneRecord
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<SkyrimMajorRecord> _ParameterOneRecord = new FormLink<SkyrimMajorRecord>();
        public IFormLink<SkyrimMajorRecord> ParameterOneRecord => this._ParameterOneRecord;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISkyrimMajorRecordGetter> IFunctionConditionDataGetter.ParameterOneRecord => this.ParameterOneRecord;
        #endregion
        #region ParameterOneNumber
        public Int32 ParameterOneNumber { get; set; } = default;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32 IFunctionConditionDataInternal.ParameterOneNumber
        {
            get => this.ParameterOneNumber;
            set => this.ParameterOneNumber = value;
        }
        #endregion
        #region ParameterOneString
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _ParameterOneString;
        public String? ParameterOneString
        {
            get => this._ParameterOneString;
            set => this._ParameterOneString = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataGetter.ParameterOneString => this.ParameterOneString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataInternal.ParameterOneString
        {
            get => this.ParameterOneString;
            set => this.ParameterOneString = value;
        }
        #endregion
        #region ParameterTwoRecord
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<SkyrimMajorRecord> _ParameterTwoRecord = new FormLink<SkyrimMajorRecord>();
        public IFormLink<SkyrimMajorRecord> ParameterTwoRecord => this._ParameterTwoRecord;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISkyrimMajorRecordGetter> IFunctionConditionDataGetter.ParameterTwoRecord => this.ParameterTwoRecord;
        #endregion
        #region ParameterTwoNumber
        public Int32 ParameterTwoNumber { get; set; } = default;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32 IFunctionConditionDataInternal.ParameterTwoNumber
        {
            get => this.ParameterTwoNumber;
            set => this.ParameterTwoNumber = value;
        }
        #endregion
        #region ParameterTwoString
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _ParameterTwoString;
        public String? ParameterTwoString
        {
            get => this._ParameterTwoString;
            set => this._ParameterTwoString = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataGetter.ParameterTwoString => this.ParameterTwoString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFunctionConditionDataInternal.ParameterTwoString
        {
            get => this.ParameterTwoString;
            set => this.ParameterTwoString = value;
        }
        #endregion
        #region Unknown3
        public Int32 Unknown3 { get; set; } = default;
        #endregion
        #region Unknown4
        public Int32 Unknown4 { get; set; } = default;
        #endregion
        #region Unknown5
        public readonly static Int32 _Unknown5_Default = -1;
        public Int32 Unknown5 { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FunctionConditionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFunctionConditionDataGetter rhs)) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FunctionConditionData obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FunctionConditionDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FunctionConditionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new FunctionConditionData CreateFromXml(
            XElement node,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FunctionConditionData CreateFromXml(
            XElement node,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static FunctionConditionData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FunctionConditionData();
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FunctionConditionData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            ConditionData.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Function = initialValue;
                this.Unknown2 = initialValue;
                this.ParameterOneRecord = initialValue;
                this.ParameterOneNumber = initialValue;
                this.ParameterOneString = initialValue;
                this.ParameterTwoRecord = initialValue;
                this.ParameterTwoNumber = initialValue;
                this.ParameterTwoString = initialValue;
                this.Unknown3 = initialValue;
                this.Unknown4 = initialValue;
                this.Unknown5 = initialValue;
            }

            public Mask(
                T Function,
                T Unknown2,
                T ParameterOneRecord,
                T ParameterOneNumber,
                T ParameterOneString,
                T ParameterTwoRecord,
                T ParameterTwoNumber,
                T ParameterTwoString,
                T Unknown3,
                T Unknown4,
                T Unknown5)
            : base()
            {
                this.Function = Function;
                this.Unknown2 = Unknown2;
                this.ParameterOneRecord = ParameterOneRecord;
                this.ParameterOneNumber = ParameterOneNumber;
                this.ParameterOneString = ParameterOneString;
                this.ParameterTwoRecord = ParameterTwoRecord;
                this.ParameterTwoNumber = ParameterTwoNumber;
                this.ParameterTwoString = ParameterTwoString;
                this.Unknown3 = Unknown3;
                this.Unknown4 = Unknown4;
                this.Unknown5 = Unknown5;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Function;
            public T Unknown2;
            public T ParameterOneRecord;
            public T ParameterOneNumber;
            public T ParameterOneString;
            public T ParameterTwoRecord;
            public T ParameterTwoNumber;
            public T ParameterTwoString;
            public T Unknown3;
            public T Unknown4;
            public T Unknown5;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Function, rhs.Function)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ParameterOneRecord, rhs.ParameterOneRecord)) return false;
                if (!object.Equals(this.ParameterOneNumber, rhs.ParameterOneNumber)) return false;
                if (!object.Equals(this.ParameterOneString, rhs.ParameterOneString)) return false;
                if (!object.Equals(this.ParameterTwoRecord, rhs.ParameterTwoRecord)) return false;
                if (!object.Equals(this.ParameterTwoNumber, rhs.ParameterTwoNumber)) return false;
                if (!object.Equals(this.ParameterTwoString, rhs.ParameterTwoString)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Function?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown2?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterOneRecord?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterOneNumber?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterOneString?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterTwoRecord?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterTwoNumber?.GetHashCode());
                ret = ret.CombineHashCode(this.ParameterTwoString?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown3?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown4?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown5?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Function)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ParameterOneRecord)) return false;
                if (!eval(this.ParameterOneNumber)) return false;
                if (!eval(this.ParameterOneString)) return false;
                if (!eval(this.ParameterTwoRecord)) return false;
                if (!eval(this.ParameterTwoNumber)) return false;
                if (!eval(this.ParameterTwoString)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.Unknown5)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Function)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ParameterOneRecord)) return true;
                if (eval(this.ParameterOneNumber)) return true;
                if (eval(this.ParameterOneString)) return true;
                if (eval(this.ParameterTwoRecord)) return true;
                if (eval(this.ParameterTwoNumber)) return true;
                if (eval(this.ParameterTwoString)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.Unknown5)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new FunctionConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Function = eval(this.Function);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ParameterOneRecord = eval(this.ParameterOneRecord);
                obj.ParameterOneNumber = eval(this.ParameterOneNumber);
                obj.ParameterOneString = eval(this.ParameterOneString);
                obj.ParameterTwoRecord = eval(this.ParameterTwoRecord);
                obj.ParameterTwoNumber = eval(this.ParameterTwoNumber);
                obj.ParameterTwoString = eval(this.ParameterTwoString);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.Unknown5 = eval(this.Unknown5);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FunctionConditionData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FunctionConditionData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FunctionConditionData.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Function ?? true)
                    {
                        fg.AppendItem(Function, "Function");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ParameterOneRecord ?? true)
                    {
                        fg.AppendItem(ParameterOneRecord, "ParameterOneRecord");
                    }
                    if (printMask?.ParameterOneNumber ?? true)
                    {
                        fg.AppendItem(ParameterOneNumber, "ParameterOneNumber");
                    }
                    if (printMask?.ParameterOneString ?? true)
                    {
                        fg.AppendItem(ParameterOneString, "ParameterOneString");
                    }
                    if (printMask?.ParameterTwoRecord ?? true)
                    {
                        fg.AppendItem(ParameterTwoRecord, "ParameterTwoRecord");
                    }
                    if (printMask?.ParameterTwoNumber ?? true)
                    {
                        fg.AppendItem(ParameterTwoNumber, "ParameterTwoNumber");
                    }
                    if (printMask?.ParameterTwoString ?? true)
                    {
                        fg.AppendItem(ParameterTwoString, "ParameterTwoString");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        fg.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.Unknown5 ?? true)
                    {
                        fg.AppendItem(Unknown5, "Unknown5");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Function;
            public Exception? Unknown2;
            public Exception? ParameterOneRecord;
            public Exception? ParameterOneNumber;
            public Exception? ParameterOneString;
            public Exception? ParameterTwoRecord;
            public Exception? ParameterTwoNumber;
            public Exception? ParameterTwoString;
            public Exception? Unknown3;
            public Exception? Unknown4;
            public Exception? Unknown5;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        return Function;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        return Unknown2;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        return ParameterOneRecord;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        return ParameterOneNumber;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        return ParameterOneString;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        return ParameterTwoRecord;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        return ParameterTwoNumber;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        return ParameterTwoString;
                    case FunctionConditionData_FieldIndex.Unknown3:
                        return Unknown3;
                    case FunctionConditionData_FieldIndex.Unknown4:
                        return Unknown4;
                    case FunctionConditionData_FieldIndex.Unknown5:
                        return Unknown5;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        this.ParameterOneRecord = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        this.ParameterOneNumber = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        this.ParameterOneString = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        this.ParameterTwoRecord = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        this.ParameterTwoNumber = ex;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        this.ParameterTwoString = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown5:
                        this.Unknown5 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneRecord:
                        this.ParameterOneRecord = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneNumber:
                        this.ParameterOneNumber = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterOneString:
                        this.ParameterOneString = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                        this.ParameterTwoRecord = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                        this.ParameterTwoNumber = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.ParameterTwoString:
                        this.ParameterTwoString = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown5:
                        this.Unknown5 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Function != null) return true;
                if (Unknown2 != null) return true;
                if (ParameterOneRecord != null) return true;
                if (ParameterOneNumber != null) return true;
                if (ParameterOneString != null) return true;
                if (ParameterTwoRecord != null) return true;
                if (ParameterTwoNumber != null) return true;
                if (ParameterTwoString != null) return true;
                if (Unknown3 != null) return true;
                if (Unknown4 != null) return true;
                if (Unknown5 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Function, "Function");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(ParameterOneRecord, "ParameterOneRecord");
                fg.AppendItem(ParameterOneNumber, "ParameterOneNumber");
                fg.AppendItem(ParameterOneString, "ParameterOneString");
                fg.AppendItem(ParameterTwoRecord, "ParameterTwoRecord");
                fg.AppendItem(ParameterTwoNumber, "ParameterTwoNumber");
                fg.AppendItem(ParameterTwoString, "ParameterTwoString");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(Unknown4, "Unknown4");
                fg.AppendItem(Unknown5, "Unknown5");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Function = this.Function.Combine(rhs.Function);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ParameterOneRecord = this.ParameterOneRecord.Combine(rhs.ParameterOneRecord);
                ret.ParameterOneNumber = this.ParameterOneNumber.Combine(rhs.ParameterOneNumber);
                ret.ParameterOneString = this.ParameterOneString.Combine(rhs.ParameterOneString);
                ret.ParameterTwoRecord = this.ParameterTwoRecord.Combine(rhs.ParameterTwoRecord);
                ret.ParameterTwoNumber = this.ParameterTwoNumber.Combine(rhs.ParameterTwoNumber);
                ret.ParameterTwoString = this.ParameterTwoString.Combine(rhs.ParameterTwoString);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Function;
            public bool Unknown2;
            public bool ParameterOneRecord;
            public bool ParameterOneNumber;
            public bool ParameterOneString;
            public bool ParameterTwoRecord;
            public bool ParameterTwoNumber;
            public bool ParameterTwoString;
            public bool Unknown3;
            public bool Unknown4;
            public bool Unknown5;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Function = defaultOn;
                this.Unknown2 = defaultOn;
                this.ParameterOneRecord = defaultOn;
                this.ParameterOneNumber = defaultOn;
                this.ParameterOneString = defaultOn;
                this.ParameterTwoRecord = defaultOn;
                this.ParameterTwoNumber = defaultOn;
                this.ParameterTwoString = defaultOn;
                this.Unknown3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.Unknown5 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Function, null));
                ret.Add((Unknown2, null));
                ret.Add((ParameterOneRecord, null));
                ret.Add((ParameterOneNumber, null));
                ret.Add((ParameterOneString, null));
                ret.Add((ParameterTwoRecord, null));
                ret.Add((ParameterTwoNumber, null));
                ret.Add((ParameterTwoString, null));
                ret.Add((Unknown3, null));
                ret.Add((Unknown4, null));
                ret.Add((Unknown5, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => FunctionConditionDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static FunctionConditionData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new FunctionConditionData();
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFunctionConditionDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FunctionConditionData GetNew()
        {
            return new FunctionConditionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFunctionConditionData :
        IFunctionConditionDataGetter,
        IConditionData,
        ILoquiObjectSetter<IFunctionConditionDataInternal>
    {
        new UInt16 Function { get; set; }
        new UInt16 Unknown2 { get; set; }
        new Int32 Unknown3 { get; set; }
        new Int32 Unknown4 { get; set; }
        new Int32 Unknown5 { get; set; }
    }

    public partial interface IFunctionConditionDataInternal :
        IFunctionConditionData,
        IFunctionConditionDataGetter
    {
        new IFormLink<SkyrimMajorRecord> ParameterOneRecord { get; }
        new Int32 ParameterOneNumber { get; set; }
        new String? ParameterOneString { get; set; }
        new IFormLink<SkyrimMajorRecord> ParameterTwoRecord { get; }
        new Int32 ParameterTwoNumber { get; set; }
        new String? ParameterTwoString { get; set; }
    }

    public partial interface IFunctionConditionDataGetter :
        IConditionDataGetter,
        ILoquiObject<IFunctionConditionDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        UInt16 Function { get; }
        UInt16 Unknown2 { get; }
        IFormLinkGetter<ISkyrimMajorRecordGetter> ParameterOneRecord { get; }
        Int32 ParameterOneNumber { get; }
        String? ParameterOneString { get; }
        IFormLinkGetter<ISkyrimMajorRecordGetter> ParameterTwoRecord { get; }
        Int32 ParameterTwoNumber { get; }
        String? ParameterTwoString { get; }
        Int32 Unknown3 { get; }
        Int32 Unknown4 { get; }
        Int32 Unknown5 { get; }

    }

    #endregion

    #region Common MixIn
    public static class FunctionConditionDataMixIn
    {
        public static void Clear(this IFunctionConditionDataInternal item)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FunctionConditionData.Mask<bool> GetEqualsMask(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFunctionConditionDataGetter item,
            FileGeneration fg,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFunctionConditionDataGetter item,
            FunctionConditionData.Mask<bool?> checkMask)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FunctionConditionData.Mask<bool> GetHasBeenSetMask(this IFunctionConditionDataGetter item)
        {
            var ret = new FunctionConditionData.Mask<bool>(false);
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFunctionConditionDataInternal lhs,
            IFunctionConditionDataGetter rhs,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFunctionConditionDataInternal lhs,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFunctionConditionDataInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FunctionConditionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FunctionConditionData_FieldIndex
    {
        Function = 0,
        Unknown2 = 1,
        ParameterOneRecord = 2,
        ParameterOneNumber = 3,
        ParameterOneString = 4,
        ParameterTwoRecord = 5,
        ParameterTwoNumber = 6,
        ParameterTwoString = 7,
        Unknown3 = 8,
        Unknown4 = 9,
        Unknown5 = 10,
    }
    #endregion

    #region Registration
    public partial class FunctionConditionData_Registration : ILoquiRegistration
    {
        public static readonly FunctionConditionData_Registration Instance = new FunctionConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 39,
            version: 0);

        public const string GUID = "c7686727-e470-4c34-80ce-423cf65c7b92";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(FunctionConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FunctionConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(FunctionConditionData);

        public static readonly Type GetterType = typeof(IFunctionConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFunctionConditionData);

        public static readonly Type? InternalSetterType = typeof(IFunctionConditionDataInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.FunctionConditionData";

        public const string Name = "FunctionConditionData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FUNCTION":
                    return (ushort)FunctionConditionData_FieldIndex.Function;
                case "UNKNOWN2":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown2;
                case "PARAMETERONERECORD":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneRecord;
                case "PARAMETERONENUMBER":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneNumber;
                case "PARAMETERONESTRING":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterOneString;
                case "PARAMETERTWORECORD":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoRecord;
                case "PARAMETERTWONUMBER":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoNumber;
                case "PARAMETERTWOSTRING":
                    return (ushort)FunctionConditionData_FieldIndex.ParameterTwoString;
                case "UNKNOWN3":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown3;
                case "UNKNOWN4":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown4;
                case "UNKNOWN5":
                    return (ushort)FunctionConditionData_FieldIndex.Unknown5;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    return "Function";
                case FunctionConditionData_FieldIndex.Unknown2:
                    return "Unknown2";
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    return "ParameterOneRecord";
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    return "ParameterOneNumber";
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return "ParameterOneString";
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    return "ParameterTwoRecord";
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    return "ParameterTwoNumber";
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return "ParameterTwoString";
                case FunctionConditionData_FieldIndex.Unknown3:
                    return "Unknown3";
                case FunctionConditionData_FieldIndex.Unknown4:
                    return "Unknown4";
                case FunctionConditionData_FieldIndex.Unknown5:
                    return "Unknown5";
                default:
                    return ConditionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                case FunctionConditionData_FieldIndex.Unknown2:
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                case FunctionConditionData_FieldIndex.ParameterOneString:
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                case FunctionConditionData_FieldIndex.Unknown3:
                case FunctionConditionData_FieldIndex.Unknown4:
                case FunctionConditionData_FieldIndex.Unknown5:
                    return false;
                default:
                    return ConditionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
            switch (enu)
            {
                case FunctionConditionData_FieldIndex.Function:
                    return typeof(UInt16);
                case FunctionConditionData_FieldIndex.Unknown2:
                    return typeof(UInt16);
                case FunctionConditionData_FieldIndex.ParameterOneRecord:
                    return typeof(IFormLink<SkyrimMajorRecord>);
                case FunctionConditionData_FieldIndex.ParameterOneNumber:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return typeof(String);
                case FunctionConditionData_FieldIndex.ParameterTwoRecord:
                    return typeof(IFormLink<SkyrimMajorRecord>);
                case FunctionConditionData_FieldIndex.ParameterTwoNumber:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return typeof(String);
                case FunctionConditionData_FieldIndex.Unknown3:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.Unknown4:
                    return typeof(Int32);
                case FunctionConditionData_FieldIndex.Unknown5:
                    return typeof(Int32);
                default:
                    return ConditionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FunctionConditionDataXmlWriteTranslation);
        public const int NumStructFields = 11;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FunctionConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FunctionConditionDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly FunctionConditionDataSetterCommon Instance = new FunctionConditionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFunctionConditionDataInternal item)
        {
            ClearPartial();
            item.Function = default;
            item.Unknown2 = default;
            item.ParameterOneRecord.FormKey = FormKey.Null;
            item.ParameterTwoRecord.FormKey = FormKey.Null;
            item.Unknown3 = default;
            item.Unknown4 = default;
            item.Unknown5 = FunctionConditionData._Unknown5_Default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IFunctionConditionDataInternal)item);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FunctionConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Function = frame.ReadUInt16();
            item.Unknown2 = frame.ReadUInt16();
            FunctionConditionDataBinaryCreateTranslation.FillBinaryParameterParsingCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }
        
        public void CopyInFromBinary(
            IFunctionConditionDataInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataCommon : ConditionDataCommon
    {
        public new static readonly FunctionConditionDataCommon Instance = new FunctionConditionDataCommon();

        public FunctionConditionData.Mask<bool> GetEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FunctionConditionData.Mask<bool>(false);
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Function = item.Function == rhs.Function;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ParameterOneRecord = object.Equals(item.ParameterOneRecord, rhs.ParameterOneRecord);
            ret.ParameterOneNumber = item.ParameterOneNumber == rhs.ParameterOneNumber;
            ret.ParameterOneString = string.Equals(item.ParameterOneString, rhs.ParameterOneString);
            ret.ParameterTwoRecord = object.Equals(item.ParameterTwoRecord, rhs.ParameterTwoRecord);
            ret.ParameterTwoNumber = item.ParameterTwoNumber == rhs.ParameterTwoNumber;
            ret.ParameterTwoString = string.Equals(item.ParameterTwoString, rhs.ParameterTwoString);
            ret.Unknown3 = item.Unknown3 == rhs.Unknown3;
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.Unknown5 = item.Unknown5 == rhs.Unknown5;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FunctionConditionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (FunctionConditionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFunctionConditionDataGetter item,
            FileGeneration fg,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Function ?? true)
            {
                fg.AppendItem(item.Function, "Function");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ParameterOneRecord ?? true)
            {
                fg.AppendItem(item.ParameterOneRecord, "ParameterOneRecord");
            }
            if (printMask?.ParameterOneNumber ?? true)
            {
                fg.AppendItem(item.ParameterOneNumber, "ParameterOneNumber");
            }
            if ((printMask?.ParameterOneString ?? true)
                && item.ParameterOneString.TryGet(out var ParameterOneStringItem))
            {
                fg.AppendItem(ParameterOneStringItem, "ParameterOneString");
            }
            if (printMask?.ParameterTwoRecord ?? true)
            {
                fg.AppendItem(item.ParameterTwoRecord, "ParameterTwoRecord");
            }
            if (printMask?.ParameterTwoNumber ?? true)
            {
                fg.AppendItem(item.ParameterTwoNumber, "ParameterTwoNumber");
            }
            if ((printMask?.ParameterTwoString ?? true)
                && item.ParameterTwoString.TryGet(out var ParameterTwoStringItem))
            {
                fg.AppendItem(ParameterTwoStringItem, "ParameterTwoString");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                fg.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.Unknown5 ?? true)
            {
                fg.AppendItem(item.Unknown5, "Unknown5");
            }
        }
        
        public bool HasBeenSet(
            IFunctionConditionDataGetter item,
            FunctionConditionData.Mask<bool?> checkMask)
        {
            if (checkMask.ParameterOneString.HasValue && checkMask.ParameterOneString.Value != (item.ParameterOneString != null)) return false;
            if (checkMask.ParameterTwoString.HasValue && checkMask.ParameterTwoString.Value != (item.ParameterTwoString != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFunctionConditionDataGetter item,
            FunctionConditionData.Mask<bool> mask)
        {
            mask.Function = true;
            mask.Unknown2 = true;
            mask.ParameterOneRecord = true;
            mask.ParameterOneNumber = true;
            mask.ParameterOneString = (item.ParameterOneString != null);
            mask.ParameterTwoRecord = true;
            mask.ParameterTwoNumber = true;
            mask.ParameterTwoString = (item.ParameterTwoString != null);
            mask.Unknown3 = true;
            mask.Unknown4 = true;
            mask.Unknown5 = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static FunctionConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFunctionConditionDataGetter? lhs,
            IFunctionConditionDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Function != rhs.Function) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (!lhs.ParameterOneRecord.Equals(rhs.ParameterOneRecord)) return false;
            if (lhs.ParameterOneNumber != rhs.ParameterOneNumber) return false;
            if (!string.Equals(lhs.ParameterOneString, rhs.ParameterOneString)) return false;
            if (!lhs.ParameterTwoRecord.Equals(rhs.ParameterTwoRecord)) return false;
            if (lhs.ParameterTwoNumber != rhs.ParameterTwoNumber) return false;
            if (!string.Equals(lhs.ParameterTwoString, rhs.ParameterTwoString)) return false;
            if (lhs.Unknown3 != rhs.Unknown3) return false;
            if (lhs.Unknown4 != rhs.Unknown4) return false;
            if (lhs.Unknown5 != rhs.Unknown5) return false;
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs)
        {
            return Equals(
                lhs: (IFunctionConditionDataGetter?)lhs,
                rhs: rhs as IFunctionConditionDataGetter);
        }
        
        public virtual int GetHashCode(IFunctionConditionDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Function).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterOneRecord).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterOneNumber).CombineHashCode(ret);
            if (item.ParameterOneString.TryGet(out var ParameterOneStringitem))
            {
                ret = HashHelper.GetHashCode(ParameterOneStringitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ParameterTwoRecord).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParameterTwoNumber).CombineHashCode(ret);
            if (item.ParameterTwoString.TryGet(out var ParameterTwoStringitem))
            {
                ret = HashHelper.GetHashCode(ParameterTwoStringitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Unknown3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown4).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown5).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IFunctionConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FunctionConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFunctionConditionDataGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.ParameterOneRecord;
            yield return obj.ParameterTwoRecord;
            yield break;
        }
        
        #endregion
        
    }
    public partial class FunctionConditionDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly FunctionConditionDataSetterTranslationCommon Instance = new FunctionConditionDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFunctionConditionDataInternal item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                item.ParameterOneRecord.FormKey = rhs.ParameterOneRecord.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                item.ParameterOneNumber = rhs.ParameterOneNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                item.ParameterOneString = rhs.ParameterOneString;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                item.ParameterTwoRecord.FormKey = rhs.ParameterTwoRecord.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                item.ParameterTwoNumber = rhs.ParameterTwoNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                item.ParameterTwoString = rhs.ParameterTwoString;
            }
            DeepCopyIn(
                (IFunctionConditionData)item,
                (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public void DeepCopyIn(
            IFunctionConditionData item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                item.Function = rhs.Function;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5;
            }
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFunctionConditionData)item,
                rhs: (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FunctionConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration Registration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FunctionConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataXmlWriteTranslation :
        ConditionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FunctionConditionDataXmlWriteTranslation Instance = new FunctionConditionDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFunctionConditionDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ConditionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Function),
                    item: item.Function,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Function,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneRecord) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneRecord),
                    item: item.ParameterOneRecord.FormKey,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneRecord,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneNumber),
                    item: item.ParameterOneNumber,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneNumber,
                    errorMask: errorMask);
            }
            if ((item.ParameterOneString != null)
                && (translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterOneString) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterOneString),
                    item: item.ParameterOneString,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterOneString,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoRecord) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoRecord),
                    item: item.ParameterTwoRecord.FormKey,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoRecord,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoNumber) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoNumber),
                    item: item.ParameterTwoNumber,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoNumber,
                    errorMask: errorMask);
            }
            if ((item.ParameterTwoString != null)
                && (translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.ParameterTwoString) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParameterTwoString),
                    item: item.ParameterTwoString,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.ParameterTwoString,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown3) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown3),
                    item: item.Unknown3,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown4) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown4),
                    item: item.Unknown4,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown4,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown5) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown5),
                    item: item.Unknown5,
                    fieldIndex: (int)FunctionConditionData_FieldIndex.Unknown5,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FunctionConditionData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FunctionConditionData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FunctionConditionDataXmlCreateTranslation : ConditionDataXmlCreateTranslation
    {
        public new readonly static FunctionConditionDataXmlCreateTranslation Instance = new FunctionConditionDataXmlCreateTranslation();

        public static void FillPublicXml(
            IFunctionConditionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FunctionConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFunctionConditionDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Function":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Function);
                    try
                    {
                        item.Function = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneRecord":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneRecord);
                    try
                    {
                        item.ParameterOneRecord.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneNumber":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneNumber);
                    try
                    {
                        item.ParameterOneNumber = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterOneString":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterOneString);
                    try
                    {
                        item.ParameterOneString = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoRecord":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoRecord);
                    try
                    {
                        item.ParameterTwoRecord.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoNumber":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoNumber);
                    try
                    {
                        item.ParameterTwoNumber = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParameterTwoString":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.ParameterTwoString);
                    try
                    {
                        item.ParameterTwoString = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown3":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown3);
                    try
                    {
                        item.Unknown3 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown4":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown4);
                    try
                    {
                        item.Unknown4 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown5":
                    errorMask?.PushIndex((int)FunctionConditionData_FieldIndex.Unknown5);
                    try
                    {
                        item.Unknown5 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FunctionConditionDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            XElement node,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FunctionConditionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            string path,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFunctionConditionDataGetter item,
            Stream stream,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FunctionConditionDataBinaryWriteTranslation Instance = new FunctionConditionDataBinaryWriteTranslation();

        static partial void WriteBinaryParameterParsingCustom(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryParameterParsing(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryParameterParsingCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            IFunctionConditionDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            writer.Write(item.Function);
            writer.Write(item.Unknown2);
            FunctionConditionDataBinaryWriteTranslation.WriteBinaryParameterParsing(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FunctionConditionDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new readonly static FunctionConditionDataBinaryCreateTranslation Instance = new FunctionConditionDataBinaryCreateTranslation();

        static partial void FillBinaryParameterParsingCustom(
            MutagenFrame frame,
            IFunctionConditionDataInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryParameterParsingCustomPublic(
            MutagenFrame frame,
            IFunctionConditionDataInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryParameterParsingCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FunctionConditionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FunctionConditionDataBinaryOverlay :
        ConditionDataBinaryOverlay,
        IFunctionConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static FunctionConditionData_Registration Registration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFunctionConditionDataGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => FunctionConditionDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FunctionConditionDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FunctionConditionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public UInt16 Function => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0, 2));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(2, 2));
        #region ParameterParsing
        partial void ParameterParsingCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FunctionConditionDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FunctionConditionDataBinaryOverlay FunctionConditionDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FunctionConditionDataBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 4),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

