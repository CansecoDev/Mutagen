/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class GenderedFormLinks<T> :
        IGenderedFormLinks<T>,
        ILoquiObjectSetter<GenderedFormLinks<T>>,
        IEquatable<GenderedFormLinks<T>>,
        IEqualsMask
        where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
    {
        #region Ctor
        public GenderedFormLinks()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<T> _Male = new FormLink<T>();
        public IFormLink<T> Male => this._Male;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<T> IGenderedFormLinksGetter<T>.Male => this.Male;
        #endregion
        #region Female
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<T> _Female = new FormLink<T>();
        public IFormLink<T> Female => this._Female;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<T> IGenderedFormLinksGetter<T>.Female => this.Female;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GenderedFormLinksMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGenderedFormLinksGetter<T> rhs)) return false;
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(GenderedFormLinks<T> obj)
        {
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GenderedFormLinksXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GenderedFormLinksXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static GenderedFormLinks<T> CreateFromXml<T_TranslMask>(
            XElement node,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GenderedFormLinks<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            XElement node,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GenderedFormLinks.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static GenderedFormLinks<T> CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new GenderedFormLinks<T>();
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static GenderedFormLinks<T> CreateFromXml<T_TranslMask>(
            string path,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GenderedFormLinks<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GenderedFormLinks<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder? errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GenderedFormLinks<T> CreateFromXml<T_TranslMask>(
            Stream stream,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GenderedFormLinks<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GenderedFormLinks<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => GenderedFormLinksCommon<T>.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GenderedFormLinksBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GenderedFormLinksBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static GenderedFormLinks<T> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static GenderedFormLinks<T> CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new GenderedFormLinks<T>();
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGenderedFormLinksGetter<T>)rhs, include);

        void IClearable.Clear()
        {
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GenderedFormLinks<T> GetNew()
        {
            return new GenderedFormLinks<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IGenderedFormLinks<T> :
        IGenderedFormLinksGetter<T>,
        ILoquiObjectSetter<IGenderedFormLinks<T>>
        where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
    {
        new IFormLink<T> Male { get; }
        new IFormLink<T> Female { get; }
    }

    public partial interface IGenderedFormLinksGetter<out T> :
        ILoquiObject,
        ILoquiObject<IGenderedFormLinksGetter<T>>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
        where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkGetter<T> Male { get; }
        IFormLinkGetter<T> Female { get; }

    }

    #endregion

    #region Common MixIn
    public static class GenderedFormLinksMixIn
    {
        public static void Clear<T>(this IGenderedFormLinks<T> item)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GenderedFormLinks.Mask<bool> GetEqualsMask<T>(
            this IGenderedFormLinksGetter<T> item,
            IGenderedFormLinksGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this IGenderedFormLinksGetter<T> item,
            string? name = null,
            GenderedFormLinks.Mask<bool>? printMask = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this IGenderedFormLinksGetter<T> item,
            FileGeneration fg,
            string? name = null,
            GenderedFormLinks.Mask<bool>? printMask = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet<T>(
            this IGenderedFormLinksGetter<T> item,
            GenderedFormLinks.Mask<bool?> checkMask)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GenderedFormLinks.Mask<bool> GetHasBeenSetMask<T>(this IGenderedFormLinksGetter<T> item)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var ret = new GenderedFormLinks.Mask<bool>(false);
            ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals<T>(
            this IGenderedFormLinksGetter<T> item,
            IGenderedFormLinksGetter<T> rhs)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn<T, TGetter, T_TranslMask>(
            this IGenderedFormLinks<T> lhs,
            IGenderedFormLinksGetter<TGetter> rhs,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> lhs,
            IGenderedFormLinksGetter<TGetter> rhs,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = GenderedFormLinks.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T, TGetter>(
            this IGenderedFormLinks<T> lhs,
            IGenderedFormLinksGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static GenderedFormLinks<T> DeepCopy<T, TGetter, T_TranslMask>(
            this IGenderedFormLinksGetter<TGetter> item,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static GenderedFormLinks<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinksGetter<TGetter> item,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GenderedFormLinks<T> DeepCopy<T, TGetter, T_TranslMask>(
            this IGenderedFormLinksGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GenderedFormLinksSetterTranslationCommon)((IGenderedFormLinksGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            XElement node,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            XElement node,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GenderedFormLinks.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml<T>(
            this IGenderedFormLinks<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            string path,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            string path,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            Stream stream,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            Stream stream,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinks<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary<T>(
            this IGenderedFormLinks<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences)
            where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary<T>(
            this IGenderedFormLinks<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksSetterCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GenderedFormLinks_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public partial class GenderedFormLinks_Registration : ILoquiRegistration
    {
        public static readonly GenderedFormLinks_Registration Instance = new GenderedFormLinks_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 54,
            version: 0);

        public const string GUID = "5f2c8f19-105f-49bf-b0e8-306df7d6ac1c";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(GenderedFormLinks.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GenderedFormLinks.ErrorMask<>);

        public static readonly Type ClassType = typeof(GenderedFormLinks<>);

        public static readonly Type GetterType = typeof(IGenderedFormLinksGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGenderedFormLinks<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.GenderedFormLinks";

        public const string Name = "GenderedFormLinks";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(GenderedFormLinks_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)GenderedFormLinks_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)GenderedFormLinks_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                case GenderedFormLinks_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                case GenderedFormLinks_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                case GenderedFormLinks_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                    return "Male";
                case GenderedFormLinks_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                case GenderedFormLinks_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                case GenderedFormLinks_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly Type XmlWriteTranslation = typeof(GenderedFormLinksXmlWriteTranslation);
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(GenderedFormLinksBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class GenderedFormLinks_Registration<T> : GenderedFormLinks_Registration
        where T : SkyrimMajorRecord, IXmlItem, IBinaryItem
    {
        public static readonly GenderedFormLinks_Registration<T> GenericInstance = new GenderedFormLinks_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
            switch (enu)
            {
                case GenderedFormLinks_FieldIndex.Male:
                    return typeof(IFormLink<T>);
                case GenderedFormLinks_FieldIndex.Female:
                    return typeof(IFormLink<T>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class GenderedFormLinksSetterCommon<T>
        where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public static readonly GenderedFormLinksSetterCommon<T> Instance = new GenderedFormLinksSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IGenderedFormLinks<T> item)
        {
            ClearPartial();
            item.Male.FormKey = FormKey.Null;
            item.Female.FormKey = FormKey.Null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IGenderedFormLinks<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GenderedFormLinksXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IGenderedFormLinks<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Male.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.Female.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
        }
        
        public void CopyInFromBinary(
            IGenderedFormLinks<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class GenderedFormLinksCommon<T>
        where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
    {
        public static readonly GenderedFormLinksCommon<T> Instance = new GenderedFormLinksCommon<T>();

        public GenderedFormLinks.Mask<bool> GetEqualsMask(
            IGenderedFormLinksGetter<T> item,
            IGenderedFormLinksGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GenderedFormLinks.Mask<bool>(false);
            ((GenderedFormLinksCommon<T>)((IGenderedFormLinksGetter<T>)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGenderedFormLinksGetter<T> item,
            IGenderedFormLinksGetter<T> rhs,
            GenderedFormLinks.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Male = object.Equals(item.Male, rhs.Male);
            ret.Female = object.Equals(item.Female, rhs.Female);
        }
        
        public string ToString(
            IGenderedFormLinksGetter<T> item,
            string? name = null,
            GenderedFormLinks.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGenderedFormLinksGetter<T> item,
            FileGeneration fg,
            string? name = null,
            GenderedFormLinks.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GenderedFormLinks<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (GenderedFormLinks<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGenderedFormLinksGetter<T> item,
            FileGeneration fg,
            GenderedFormLinks.Mask<bool>? printMask = null)
        {
            if (printMask?.Male ?? true)
            {
                fg.AppendItem(item.Male, "Male");
            }
            if (printMask?.Female ?? true)
            {
                fg.AppendItem(item.Female, "Female");
            }
        }
        
        public bool HasBeenSet(
            IGenderedFormLinksGetter<T> item,
            GenderedFormLinks.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IGenderedFormLinksGetter<T> item,
            GenderedFormLinks.Mask<bool> mask)
        {
            mask.Male = true;
            mask.Female = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGenderedFormLinksGetter<T>? lhs,
            IGenderedFormLinksGetter<T>? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Male.Equals(rhs.Male)) return false;
            if (!lhs.Female.Equals(rhs.Female)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IGenderedFormLinksGetter<T> item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Male).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Female).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
        {
            return GenderedFormLinks<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IGenderedFormLinksGetter<T> obj)
        {
            yield return obj.Male;
            yield return obj.Female;
            yield break;
        }
        
        #endregion
        
    }
    public partial class GenderedFormLinksSetterTranslationCommon
    {
        public static readonly GenderedFormLinksSetterTranslationCommon Instance = new GenderedFormLinksSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn<T, TGetter>(
            IGenderedFormLinks<T> item,
            IGenderedFormLinksGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)GenderedFormLinks_FieldIndex.Male) ?? true))
            {
                item.Male.FormKey = rhs.Male.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)GenderedFormLinks_FieldIndex.Female) ?? true))
            {
                item.Female.FormKey = rhs.Female.FormKey;
            }
        }
        
        #endregion
        
        public GenderedFormLinks<T> DeepCopy<T, TGetter, T_TranslMask>(
            IGenderedFormLinksGetter<TGetter> item,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            GenderedFormLinks<T> ret = (GenderedFormLinks<T>)((GenderedFormLinksCommon<TGetter>)((IGenderedFormLinksGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_TranslMask>(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public GenderedFormLinks<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            IGenderedFormLinksGetter<TGetter> item,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            GenderedFormLinks<T> ret = (GenderedFormLinks<T>)((GenderedFormLinksCommon<TGetter>)((IGenderedFormLinksGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public GenderedFormLinks<T> DeepCopy<T, TGetter>(
            IGenderedFormLinksGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            GenderedFormLinks<T> ret = (GenderedFormLinks<T>)((GenderedFormLinksCommon<TGetter>)((IGenderedFormLinksGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter>(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class GenderedFormLinks<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenderedFormLinks_Registration.Instance;
        public static GenderedFormLinks_Registration Registration => GenderedFormLinks_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GenderedFormLinksCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GenderedFormLinksSetterCommon<T>.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GenderedFormLinksSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGenderedFormLinksGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGenderedFormLinksGetter<T>.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGenderedFormLinksGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GenderedFormLinksXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static GenderedFormLinksXmlWriteTranslation Instance = new GenderedFormLinksXmlWriteTranslation();

        public static void WriteToNodeXml<T>(
            IGenderedFormLinksGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((translationMask?.GetShouldTranslate((int)GenderedFormLinks_FieldIndex.Male) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Male),
                    item: item.Male.FormKey,
                    fieldIndex: (int)GenderedFormLinks_FieldIndex.Male,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GenderedFormLinks_FieldIndex.Female) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Female),
                    item: item.Female.FormKey,
                    fieldIndex: (int)GenderedFormLinks_FieldIndex.Female,
                    errorMask: errorMask);
            }
        }

        public void Write<T>(
            XElement node,
            IGenderedFormLinksGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GenderedFormLinks");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GenderedFormLinks");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            throw new NotImplementedException();
        }

        public void Write<T>(
            XElement node,
            IGenderedFormLinksGetter<T> item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IGenderedFormLinksGetter<T>)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class GenderedFormLinksXmlCreateTranslation<T>
        where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static GenderedFormLinksXmlCreateTranslation<T> Instance = new GenderedFormLinksXmlCreateTranslation<T>();

        public static void FillPublicXml(
            IGenderedFormLinks<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GenderedFormLinksXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGenderedFormLinks<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Male":
                    errorMask?.PushIndex((int)GenderedFormLinks_FieldIndex.Male);
                    try
                    {
                        item.Male.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Female":
                    errorMask?.PushIndex((int)GenderedFormLinks_FieldIndex.Female);
                    try
                    {
                        item.Female.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class GenderedFormLinksXmlTranslationMixIn
    {
        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            XElement node,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GenderedFormLinksXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GenderedFormLinks.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            string path,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T>(
            this IGenderedFormLinksGetter<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            Stream stream,
            out GenderedFormLinks.ErrorMask<T_ErrMask> errorMask,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IGenderedFormLinksGetter<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IGenderedFormLinksGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GenderedFormLinksXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            XElement node,
            string? name = null,
            GenderedFormLinks.TranslationMask<T_TranslMask>? translationMask = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            ((GenderedFormLinksXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            string path,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((GenderedFormLinksXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IGenderedFormLinksGetter<T> item,
            Stream stream,
            string? name = null)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((GenderedFormLinksXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GenderedFormLinksBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static GenderedFormLinksBinaryWriteTranslation Instance = new GenderedFormLinksBinaryWriteTranslation();

        public static void Write_Embedded<T>(
            IGenderedFormLinksGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Male,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Female,
                masterReferences: masterReferences);
        }

        public void Write<T>(
            MutagenWriter writer,
            IGenderedFormLinksGetter<T> item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            throw new NotImplementedException();
        }

    }

    public partial class GenderedFormLinksBinaryCreateTranslation<T>
        where T : class, ISkyrimMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static GenderedFormLinksBinaryCreateTranslation<T> Instance = new GenderedFormLinksBinaryCreateTranslation<T>();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class GenderedFormLinksBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this IGenderedFormLinksGetter<T> item,
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            ((GenderedFormLinksBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GenderedFormLinksBinaryOverlay<T> :
        BinaryOverlay,
        IGenderedFormLinksGetter<T>
        where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenderedFormLinks_Registration.Instance;
        public static GenderedFormLinks_Registration Registration => GenderedFormLinks_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GenderedFormLinksCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GenderedFormLinksSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGenderedFormLinksGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGenderedFormLinksGetter<T>.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGenderedFormLinksGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGenderedFormLinksGetter<T>)rhs, include);

        public IEnumerable<ILinkGetter> Links => GenderedFormLinksCommon<T>.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GenderedFormLinksXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GenderedFormLinksXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GenderedFormLinksBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GenderedFormLinksBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormLinkGetter<T> Male => new FormLink<T>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IFormLinkGetter<T> Female => new FormLink<T>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GenderedFormLinksBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GenderedFormLinksBinaryOverlay<T> GenderedFormLinksFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new GenderedFormLinksBinaryOverlay<T>(
                bytes: stream.RemainingMemory.Slice(0, 8),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Skyrim
{
    public static class GenderedFormLinks
    {
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Male = initialValue;
                this.Female = initialValue;
            }
        
            public Mask(
                TItem Male,
                TItem Female)
            {
                this.Male = Male;
                this.Female = Female;
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem Male;
            public TItem Female;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Male, rhs.Male)) return false;
                if (!object.Equals(this.Female, rhs.Female)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Male?.GetHashCode());
                ret = ret.CombineHashCode(this.Female?.GetHashCode());
                return ret;
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Male)) return false;
                if (!eval(this.Female)) return false;
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Male)) return true;
                if (eval(this.Female)) return true;
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GenderedFormLinks.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Male = eval(this.Male);
                obj.Female = eval(this.Female);
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }
        
            public string ToString(GenderedFormLinks.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, GenderedFormLinks.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(GenderedFormLinks.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Male ?? true)
                    {
                        fg.AppendItem(Male, "Male");
                    }
                    if (printMask?.Female ?? true)
                    {
                        fg.AppendItem(Female, "Female");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion
        
        }
        
        public class ErrorMask<T_ErrMask> :
            IErrorMask,
            IErrorMask<ErrorMask<T_ErrMask>>
            where T_ErrMask : SkyrimMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Male;
            public Exception? Female;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
                switch (enu)
                {
                    case GenderedFormLinks_FieldIndex.Male:
                        return Male;
                    case GenderedFormLinks_FieldIndex.Female:
                        return Female;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
                switch (enu)
                {
                    case GenderedFormLinks_FieldIndex.Male:
                        this.Male = ex;
                        break;
                    case GenderedFormLinks_FieldIndex.Female:
                        this.Female = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                GenderedFormLinks_FieldIndex enu = (GenderedFormLinks_FieldIndex)index;
                switch (enu)
                {
                    case GenderedFormLinks_FieldIndex.Male:
                        this.Male = (Exception?)obj;
                        break;
                    case GenderedFormLinks_FieldIndex.Female:
                        this.Female = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Male != null) return true;
                if (Female != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Male, "Male");
                fg.AppendItem(Female, "Female");
            }
            #endregion
        
            #region Combine
            public ErrorMask<T_ErrMask> Combine(ErrorMask<T_ErrMask>? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask<T_ErrMask>();
                ret.Male = this.Male.Combine(rhs.Male);
                ret.Female = this.Female.Combine(rhs.Female);
                return ret;
            }
            public static ErrorMask<T_ErrMask>? Combine(ErrorMask<T_ErrMask>? lhs, ErrorMask<T_ErrMask>? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask<T_ErrMask>();
            }
            #endregion
        
        }
        public class TranslationMask<T_TranslMask> : ITranslationMask
            where T_TranslMask : SkyrimMajorRecord.TranslationMask, ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Male;
            public bool Female;
            #endregion
        
            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Male = defaultOn;
                this.Female = defaultOn;
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Male, null));
                ret.Add((Female, null));
            }
        }
    }
}
