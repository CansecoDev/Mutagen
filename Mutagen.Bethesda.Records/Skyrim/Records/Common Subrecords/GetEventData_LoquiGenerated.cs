/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class GetEventData :
        ConditionData,
        IGetEventData,
        ILoquiObjectSetter<GetEventData>,
        IEquatable<GetEventData>,
        IEqualsMask
    {
        #region Ctor
        public GetEventData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region EventFunction
        public UInt16 EventFunction { get; set; } = default;
        #endregion
        #region EventMember
        public UInt16 EventMember { get; set; } = default;
        #endregion
        #region Parameter3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<SkyrimMajorRecord> _Parameter3 = new FormLink<SkyrimMajorRecord>();
        public IFormLink<SkyrimMajorRecord> Parameter3 => this._Parameter3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISkyrimMajorRecordGetter> IGetEventDataGetter.Parameter3 => this.Parameter3;
        #endregion
        #region RunOnType
        public Condition.RunOnType RunOnType { get; set; } = default;
        #endregion
        #region Reference
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<SkyrimMajorRecord> _Reference = new FormLink<SkyrimMajorRecord>();
        public IFormLink<SkyrimMajorRecord> Reference => this._Reference;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISkyrimMajorRecordGetter> IGetEventDataGetter.Reference => this.Reference;
        #endregion
        #region Unknown3
        public readonly static Int32 _Unknown3_Default = -1;
        public Int32 Unknown3 { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GetEventDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IGetEventDataGetter rhs)) return false;
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(GetEventData obj)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GetEventDataCommon)((IGetEventDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GetEventDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GetEventDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new GetEventData CreateFromXml(
            XElement node,
            GetEventData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GetEventData CreateFromXml(
            XElement node,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static GetEventData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new GetEventData();
            ((GetEventDataSetterCommon)((IGetEventDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static GetEventData CreateFromXml(
            string path,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GetEventData CreateFromXml(
            string path,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GetEventData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GetEventData CreateFromXml(
            Stream stream,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GetEventData CreateFromXml(
            Stream stream,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GetEventData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            ConditionData.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Unknown2 = initialValue;
                this.EventFunction = initialValue;
                this.EventMember = initialValue;
                this.Parameter3 = initialValue;
                this.RunOnType = initialValue;
                this.Reference = initialValue;
                this.Unknown3 = initialValue;
            }

            public Mask(
                T Unknown2,
                T EventFunction,
                T EventMember,
                T Parameter3,
                T RunOnType,
                T Reference,
                T Unknown3)
            : base()
            {
                this.Unknown2 = Unknown2;
                this.EventFunction = EventFunction;
                this.EventMember = EventMember;
                this.Parameter3 = Parameter3;
                this.RunOnType = RunOnType;
                this.Reference = Reference;
                this.Unknown3 = Unknown3;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Unknown2;
            public T EventFunction;
            public T EventMember;
            public T Parameter3;
            public T RunOnType;
            public T Reference;
            public T Unknown3;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.EventFunction, rhs.EventFunction)) return false;
                if (!object.Equals(this.EventMember, rhs.EventMember)) return false;
                if (!object.Equals(this.Parameter3, rhs.Parameter3)) return false;
                if (!object.Equals(this.RunOnType, rhs.RunOnType)) return false;
                if (!object.Equals(this.Reference, rhs.Reference)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Unknown2?.GetHashCode());
                ret = ret.CombineHashCode(this.EventFunction?.GetHashCode());
                ret = ret.CombineHashCode(this.EventMember?.GetHashCode());
                ret = ret.CombineHashCode(this.Parameter3?.GetHashCode());
                ret = ret.CombineHashCode(this.RunOnType?.GetHashCode());
                ret = ret.CombineHashCode(this.Reference?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown3?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.EventFunction)) return false;
                if (!eval(this.EventMember)) return false;
                if (!eval(this.Parameter3)) return false;
                if (!eval(this.RunOnType)) return false;
                if (!eval(this.Reference)) return false;
                if (!eval(this.Unknown3)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.EventFunction)) return true;
                if (eval(this.EventMember)) return true;
                if (eval(this.Parameter3)) return true;
                if (eval(this.RunOnType)) return true;
                if (eval(this.Reference)) return true;
                if (eval(this.Unknown3)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new GetEventData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Unknown2 = eval(this.Unknown2);
                obj.EventFunction = eval(this.EventFunction);
                obj.EventMember = eval(this.EventMember);
                obj.Parameter3 = eval(this.Parameter3);
                obj.RunOnType = eval(this.RunOnType);
                obj.Reference = eval(this.Reference);
                obj.Unknown3 = eval(this.Unknown3);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(GetEventData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, GetEventData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(GetEventData.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendLine($"Unknown2 => {Unknown2}");
                    }
                    if (printMask?.EventFunction ?? true)
                    {
                        fg.AppendLine($"EventFunction => {EventFunction}");
                    }
                    if (printMask?.EventMember ?? true)
                    {
                        fg.AppendLine($"EventMember => {EventMember}");
                    }
                    if (printMask?.Parameter3 ?? true)
                    {
                        fg.AppendLine($"Parameter3 => {Parameter3}");
                    }
                    if (printMask?.RunOnType ?? true)
                    {
                        fg.AppendLine($"RunOnType => {RunOnType}");
                    }
                    if (printMask?.Reference ?? true)
                    {
                        fg.AppendLine($"Reference => {Reference}");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendLine($"Unknown3 => {Unknown3}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Unknown2;
            public Exception? EventFunction;
            public Exception? EventMember;
            public Exception? Parameter3;
            public Exception? RunOnType;
            public Exception? Reference;
            public Exception? Unknown3;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.Unknown2:
                        return Unknown2;
                    case GetEventData_FieldIndex.EventFunction:
                        return EventFunction;
                    case GetEventData_FieldIndex.EventMember:
                        return EventMember;
                    case GetEventData_FieldIndex.Parameter3:
                        return Parameter3;
                    case GetEventData_FieldIndex.RunOnType:
                        return RunOnType;
                    case GetEventData_FieldIndex.Reference:
                        return Reference;
                    case GetEventData_FieldIndex.Unknown3:
                        return Unknown3;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case GetEventData_FieldIndex.EventFunction:
                        this.EventFunction = ex;
                        break;
                    case GetEventData_FieldIndex.EventMember:
                        this.EventMember = ex;
                        break;
                    case GetEventData_FieldIndex.Parameter3:
                        this.Parameter3 = ex;
                        break;
                    case GetEventData_FieldIndex.RunOnType:
                        this.RunOnType = ex;
                        break;
                    case GetEventData_FieldIndex.Reference:
                        this.Reference = ex;
                        break;
                    case GetEventData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
                switch (enu)
                {
                    case GetEventData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.EventFunction:
                        this.EventFunction = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.EventMember:
                        this.EventMember = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.Parameter3:
                        this.Parameter3 = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.RunOnType:
                        this.RunOnType = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.Reference:
                        this.Reference = (Exception?)obj;
                        break;
                    case GetEventData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown2 != null) return true;
                if (EventFunction != null) return true;
                if (EventMember != null) return true;
                if (Parameter3 != null) return true;
                if (RunOnType != null) return true;
                if (Reference != null) return true;
                if (Unknown3 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Unknown2 => {Unknown2}");
                fg.AppendLine($"EventFunction => {EventFunction}");
                fg.AppendLine($"EventMember => {EventMember}");
                fg.AppendLine($"Parameter3 => {Parameter3}");
                fg.AppendLine($"RunOnType => {RunOnType}");
                fg.AppendLine($"Reference => {Reference}");
                fg.AppendLine($"Unknown3 => {Unknown3}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.EventFunction = this.EventFunction.Combine(rhs.EventFunction);
                ret.EventMember = this.EventMember.Combine(rhs.EventMember);
                ret.Parameter3 = this.Parameter3.Combine(rhs.Parameter3);
                ret.RunOnType = this.RunOnType.Combine(rhs.RunOnType);
                ret.Reference = this.Reference.Combine(rhs.Reference);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Unknown2;
            public bool EventFunction;
            public bool EventMember;
            public bool Parameter3;
            public bool RunOnType;
            public bool Reference;
            public bool Unknown3;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Unknown2 = defaultOn;
                this.EventFunction = defaultOn;
                this.EventMember = defaultOn;
                this.Parameter3 = defaultOn;
                this.RunOnType = defaultOn;
                this.Reference = defaultOn;
                this.Unknown3 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Unknown2, null));
                ret.Add((EventFunction, null));
                ret.Add((EventMember, null));
                ret.Add((Parameter3, null));
                ret.Add((RunOnType, null));
                ret.Add((Reference, null));
                ret.Add((Unknown3, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => GetEventDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GetEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GetEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new GetEventData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static GetEventData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new GetEventData();
            ((GetEventDataSetterCommon)((IGetEventDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGetEventDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GetEventData GetNew()
        {
            return new GetEventData();
        }

    }
    #endregion

    #region Interface
    public partial interface IGetEventData :
        IGetEventDataGetter,
        IConditionData,
        ILoquiObjectSetter<IGetEventData>
    {
        new UInt16 Unknown2 { get; set; }
        new UInt16 EventFunction { get; set; }
        new UInt16 EventMember { get; set; }
        new IFormLink<SkyrimMajorRecord> Parameter3 { get; }
        new Condition.RunOnType RunOnType { get; set; }
        new IFormLink<SkyrimMajorRecord> Reference { get; }
        new Int32 Unknown3 { get; set; }
    }

    public partial interface IGetEventDataGetter :
        IConditionDataGetter,
        ILoquiObject<IGetEventDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        UInt16 Unknown2 { get; }
        UInt16 EventFunction { get; }
        UInt16 EventMember { get; }
        IFormLinkGetter<ISkyrimMajorRecordGetter> Parameter3 { get; }
        Condition.RunOnType RunOnType { get; }
        IFormLinkGetter<ISkyrimMajorRecordGetter> Reference { get; }
        Int32 Unknown3 { get; }

    }

    #endregion

    #region Common MixIn
    public static class GetEventDataMixIn
    {
        public static void Clear(this IGetEventData item)
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GetEventData.Mask<bool> GetEqualsMask(
            this IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGetEventDataGetter item,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGetEventDataGetter item,
            FileGeneration fg,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGetEventDataGetter item,
            GetEventData.Mask<bool?> checkMask)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GetEventData.Mask<bool> GetHasBeenSetMask(this IGetEventDataGetter item)
        {
            var ret = new GetEventData.Mask<bool>(false);
            ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGetEventDataGetter item,
            IGetEventDataGetter rhs)
        {
            return ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IGetEventData lhs,
            IGetEventDataGetter rhs,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGetEventData lhs,
            IGetEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            GetEventData.TranslationMask? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GetEventData DeepCopy(
            this IGetEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GetEventDataSetterTranslationCommon)((IGetEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGetEventData item,
            XElement node,
            GetEventData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGetEventData item,
            XElement node,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            string path,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            string path,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            string path,
            ErrorMaskBuilder? errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            Stream stream,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            Stream stream,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGetEventData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GetEventData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IGetEventData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IGetEventData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GetEventDataSetterCommon)((IGetEventDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GetEventData_FieldIndex
    {
        Unknown2 = 0,
        EventFunction = 1,
        EventMember = 2,
        Parameter3 = 3,
        RunOnType = 4,
        Reference = 5,
        Unknown3 = 6,
    }
    #endregion

    #region Registration
    public partial class GetEventData_Registration : ILoquiRegistration
    {
        public static readonly GetEventData_Registration Instance = new GetEventData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 40,
            version: 0);

        public const string GUID = "a7f88d12-4a14-4be4-ad02-ffa74d2fa3db";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(GetEventData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GetEventData.ErrorMask);

        public static readonly Type ClassType = typeof(GetEventData);

        public static readonly Type GetterType = typeof(IGetEventDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGetEventData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.GetEventData";

        public const string Name = "GetEventData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN2":
                    return (ushort)GetEventData_FieldIndex.Unknown2;
                case "EVENTFUNCTION":
                    return (ushort)GetEventData_FieldIndex.EventFunction;
                case "EVENTMEMBER":
                    return (ushort)GetEventData_FieldIndex.EventMember;
                case "PARAMETER3":
                    return (ushort)GetEventData_FieldIndex.Parameter3;
                case "RUNONTYPE":
                    return (ushort)GetEventData_FieldIndex.RunOnType;
                case "REFERENCE":
                    return (ushort)GetEventData_FieldIndex.Reference;
                case "UNKNOWN3":
                    return (ushort)GetEventData_FieldIndex.Unknown3;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                case GetEventData_FieldIndex.EventFunction:
                case GetEventData_FieldIndex.EventMember:
                case GetEventData_FieldIndex.Parameter3:
                case GetEventData_FieldIndex.RunOnType:
                case GetEventData_FieldIndex.Reference:
                case GetEventData_FieldIndex.Unknown3:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                case GetEventData_FieldIndex.EventFunction:
                case GetEventData_FieldIndex.EventMember:
                case GetEventData_FieldIndex.Parameter3:
                case GetEventData_FieldIndex.RunOnType:
                case GetEventData_FieldIndex.Reference:
                case GetEventData_FieldIndex.Unknown3:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                case GetEventData_FieldIndex.EventFunction:
                case GetEventData_FieldIndex.EventMember:
                case GetEventData_FieldIndex.Parameter3:
                case GetEventData_FieldIndex.RunOnType:
                case GetEventData_FieldIndex.Reference:
                case GetEventData_FieldIndex.Unknown3:
                    return false;
                default:
                    return ConditionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                    return "Unknown2";
                case GetEventData_FieldIndex.EventFunction:
                    return "EventFunction";
                case GetEventData_FieldIndex.EventMember:
                    return "EventMember";
                case GetEventData_FieldIndex.Parameter3:
                    return "Parameter3";
                case GetEventData_FieldIndex.RunOnType:
                    return "RunOnType";
                case GetEventData_FieldIndex.Reference:
                    return "Reference";
                case GetEventData_FieldIndex.Unknown3:
                    return "Unknown3";
                default:
                    return ConditionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                case GetEventData_FieldIndex.EventFunction:
                case GetEventData_FieldIndex.EventMember:
                case GetEventData_FieldIndex.Parameter3:
                case GetEventData_FieldIndex.RunOnType:
                case GetEventData_FieldIndex.Reference:
                case GetEventData_FieldIndex.Unknown3:
                    return false;
                default:
                    return ConditionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                case GetEventData_FieldIndex.EventFunction:
                case GetEventData_FieldIndex.EventMember:
                case GetEventData_FieldIndex.Parameter3:
                case GetEventData_FieldIndex.RunOnType:
                case GetEventData_FieldIndex.Reference:
                case GetEventData_FieldIndex.Unknown3:
                    return false;
                default:
                    return ConditionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            GetEventData_FieldIndex enu = (GetEventData_FieldIndex)index;
            switch (enu)
            {
                case GetEventData_FieldIndex.Unknown2:
                    return typeof(UInt16);
                case GetEventData_FieldIndex.EventFunction:
                    return typeof(UInt16);
                case GetEventData_FieldIndex.EventMember:
                    return typeof(UInt16);
                case GetEventData_FieldIndex.Parameter3:
                    return typeof(IFormLink<SkyrimMajorRecord>);
                case GetEventData_FieldIndex.RunOnType:
                    return typeof(Condition.RunOnType);
                case GetEventData_FieldIndex.Reference:
                    return typeof(IFormLink<SkyrimMajorRecord>);
                case GetEventData_FieldIndex.Unknown3:
                    return typeof(Int32);
                default:
                    return ConditionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GetEventDataXmlWriteTranslation);
        public const int NumStructFields = 7;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(GetEventDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GetEventDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly GetEventDataSetterCommon Instance = new GetEventDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGetEventData item)
        {
            ClearPartial();
            item.Unknown2 = default;
            item.EventFunction = default;
            item.EventMember = default;
            item.Parameter3.FormKey = FormKey.Null;
            item.RunOnType = default;
            item.Reference.FormKey = FormKey.Null;
            item.Unknown3 = GetEventData._Unknown3_Default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IGetEventData)item);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IGetEventData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GetEventDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IGetEventData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Unknown2 = frame.ReadUInt16();
            item.EventFunction = frame.ReadUInt16();
            item.EventMember = frame.ReadUInt16();
            item.Parameter3.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.RunOnType = EnumBinaryTranslation<Condition.RunOnType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Reference.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.Unknown3 = frame.ReadInt32();
        }
        
        public void CopyInFromBinary(
            IGetEventData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class GetEventDataCommon : ConditionDataCommon
    {
        public new static readonly GetEventDataCommon Instance = new GetEventDataCommon();

        public GetEventData.Mask<bool> GetEqualsMask(
            IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GetEventData.Mask<bool>(false);
            ((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGetEventDataGetter item,
            IGetEventDataGetter rhs,
            GetEventData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.EventFunction = item.EventFunction == rhs.EventFunction;
            ret.EventMember = item.EventMember == rhs.EventMember;
            ret.Parameter3 = object.Equals(item.Parameter3, rhs.Parameter3);
            ret.RunOnType = item.RunOnType == rhs.RunOnType;
            ret.Reference = object.Equals(item.Reference, rhs.Reference);
            ret.Unknown3 = item.Unknown3 == rhs.Unknown3;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IGetEventDataGetter item,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGetEventDataGetter item,
            FileGeneration fg,
            string? name = null,
            GetEventData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GetEventData =>");
            }
            else
            {
                fg.AppendLine($"{name} (GetEventData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGetEventDataGetter item,
            FileGeneration fg,
            GetEventData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {item.Unknown2}");
            }
            if (printMask?.EventFunction ?? true)
            {
                fg.AppendLine($"EventFunction => {item.EventFunction}");
            }
            if (printMask?.EventMember ?? true)
            {
                fg.AppendLine($"EventMember => {item.EventMember}");
            }
            if (printMask?.Parameter3 ?? true)
            {
                fg.AppendLine($"Parameter3 => {item.Parameter3}");
            }
            if (printMask?.RunOnType ?? true)
            {
                fg.AppendLine($"RunOnType => {item.RunOnType}");
            }
            if (printMask?.Reference ?? true)
            {
                fg.AppendLine($"Reference => {item.Reference}");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {item.Unknown3}");
            }
        }
        
        public bool HasBeenSet(
            IGetEventDataGetter item,
            GetEventData.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IGetEventDataGetter item,
            GetEventData.Mask<bool> mask)
        {
            mask.Unknown2 = true;
            mask.EventFunction = true;
            mask.EventMember = true;
            mask.Parameter3 = true;
            mask.RunOnType = true;
            mask.Reference = true;
            mask.Unknown3 = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static GetEventData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGetEventDataGetter? lhs,
            IGetEventDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.EventFunction != rhs.EventFunction) return false;
            if (lhs.EventMember != rhs.EventMember) return false;
            if (!lhs.Parameter3.Equals(rhs.Parameter3)) return false;
            if (lhs.RunOnType != rhs.RunOnType) return false;
            if (!lhs.Reference.Equals(rhs.Reference)) return false;
            if (lhs.Unknown3 != rhs.Unknown3) return false;
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs)
        {
            return Equals(
                lhs: (IGetEventDataGetter?)lhs,
                rhs: rhs as IGetEventDataGetter);
        }
        
        public virtual int GetHashCode(IGetEventDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Unknown2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EventFunction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EventMember).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Parameter3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RunOnType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Reference).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown3).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IGetEventDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GetEventData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IGetEventDataGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Parameter3;
            yield return obj.Reference;
            yield break;
        }
        
        #endregion
        
    }
    public partial class GetEventDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly GetEventDataSetterTranslationCommon Instance = new GetEventDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IGetEventData item,
            IGetEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventFunction) ?? true))
            {
                item.EventFunction = rhs.EventFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventMember) ?? true))
            {
                item.EventMember = rhs.EventMember;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Parameter3) ?? true))
            {
                item.Parameter3.FormKey = rhs.Parameter3.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.RunOnType) ?? true))
            {
                item.RunOnType = rhs.RunOnType;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Reference) ?? true))
            {
                item.Reference.FormKey = rhs.Reference.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IGetEventData)item,
                rhs: (IGetEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            GetEventData.TranslationMask? copyMask = null)
        {
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? copyMask = null)
        {
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public GetEventData DeepCopy(
            IGetEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GetEventData ret = (GetEventData)((GetEventDataCommon)((IGetEventDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class GetEventData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetEventData_Registration.Instance;
        public new static GetEventData_Registration Registration => GetEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GetEventDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetEventDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GetEventDataXmlWriteTranslation :
        ConditionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static GetEventDataXmlWriteTranslation Instance = new GetEventDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGetEventDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ConditionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Unknown2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)GetEventData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventFunction) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EventFunction),
                    item: item.EventFunction,
                    fieldIndex: (int)GetEventData_FieldIndex.EventFunction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.EventMember) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EventMember),
                    item: item.EventMember,
                    fieldIndex: (int)GetEventData_FieldIndex.EventMember,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Parameter3) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Parameter3),
                    item: item.Parameter3.FormKey,
                    fieldIndex: (int)GetEventData_FieldIndex.Parameter3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.RunOnType) ?? true))
            {
                EnumXmlTranslation<Condition.RunOnType>.Instance.Write(
                    node: node,
                    name: nameof(item.RunOnType),
                    item: item.RunOnType,
                    fieldIndex: (int)GetEventData_FieldIndex.RunOnType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Reference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Reference),
                    item: item.Reference.FormKey,
                    fieldIndex: (int)GetEventData_FieldIndex.Reference,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GetEventData_FieldIndex.Unknown3) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown3),
                    item: item.Unknown3,
                    fieldIndex: (int)GetEventData_FieldIndex.Unknown3,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IGetEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GetEventData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GetEventData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGetEventDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGetEventDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class GetEventDataXmlCreateTranslation : ConditionDataXmlCreateTranslation
    {
        public new readonly static GetEventDataXmlCreateTranslation Instance = new GetEventDataXmlCreateTranslation();

        public static void FillPublicXml(
            IGetEventData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GetEventDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGetEventData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Unknown2":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EventFunction":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.EventFunction);
                    try
                    {
                        item.EventFunction = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EventMember":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.EventMember);
                    try
                    {
                        item.EventMember = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Parameter3":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.Parameter3);
                    try
                    {
                        item.Parameter3.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RunOnType":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.RunOnType);
                    try
                    {
                        item.RunOnType = EnumXmlTranslation<Condition.RunOnType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Reference":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.Reference);
                    try
                    {
                        item.Reference.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown3":
                    errorMask?.PushIndex((int)GetEventData_FieldIndex.Unknown3);
                    try
                    {
                        item.Unknown3 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ConditionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class GetEventDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGetEventDataGetter item,
            XElement node,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GetEventDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GetEventData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGetEventDataGetter item,
            string path,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGetEventDataGetter item,
            Stream stream,
            out GetEventData.ErrorMask errorMask,
            GetEventData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GetEventDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static GetEventDataBinaryWriteTranslation Instance = new GetEventDataBinaryWriteTranslation();

        public static void Write_Embedded(
            IGetEventDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            writer.Write(item.Unknown2);
            writer.Write(item.EventFunction);
            writer.Write(item.EventMember);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Parameter3,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Condition.RunOnType>.Instance.Write(
                writer,
                item.RunOnType,
                length: 4);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Reference,
                masterReferences: masterReferences);
            writer.Write(item.Unknown3);
        }

        public void Write(
            MutagenWriter writer,
            IGetEventDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IGetEventDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IGetEventDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class GetEventDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new readonly static GetEventDataBinaryCreateTranslation Instance = new GetEventDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class GetEventDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GetEventDataBinaryOverlay :
        ConditionDataBinaryOverlay,
        IGetEventDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetEventData_Registration.Instance;
        public new static GetEventData_Registration Registration => GetEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetEventDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGetEventDataGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => GetEventDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GetEventDataXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GetEventDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GetEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GetEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0, 2));
        public UInt16 EventFunction => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(2, 2));
        public UInt16 EventMember => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(4, 2));
        public IFormLinkGetter<ISkyrimMajorRecordGetter> Parameter3 => new FormLink<ISkyrimMajorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(6, 4))));
        public Condition.RunOnType RunOnType => (Condition.RunOnType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(10, 4));
        public IFormLinkGetter<ISkyrimMajorRecordGetter> Reference => new FormLink<ISkyrimMajorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(14, 4))));
        public Int32 Unknown3 => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(18, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GetEventDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GetEventDataBinaryOverlay GetEventDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new GetEventDataBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 22),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

