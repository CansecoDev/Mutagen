/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ObjectBounds :
        LoquiNotifyingObject,
        IObjectBoundsInternal,
        ILoquiObjectSetter<ObjectBounds>,
        IEquatable<ObjectBounds>,
        IEqualsMask
    {
        #region Ctor
        public ObjectBounds()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region First
        private P3Int16 _First;
        public P3Int16 First
        {
            get => this._First;
            set => this.RaiseAndSetIfChanged(ref this._First, value, nameof(First));
        }
        #endregion
        #region Second
        private P3Int16 _Second;
        public P3Int16 Second
        {
            get => this._Second;
            set => this.RaiseAndSetIfChanged(ref this._Second, value, nameof(Second));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectBoundsInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ObjectBoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IObjectBoundsInternalGetter rhs)) return false;
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(ObjectBounds obj)
        {
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => ObjectBoundsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ObjectBoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ObjectBounds CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ObjectBounds_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ObjectBounds CreateFromXml(
            XElement node,
            out ObjectBounds_ErrorMask errorMask,
            bool doMasks = true,
            ObjectBounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ObjectBounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ObjectBounds CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ObjectBounds() : null;
                    break;
                default:
                    break;
            }
            var ret = new ObjectBounds();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectBoundsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ObjectBounds CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ObjectBounds_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ObjectBounds CreateFromXml(
            string path,
            out ObjectBounds_ErrorMask errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectBounds CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ObjectBounds CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ObjectBounds_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ObjectBounds CreateFromXml(
            Stream stream,
            out ObjectBounds_ErrorMask errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectBounds CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ObjectBounds_FieldIndex)index)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ObjectBounds_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => ObjectBoundsBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ObjectBoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ObjectBounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ObjectBounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ObjectBounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ObjectBounds_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ObjectBounds CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ObjectBounds();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ObjectBounds_Registration.OBND_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
            return ret;
        }

        #endregion

        protected static void FillBinaryStructs(
            ObjectBounds item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P3Int16 FirstParse))
            {
                item.First = FirstParse;
            }
            else
            {
                item.First = default(P3Int16);
            }
            if (Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out P3Int16 SecondParse))
            {
                item.Second = SecondParse;
            }
            else
            {
                item.Second = default(P3Int16);
            }
        }

        #endregion

        public ObjectBounds Copy(
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null)
        {
            return ObjectBounds.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ObjectBounds Copy(
            ObjectBounds item,
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null)
        {
            ObjectBounds ret;
            if (item.GetType().Equals(typeof(ObjectBounds)))
            {
                ret = new ObjectBounds();
            }
            else
            {
                ret = (ObjectBounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ObjectBounds Copy_ToLoqui(
            ObjectBounds item,
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null)
        {
            ObjectBounds ret;
            if (item.GetType().Equals(typeof(ObjectBounds)))
            {
                ret = new ObjectBounds() as ObjectBounds;
            }
            else
            {
                ret = (ObjectBounds)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ObjectBounds rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ObjectBounds rhs,
            ObjectBounds_CopyMask copyMask,
            ObjectBounds def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ObjectBounds rhs,
            out ObjectBounds_ErrorMask errorMask,
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectBoundsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ObjectBounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ObjectBounds rhs,
            ErrorMaskBuilder errorMask,
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null)
        {
            ObjectBoundsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    this.First = (P3Int16)obj;
                    break;
                case ObjectBounds_FieldIndex.Second:
                    this.Second = (P3Int16)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            ObjectBoundsSetterCommon.Instance.Clear(this);
        }

        public static ObjectBounds Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ObjectBounds();
            foreach (var pair in fields)
            {
                CopyInInternal_ObjectBounds(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ObjectBounds(ObjectBounds obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ObjectBounds_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    obj.First = (P3Int16)pair.Value;
                    break;
                case ObjectBounds_FieldIndex.Second:
                    obj.Second = (P3Int16)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IObjectBounds :
        IObjectBoundsInternalGetter,
        ILoquiObjectSetter<IObjectBoundsInternal>
    {
        new P3Int16 First { get; set; }

        new P3Int16 Second { get; set; }

        void CopyFieldsFrom(
            ObjectBounds rhs,
            ErrorMaskBuilder errorMask = null,
            ObjectBounds_CopyMask copyMask = null,
            ObjectBounds def = null);
    }

    public partial interface IObjectBoundsInternal :
        IObjectBounds,
        IObjectBoundsInternalGetter
    {
    }

    public partial interface IObjectBoundsGetter :
        ILoquiObject,
        ILoquiObject<IObjectBoundsInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region First
        P3Int16 First { get; }

        #endregion
        #region Second
        P3Int16 Second { get; }

        #endregion

    }

    public partial interface IObjectBoundsInternalGetter : IObjectBoundsGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class ObjectBoundsMixIn
    {
        public static void Clear(this IObjectBoundsInternal item)
        {
            ((ObjectBoundsSetterCommon)((IObjectBoundsInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static ObjectBounds_Mask<bool> GetEqualsMask(
            this IObjectBoundsInternalGetter item,
            IObjectBoundsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectBoundsInternalGetter item,
            string name = null,
            ObjectBounds_Mask<bool> printMask = null)
        {
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectBoundsInternalGetter item,
            FileGeneration fg,
            string name = null,
            ObjectBounds_Mask<bool> printMask = null)
        {
            ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IObjectBoundsInternalGetter item,
            ObjectBounds_Mask<bool?> checkMask)
        {
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ObjectBounds_Mask<bool> GetHasBeenSetMask(this IObjectBoundsInternalGetter item)
        {
            var ret = new ObjectBounds_Mask<bool>();
            ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IObjectBoundsInternalGetter item,
            IObjectBoundsInternalGetter rhs)
        {
            return ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ObjectBounds_FieldIndex
    {
        First = 0,
        Second = 1,
    }
    #endregion

    #region Registration
    public class ObjectBounds_Registration : ILoquiRegistration
    {
        public static readonly ObjectBounds_Registration Instance = new ObjectBounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 21,
            version: 0);

        public const string GUID = "a81f70e4-6b3b-46f9-a2ae-3140883c89e8";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ObjectBounds_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectBounds_ErrorMask);

        public static readonly Type ClassType = typeof(ObjectBounds);

        public static readonly Type GetterType = typeof(IObjectBoundsGetter);

        public static readonly Type InternalGetterType = typeof(IObjectBoundsInternalGetter);

        public static readonly Type SetterType = typeof(IObjectBounds);

        public static readonly Type InternalSetterType = typeof(IObjectBoundsInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ObjectBounds";

        public const string Name = "ObjectBounds";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FIRST":
                    return (ushort)ObjectBounds_FieldIndex.First;
                case "SECOND":
                    return (ushort)ObjectBounds_FieldIndex.Second;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    return "First";
                case ObjectBounds_FieldIndex.Second:
                    return "Second";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                case ObjectBounds_FieldIndex.Second:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    return typeof(P3Int16);
                case ObjectBounds_FieldIndex.Second:
                    return typeof(P3Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ObjectBoundsXmlWriteTranslation);
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = OBND_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ObjectBoundsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectBoundsSetterCommon
    {
        public static readonly ObjectBoundsSetterCommon Instance = new ObjectBoundsSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IObjectBoundsInternal item)
        {
            ClearPartial();
            item.First = default(P3Int16);
            item.Second = default(P3Int16);
        }
        
    }
    public partial class ObjectBoundsCommon
    {
        public static readonly ObjectBoundsCommon Instance = new ObjectBoundsCommon();

        public ObjectBounds_Mask<bool> GetEqualsMask(
            IObjectBoundsInternalGetter item,
            IObjectBoundsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectBounds_Mask<bool>();
            ((ObjectBoundsCommon)((IObjectBoundsInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectBoundsInternalGetter item,
            IObjectBoundsInternalGetter rhs,
            ObjectBounds_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.First = item.First.Equals(rhs.First);
            ret.Second = item.Second.Equals(rhs.Second);
        }
        
        public string ToString(
            IObjectBoundsInternalGetter item,
            string name = null,
            ObjectBounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectBoundsInternalGetter item,
            FileGeneration fg,
            string name = null,
            ObjectBounds_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectBounds =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectBounds) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectBoundsInternalGetter item,
            FileGeneration fg,
            ObjectBounds_Mask<bool> printMask = null)
        {
            if (printMask?.First ?? true)
            {
                fg.AppendLine($"First => {item.First}");
            }
            if (printMask?.Second ?? true)
            {
                fg.AppendLine($"Second => {item.Second}");
            }
        }
        
        public bool HasBeenSet(
            IObjectBoundsInternalGetter item,
            ObjectBounds_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IObjectBoundsInternalGetter item,
            ObjectBounds_Mask<bool> mask)
        {
            mask.First = true;
            mask.Second = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectBoundsInternalGetter lhs,
            IObjectBoundsInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.First.Equals(rhs.First)) return false;
            if (!lhs.Second.Equals(rhs.Second)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IObjectBoundsInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.First).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Second).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class ObjectBoundsSetterCopyCommon
    {
        public static readonly ObjectBoundsSetterCopyCommon Instance = new ObjectBoundsSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            ObjectBounds item,
            ObjectBounds rhs,
            ObjectBounds def,
            ErrorMaskBuilder errorMask,
            ObjectBounds_CopyMask copyMask)
        {
            if (copyMask?.First ?? true)
            {
                errorMask?.PushIndex((int)ObjectBounds_FieldIndex.First);
                try
                {
                    item.First = rhs.First;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Second ?? true)
            {
                errorMask?.PushIndex((int)ObjectBounds_FieldIndex.Second);
                try
                {
                    item.Second = rhs.Second;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ObjectBounds
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectBounds_Registration.Instance;
        public static ObjectBounds_Registration Registration => ObjectBounds_Registration.Instance;
        protected object CommonInstance()
        {
            return ObjectBoundsCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return ObjectBoundsSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return ObjectBoundsSetterCopyCommon.Instance;
        }
        object IObjectBoundsInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IObjectBoundsInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IObjectBoundsInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectBoundsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ObjectBoundsXmlWriteTranslation Instance = new ObjectBoundsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IObjectBoundsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ObjectBounds_FieldIndex.First) ?? true))
            {
                P3Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.First),
                    item: item.First,
                    fieldIndex: (int)ObjectBounds_FieldIndex.First,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectBounds_FieldIndex.Second) ?? true))
            {
                P3Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Second),
                    item: item.Second,
                    fieldIndex: (int)ObjectBounds_FieldIndex.Second,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IObjectBoundsInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ObjectBounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ObjectBounds");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IObjectBoundsInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IObjectBoundsInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IObjectBoundsInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ObjectBoundsXmlCreateTranslation
    {
        public readonly static ObjectBoundsXmlCreateTranslation Instance = new ObjectBoundsXmlCreateTranslation();

        public static void FillPublicXml(
            IObjectBoundsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectBoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IObjectBoundsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "First":
                    try
                    {
                        errorMask?.PushIndex((int)ObjectBounds_FieldIndex.First);
                        if (P3Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Int16 FirstParse,
                            errorMask: errorMask))
                        {
                            item.First = FirstParse;
                        }
                        else
                        {
                            item.First = default(P3Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Second":
                    try
                    {
                        errorMask?.PushIndex((int)ObjectBounds_FieldIndex.Second);
                        if (P3Int16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out P3Int16 SecondParse,
                            errorMask: errorMask))
                        {
                            item.Second = SecondParse;
                        }
                        else
                        {
                            item.Second = default(P3Int16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ObjectBoundsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            XElement node,
            out ObjectBounds_ErrorMask errorMask,
            bool doMasks = true,
            ObjectBounds_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectBounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            string path,
            out ObjectBounds_ErrorMask errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            Stream stream,
            out ObjectBounds_ErrorMask errorMask,
            ObjectBounds_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((ObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            XElement node,
            string name = null,
            ObjectBounds_TranslationMask translationMask = null)
        {
            ((ObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectBoundsInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((ObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class ObjectBounds_Mask<T> : IMask<T>, IEquatable<ObjectBounds_Mask<T>>
    {
        #region Ctors
        public ObjectBounds_Mask()
        {
        }

        public ObjectBounds_Mask(T initialValue)
        {
            this.First = initialValue;
            this.Second = initialValue;
        }
        #endregion

        #region Members
        public T First;
        public T Second;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ObjectBounds_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ObjectBounds_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.First, rhs.First)) return false;
            if (!object.Equals(this.Second, rhs.Second)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.First?.GetHashCode());
            ret = ret.CombineHashCode(this.Second?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.First)) return false;
            if (!eval(this.Second)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ObjectBounds_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ObjectBounds_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ObjectBounds_Mask<R> obj, Func<T, R> eval)
        {
            obj.First = eval(this.First);
            obj.Second = eval(this.Second);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ObjectBounds_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ObjectBounds_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ObjectBounds_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.First ?? true)
                {
                    fg.AppendLine($"First => {First}");
                }
                if (printMask?.Second ?? true)
                {
                    fg.AppendLine($"Second => {Second}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ObjectBounds_ErrorMask : IErrorMask, IErrorMask<ObjectBounds_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception First;
        public Exception Second;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    return First;
                case ObjectBounds_FieldIndex.Second:
                    return Second;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    this.First = ex;
                    break;
                case ObjectBounds_FieldIndex.Second:
                    this.Second = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ObjectBounds_FieldIndex enu = (ObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case ObjectBounds_FieldIndex.First:
                    this.First = (Exception)obj;
                    break;
                case ObjectBounds_FieldIndex.Second:
                    this.Second = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (First != null) return true;
            if (Second != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ObjectBounds_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"First => {First}");
            fg.AppendLine($"Second => {Second}");
        }
        #endregion

        #region Combine
        public ObjectBounds_ErrorMask Combine(ObjectBounds_ErrorMask rhs)
        {
            var ret = new ObjectBounds_ErrorMask();
            ret.First = this.First.Combine(rhs.First);
            ret.Second = this.Second.Combine(rhs.Second);
            return ret;
        }
        public static ObjectBounds_ErrorMask Combine(ObjectBounds_ErrorMask lhs, ObjectBounds_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ObjectBounds_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ObjectBounds_ErrorMask();
        }
        #endregion

    }
    public class ObjectBounds_CopyMask
    {
        public ObjectBounds_CopyMask()
        {
        }

        public ObjectBounds_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.First = defaultOn;
            this.Second = defaultOn;
        }

        #region Members
        public bool First;
        public bool Second;
        #endregion

    }

    public class ObjectBounds_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool First;
        public bool Second;
        #endregion

        #region Ctors
        public ObjectBounds_TranslationMask()
        {
        }

        public ObjectBounds_TranslationMask(bool defaultOn)
        {
            this.First = defaultOn;
            this.Second = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((First, null));
            ret.Add((Second, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectBoundsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ObjectBoundsBinaryWriteTranslation Instance = new ObjectBoundsBinaryWriteTranslation();

        public static void Write_Embedded(
            IObjectBoundsInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.First);
            Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Second);
        }

        public void Write(
            MutagenWriter writer,
            IObjectBoundsInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ObjectBounds_Registration.OBND_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IObjectBoundsInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class ObjectBoundsBinaryCreateTranslation
    {
        public readonly static ObjectBoundsBinaryCreateTranslation Instance = new ObjectBoundsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ObjectBoundsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectBoundsInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ObjectBounds_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((ObjectBoundsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ObjectBounds_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IObjectBoundsInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((ObjectBoundsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IObjectBoundsInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((ObjectBoundsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectBoundsBinaryWrapper :
        BinaryWrapper,
        IObjectBoundsInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectBounds_Registration.Instance;
        public static ObjectBounds_Registration Registration => ObjectBounds_Registration.Instance;
        protected object CommonInstance()
        {
            return ObjectBoundsCommon.Instance;
        }
        object IObjectBoundsInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IObjectBoundsInternalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IObjectBoundsInternalGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectBoundsInternalGetter)rhs, include);

        protected object XmlWriteTranslator => ObjectBoundsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((ObjectBoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => ObjectBoundsBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((ObjectBoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public P3Int16 First => P3Int16BinaryTranslation.Read(_data.Span.Slice(0, 6));
        public P3Int16 Second => P3Int16BinaryTranslation.Read(_data.Span.Slice(6, 6));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected ObjectBoundsBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static ObjectBoundsBinaryWrapper ObjectBoundsFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new ObjectBoundsBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

