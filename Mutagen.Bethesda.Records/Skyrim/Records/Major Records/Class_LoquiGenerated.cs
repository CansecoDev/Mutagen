/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Class :
        SkyrimMajorRecord,
        IClassInternal,
        ILoquiObjectSetter<Class>,
        INamed,
        IEquatable<Class>,
        IEqualsMask
    {
        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Name => this.Name;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Description => this.Description;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Icon => this.Icon;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32 _Unknown;
        public Int32 Unknown
        {
            get => this._Unknown;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Unknown = value;
            }
        }
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Teaches = value;
            }
        }
        #endregion
        #region MaxTrainingLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MaxTrainingLevel;
        public Byte MaxTrainingLevel
        {
            get => this._MaxTrainingLevel;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MaxTrainingLevel = value;
            }
        }
        #endregion
        #region OneHandedWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _OneHandedWeight;
        public Byte OneHandedWeight
        {
            get => this._OneHandedWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._OneHandedWeight = value;
            }
        }
        #endregion
        #region TwoHandedWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _TwoHandedWeight;
        public Byte TwoHandedWeight
        {
            get => this._TwoHandedWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._TwoHandedWeight = value;
            }
        }
        #endregion
        #region MarksmanWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MarksmanWeight;
        public Byte MarksmanWeight
        {
            get => this._MarksmanWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MarksmanWeight = value;
            }
        }
        #endregion
        #region BlockWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _BlockWeight;
        public Byte BlockWeight
        {
            get => this._BlockWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._BlockWeight = value;
            }
        }
        #endregion
        #region SmithingWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _SmithingWeight;
        public Byte SmithingWeight
        {
            get => this._SmithingWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SmithingWeight = value;
            }
        }
        #endregion
        #region HeavyArmorWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _HeavyArmorWeight;
        public Byte HeavyArmorWeight
        {
            get => this._HeavyArmorWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._HeavyArmorWeight = value;
            }
        }
        #endregion
        #region LightArmorWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _LightArmorWeight;
        public Byte LightArmorWeight
        {
            get => this._LightArmorWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._LightArmorWeight = value;
            }
        }
        #endregion
        #region PickpocketWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _PickpocketWeight;
        public Byte PickpocketWeight
        {
            get => this._PickpocketWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._PickpocketWeight = value;
            }
        }
        #endregion
        #region LockpickingWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _LockpickingWeight;
        public Byte LockpickingWeight
        {
            get => this._LockpickingWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._LockpickingWeight = value;
            }
        }
        #endregion
        #region SneakWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _SneakWeight;
        public Byte SneakWeight
        {
            get => this._SneakWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SneakWeight = value;
            }
        }
        #endregion
        #region AlchemyWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _AlchemyWeight;
        public Byte AlchemyWeight
        {
            get => this._AlchemyWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._AlchemyWeight = value;
            }
        }
        #endregion
        #region SpeechcraftWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _SpeechcraftWeight;
        public Byte SpeechcraftWeight
        {
            get => this._SpeechcraftWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SpeechcraftWeight = value;
            }
        }
        #endregion
        #region AlterationWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _AlterationWeight;
        public Byte AlterationWeight
        {
            get => this._AlterationWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._AlterationWeight = value;
            }
        }
        #endregion
        #region ConjurationWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _ConjurationWeight;
        public Byte ConjurationWeight
        {
            get => this._ConjurationWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ConjurationWeight = value;
            }
        }
        #endregion
        #region DestructionWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _DestructionWeight;
        public Byte DestructionWeight
        {
            get => this._DestructionWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._DestructionWeight = value;
            }
        }
        #endregion
        #region IllusionWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _IllusionWeight;
        public Byte IllusionWeight
        {
            get => this._IllusionWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._IllusionWeight = value;
            }
        }
        #endregion
        #region RestorationWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _RestorationWeight;
        public Byte RestorationWeight
        {
            get => this._RestorationWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._RestorationWeight = value;
            }
        }
        #endregion
        #region EnchantingWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _EnchantingWeight;
        public Byte EnchantingWeight
        {
            get => this._EnchantingWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EnchantingWeight = value;
            }
        }
        #endregion
        #region BleedoutDefault
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BleedoutDefault;
        public Single BleedoutDefault
        {
            get => this._BleedoutDefault;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._BleedoutDefault = value;
            }
        }
        #endregion
        #region VoicePoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _VoicePoints;
        public UInt32 VoicePoints
        {
            get => this._VoicePoints;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._VoicePoints = value;
            }
        }
        #endregion
        #region HealthWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _HealthWeight;
        public Byte HealthWeight
        {
            get => this._HealthWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._HealthWeight = value;
            }
        }
        #endregion
        #region MagickaWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MagickaWeight;
        public Byte MagickaWeight
        {
            get => this._MagickaWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MagickaWeight = value;
            }
        }
        #endregion
        #region StaminaWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _StaminaWeight;
        public Byte StaminaWeight
        {
            get => this._StaminaWeight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._StaminaWeight = value;
            }
        }
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Unknown2;
        public Byte Unknown2
        {
            get => this._Unknown2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Unknown2 = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public Class.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IClassGetter rhs)) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Class obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Class CreateFromXml(
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Class CreateFromXml(
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Class CreateFromXml(
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Class CreateFromXml(
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            SkyrimMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Unknown = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.OneHandedWeight = initialValue;
                this.TwoHandedWeight = initialValue;
                this.MarksmanWeight = initialValue;
                this.BlockWeight = initialValue;
                this.SmithingWeight = initialValue;
                this.HeavyArmorWeight = initialValue;
                this.LightArmorWeight = initialValue;
                this.PickpocketWeight = initialValue;
                this.LockpickingWeight = initialValue;
                this.SneakWeight = initialValue;
                this.AlchemyWeight = initialValue;
                this.SpeechcraftWeight = initialValue;
                this.AlterationWeight = initialValue;
                this.ConjurationWeight = initialValue;
                this.DestructionWeight = initialValue;
                this.IllusionWeight = initialValue;
                this.RestorationWeight = initialValue;
                this.EnchantingWeight = initialValue;
                this.BleedoutDefault = initialValue;
                this.VoicePoints = initialValue;
                this.HealthWeight = initialValue;
                this.MagickaWeight = initialValue;
                this.StaminaWeight = initialValue;
                this.Unknown2 = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T SkyrimMajorRecordFlags,
                T FormVersion,
                T Version2,
                T Name,
                T Description,
                T Icon,
                T Unknown,
                T Teaches,
                T MaxTrainingLevel,
                T OneHandedWeight,
                T TwoHandedWeight,
                T MarksmanWeight,
                T BlockWeight,
                T SmithingWeight,
                T HeavyArmorWeight,
                T LightArmorWeight,
                T PickpocketWeight,
                T LockpickingWeight,
                T SneakWeight,
                T AlchemyWeight,
                T SpeechcraftWeight,
                T AlterationWeight,
                T ConjurationWeight,
                T DestructionWeight,
                T IllusionWeight,
                T RestorationWeight,
                T EnchantingWeight,
                T BleedoutDefault,
                T VoicePoints,
                T HealthWeight,
                T MagickaWeight,
                T StaminaWeight,
                T Unknown2,
                T DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.Unknown = Unknown;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.OneHandedWeight = OneHandedWeight;
                this.TwoHandedWeight = TwoHandedWeight;
                this.MarksmanWeight = MarksmanWeight;
                this.BlockWeight = BlockWeight;
                this.SmithingWeight = SmithingWeight;
                this.HeavyArmorWeight = HeavyArmorWeight;
                this.LightArmorWeight = LightArmorWeight;
                this.PickpocketWeight = PickpocketWeight;
                this.LockpickingWeight = LockpickingWeight;
                this.SneakWeight = SneakWeight;
                this.AlchemyWeight = AlchemyWeight;
                this.SpeechcraftWeight = SpeechcraftWeight;
                this.AlterationWeight = AlterationWeight;
                this.ConjurationWeight = ConjurationWeight;
                this.DestructionWeight = DestructionWeight;
                this.IllusionWeight = IllusionWeight;
                this.RestorationWeight = RestorationWeight;
                this.EnchantingWeight = EnchantingWeight;
                this.BleedoutDefault = BleedoutDefault;
                this.VoicePoints = VoicePoints;
                this.HealthWeight = HealthWeight;
                this.MagickaWeight = MagickaWeight;
                this.StaminaWeight = StaminaWeight;
                this.Unknown2 = Unknown2;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Description;
            public T Icon;
            public T Unknown;
            public T Teaches;
            public T MaxTrainingLevel;
            public T OneHandedWeight;
            public T TwoHandedWeight;
            public T MarksmanWeight;
            public T BlockWeight;
            public T SmithingWeight;
            public T HeavyArmorWeight;
            public T LightArmorWeight;
            public T PickpocketWeight;
            public T LockpickingWeight;
            public T SneakWeight;
            public T AlchemyWeight;
            public T SpeechcraftWeight;
            public T AlterationWeight;
            public T ConjurationWeight;
            public T DestructionWeight;
            public T IllusionWeight;
            public T RestorationWeight;
            public T EnchantingWeight;
            public T BleedoutDefault;
            public T VoicePoints;
            public T HealthWeight;
            public T MagickaWeight;
            public T StaminaWeight;
            public T Unknown2;
            public T DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.OneHandedWeight, rhs.OneHandedWeight)) return false;
                if (!object.Equals(this.TwoHandedWeight, rhs.TwoHandedWeight)) return false;
                if (!object.Equals(this.MarksmanWeight, rhs.MarksmanWeight)) return false;
                if (!object.Equals(this.BlockWeight, rhs.BlockWeight)) return false;
                if (!object.Equals(this.SmithingWeight, rhs.SmithingWeight)) return false;
                if (!object.Equals(this.HeavyArmorWeight, rhs.HeavyArmorWeight)) return false;
                if (!object.Equals(this.LightArmorWeight, rhs.LightArmorWeight)) return false;
                if (!object.Equals(this.PickpocketWeight, rhs.PickpocketWeight)) return false;
                if (!object.Equals(this.LockpickingWeight, rhs.LockpickingWeight)) return false;
                if (!object.Equals(this.SneakWeight, rhs.SneakWeight)) return false;
                if (!object.Equals(this.AlchemyWeight, rhs.AlchemyWeight)) return false;
                if (!object.Equals(this.SpeechcraftWeight, rhs.SpeechcraftWeight)) return false;
                if (!object.Equals(this.AlterationWeight, rhs.AlterationWeight)) return false;
                if (!object.Equals(this.ConjurationWeight, rhs.ConjurationWeight)) return false;
                if (!object.Equals(this.DestructionWeight, rhs.DestructionWeight)) return false;
                if (!object.Equals(this.IllusionWeight, rhs.IllusionWeight)) return false;
                if (!object.Equals(this.RestorationWeight, rhs.RestorationWeight)) return false;
                if (!object.Equals(this.EnchantingWeight, rhs.EnchantingWeight)) return false;
                if (!object.Equals(this.BleedoutDefault, rhs.BleedoutDefault)) return false;
                if (!object.Equals(this.VoicePoints, rhs.VoicePoints)) return false;
                if (!object.Equals(this.HealthWeight, rhs.HealthWeight)) return false;
                if (!object.Equals(this.MagickaWeight, rhs.MagickaWeight)) return false;
                if (!object.Equals(this.StaminaWeight, rhs.StaminaWeight)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
                ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
                ret = ret.CombineHashCode(this.MaxTrainingLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.OneHandedWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.TwoHandedWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.MarksmanWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.BlockWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.SmithingWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.HeavyArmorWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.LightArmorWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.PickpocketWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.LockpickingWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.SneakWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.AlchemyWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.SpeechcraftWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.AlterationWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.ConjurationWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.DestructionWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.IllusionWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.RestorationWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.EnchantingWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.BleedoutDefault?.GetHashCode());
                ret = ret.CombineHashCode(this.VoicePoints?.GetHashCode());
                ret = ret.CombineHashCode(this.HealthWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.MagickaWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.StaminaWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown2?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (!eval(this.OneHandedWeight)) return false;
                if (!eval(this.TwoHandedWeight)) return false;
                if (!eval(this.MarksmanWeight)) return false;
                if (!eval(this.BlockWeight)) return false;
                if (!eval(this.SmithingWeight)) return false;
                if (!eval(this.HeavyArmorWeight)) return false;
                if (!eval(this.LightArmorWeight)) return false;
                if (!eval(this.PickpocketWeight)) return false;
                if (!eval(this.LockpickingWeight)) return false;
                if (!eval(this.SneakWeight)) return false;
                if (!eval(this.AlchemyWeight)) return false;
                if (!eval(this.SpeechcraftWeight)) return false;
                if (!eval(this.AlterationWeight)) return false;
                if (!eval(this.ConjurationWeight)) return false;
                if (!eval(this.DestructionWeight)) return false;
                if (!eval(this.IllusionWeight)) return false;
                if (!eval(this.RestorationWeight)) return false;
                if (!eval(this.EnchantingWeight)) return false;
                if (!eval(this.BleedoutDefault)) return false;
                if (!eval(this.VoicePoints)) return false;
                if (!eval(this.HealthWeight)) return false;
                if (!eval(this.MagickaWeight)) return false;
                if (!eval(this.StaminaWeight)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Class.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Unknown = eval(this.Unknown);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                obj.OneHandedWeight = eval(this.OneHandedWeight);
                obj.TwoHandedWeight = eval(this.TwoHandedWeight);
                obj.MarksmanWeight = eval(this.MarksmanWeight);
                obj.BlockWeight = eval(this.BlockWeight);
                obj.SmithingWeight = eval(this.SmithingWeight);
                obj.HeavyArmorWeight = eval(this.HeavyArmorWeight);
                obj.LightArmorWeight = eval(this.LightArmorWeight);
                obj.PickpocketWeight = eval(this.PickpocketWeight);
                obj.LockpickingWeight = eval(this.LockpickingWeight);
                obj.SneakWeight = eval(this.SneakWeight);
                obj.AlchemyWeight = eval(this.AlchemyWeight);
                obj.SpeechcraftWeight = eval(this.SpeechcraftWeight);
                obj.AlterationWeight = eval(this.AlterationWeight);
                obj.ConjurationWeight = eval(this.ConjurationWeight);
                obj.DestructionWeight = eval(this.DestructionWeight);
                obj.IllusionWeight = eval(this.IllusionWeight);
                obj.RestorationWeight = eval(this.RestorationWeight);
                obj.EnchantingWeight = eval(this.EnchantingWeight);
                obj.BleedoutDefault = eval(this.BleedoutDefault);
                obj.VoicePoints = eval(this.VoicePoints);
                obj.HealthWeight = eval(this.HealthWeight);
                obj.MagickaWeight = eval(this.MagickaWeight);
                obj.StaminaWeight = eval(this.StaminaWeight);
                obj.Unknown2 = eval(this.Unknown2);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Class.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Class.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Class.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendLine($"Description => {Description}");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendLine($"Icon => {Icon}");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendLine($"Unknown => {Unknown}");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendLine($"Teaches => {Teaches}");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        fg.AppendLine($"MaxTrainingLevel => {MaxTrainingLevel}");
                    }
                    if (printMask?.OneHandedWeight ?? true)
                    {
                        fg.AppendLine($"OneHandedWeight => {OneHandedWeight}");
                    }
                    if (printMask?.TwoHandedWeight ?? true)
                    {
                        fg.AppendLine($"TwoHandedWeight => {TwoHandedWeight}");
                    }
                    if (printMask?.MarksmanWeight ?? true)
                    {
                        fg.AppendLine($"MarksmanWeight => {MarksmanWeight}");
                    }
                    if (printMask?.BlockWeight ?? true)
                    {
                        fg.AppendLine($"BlockWeight => {BlockWeight}");
                    }
                    if (printMask?.SmithingWeight ?? true)
                    {
                        fg.AppendLine($"SmithingWeight => {SmithingWeight}");
                    }
                    if (printMask?.HeavyArmorWeight ?? true)
                    {
                        fg.AppendLine($"HeavyArmorWeight => {HeavyArmorWeight}");
                    }
                    if (printMask?.LightArmorWeight ?? true)
                    {
                        fg.AppendLine($"LightArmorWeight => {LightArmorWeight}");
                    }
                    if (printMask?.PickpocketWeight ?? true)
                    {
                        fg.AppendLine($"PickpocketWeight => {PickpocketWeight}");
                    }
                    if (printMask?.LockpickingWeight ?? true)
                    {
                        fg.AppendLine($"LockpickingWeight => {LockpickingWeight}");
                    }
                    if (printMask?.SneakWeight ?? true)
                    {
                        fg.AppendLine($"SneakWeight => {SneakWeight}");
                    }
                    if (printMask?.AlchemyWeight ?? true)
                    {
                        fg.AppendLine($"AlchemyWeight => {AlchemyWeight}");
                    }
                    if (printMask?.SpeechcraftWeight ?? true)
                    {
                        fg.AppendLine($"SpeechcraftWeight => {SpeechcraftWeight}");
                    }
                    if (printMask?.AlterationWeight ?? true)
                    {
                        fg.AppendLine($"AlterationWeight => {AlterationWeight}");
                    }
                    if (printMask?.ConjurationWeight ?? true)
                    {
                        fg.AppendLine($"ConjurationWeight => {ConjurationWeight}");
                    }
                    if (printMask?.DestructionWeight ?? true)
                    {
                        fg.AppendLine($"DestructionWeight => {DestructionWeight}");
                    }
                    if (printMask?.IllusionWeight ?? true)
                    {
                        fg.AppendLine($"IllusionWeight => {IllusionWeight}");
                    }
                    if (printMask?.RestorationWeight ?? true)
                    {
                        fg.AppendLine($"RestorationWeight => {RestorationWeight}");
                    }
                    if (printMask?.EnchantingWeight ?? true)
                    {
                        fg.AppendLine($"EnchantingWeight => {EnchantingWeight}");
                    }
                    if (printMask?.BleedoutDefault ?? true)
                    {
                        fg.AppendLine($"BleedoutDefault => {BleedoutDefault}");
                    }
                    if (printMask?.VoicePoints ?? true)
                    {
                        fg.AppendLine($"VoicePoints => {VoicePoints}");
                    }
                    if (printMask?.HealthWeight ?? true)
                    {
                        fg.AppendLine($"HealthWeight => {HealthWeight}");
                    }
                    if (printMask?.MagickaWeight ?? true)
                    {
                        fg.AppendLine($"MagickaWeight => {MagickaWeight}");
                    }
                    if (printMask?.StaminaWeight ?? true)
                    {
                        fg.AppendLine($"StaminaWeight => {StaminaWeight}");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendLine($"Unknown2 => {Unknown2}");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public Exception? Unknown;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public Exception? OneHandedWeight;
            public Exception? TwoHandedWeight;
            public Exception? MarksmanWeight;
            public Exception? BlockWeight;
            public Exception? SmithingWeight;
            public Exception? HeavyArmorWeight;
            public Exception? LightArmorWeight;
            public Exception? PickpocketWeight;
            public Exception? LockpickingWeight;
            public Exception? SneakWeight;
            public Exception? AlchemyWeight;
            public Exception? SpeechcraftWeight;
            public Exception? AlterationWeight;
            public Exception? ConjurationWeight;
            public Exception? DestructionWeight;
            public Exception? IllusionWeight;
            public Exception? RestorationWeight;
            public Exception? EnchantingWeight;
            public Exception? BleedoutDefault;
            public Exception? VoicePoints;
            public Exception? HealthWeight;
            public Exception? MagickaWeight;
            public Exception? StaminaWeight;
            public Exception? Unknown2;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        return Name;
                    case Class_FieldIndex.Description:
                        return Description;
                    case Class_FieldIndex.Icon:
                        return Icon;
                    case Class_FieldIndex.Unknown:
                        return Unknown;
                    case Class_FieldIndex.Teaches:
                        return Teaches;
                    case Class_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case Class_FieldIndex.OneHandedWeight:
                        return OneHandedWeight;
                    case Class_FieldIndex.TwoHandedWeight:
                        return TwoHandedWeight;
                    case Class_FieldIndex.MarksmanWeight:
                        return MarksmanWeight;
                    case Class_FieldIndex.BlockWeight:
                        return BlockWeight;
                    case Class_FieldIndex.SmithingWeight:
                        return SmithingWeight;
                    case Class_FieldIndex.HeavyArmorWeight:
                        return HeavyArmorWeight;
                    case Class_FieldIndex.LightArmorWeight:
                        return LightArmorWeight;
                    case Class_FieldIndex.PickpocketWeight:
                        return PickpocketWeight;
                    case Class_FieldIndex.LockpickingWeight:
                        return LockpickingWeight;
                    case Class_FieldIndex.SneakWeight:
                        return SneakWeight;
                    case Class_FieldIndex.AlchemyWeight:
                        return AlchemyWeight;
                    case Class_FieldIndex.SpeechcraftWeight:
                        return SpeechcraftWeight;
                    case Class_FieldIndex.AlterationWeight:
                        return AlterationWeight;
                    case Class_FieldIndex.ConjurationWeight:
                        return ConjurationWeight;
                    case Class_FieldIndex.DestructionWeight:
                        return DestructionWeight;
                    case Class_FieldIndex.IllusionWeight:
                        return IllusionWeight;
                    case Class_FieldIndex.RestorationWeight:
                        return RestorationWeight;
                    case Class_FieldIndex.EnchantingWeight:
                        return EnchantingWeight;
                    case Class_FieldIndex.BleedoutDefault:
                        return BleedoutDefault;
                    case Class_FieldIndex.VoicePoints:
                        return VoicePoints;
                    case Class_FieldIndex.HealthWeight:
                        return HealthWeight;
                    case Class_FieldIndex.MagickaWeight:
                        return MagickaWeight;
                    case Class_FieldIndex.StaminaWeight:
                        return StaminaWeight;
                    case Class_FieldIndex.Unknown2:
                        return Unknown2;
                    case Class_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case Class_FieldIndex.OneHandedWeight:
                        this.OneHandedWeight = ex;
                        break;
                    case Class_FieldIndex.TwoHandedWeight:
                        this.TwoHandedWeight = ex;
                        break;
                    case Class_FieldIndex.MarksmanWeight:
                        this.MarksmanWeight = ex;
                        break;
                    case Class_FieldIndex.BlockWeight:
                        this.BlockWeight = ex;
                        break;
                    case Class_FieldIndex.SmithingWeight:
                        this.SmithingWeight = ex;
                        break;
                    case Class_FieldIndex.HeavyArmorWeight:
                        this.HeavyArmorWeight = ex;
                        break;
                    case Class_FieldIndex.LightArmorWeight:
                        this.LightArmorWeight = ex;
                        break;
                    case Class_FieldIndex.PickpocketWeight:
                        this.PickpocketWeight = ex;
                        break;
                    case Class_FieldIndex.LockpickingWeight:
                        this.LockpickingWeight = ex;
                        break;
                    case Class_FieldIndex.SneakWeight:
                        this.SneakWeight = ex;
                        break;
                    case Class_FieldIndex.AlchemyWeight:
                        this.AlchemyWeight = ex;
                        break;
                    case Class_FieldIndex.SpeechcraftWeight:
                        this.SpeechcraftWeight = ex;
                        break;
                    case Class_FieldIndex.AlterationWeight:
                        this.AlterationWeight = ex;
                        break;
                    case Class_FieldIndex.ConjurationWeight:
                        this.ConjurationWeight = ex;
                        break;
                    case Class_FieldIndex.DestructionWeight:
                        this.DestructionWeight = ex;
                        break;
                    case Class_FieldIndex.IllusionWeight:
                        this.IllusionWeight = ex;
                        break;
                    case Class_FieldIndex.RestorationWeight:
                        this.RestorationWeight = ex;
                        break;
                    case Class_FieldIndex.EnchantingWeight:
                        this.EnchantingWeight = ex;
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = ex;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = ex;
                        break;
                    case Class_FieldIndex.HealthWeight:
                        this.HealthWeight = ex;
                        break;
                    case Class_FieldIndex.MagickaWeight:
                        this.MagickaWeight = ex;
                        break;
                    case Class_FieldIndex.StaminaWeight:
                        this.StaminaWeight = ex;
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = (Exception)obj;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = (Exception)obj;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = (Exception)obj;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = (Exception)obj;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = (Exception)obj;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception)obj;
                        break;
                    case Class_FieldIndex.OneHandedWeight:
                        this.OneHandedWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.TwoHandedWeight:
                        this.TwoHandedWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.MarksmanWeight:
                        this.MarksmanWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.BlockWeight:
                        this.BlockWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.SmithingWeight:
                        this.SmithingWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.HeavyArmorWeight:
                        this.HeavyArmorWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.LightArmorWeight:
                        this.LightArmorWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.PickpocketWeight:
                        this.PickpocketWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.LockpickingWeight:
                        this.LockpickingWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.SneakWeight:
                        this.SneakWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.AlchemyWeight:
                        this.AlchemyWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.SpeechcraftWeight:
                        this.SpeechcraftWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.AlterationWeight:
                        this.AlterationWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.ConjurationWeight:
                        this.ConjurationWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.DestructionWeight:
                        this.DestructionWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.IllusionWeight:
                        this.IllusionWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.RestorationWeight:
                        this.RestorationWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.EnchantingWeight:
                        this.EnchantingWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = (Exception)obj;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = (Exception)obj;
                        break;
                    case Class_FieldIndex.HealthWeight:
                        this.HealthWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.MagickaWeight:
                        this.MagickaWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.StaminaWeight:
                        this.StaminaWeight = (Exception)obj;
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception)obj;
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Unknown != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (OneHandedWeight != null) return true;
                if (TwoHandedWeight != null) return true;
                if (MarksmanWeight != null) return true;
                if (BlockWeight != null) return true;
                if (SmithingWeight != null) return true;
                if (HeavyArmorWeight != null) return true;
                if (LightArmorWeight != null) return true;
                if (PickpocketWeight != null) return true;
                if (LockpickingWeight != null) return true;
                if (SneakWeight != null) return true;
                if (AlchemyWeight != null) return true;
                if (SpeechcraftWeight != null) return true;
                if (AlterationWeight != null) return true;
                if (ConjurationWeight != null) return true;
                if (DestructionWeight != null) return true;
                if (IllusionWeight != null) return true;
                if (RestorationWeight != null) return true;
                if (EnchantingWeight != null) return true;
                if (BleedoutDefault != null) return true;
                if (VoicePoints != null) return true;
                if (HealthWeight != null) return true;
                if (MagickaWeight != null) return true;
                if (StaminaWeight != null) return true;
                if (Unknown2 != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Description => {Description}");
                fg.AppendLine($"Icon => {Icon}");
                fg.AppendLine($"Unknown => {Unknown}");
                fg.AppendLine($"Teaches => {Teaches}");
                fg.AppendLine($"MaxTrainingLevel => {MaxTrainingLevel}");
                fg.AppendLine($"OneHandedWeight => {OneHandedWeight}");
                fg.AppendLine($"TwoHandedWeight => {TwoHandedWeight}");
                fg.AppendLine($"MarksmanWeight => {MarksmanWeight}");
                fg.AppendLine($"BlockWeight => {BlockWeight}");
                fg.AppendLine($"SmithingWeight => {SmithingWeight}");
                fg.AppendLine($"HeavyArmorWeight => {HeavyArmorWeight}");
                fg.AppendLine($"LightArmorWeight => {LightArmorWeight}");
                fg.AppendLine($"PickpocketWeight => {PickpocketWeight}");
                fg.AppendLine($"LockpickingWeight => {LockpickingWeight}");
                fg.AppendLine($"SneakWeight => {SneakWeight}");
                fg.AppendLine($"AlchemyWeight => {AlchemyWeight}");
                fg.AppendLine($"SpeechcraftWeight => {SpeechcraftWeight}");
                fg.AppendLine($"AlterationWeight => {AlterationWeight}");
                fg.AppendLine($"ConjurationWeight => {ConjurationWeight}");
                fg.AppendLine($"DestructionWeight => {DestructionWeight}");
                fg.AppendLine($"IllusionWeight => {IllusionWeight}");
                fg.AppendLine($"RestorationWeight => {RestorationWeight}");
                fg.AppendLine($"EnchantingWeight => {EnchantingWeight}");
                fg.AppendLine($"BleedoutDefault => {BleedoutDefault}");
                fg.AppendLine($"VoicePoints => {VoicePoints}");
                fg.AppendLine($"HealthWeight => {HealthWeight}");
                fg.AppendLine($"MagickaWeight => {MagickaWeight}");
                fg.AppendLine($"StaminaWeight => {StaminaWeight}");
                fg.AppendLine($"Unknown2 => {Unknown2}");
                fg.AppendLine($"DATADataTypeState => {DATADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.OneHandedWeight = this.OneHandedWeight.Combine(rhs.OneHandedWeight);
                ret.TwoHandedWeight = this.TwoHandedWeight.Combine(rhs.TwoHandedWeight);
                ret.MarksmanWeight = this.MarksmanWeight.Combine(rhs.MarksmanWeight);
                ret.BlockWeight = this.BlockWeight.Combine(rhs.BlockWeight);
                ret.SmithingWeight = this.SmithingWeight.Combine(rhs.SmithingWeight);
                ret.HeavyArmorWeight = this.HeavyArmorWeight.Combine(rhs.HeavyArmorWeight);
                ret.LightArmorWeight = this.LightArmorWeight.Combine(rhs.LightArmorWeight);
                ret.PickpocketWeight = this.PickpocketWeight.Combine(rhs.PickpocketWeight);
                ret.LockpickingWeight = this.LockpickingWeight.Combine(rhs.LockpickingWeight);
                ret.SneakWeight = this.SneakWeight.Combine(rhs.SneakWeight);
                ret.AlchemyWeight = this.AlchemyWeight.Combine(rhs.AlchemyWeight);
                ret.SpeechcraftWeight = this.SpeechcraftWeight.Combine(rhs.SpeechcraftWeight);
                ret.AlterationWeight = this.AlterationWeight.Combine(rhs.AlterationWeight);
                ret.ConjurationWeight = this.ConjurationWeight.Combine(rhs.ConjurationWeight);
                ret.DestructionWeight = this.DestructionWeight.Combine(rhs.DestructionWeight);
                ret.IllusionWeight = this.IllusionWeight.Combine(rhs.IllusionWeight);
                ret.RestorationWeight = this.RestorationWeight.Combine(rhs.RestorationWeight);
                ret.EnchantingWeight = this.EnchantingWeight.Combine(rhs.EnchantingWeight);
                ret.BleedoutDefault = this.BleedoutDefault.Combine(rhs.BleedoutDefault);
                ret.VoicePoints = this.VoicePoints.Combine(rhs.VoicePoints);
                ret.HealthWeight = this.HealthWeight.Combine(rhs.HealthWeight);
                ret.MagickaWeight = this.MagickaWeight.Combine(rhs.MagickaWeight);
                ret.StaminaWeight = this.StaminaWeight.Combine(rhs.StaminaWeight);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public bool Unknown;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool OneHandedWeight;
            public bool TwoHandedWeight;
            public bool MarksmanWeight;
            public bool BlockWeight;
            public bool SmithingWeight;
            public bool HeavyArmorWeight;
            public bool LightArmorWeight;
            public bool PickpocketWeight;
            public bool LockpickingWeight;
            public bool SneakWeight;
            public bool AlchemyWeight;
            public bool SpeechcraftWeight;
            public bool AlterationWeight;
            public bool ConjurationWeight;
            public bool DestructionWeight;
            public bool IllusionWeight;
            public bool RestorationWeight;
            public bool EnchantingWeight;
            public bool BleedoutDefault;
            public bool VoicePoints;
            public bool HealthWeight;
            public bool MagickaWeight;
            public bool StaminaWeight;
            public bool Unknown2;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.Unknown = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.OneHandedWeight = defaultOn;
                this.TwoHandedWeight = defaultOn;
                this.MarksmanWeight = defaultOn;
                this.BlockWeight = defaultOn;
                this.SmithingWeight = defaultOn;
                this.HeavyArmorWeight = defaultOn;
                this.LightArmorWeight = defaultOn;
                this.PickpocketWeight = defaultOn;
                this.LockpickingWeight = defaultOn;
                this.SneakWeight = defaultOn;
                this.AlchemyWeight = defaultOn;
                this.SpeechcraftWeight = defaultOn;
                this.AlterationWeight = defaultOn;
                this.ConjurationWeight = defaultOn;
                this.DestructionWeight = defaultOn;
                this.IllusionWeight = defaultOn;
                this.RestorationWeight = defaultOn;
                this.EnchantingWeight = defaultOn;
                this.BleedoutDefault = defaultOn;
                this.VoicePoints = defaultOn;
                this.HealthWeight = defaultOn;
                this.MagickaWeight = defaultOn;
                this.StaminaWeight = defaultOn;
                this.Unknown2 = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Unknown, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((OneHandedWeight, null));
                ret.Add((TwoHandedWeight, null));
                ret.Add((MarksmanWeight, null));
                ret.Add((BlockWeight, null));
                ret.Add((SmithingWeight, null));
                ret.Add((HeavyArmorWeight, null));
                ret.Add((LightArmorWeight, null));
                ret.Add((PickpocketWeight, null));
                ret.Add((LockpickingWeight, null));
                ret.Add((SneakWeight, null));
                ret.Add((AlchemyWeight, null));
                ret.Add((SpeechcraftWeight, null));
                ret.Add((AlterationWeight, null));
                ret.Add((ConjurationWeight, null));
                ret.Add((DestructionWeight, null));
                ret.Add((IllusionWeight, null));
                ret.Add((RestorationWeight, null));
                ret.Add((EnchantingWeight, null));
                ret.Add((BleedoutDefault, null));
                ret.Add((VoicePoints, null));
                ret.Add((HealthWeight, null));
                ret.Add((MagickaWeight, null));
                ret.Add((StaminaWeight, null));
                ret.Add((Unknown2, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Class_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public Class(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Class(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Class CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Class CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassSetterCommon)((IClassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Class GetNew()
        {
            return new Class();
        }

    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IClassInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new String? Icon { get; set; }
        new Int32 Unknown { get; set; }
        new Skill Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new Byte OneHandedWeight { get; set; }
        new Byte TwoHandedWeight { get; set; }
        new Byte MarksmanWeight { get; set; }
        new Byte BlockWeight { get; set; }
        new Byte SmithingWeight { get; set; }
        new Byte HeavyArmorWeight { get; set; }
        new Byte LightArmorWeight { get; set; }
        new Byte PickpocketWeight { get; set; }
        new Byte LockpickingWeight { get; set; }
        new Byte SneakWeight { get; set; }
        new Byte AlchemyWeight { get; set; }
        new Byte SpeechcraftWeight { get; set; }
        new Byte AlterationWeight { get; set; }
        new Byte ConjurationWeight { get; set; }
        new Byte DestructionWeight { get; set; }
        new Byte IllusionWeight { get; set; }
        new Byte RestorationWeight { get; set; }
        new Byte EnchantingWeight { get; set; }
        new Single BleedoutDefault { get; set; }
        new UInt32 VoicePoints { get; set; }
        new Byte HealthWeight { get; set; }
        new Byte MagickaWeight { get; set; }
        new Byte StaminaWeight { get; set; }
        new Byte Unknown2 { get; set; }
        new Class.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IClassInternal :
        ISkyrimMajorRecordInternal,
        IClass,
        IClassGetter
    {
    }

    public partial interface IClassGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IClassGetter>,
        IXmlItem,
        IBinaryItem
    {
        String? Name { get; }
        String? Description { get; }
        String? Icon { get; }
        Int32 Unknown { get; }
        Skill Teaches { get; }
        Byte MaxTrainingLevel { get; }
        Byte OneHandedWeight { get; }
        Byte TwoHandedWeight { get; }
        Byte MarksmanWeight { get; }
        Byte BlockWeight { get; }
        Byte SmithingWeight { get; }
        Byte HeavyArmorWeight { get; }
        Byte LightArmorWeight { get; }
        Byte PickpocketWeight { get; }
        Byte LockpickingWeight { get; }
        Byte SneakWeight { get; }
        Byte AlchemyWeight { get; }
        Byte SpeechcraftWeight { get; }
        Byte AlterationWeight { get; }
        Byte ConjurationWeight { get; }
        Byte DestructionWeight { get; }
        Byte IllusionWeight { get; }
        Byte RestorationWeight { get; }
        Byte EnchantingWeight { get; }
        Single BleedoutDefault { get; }
        UInt32 VoicePoints { get; }
        Byte HealthWeight { get; }
        Byte MagickaWeight { get; }
        Byte StaminaWeight { get; }
        Byte Unknown2 { get; }
        Class.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Class.Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Class.Mask<bool> GetHasBeenSetMask(this IClassGetter item)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassGetter item,
            IClassGetter rhs)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Name = 7,
        Description = 8,
        Icon = 9,
        Unknown = 10,
        Teaches = 11,
        MaxTrainingLevel = 12,
        OneHandedWeight = 13,
        TwoHandedWeight = 14,
        MarksmanWeight = 15,
        BlockWeight = 16,
        SmithingWeight = 17,
        HeavyArmorWeight = 18,
        LightArmorWeight = 19,
        PickpocketWeight = 20,
        LockpickingWeight = 21,
        SneakWeight = 22,
        AlchemyWeight = 23,
        SpeechcraftWeight = 24,
        AlterationWeight = 25,
        ConjurationWeight = 26,
        DestructionWeight = 27,
        IllusionWeight = 28,
        RestorationWeight = 29,
        EnchantingWeight = 30,
        BleedoutDefault = 31,
        VoicePoints = 32,
        HealthWeight = 33,
        MagickaWeight = 34,
        StaminaWeight = 35,
        Unknown2 = 36,
        DATADataTypeState = 37,
    }
    #endregion

    #region Registration
    public partial class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "faa1b071-96bf-43c3-be87-10d98e0b6cd8";

        public const ushort AdditionalFieldCount = 31;

        public const ushort FieldCount = 38;

        public static readonly Type MaskType = typeof(Class.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class.ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type? InternalSetterType = typeof(IClassInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "UNKNOWN":
                    return (ushort)Class_FieldIndex.Unknown;
                case "TEACHES":
                    return (ushort)Class_FieldIndex.Teaches;
                case "MAXTRAININGLEVEL":
                    return (ushort)Class_FieldIndex.MaxTrainingLevel;
                case "ONEHANDEDWEIGHT":
                    return (ushort)Class_FieldIndex.OneHandedWeight;
                case "TWOHANDEDWEIGHT":
                    return (ushort)Class_FieldIndex.TwoHandedWeight;
                case "MARKSMANWEIGHT":
                    return (ushort)Class_FieldIndex.MarksmanWeight;
                case "BLOCKWEIGHT":
                    return (ushort)Class_FieldIndex.BlockWeight;
                case "SMITHINGWEIGHT":
                    return (ushort)Class_FieldIndex.SmithingWeight;
                case "HEAVYARMORWEIGHT":
                    return (ushort)Class_FieldIndex.HeavyArmorWeight;
                case "LIGHTARMORWEIGHT":
                    return (ushort)Class_FieldIndex.LightArmorWeight;
                case "PICKPOCKETWEIGHT":
                    return (ushort)Class_FieldIndex.PickpocketWeight;
                case "LOCKPICKINGWEIGHT":
                    return (ushort)Class_FieldIndex.LockpickingWeight;
                case "SNEAKWEIGHT":
                    return (ushort)Class_FieldIndex.SneakWeight;
                case "ALCHEMYWEIGHT":
                    return (ushort)Class_FieldIndex.AlchemyWeight;
                case "SPEECHCRAFTWEIGHT":
                    return (ushort)Class_FieldIndex.SpeechcraftWeight;
                case "ALTERATIONWEIGHT":
                    return (ushort)Class_FieldIndex.AlterationWeight;
                case "CONJURATIONWEIGHT":
                    return (ushort)Class_FieldIndex.ConjurationWeight;
                case "DESTRUCTIONWEIGHT":
                    return (ushort)Class_FieldIndex.DestructionWeight;
                case "ILLUSIONWEIGHT":
                    return (ushort)Class_FieldIndex.IllusionWeight;
                case "RESTORATIONWEIGHT":
                    return (ushort)Class_FieldIndex.RestorationWeight;
                case "ENCHANTINGWEIGHT":
                    return (ushort)Class_FieldIndex.EnchantingWeight;
                case "BLEEDOUTDEFAULT":
                    return (ushort)Class_FieldIndex.BleedoutDefault;
                case "VOICEPOINTS":
                    return (ushort)Class_FieldIndex.VoicePoints;
                case "HEALTHWEIGHT":
                    return (ushort)Class_FieldIndex.HealthWeight;
                case "MAGICKAWEIGHT":
                    return (ushort)Class_FieldIndex.MagickaWeight;
                case "STAMINAWEIGHT":
                    return (ushort)Class_FieldIndex.StaminaWeight;
                case "UNKNOWN2":
                    return (ushort)Class_FieldIndex.Unknown2;
                case "DATADATATYPESTATE":
                    return (ushort)Class_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.OneHandedWeight:
                case Class_FieldIndex.TwoHandedWeight:
                case Class_FieldIndex.MarksmanWeight:
                case Class_FieldIndex.BlockWeight:
                case Class_FieldIndex.SmithingWeight:
                case Class_FieldIndex.HeavyArmorWeight:
                case Class_FieldIndex.LightArmorWeight:
                case Class_FieldIndex.PickpocketWeight:
                case Class_FieldIndex.LockpickingWeight:
                case Class_FieldIndex.SneakWeight:
                case Class_FieldIndex.AlchemyWeight:
                case Class_FieldIndex.SpeechcraftWeight:
                case Class_FieldIndex.AlterationWeight:
                case Class_FieldIndex.ConjurationWeight:
                case Class_FieldIndex.DestructionWeight:
                case Class_FieldIndex.IllusionWeight:
                case Class_FieldIndex.RestorationWeight:
                case Class_FieldIndex.EnchantingWeight:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.HealthWeight:
                case Class_FieldIndex.MagickaWeight:
                case Class_FieldIndex.StaminaWeight:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.OneHandedWeight:
                case Class_FieldIndex.TwoHandedWeight:
                case Class_FieldIndex.MarksmanWeight:
                case Class_FieldIndex.BlockWeight:
                case Class_FieldIndex.SmithingWeight:
                case Class_FieldIndex.HeavyArmorWeight:
                case Class_FieldIndex.LightArmorWeight:
                case Class_FieldIndex.PickpocketWeight:
                case Class_FieldIndex.LockpickingWeight:
                case Class_FieldIndex.SneakWeight:
                case Class_FieldIndex.AlchemyWeight:
                case Class_FieldIndex.SpeechcraftWeight:
                case Class_FieldIndex.AlterationWeight:
                case Class_FieldIndex.ConjurationWeight:
                case Class_FieldIndex.DestructionWeight:
                case Class_FieldIndex.IllusionWeight:
                case Class_FieldIndex.RestorationWeight:
                case Class_FieldIndex.EnchantingWeight:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.HealthWeight:
                case Class_FieldIndex.MagickaWeight:
                case Class_FieldIndex.StaminaWeight:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.OneHandedWeight:
                case Class_FieldIndex.TwoHandedWeight:
                case Class_FieldIndex.MarksmanWeight:
                case Class_FieldIndex.BlockWeight:
                case Class_FieldIndex.SmithingWeight:
                case Class_FieldIndex.HeavyArmorWeight:
                case Class_FieldIndex.LightArmorWeight:
                case Class_FieldIndex.PickpocketWeight:
                case Class_FieldIndex.LockpickingWeight:
                case Class_FieldIndex.SneakWeight:
                case Class_FieldIndex.AlchemyWeight:
                case Class_FieldIndex.SpeechcraftWeight:
                case Class_FieldIndex.AlterationWeight:
                case Class_FieldIndex.ConjurationWeight:
                case Class_FieldIndex.DestructionWeight:
                case Class_FieldIndex.IllusionWeight:
                case Class_FieldIndex.RestorationWeight:
                case Class_FieldIndex.EnchantingWeight:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.HealthWeight:
                case Class_FieldIndex.MagickaWeight:
                case Class_FieldIndex.StaminaWeight:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.Unknown:
                    return "Unknown";
                case Class_FieldIndex.Teaches:
                    return "Teaches";
                case Class_FieldIndex.MaxTrainingLevel:
                    return "MaxTrainingLevel";
                case Class_FieldIndex.OneHandedWeight:
                    return "OneHandedWeight";
                case Class_FieldIndex.TwoHandedWeight:
                    return "TwoHandedWeight";
                case Class_FieldIndex.MarksmanWeight:
                    return "MarksmanWeight";
                case Class_FieldIndex.BlockWeight:
                    return "BlockWeight";
                case Class_FieldIndex.SmithingWeight:
                    return "SmithingWeight";
                case Class_FieldIndex.HeavyArmorWeight:
                    return "HeavyArmorWeight";
                case Class_FieldIndex.LightArmorWeight:
                    return "LightArmorWeight";
                case Class_FieldIndex.PickpocketWeight:
                    return "PickpocketWeight";
                case Class_FieldIndex.LockpickingWeight:
                    return "LockpickingWeight";
                case Class_FieldIndex.SneakWeight:
                    return "SneakWeight";
                case Class_FieldIndex.AlchemyWeight:
                    return "AlchemyWeight";
                case Class_FieldIndex.SpeechcraftWeight:
                    return "SpeechcraftWeight";
                case Class_FieldIndex.AlterationWeight:
                    return "AlterationWeight";
                case Class_FieldIndex.ConjurationWeight:
                    return "ConjurationWeight";
                case Class_FieldIndex.DestructionWeight:
                    return "DestructionWeight";
                case Class_FieldIndex.IllusionWeight:
                    return "IllusionWeight";
                case Class_FieldIndex.RestorationWeight:
                    return "RestorationWeight";
                case Class_FieldIndex.EnchantingWeight:
                    return "EnchantingWeight";
                case Class_FieldIndex.BleedoutDefault:
                    return "BleedoutDefault";
                case Class_FieldIndex.VoicePoints:
                    return "VoicePoints";
                case Class_FieldIndex.HealthWeight:
                    return "HealthWeight";
                case Class_FieldIndex.MagickaWeight:
                    return "MagickaWeight";
                case Class_FieldIndex.StaminaWeight:
                    return "StaminaWeight";
                case Class_FieldIndex.Unknown2:
                    return "Unknown2";
                case Class_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.OneHandedWeight:
                case Class_FieldIndex.TwoHandedWeight:
                case Class_FieldIndex.MarksmanWeight:
                case Class_FieldIndex.BlockWeight:
                case Class_FieldIndex.SmithingWeight:
                case Class_FieldIndex.HeavyArmorWeight:
                case Class_FieldIndex.LightArmorWeight:
                case Class_FieldIndex.PickpocketWeight:
                case Class_FieldIndex.LockpickingWeight:
                case Class_FieldIndex.SneakWeight:
                case Class_FieldIndex.AlchemyWeight:
                case Class_FieldIndex.SpeechcraftWeight:
                case Class_FieldIndex.AlterationWeight:
                case Class_FieldIndex.ConjurationWeight:
                case Class_FieldIndex.DestructionWeight:
                case Class_FieldIndex.IllusionWeight:
                case Class_FieldIndex.RestorationWeight:
                case Class_FieldIndex.EnchantingWeight:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.HealthWeight:
                case Class_FieldIndex.MagickaWeight:
                case Class_FieldIndex.StaminaWeight:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.OneHandedWeight:
                case Class_FieldIndex.TwoHandedWeight:
                case Class_FieldIndex.MarksmanWeight:
                case Class_FieldIndex.BlockWeight:
                case Class_FieldIndex.SmithingWeight:
                case Class_FieldIndex.HeavyArmorWeight:
                case Class_FieldIndex.LightArmorWeight:
                case Class_FieldIndex.PickpocketWeight:
                case Class_FieldIndex.LockpickingWeight:
                case Class_FieldIndex.SneakWeight:
                case Class_FieldIndex.AlchemyWeight:
                case Class_FieldIndex.SpeechcraftWeight:
                case Class_FieldIndex.AlterationWeight:
                case Class_FieldIndex.ConjurationWeight:
                case Class_FieldIndex.DestructionWeight:
                case Class_FieldIndex.IllusionWeight:
                case Class_FieldIndex.RestorationWeight:
                case Class_FieldIndex.EnchantingWeight:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.HealthWeight:
                case Class_FieldIndex.MagickaWeight:
                case Class_FieldIndex.StaminaWeight:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(String);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.Unknown:
                    return typeof(Int32);
                case Class_FieldIndex.Teaches:
                    return typeof(Skill);
                case Class_FieldIndex.MaxTrainingLevel:
                    return typeof(Byte);
                case Class_FieldIndex.OneHandedWeight:
                    return typeof(Byte);
                case Class_FieldIndex.TwoHandedWeight:
                    return typeof(Byte);
                case Class_FieldIndex.MarksmanWeight:
                    return typeof(Byte);
                case Class_FieldIndex.BlockWeight:
                    return typeof(Byte);
                case Class_FieldIndex.SmithingWeight:
                    return typeof(Byte);
                case Class_FieldIndex.HeavyArmorWeight:
                    return typeof(Byte);
                case Class_FieldIndex.LightArmorWeight:
                    return typeof(Byte);
                case Class_FieldIndex.PickpocketWeight:
                    return typeof(Byte);
                case Class_FieldIndex.LockpickingWeight:
                    return typeof(Byte);
                case Class_FieldIndex.SneakWeight:
                    return typeof(Byte);
                case Class_FieldIndex.AlchemyWeight:
                    return typeof(Byte);
                case Class_FieldIndex.SpeechcraftWeight:
                    return typeof(Byte);
                case Class_FieldIndex.AlterationWeight:
                    return typeof(Byte);
                case Class_FieldIndex.ConjurationWeight:
                    return typeof(Byte);
                case Class_FieldIndex.DestructionWeight:
                    return typeof(Byte);
                case Class_FieldIndex.IllusionWeight:
                    return typeof(Byte);
                case Class_FieldIndex.RestorationWeight:
                    return typeof(Byte);
                case Class_FieldIndex.EnchantingWeight:
                    return typeof(Byte);
                case Class_FieldIndex.BleedoutDefault:
                    return typeof(Single);
                case Class_FieldIndex.VoicePoints:
                    return typeof(UInt32);
                case Class_FieldIndex.HealthWeight:
                    return typeof(Byte);
                case Class_FieldIndex.MagickaWeight:
                    return typeof(Byte);
                case Class_FieldIndex.StaminaWeight:
                    return typeof(Byte);
                case Class_FieldIndex.Unknown2:
                    return typeof(Byte);
                case Class_FieldIndex.DATADataTypeState:
                    return typeof(Class.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassXmlWriteTranslation);
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ClassSetterCommon Instance = new ClassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Icon = default;
            item.Unknown = default;
            item.Teaches = default;
            item.MaxTrainingLevel = default;
            item.OneHandedWeight = default;
            item.TwoHandedWeight = default;
            item.MarksmanWeight = default;
            item.BlockWeight = default;
            item.SmithingWeight = default;
            item.HeavyArmorWeight = default;
            item.LightArmorWeight = default;
            item.PickpocketWeight = default;
            item.LockpickingWeight = default;
            item.SneakWeight = default;
            item.AlchemyWeight = default;
            item.SpeechcraftWeight = default;
            item.AlterationWeight = default;
            item.ConjurationWeight = default;
            item.DestructionWeight = default;
            item.IllusionWeight = default;
            item.RestorationWeight = default;
            item.EnchantingWeight = default;
            item.BleedoutDefault = default;
            item.VoicePoints = default;
            item.HealthWeight = default;
            item.MagickaWeight = default;
            item.StaminaWeight = default;
            item.Unknown2 = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Class_Registration.CLAS_HEADER;
        protected static void FillBinaryStructs(
            IClassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IClassInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Class.DATADataType.Has;
                    }
                    item.Unknown = dataFrame.ReadInt32();
                    item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.MaxTrainingLevel = dataFrame.ReadUInt8();
                    item.OneHandedWeight = dataFrame.ReadUInt8();
                    item.TwoHandedWeight = dataFrame.ReadUInt8();
                    item.MarksmanWeight = dataFrame.ReadUInt8();
                    item.BlockWeight = dataFrame.ReadUInt8();
                    item.SmithingWeight = dataFrame.ReadUInt8();
                    item.HeavyArmorWeight = dataFrame.ReadUInt8();
                    item.LightArmorWeight = dataFrame.ReadUInt8();
                    item.PickpocketWeight = dataFrame.ReadUInt8();
                    item.LockpickingWeight = dataFrame.ReadUInt8();
                    item.SneakWeight = dataFrame.ReadUInt8();
                    item.AlchemyWeight = dataFrame.ReadUInt8();
                    item.SpeechcraftWeight = dataFrame.ReadUInt8();
                    item.AlterationWeight = dataFrame.ReadUInt8();
                    item.ConjurationWeight = dataFrame.ReadUInt8();
                    item.DestructionWeight = dataFrame.ReadUInt8();
                    item.IllusionWeight = dataFrame.ReadUInt8();
                    item.RestorationWeight = dataFrame.ReadUInt8();
                    item.EnchantingWeight = dataFrame.ReadUInt8();
                    item.BleedoutDefault = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.VoicePoints = dataFrame.ReadUInt32();
                    item.HealthWeight = dataFrame.ReadUInt8();
                    item.MagickaWeight = dataFrame.ReadUInt8();
                    item.StaminaWeight = dataFrame.ReadUInt8();
                    item.Unknown2 = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Unknown2);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IClassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IClassInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ClassCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ClassCommon Instance = new ClassCommon();

        public Class.Mask<bool> GetEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            ret.OneHandedWeight = item.OneHandedWeight == rhs.OneHandedWeight;
            ret.TwoHandedWeight = item.TwoHandedWeight == rhs.TwoHandedWeight;
            ret.MarksmanWeight = item.MarksmanWeight == rhs.MarksmanWeight;
            ret.BlockWeight = item.BlockWeight == rhs.BlockWeight;
            ret.SmithingWeight = item.SmithingWeight == rhs.SmithingWeight;
            ret.HeavyArmorWeight = item.HeavyArmorWeight == rhs.HeavyArmorWeight;
            ret.LightArmorWeight = item.LightArmorWeight == rhs.LightArmorWeight;
            ret.PickpocketWeight = item.PickpocketWeight == rhs.PickpocketWeight;
            ret.LockpickingWeight = item.LockpickingWeight == rhs.LockpickingWeight;
            ret.SneakWeight = item.SneakWeight == rhs.SneakWeight;
            ret.AlchemyWeight = item.AlchemyWeight == rhs.AlchemyWeight;
            ret.SpeechcraftWeight = item.SpeechcraftWeight == rhs.SpeechcraftWeight;
            ret.AlterationWeight = item.AlterationWeight == rhs.AlterationWeight;
            ret.ConjurationWeight = item.ConjurationWeight == rhs.ConjurationWeight;
            ret.DestructionWeight = item.DestructionWeight == rhs.DestructionWeight;
            ret.IllusionWeight = item.IllusionWeight == rhs.IllusionWeight;
            ret.RestorationWeight = item.RestorationWeight == rhs.RestorationWeight;
            ret.EnchantingWeight = item.EnchantingWeight == rhs.EnchantingWeight;
            ret.BleedoutDefault = item.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault);
            ret.VoicePoints = item.VoicePoints == rhs.VoicePoints;
            ret.HealthWeight = item.HealthWeight == rhs.HealthWeight;
            ret.MagickaWeight = item.MagickaWeight == rhs.MagickaWeight;
            ret.StaminaWeight = item.StaminaWeight == rhs.StaminaWeight;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Class =>");
            }
            else
            {
                fg.AppendLine($"{name} (Class) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassGetter item,
            FileGeneration fg,
            Class.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.Icon ?? true)
            {
                fg.AppendLine($"Icon => {item.Icon}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {item.Unknown}");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendLine($"Teaches => {item.Teaches}");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                fg.AppendLine($"MaxTrainingLevel => {item.MaxTrainingLevel}");
            }
            if (printMask?.OneHandedWeight ?? true)
            {
                fg.AppendLine($"OneHandedWeight => {item.OneHandedWeight}");
            }
            if (printMask?.TwoHandedWeight ?? true)
            {
                fg.AppendLine($"TwoHandedWeight => {item.TwoHandedWeight}");
            }
            if (printMask?.MarksmanWeight ?? true)
            {
                fg.AppendLine($"MarksmanWeight => {item.MarksmanWeight}");
            }
            if (printMask?.BlockWeight ?? true)
            {
                fg.AppendLine($"BlockWeight => {item.BlockWeight}");
            }
            if (printMask?.SmithingWeight ?? true)
            {
                fg.AppendLine($"SmithingWeight => {item.SmithingWeight}");
            }
            if (printMask?.HeavyArmorWeight ?? true)
            {
                fg.AppendLine($"HeavyArmorWeight => {item.HeavyArmorWeight}");
            }
            if (printMask?.LightArmorWeight ?? true)
            {
                fg.AppendLine($"LightArmorWeight => {item.LightArmorWeight}");
            }
            if (printMask?.PickpocketWeight ?? true)
            {
                fg.AppendLine($"PickpocketWeight => {item.PickpocketWeight}");
            }
            if (printMask?.LockpickingWeight ?? true)
            {
                fg.AppendLine($"LockpickingWeight => {item.LockpickingWeight}");
            }
            if (printMask?.SneakWeight ?? true)
            {
                fg.AppendLine($"SneakWeight => {item.SneakWeight}");
            }
            if (printMask?.AlchemyWeight ?? true)
            {
                fg.AppendLine($"AlchemyWeight => {item.AlchemyWeight}");
            }
            if (printMask?.SpeechcraftWeight ?? true)
            {
                fg.AppendLine($"SpeechcraftWeight => {item.SpeechcraftWeight}");
            }
            if (printMask?.AlterationWeight ?? true)
            {
                fg.AppendLine($"AlterationWeight => {item.AlterationWeight}");
            }
            if (printMask?.ConjurationWeight ?? true)
            {
                fg.AppendLine($"ConjurationWeight => {item.ConjurationWeight}");
            }
            if (printMask?.DestructionWeight ?? true)
            {
                fg.AppendLine($"DestructionWeight => {item.DestructionWeight}");
            }
            if (printMask?.IllusionWeight ?? true)
            {
                fg.AppendLine($"IllusionWeight => {item.IllusionWeight}");
            }
            if (printMask?.RestorationWeight ?? true)
            {
                fg.AppendLine($"RestorationWeight => {item.RestorationWeight}");
            }
            if (printMask?.EnchantingWeight ?? true)
            {
                fg.AppendLine($"EnchantingWeight => {item.EnchantingWeight}");
            }
            if (printMask?.BleedoutDefault ?? true)
            {
                fg.AppendLine($"BleedoutDefault => {item.BleedoutDefault}");
            }
            if (printMask?.VoicePoints ?? true)
            {
                fg.AppendLine($"VoicePoints => {item.VoicePoints}");
            }
            if (printMask?.HealthWeight ?? true)
            {
                fg.AppendLine($"HealthWeight => {item.HealthWeight}");
            }
            if (printMask?.MagickaWeight ?? true)
            {
                fg.AppendLine($"MagickaWeight => {item.MagickaWeight}");
            }
            if (printMask?.StaminaWeight ?? true)
            {
                fg.AppendLine($"StaminaWeight => {item.StaminaWeight}");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {item.Unknown2}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendLine($"DATADataTypeState => {item.DATADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IClassGetter item,
            Class.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.Icon = (item.Icon != null);
            mask.Unknown = true;
            mask.Teaches = true;
            mask.MaxTrainingLevel = true;
            mask.OneHandedWeight = true;
            mask.TwoHandedWeight = true;
            mask.MarksmanWeight = true;
            mask.BlockWeight = true;
            mask.SmithingWeight = true;
            mask.HeavyArmorWeight = true;
            mask.LightArmorWeight = true;
            mask.PickpocketWeight = true;
            mask.LockpickingWeight = true;
            mask.SneakWeight = true;
            mask.AlchemyWeight = true;
            mask.SpeechcraftWeight = true;
            mask.AlterationWeight = true;
            mask.ConjurationWeight = true;
            mask.DestructionWeight = true;
            mask.IllusionWeight = true;
            mask.RestorationWeight = true;
            mask.EnchantingWeight = true;
            mask.BleedoutDefault = true;
            mask.VoicePoints = true;
            mask.HealthWeight = true;
            mask.MagickaWeight = true;
            mask.StaminaWeight = true;
            mask.Unknown2 = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Class_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassGetter? lhs,
            IClassGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            if (lhs.OneHandedWeight != rhs.OneHandedWeight) return false;
            if (lhs.TwoHandedWeight != rhs.TwoHandedWeight) return false;
            if (lhs.MarksmanWeight != rhs.MarksmanWeight) return false;
            if (lhs.BlockWeight != rhs.BlockWeight) return false;
            if (lhs.SmithingWeight != rhs.SmithingWeight) return false;
            if (lhs.HeavyArmorWeight != rhs.HeavyArmorWeight) return false;
            if (lhs.LightArmorWeight != rhs.LightArmorWeight) return false;
            if (lhs.PickpocketWeight != rhs.PickpocketWeight) return false;
            if (lhs.LockpickingWeight != rhs.LockpickingWeight) return false;
            if (lhs.SneakWeight != rhs.SneakWeight) return false;
            if (lhs.AlchemyWeight != rhs.AlchemyWeight) return false;
            if (lhs.SpeechcraftWeight != rhs.SpeechcraftWeight) return false;
            if (lhs.AlterationWeight != rhs.AlterationWeight) return false;
            if (lhs.ConjurationWeight != rhs.ConjurationWeight) return false;
            if (lhs.DestructionWeight != rhs.DestructionWeight) return false;
            if (lhs.IllusionWeight != rhs.IllusionWeight) return false;
            if (lhs.RestorationWeight != rhs.RestorationWeight) return false;
            if (lhs.EnchantingWeight != rhs.EnchantingWeight) return false;
            if (!lhs.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault)) return false;
            if (lhs.VoicePoints != rhs.VoicePoints) return false;
            if (lhs.HealthWeight != rhs.HealthWeight) return false;
            if (lhs.MagickaWeight != rhs.MagickaWeight) return false;
            if (lhs.StaminaWeight != rhs.StaminaWeight) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public virtual int GetHashCode(IClassGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaxTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.OneHandedWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TwoHandedWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MarksmanWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BlockWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SmithingWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HeavyArmorWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LightArmorWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PickpocketWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LockpickingWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SneakWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AlchemyWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SpeechcraftWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AlterationWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ConjurationWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DestructionWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.IllusionWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RestorationWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnchantingWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BleedoutDefault).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.VoicePoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HealthWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagickaWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.StaminaWeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Class.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClassGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Class obj, Class rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Class(getNextFormKey());
            ret.DeepCopyIn((Class)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Class)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ClassSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ClassSetterTranslationCommon Instance = new ClassSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassInternal item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.OneHandedWeight) ?? true))
            {
                item.OneHandedWeight = rhs.OneHandedWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.TwoHandedWeight) ?? true))
            {
                item.TwoHandedWeight = rhs.TwoHandedWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MarksmanWeight) ?? true))
            {
                item.MarksmanWeight = rhs.MarksmanWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.BlockWeight) ?? true))
            {
                item.BlockWeight = rhs.BlockWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SmithingWeight) ?? true))
            {
                item.SmithingWeight = rhs.SmithingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.HeavyArmorWeight) ?? true))
            {
                item.HeavyArmorWeight = rhs.HeavyArmorWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.LightArmorWeight) ?? true))
            {
                item.LightArmorWeight = rhs.LightArmorWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.PickpocketWeight) ?? true))
            {
                item.PickpocketWeight = rhs.PickpocketWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.LockpickingWeight) ?? true))
            {
                item.LockpickingWeight = rhs.LockpickingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SneakWeight) ?? true))
            {
                item.SneakWeight = rhs.SneakWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.AlchemyWeight) ?? true))
            {
                item.AlchemyWeight = rhs.AlchemyWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SpeechcraftWeight) ?? true))
            {
                item.SpeechcraftWeight = rhs.SpeechcraftWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.AlterationWeight) ?? true))
            {
                item.AlterationWeight = rhs.AlterationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.ConjurationWeight) ?? true))
            {
                item.ConjurationWeight = rhs.ConjurationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.DestructionWeight) ?? true))
            {
                item.DestructionWeight = rhs.DestructionWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.IllusionWeight) ?? true))
            {
                item.IllusionWeight = rhs.IllusionWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.RestorationWeight) ?? true))
            {
                item.RestorationWeight = rhs.RestorationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.EnchantingWeight) ?? true))
            {
                item.EnchantingWeight = rhs.EnchantingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
            {
                item.BleedoutDefault = rhs.BleedoutDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
            {
                item.VoicePoints = rhs.VoicePoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.HealthWeight) ?? true))
            {
                item.HealthWeight = rhs.HealthWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MagickaWeight) ?? true))
            {
                item.MagickaWeight = rhs.MagickaWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.StaminaWeight) ?? true))
            {
                item.StaminaWeight = rhs.StaminaWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Class DeepCopy(
            IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Class
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClassXmlWriteTranslation Instance = new ClassXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
                {
                    Int32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Unknown),
                        item: item.Unknown,
                        fieldIndex: (int)Class_FieldIndex.Unknown,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)Class_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaxTrainingLevel),
                        item: item.MaxTrainingLevel,
                        fieldIndex: (int)Class_FieldIndex.MaxTrainingLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.OneHandedWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.OneHandedWeight),
                        item: item.OneHandedWeight,
                        fieldIndex: (int)Class_FieldIndex.OneHandedWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.TwoHandedWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.TwoHandedWeight),
                        item: item.TwoHandedWeight,
                        fieldIndex: (int)Class_FieldIndex.TwoHandedWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.MarksmanWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MarksmanWeight),
                        item: item.MarksmanWeight,
                        fieldIndex: (int)Class_FieldIndex.MarksmanWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.BlockWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BlockWeight),
                        item: item.BlockWeight,
                        fieldIndex: (int)Class_FieldIndex.BlockWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SmithingWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SmithingWeight),
                        item: item.SmithingWeight,
                        fieldIndex: (int)Class_FieldIndex.SmithingWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.HeavyArmorWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HeavyArmorWeight),
                        item: item.HeavyArmorWeight,
                        fieldIndex: (int)Class_FieldIndex.HeavyArmorWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.LightArmorWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LightArmorWeight),
                        item: item.LightArmorWeight,
                        fieldIndex: (int)Class_FieldIndex.LightArmorWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.PickpocketWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PickpocketWeight),
                        item: item.PickpocketWeight,
                        fieldIndex: (int)Class_FieldIndex.PickpocketWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.LockpickingWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LockpickingWeight),
                        item: item.LockpickingWeight,
                        fieldIndex: (int)Class_FieldIndex.LockpickingWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SneakWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SneakWeight),
                        item: item.SneakWeight,
                        fieldIndex: (int)Class_FieldIndex.SneakWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.AlchemyWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AlchemyWeight),
                        item: item.AlchemyWeight,
                        fieldIndex: (int)Class_FieldIndex.AlchemyWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SpeechcraftWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.SpeechcraftWeight),
                        item: item.SpeechcraftWeight,
                        fieldIndex: (int)Class_FieldIndex.SpeechcraftWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.AlterationWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AlterationWeight),
                        item: item.AlterationWeight,
                        fieldIndex: (int)Class_FieldIndex.AlterationWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.ConjurationWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ConjurationWeight),
                        item: item.ConjurationWeight,
                        fieldIndex: (int)Class_FieldIndex.ConjurationWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.DestructionWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DestructionWeight),
                        item: item.DestructionWeight,
                        fieldIndex: (int)Class_FieldIndex.DestructionWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.IllusionWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.IllusionWeight),
                        item: item.IllusionWeight,
                        fieldIndex: (int)Class_FieldIndex.IllusionWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.RestorationWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.RestorationWeight),
                        item: item.RestorationWeight,
                        fieldIndex: (int)Class_FieldIndex.RestorationWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.EnchantingWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnchantingWeight),
                        item: item.EnchantingWeight,
                        fieldIndex: (int)Class_FieldIndex.EnchantingWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BleedoutDefault),
                        item: item.BleedoutDefault,
                        fieldIndex: (int)Class_FieldIndex.BleedoutDefault,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.VoicePoints),
                        item: item.VoicePoints,
                        fieldIndex: (int)Class_FieldIndex.VoicePoints,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.HealthWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HealthWeight),
                        item: item.HealthWeight,
                        fieldIndex: (int)Class_FieldIndex.HealthWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.MagickaWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MagickaWeight),
                        item: item.MagickaWeight,
                        fieldIndex: (int)Class_FieldIndex.MagickaWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.StaminaWeight) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.StaminaWeight),
                        item: item.StaminaWeight,
                        fieldIndex: (int)Class_FieldIndex.StaminaWeight,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Unknown2),
                        item: item.Unknown2,
                        fieldIndex: (int)Class_FieldIndex.Unknown2,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Class.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Class_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Class");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClassXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ClassXmlCreateTranslation Instance = new ClassXmlCreateTranslation();

        public static void FillPublicXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Description);
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Unknown);
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                case "Teaches":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Teaches);
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxTrainingLevel":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.MaxTrainingLevel);
                        item.MaxTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OneHandedWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.OneHandedWeight);
                        item.OneHandedWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TwoHandedWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.TwoHandedWeight);
                        item.TwoHandedWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MarksmanWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.MarksmanWeight);
                        item.MarksmanWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.BlockWeight);
                        item.BlockWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SmithingWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.SmithingWeight);
                        item.SmithingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeavyArmorWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.HeavyArmorWeight);
                        item.HeavyArmorWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightArmorWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.LightArmorWeight);
                        item.LightArmorWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickpocketWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.PickpocketWeight);
                        item.PickpocketWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LockpickingWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.LockpickingWeight);
                        item.LockpickingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SneakWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.SneakWeight);
                        item.SneakWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemyWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.AlchemyWeight);
                        item.AlchemyWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeechcraftWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.SpeechcraftWeight);
                        item.SpeechcraftWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlterationWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.AlterationWeight);
                        item.AlterationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConjurationWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.ConjurationWeight);
                        item.ConjurationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DestructionWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.DestructionWeight);
                        item.DestructionWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IllusionWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.IllusionWeight);
                        item.IllusionWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RestorationWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.RestorationWeight);
                        item.RestorationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantingWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.EnchantingWeight);
                        item.EnchantingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BleedoutDefault":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.BleedoutDefault);
                        item.BleedoutDefault = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoicePoints":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.VoicePoints);
                        item.VoicePoints = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HealthWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.HealthWeight);
                        item.HealthWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagickaWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.MagickaWeight);
                        item.MagickaWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StaminaWeight":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.StaminaWeight);
                        item.StaminaWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.Unknown2);
                        item.Unknown2 = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    try
                    {
                        errorMask?.PushIndex((int)Class_FieldIndex.DATADataTypeState);
                        item.DATADataTypeState = EnumXmlTranslation<Class.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ClassXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassGetter item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassGetter item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassGetter item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClassBinaryWriteTranslation Instance = new ClassBinaryWriteTranslation();

        public static void Write_Embedded(
            IClassGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IClassGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Class_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Unknown);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1);
                    writer.Write(item.MaxTrainingLevel);
                    writer.Write(item.OneHandedWeight);
                    writer.Write(item.TwoHandedWeight);
                    writer.Write(item.MarksmanWeight);
                    writer.Write(item.BlockWeight);
                    writer.Write(item.SmithingWeight);
                    writer.Write(item.HeavyArmorWeight);
                    writer.Write(item.LightArmorWeight);
                    writer.Write(item.PickpocketWeight);
                    writer.Write(item.LockpickingWeight);
                    writer.Write(item.SneakWeight);
                    writer.Write(item.AlchemyWeight);
                    writer.Write(item.SpeechcraftWeight);
                    writer.Write(item.AlterationWeight);
                    writer.Write(item.ConjurationWeight);
                    writer.Write(item.DestructionWeight);
                    writer.Write(item.IllusionWeight);
                    writer.Write(item.RestorationWeight);
                    writer.Write(item.EnchantingWeight);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BleedoutDefault);
                    writer.Write(item.VoicePoints);
                    writer.Write(item.HealthWeight);
                    writer.Write(item.MagickaWeight);
                    writer.Write(item.StaminaWeight);
                    writer.Write(item.Unknown2);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Class_Registration.CLAS_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IClassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IClassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _DATALocation;
        public Class.DATADataType DATADataTypeState { get; private set; }
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0x0;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_UnknownLocation, 4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _DATALocation!.Value + 0x4;
        private bool _Teaches_IsSet => _DATALocation.HasValue;
        public Skill Teaches => _Teaches_IsSet ? (Skill)_data.Span.Slice(_TeachesLocation, 1)[0] : default;
        #endregion
        #region MaxTrainingLevel
        private int _MaxTrainingLevelLocation => _DATALocation!.Value + 0x5;
        private bool _MaxTrainingLevel_IsSet => _DATALocation.HasValue;
        public Byte MaxTrainingLevel => _MaxTrainingLevel_IsSet ? _data.Span[_MaxTrainingLevelLocation] : default;
        #endregion
        #region OneHandedWeight
        private int _OneHandedWeightLocation => _DATALocation!.Value + 0x6;
        private bool _OneHandedWeight_IsSet => _DATALocation.HasValue;
        public Byte OneHandedWeight => _OneHandedWeight_IsSet ? _data.Span[_OneHandedWeightLocation] : default;
        #endregion
        #region TwoHandedWeight
        private int _TwoHandedWeightLocation => _DATALocation!.Value + 0x7;
        private bool _TwoHandedWeight_IsSet => _DATALocation.HasValue;
        public Byte TwoHandedWeight => _TwoHandedWeight_IsSet ? _data.Span[_TwoHandedWeightLocation] : default;
        #endregion
        #region MarksmanWeight
        private int _MarksmanWeightLocation => _DATALocation!.Value + 0x8;
        private bool _MarksmanWeight_IsSet => _DATALocation.HasValue;
        public Byte MarksmanWeight => _MarksmanWeight_IsSet ? _data.Span[_MarksmanWeightLocation] : default;
        #endregion
        #region BlockWeight
        private int _BlockWeightLocation => _DATALocation!.Value + 0x9;
        private bool _BlockWeight_IsSet => _DATALocation.HasValue;
        public Byte BlockWeight => _BlockWeight_IsSet ? _data.Span[_BlockWeightLocation] : default;
        #endregion
        #region SmithingWeight
        private int _SmithingWeightLocation => _DATALocation!.Value + 0xA;
        private bool _SmithingWeight_IsSet => _DATALocation.HasValue;
        public Byte SmithingWeight => _SmithingWeight_IsSet ? _data.Span[_SmithingWeightLocation] : default;
        #endregion
        #region HeavyArmorWeight
        private int _HeavyArmorWeightLocation => _DATALocation!.Value + 0xB;
        private bool _HeavyArmorWeight_IsSet => _DATALocation.HasValue;
        public Byte HeavyArmorWeight => _HeavyArmorWeight_IsSet ? _data.Span[_HeavyArmorWeightLocation] : default;
        #endregion
        #region LightArmorWeight
        private int _LightArmorWeightLocation => _DATALocation!.Value + 0xC;
        private bool _LightArmorWeight_IsSet => _DATALocation.HasValue;
        public Byte LightArmorWeight => _LightArmorWeight_IsSet ? _data.Span[_LightArmorWeightLocation] : default;
        #endregion
        #region PickpocketWeight
        private int _PickpocketWeightLocation => _DATALocation!.Value + 0xD;
        private bool _PickpocketWeight_IsSet => _DATALocation.HasValue;
        public Byte PickpocketWeight => _PickpocketWeight_IsSet ? _data.Span[_PickpocketWeightLocation] : default;
        #endregion
        #region LockpickingWeight
        private int _LockpickingWeightLocation => _DATALocation!.Value + 0xE;
        private bool _LockpickingWeight_IsSet => _DATALocation.HasValue;
        public Byte LockpickingWeight => _LockpickingWeight_IsSet ? _data.Span[_LockpickingWeightLocation] : default;
        #endregion
        #region SneakWeight
        private int _SneakWeightLocation => _DATALocation!.Value + 0xF;
        private bool _SneakWeight_IsSet => _DATALocation.HasValue;
        public Byte SneakWeight => _SneakWeight_IsSet ? _data.Span[_SneakWeightLocation] : default;
        #endregion
        #region AlchemyWeight
        private int _AlchemyWeightLocation => _DATALocation!.Value + 0x10;
        private bool _AlchemyWeight_IsSet => _DATALocation.HasValue;
        public Byte AlchemyWeight => _AlchemyWeight_IsSet ? _data.Span[_AlchemyWeightLocation] : default;
        #endregion
        #region SpeechcraftWeight
        private int _SpeechcraftWeightLocation => _DATALocation!.Value + 0x11;
        private bool _SpeechcraftWeight_IsSet => _DATALocation.HasValue;
        public Byte SpeechcraftWeight => _SpeechcraftWeight_IsSet ? _data.Span[_SpeechcraftWeightLocation] : default;
        #endregion
        #region AlterationWeight
        private int _AlterationWeightLocation => _DATALocation!.Value + 0x12;
        private bool _AlterationWeight_IsSet => _DATALocation.HasValue;
        public Byte AlterationWeight => _AlterationWeight_IsSet ? _data.Span[_AlterationWeightLocation] : default;
        #endregion
        #region ConjurationWeight
        private int _ConjurationWeightLocation => _DATALocation!.Value + 0x13;
        private bool _ConjurationWeight_IsSet => _DATALocation.HasValue;
        public Byte ConjurationWeight => _ConjurationWeight_IsSet ? _data.Span[_ConjurationWeightLocation] : default;
        #endregion
        #region DestructionWeight
        private int _DestructionWeightLocation => _DATALocation!.Value + 0x14;
        private bool _DestructionWeight_IsSet => _DATALocation.HasValue;
        public Byte DestructionWeight => _DestructionWeight_IsSet ? _data.Span[_DestructionWeightLocation] : default;
        #endregion
        #region IllusionWeight
        private int _IllusionWeightLocation => _DATALocation!.Value + 0x15;
        private bool _IllusionWeight_IsSet => _DATALocation.HasValue;
        public Byte IllusionWeight => _IllusionWeight_IsSet ? _data.Span[_IllusionWeightLocation] : default;
        #endregion
        #region RestorationWeight
        private int _RestorationWeightLocation => _DATALocation!.Value + 0x16;
        private bool _RestorationWeight_IsSet => _DATALocation.HasValue;
        public Byte RestorationWeight => _RestorationWeight_IsSet ? _data.Span[_RestorationWeightLocation] : default;
        #endregion
        #region EnchantingWeight
        private int _EnchantingWeightLocation => _DATALocation!.Value + 0x17;
        private bool _EnchantingWeight_IsSet => _DATALocation.HasValue;
        public Byte EnchantingWeight => _EnchantingWeight_IsSet ? _data.Span[_EnchantingWeightLocation] : default;
        #endregion
        #region BleedoutDefault
        private int _BleedoutDefaultLocation => _DATALocation!.Value + 0x18;
        private bool _BleedoutDefault_IsSet => _DATALocation.HasValue;
        public Single BleedoutDefault => _BleedoutDefault_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BleedoutDefaultLocation, 4)) : default;
        #endregion
        #region VoicePoints
        private int _VoicePointsLocation => _DATALocation!.Value + 0x1C;
        private bool _VoicePoints_IsSet => _DATALocation.HasValue;
        public UInt32 VoicePoints => _VoicePoints_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_VoicePointsLocation, 4)) : default;
        #endregion
        #region HealthWeight
        private int _HealthWeightLocation => _DATALocation!.Value + 0x20;
        private bool _HealthWeight_IsSet => _DATALocation.HasValue;
        public Byte HealthWeight => _HealthWeight_IsSet ? _data.Span[_HealthWeightLocation] : default;
        #endregion
        #region MagickaWeight
        private int _MagickaWeightLocation => _DATALocation!.Value + 0x21;
        private bool _MagickaWeight_IsSet => _DATALocation.HasValue;
        public Byte MagickaWeight => _MagickaWeight_IsSet ? _data.Span[_MagickaWeightLocation] : default;
        #endregion
        #region StaminaWeight
        private int _StaminaWeightLocation => _DATALocation!.Value + 0x22;
        private bool _StaminaWeight_IsSet => _DATALocation.HasValue;
        public Byte StaminaWeight => _StaminaWeight_IsSet ? _data.Span[_StaminaWeightLocation] : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value + 0x23;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public Byte Unknown2 => _Unknown2_IsSet ? _data.Span[_Unknown2Location] : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClassBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassBinaryOverlay ClassFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ClassBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Class.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Unknown2);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

