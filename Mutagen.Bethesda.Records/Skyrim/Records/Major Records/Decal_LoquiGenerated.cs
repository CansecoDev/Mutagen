/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Loqui.Presentation;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Decal :
        IDecal,
        ILoquiObjectSetter<Decal>,
        IEquatable<Decal>,
        IEqualsMask
    {
        #region Ctor
        public Decal()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MinWidth
        public Single MinWidth { get; set; }
        #endregion
        #region MaxWidth
        public Single MaxWidth { get; set; }
        #endregion
        #region MinHeight
        public Single MinHeight { get; set; }
        #endregion
        #region MaxHeight
        public Single MaxHeight { get; set; }
        #endregion
        #region Depth
        public Single Depth { get; set; }
        #endregion
        #region Shininess
        public Single Shininess { get; set; }
        #endregion
        #region ParallaxScale
        public Single ParallaxScale { get; set; }
        #endregion
        #region ParallaxPasses
        public Byte ParallaxPasses { get; set; }
        #endregion
        #region Flags
        public Decal.Flag Flags { get; set; }
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; }
        #endregion
        #region Color
        public Color Color { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DecalMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IDecalGetter rhs)) return false;
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Decal obj)
        {
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((DecalCommon)((IDecalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => DecalXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((DecalXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Decal CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Decal CreateFromXml(
            XElement node,
            out Decal_ErrorMask errorMask,
            bool doMasks = true,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Decal CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Decal() : null;
                    break;
                default:
                    break;
            }
            var ret = new Decal();
            ((DecalSetterCommon)((IDecalGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Decal CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Decal CreateFromXml(
            string path,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Decal CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Decal CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Decal CreateFromXml(
            Stream stream,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Decal CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Decal_FieldIndex)index)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Decal_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => DecalBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Decal CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Decal CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Decal_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Decal CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Decal();
            ((DecalSetterCommon)((IDecalGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDecalGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DecalSetterCommon)((IDecalGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Decal GetNew()
        {
            return new Decal();
        }

    }
    #endregion

    #region Interface
    public partial interface IDecal :
        IDecalGetter,
        ILoquiObjectSetter<IDecal>
    {
        new Single MinWidth { get; set; }

        new Single MaxWidth { get; set; }

        new Single MinHeight { get; set; }

        new Single MaxHeight { get; set; }

        new Single Depth { get; set; }

        new Single Shininess { get; set; }

        new Single ParallaxScale { get; set; }

        new Byte ParallaxPasses { get; set; }

        new Decal.Flag Flags { get; set; }

        new UInt16 Unknown { get; set; }

        new Color Color { get; set; }

    }

    public partial interface IDecalGetter :
        ILoquiObject,
        ILoquiObject<IDecalGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region MinWidth
        Single MinWidth { get; }

        #endregion
        #region MaxWidth
        Single MaxWidth { get; }

        #endregion
        #region MinHeight
        Single MinHeight { get; }

        #endregion
        #region MaxHeight
        Single MaxHeight { get; }

        #endregion
        #region Depth
        Single Depth { get; }

        #endregion
        #region Shininess
        Single Shininess { get; }

        #endregion
        #region ParallaxScale
        Single ParallaxScale { get; }

        #endregion
        #region ParallaxPasses
        Byte ParallaxPasses { get; }

        #endregion
        #region Flags
        Decal.Flag Flags { get; }

        #endregion
        #region Unknown
        UInt16 Unknown { get; }

        #endregion
        #region Color
        Color Color { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class DecalMixIn
    {
        public static void Clear(this IDecal item)
        {
            ((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Decal_Mask<bool> GetEqualsMask(
            this IDecalGetter item,
            IDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDecalGetter item,
            string name = null,
            Decal_Mask<bool> printMask = null)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDecalGetter item,
            FileGeneration fg,
            string name = null,
            Decal_Mask<bool> printMask = null)
        {
            ((DecalCommon)((IDecalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDecalGetter item,
            Decal_Mask<bool?> checkMask)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Decal_Mask<bool> GetHasBeenSetMask(this IDecalGetter item)
        {
            var ret = new Decal_Mask<bool>();
            ((DecalCommon)((IDecalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDecalGetter item,
            IDecalGetter rhs)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IDecal lhs,
            IDecalGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IDecal lhs,
            IDecalGetter rhs,
            Decal_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IDecal lhs,
            IDecalGetter rhs,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask.GetCrystal());
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IDecal lhs,
            IDecalGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            Decal_TranslationMask copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDecal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDecal item,
            XElement node,
            out Decal_ErrorMask errorMask,
            bool doMasks = true,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDecal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDecal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDecal item,
            string path,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDecal item,
            string path,
            ErrorMaskBuilder errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDecal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Decal_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDecal item,
            Stream stream,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDecal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Decal_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDecal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDecal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Decal_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IDecal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Decal_FieldIndex
    {
        MinWidth = 0,
        MaxWidth = 1,
        MinHeight = 2,
        MaxHeight = 3,
        Depth = 4,
        Shininess = 5,
        ParallaxScale = 6,
        ParallaxPasses = 7,
        Flags = 8,
        Unknown = 9,
        Color = 10,
    }
    #endregion

    #region Registration
    public class Decal_Registration : ILoquiRegistration
    {
        public static readonly Decal_Registration Instance = new Decal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 24,
            version: 0);

        public const string GUID = "8e13d6f4-ab4a-46fb-aad6-a31589952a1b";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Decal_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Decal_ErrorMask);

        public static readonly Type ClassType = typeof(Decal);

        public static readonly Type GetterType = typeof(IDecalGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDecal);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Decal";

        public const string Name = "Decal";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MINWIDTH":
                    return (ushort)Decal_FieldIndex.MinWidth;
                case "MAXWIDTH":
                    return (ushort)Decal_FieldIndex.MaxWidth;
                case "MINHEIGHT":
                    return (ushort)Decal_FieldIndex.MinHeight;
                case "MAXHEIGHT":
                    return (ushort)Decal_FieldIndex.MaxHeight;
                case "DEPTH":
                    return (ushort)Decal_FieldIndex.Depth;
                case "SHININESS":
                    return (ushort)Decal_FieldIndex.Shininess;
                case "PARALLAXSCALE":
                    return (ushort)Decal_FieldIndex.ParallaxScale;
                case "PARALLAXPASSES":
                    return (ushort)Decal_FieldIndex.ParallaxPasses;
                case "FLAGS":
                    return (ushort)Decal_FieldIndex.Flags;
                case "UNKNOWN":
                    return (ushort)Decal_FieldIndex.Unknown;
                case "COLOR":
                    return (ushort)Decal_FieldIndex.Color;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                    return "MinWidth";
                case Decal_FieldIndex.MaxWidth:
                    return "MaxWidth";
                case Decal_FieldIndex.MinHeight:
                    return "MinHeight";
                case Decal_FieldIndex.MaxHeight:
                    return "MaxHeight";
                case Decal_FieldIndex.Depth:
                    return "Depth";
                case Decal_FieldIndex.Shininess:
                    return "Shininess";
                case Decal_FieldIndex.ParallaxScale:
                    return "ParallaxScale";
                case Decal_FieldIndex.ParallaxPasses:
                    return "ParallaxPasses";
                case Decal_FieldIndex.Flags:
                    return "Flags";
                case Decal_FieldIndex.Unknown:
                    return "Unknown";
                case Decal_FieldIndex.Color:
                    return "Color";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                case Decal_FieldIndex.MaxWidth:
                case Decal_FieldIndex.MinHeight:
                case Decal_FieldIndex.MaxHeight:
                case Decal_FieldIndex.Depth:
                case Decal_FieldIndex.Shininess:
                case Decal_FieldIndex.ParallaxScale:
                case Decal_FieldIndex.ParallaxPasses:
                case Decal_FieldIndex.Flags:
                case Decal_FieldIndex.Unknown:
                case Decal_FieldIndex.Color:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                    return typeof(Single);
                case Decal_FieldIndex.MaxWidth:
                    return typeof(Single);
                case Decal_FieldIndex.MinHeight:
                    return typeof(Single);
                case Decal_FieldIndex.MaxHeight:
                    return typeof(Single);
                case Decal_FieldIndex.Depth:
                    return typeof(Single);
                case Decal_FieldIndex.Shininess:
                    return typeof(Single);
                case Decal_FieldIndex.ParallaxScale:
                    return typeof(Single);
                case Decal_FieldIndex.ParallaxPasses:
                    return typeof(Byte);
                case Decal_FieldIndex.Flags:
                    return typeof(Decal.Flag);
                case Decal_FieldIndex.Unknown:
                    return typeof(UInt16);
                case Decal_FieldIndex.Color:
                    return typeof(Color);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DecalXmlWriteTranslation);
        public static readonly RecordType DODT_HEADER = new RecordType("DODT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DODT_HEADER;
        public const int NumStructFields = 11;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(DecalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DecalSetterCommon
    {
        public static readonly DecalSetterCommon Instance = new DecalSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IDecal item)
        {
            ClearPartial();
            item.MinWidth = default(Single);
            item.MaxWidth = default(Single);
            item.MinHeight = default(Single);
            item.MaxHeight = default(Single);
            item.Depth = default(Single);
            item.Shininess = default(Single);
            item.ParallaxScale = default(Single);
            item.ParallaxPasses = default(Byte);
            item.Flags = default(Decal.Flag);
            item.Unknown = default(UInt16);
            item.Color = default(Color);
        }
        
        public object GetNew() => Decal.GetNew();
        
        #region Xml Translation
        public void CopyInFromXml(
            IDecal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DecalXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IDecal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single MinWidthParse))
            {
                item.MinWidth = MinWidthParse;
            }
            else
            {
                item.MinWidth = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single MaxWidthParse))
            {
                item.MaxWidth = MaxWidthParse;
            }
            else
            {
                item.MaxWidth = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single MinHeightParse))
            {
                item.MinHeight = MinHeightParse;
            }
            else
            {
                item.MinHeight = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single MaxHeightParse))
            {
                item.MaxHeight = MaxHeightParse;
            }
            else
            {
                item.MaxHeight = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single DepthParse))
            {
                item.Depth = DepthParse;
            }
            else
            {
                item.Depth = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single ShininessParse))
            {
                item.Shininess = ShininessParse;
            }
            else
            {
                item.Shininess = default(Single);
            }
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single ParallaxScaleParse))
            {
                item.ParallaxScale = ParallaxScaleParse;
            }
            else
            {
                item.ParallaxScale = default(Single);
            }
            item.ParallaxPasses = frame.ReadUInt8();
            if (EnumBinaryTranslation<Decal.Flag>.Instance.Parse(
                frame: frame.SpawnWithLength(1),
                item: out Decal.Flag FlagsParse))
            {
                item.Flags = FlagsParse;
            }
            else
            {
                item.Flags = default(Decal.Flag);
            }
            item.Unknown = frame.ReadUInt16();
            if (Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                frame: frame,
                extraByte: true,
                item: out Color ColorParse))
            {
                item.Color = ColorParse;
            }
            else
            {
                item.Color = default(Color);
            }
        }
        
        public void CopyInFromBinary(
            IDecal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(Decal_Registration.DODT_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class DecalCommon
    {
        public static readonly DecalCommon Instance = new DecalCommon();

        public Decal_Mask<bool> GetEqualsMask(
            IDecalGetter item,
            IDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Decal_Mask<bool>();
            ((DecalCommon)((IDecalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDecalGetter item,
            IDecalGetter rhs,
            Decal_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MinWidth = item.MinWidth.EqualsWithin(rhs.MinWidth);
            ret.MaxWidth = item.MaxWidth.EqualsWithin(rhs.MaxWidth);
            ret.MinHeight = item.MinHeight.EqualsWithin(rhs.MinHeight);
            ret.MaxHeight = item.MaxHeight.EqualsWithin(rhs.MaxHeight);
            ret.Depth = item.Depth.EqualsWithin(rhs.Depth);
            ret.Shininess = item.Shininess.EqualsWithin(rhs.Shininess);
            ret.ParallaxScale = item.ParallaxScale.EqualsWithin(rhs.ParallaxScale);
            ret.ParallaxPasses = item.ParallaxPasses == rhs.ParallaxPasses;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
        }
        
        public string ToString(
            IDecalGetter item,
            string name = null,
            Decal_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDecalGetter item,
            FileGeneration fg,
            string name = null,
            Decal_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Decal =>");
            }
            else
            {
                fg.AppendLine($"{name} (Decal) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDecalGetter item,
            FileGeneration fg,
            Decal_Mask<bool> printMask = null)
        {
            if (printMask?.MinWidth ?? true)
            {
                fg.AppendLine($"MinWidth => {item.MinWidth}");
            }
            if (printMask?.MaxWidth ?? true)
            {
                fg.AppendLine($"MaxWidth => {item.MaxWidth}");
            }
            if (printMask?.MinHeight ?? true)
            {
                fg.AppendLine($"MinHeight => {item.MinHeight}");
            }
            if (printMask?.MaxHeight ?? true)
            {
                fg.AppendLine($"MaxHeight => {item.MaxHeight}");
            }
            if (printMask?.Depth ?? true)
            {
                fg.AppendLine($"Depth => {item.Depth}");
            }
            if (printMask?.Shininess ?? true)
            {
                fg.AppendLine($"Shininess => {item.Shininess}");
            }
            if (printMask?.ParallaxScale ?? true)
            {
                fg.AppendLine($"ParallaxScale => {item.ParallaxScale}");
            }
            if (printMask?.ParallaxPasses ?? true)
            {
                fg.AppendLine($"ParallaxPasses => {item.ParallaxPasses}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {item.Unknown}");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendLine($"Color => {item.Color}");
            }
        }
        
        public bool HasBeenSet(
            IDecalGetter item,
            Decal_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IDecalGetter item,
            Decal_Mask<bool> mask)
        {
            mask.MinWidth = true;
            mask.MaxWidth = true;
            mask.MinHeight = true;
            mask.MaxHeight = true;
            mask.Depth = true;
            mask.Shininess = true;
            mask.ParallaxScale = true;
            mask.ParallaxPasses = true;
            mask.Flags = true;
            mask.Unknown = true;
            mask.Color = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDecalGetter lhs,
            IDecalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.MinWidth.EqualsWithin(rhs.MinWidth)) return false;
            if (!lhs.MaxWidth.EqualsWithin(rhs.MaxWidth)) return false;
            if (!lhs.MinHeight.EqualsWithin(rhs.MinHeight)) return false;
            if (!lhs.MaxHeight.EqualsWithin(rhs.MaxHeight)) return false;
            if (!lhs.Depth.EqualsWithin(rhs.Depth)) return false;
            if (!lhs.Shininess.EqualsWithin(rhs.Shininess)) return false;
            if (!lhs.ParallaxScale.EqualsWithin(rhs.ParallaxScale)) return false;
            if (lhs.ParallaxPasses != rhs.ParallaxPasses) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDecalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.MinWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaxWidth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MinHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaxHeight).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Depth).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Shininess).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParallaxScale).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParallaxPasses).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Color).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class DecalSetterTranslationCommon
    {
        public static readonly DecalSetterTranslationCommon Instance = new DecalSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IDecal item,
            IDecalGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MinWidth) ?? true))
            {
                item.MinWidth = rhs.MinWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxWidth) ?? true))
            {
                item.MaxWidth = rhs.MaxWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MinHeight) ?? true))
            {
                item.MinHeight = rhs.MinHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxHeight) ?? true))
            {
                item.MaxHeight = rhs.MaxHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Depth) ?? true))
            {
                item.Depth = rhs.Depth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Shininess) ?? true))
            {
                item.Shininess = rhs.Shininess;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxScale) ?? true))
            {
                item.ParallaxScale = rhs.ParallaxScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxPasses) ?? true))
            {
                item.ParallaxPasses = rhs.ParallaxPasses;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
        }
        
        #endregion
        
        public Decal DeepCopy(
            IDecalGetter item,
            Decal_TranslationMask copyMask = null)
        {
            Decal ret = (Decal)((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Decal DeepCopy(
            IDecalGetter item,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask copyMask = null)
        {
            Decal ret = (Decal)((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Decal DeepCopy(
            IDecalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Decal ret = (Decal)((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Decal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Decal_Registration.Instance;
        public static Decal_Registration Registration => Decal_Registration.Instance;
        protected object CommonInstance()
        {
            return DecalCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return DecalSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return DecalSetterTranslationCommon.Instance;
        }
        object IDecalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IDecalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IDecalGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DecalXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DecalXmlWriteTranslation Instance = new DecalXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDecalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.MinWidth) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinWidth),
                    item: item.MinWidth,
                    fieldIndex: (int)Decal_FieldIndex.MinWidth,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxWidth) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxWidth),
                    item: item.MaxWidth,
                    fieldIndex: (int)Decal_FieldIndex.MaxWidth,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.MinHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinHeight),
                    item: item.MinHeight,
                    fieldIndex: (int)Decal_FieldIndex.MinHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxHeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxHeight),
                    item: item.MaxHeight,
                    fieldIndex: (int)Decal_FieldIndex.MaxHeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.Depth) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Depth),
                    item: item.Depth,
                    fieldIndex: (int)Decal_FieldIndex.Depth,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.Shininess) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Shininess),
                    item: item.Shininess,
                    fieldIndex: (int)Decal_FieldIndex.Shininess,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParallaxScale),
                    item: item.ParallaxScale,
                    fieldIndex: (int)Decal_FieldIndex.ParallaxScale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxPasses) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParallaxPasses),
                    item: item.ParallaxPasses,
                    fieldIndex: (int)Decal_FieldIndex.ParallaxPasses,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Decal.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Decal_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.Unknown) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Decal_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Decal_FieldIndex.Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Color),
                    item: item.Color,
                    fieldIndex: (int)Decal_FieldIndex.Color,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDecalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Decal");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Decal");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDecalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDecalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IDecalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DecalXmlCreateTranslation
    {
        public readonly static DecalXmlCreateTranslation Instance = new DecalXmlCreateTranslation();

        public static void FillPublicXml(
            IDecal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DecalXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDecal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MinWidth":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.MinWidth);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MinWidthParse,
                            errorMask: errorMask))
                        {
                            item.MinWidth = MinWidthParse;
                        }
                        else
                        {
                            item.MinWidth = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxWidth":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.MaxWidth);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaxWidthParse,
                            errorMask: errorMask))
                        {
                            item.MaxWidth = MaxWidthParse;
                        }
                        else
                        {
                            item.MaxWidth = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.MinHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MinHeightParse,
                            errorMask: errorMask))
                        {
                            item.MinHeight = MinHeightParse;
                        }
                        else
                        {
                            item.MinHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxHeight":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.MaxHeight);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single MaxHeightParse,
                            errorMask: errorMask))
                        {
                            item.MaxHeight = MaxHeightParse;
                        }
                        else
                        {
                            item.MaxHeight = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Depth":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.Depth);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single DepthParse,
                            errorMask: errorMask))
                        {
                            item.Depth = DepthParse;
                        }
                        else
                        {
                            item.Depth = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Shininess":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.Shininess);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ShininessParse,
                            errorMask: errorMask))
                        {
                            item.Shininess = ShininessParse;
                        }
                        else
                        {
                            item.Shininess = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParallaxScale":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.ParallaxScale);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single ParallaxScaleParse,
                            errorMask: errorMask))
                        {
                            item.ParallaxScale = ParallaxScaleParse;
                        }
                        else
                        {
                            item.ParallaxScale = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParallaxPasses":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.ParallaxPasses);
                        if (ByteXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte ParallaxPassesParse,
                            errorMask: errorMask))
                        {
                            item.ParallaxPasses = ParallaxPassesParse;
                        }
                        else
                        {
                            item.ParallaxPasses = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.Flags);
                        if (EnumXmlTranslation<Decal.Flag>.Instance.Parse(
                            node: node,
                            item: out Decal.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(Decal.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.Unknown);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Color":
                    try
                    {
                        errorMask?.PushIndex((int)Decal_FieldIndex.Color);
                        if (ColorXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Color ColorParse,
                            errorMask: errorMask))
                        {
                            item.Color = ColorParse;
                        }
                        else
                        {
                            item.Color = default(Color);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class DecalXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDecalGetter item,
            XElement node,
            out Decal_ErrorMask errorMask,
            bool doMasks = true,
            Decal_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DecalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            string path,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            Stream stream,
            out Decal_ErrorMask errorMask,
            Decal_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((DecalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            XElement node,
            string name = null,
            Decal_TranslationMask translationMask = null)
        {
            ((DecalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IDecalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DecalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDecalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DecalXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class Decal_Mask<T> : IMask<T>, IEquatable<Decal_Mask<T>>
    {
        #region Ctors
        public Decal_Mask()
        {
        }

        public Decal_Mask(T initialValue)
        {
            this.MinWidth = initialValue;
            this.MaxWidth = initialValue;
            this.MinHeight = initialValue;
            this.MaxHeight = initialValue;
            this.Depth = initialValue;
            this.Shininess = initialValue;
            this.ParallaxScale = initialValue;
            this.ParallaxPasses = initialValue;
            this.Flags = initialValue;
            this.Unknown = initialValue;
            this.Color = initialValue;
        }
        #endregion

        #region Members
        public T MinWidth;
        public T MaxWidth;
        public T MinHeight;
        public T MaxHeight;
        public T Depth;
        public T Shininess;
        public T ParallaxScale;
        public T ParallaxPasses;
        public T Flags;
        public T Unknown;
        public T Color;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Decal_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Decal_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MinWidth, rhs.MinWidth)) return false;
            if (!object.Equals(this.MaxWidth, rhs.MaxWidth)) return false;
            if (!object.Equals(this.MinHeight, rhs.MinHeight)) return false;
            if (!object.Equals(this.MaxHeight, rhs.MaxHeight)) return false;
            if (!object.Equals(this.Depth, rhs.Depth)) return false;
            if (!object.Equals(this.Shininess, rhs.Shininess)) return false;
            if (!object.Equals(this.ParallaxScale, rhs.ParallaxScale)) return false;
            if (!object.Equals(this.ParallaxPasses, rhs.ParallaxPasses)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(this.Color, rhs.Color)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MinWidth?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxWidth?.GetHashCode());
            ret = ret.CombineHashCode(this.MinHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Depth?.GetHashCode());
            ret = ret.CombineHashCode(this.Shininess?.GetHashCode());
            ret = ret.CombineHashCode(this.ParallaxScale?.GetHashCode());
            ret = ret.CombineHashCode(this.ParallaxPasses?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(this.Color?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MinWidth)) return false;
            if (!eval(this.MaxWidth)) return false;
            if (!eval(this.MinHeight)) return false;
            if (!eval(this.MaxHeight)) return false;
            if (!eval(this.Depth)) return false;
            if (!eval(this.Shininess)) return false;
            if (!eval(this.ParallaxScale)) return false;
            if (!eval(this.ParallaxPasses)) return false;
            if (!eval(this.Flags)) return false;
            if (!eval(this.Unknown)) return false;
            if (!eval(this.Color)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Decal_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Decal_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Decal_Mask<R> obj, Func<T, R> eval)
        {
            obj.MinWidth = eval(this.MinWidth);
            obj.MaxWidth = eval(this.MaxWidth);
            obj.MinHeight = eval(this.MinHeight);
            obj.MaxHeight = eval(this.MaxHeight);
            obj.Depth = eval(this.Depth);
            obj.Shininess = eval(this.Shininess);
            obj.ParallaxScale = eval(this.ParallaxScale);
            obj.ParallaxPasses = eval(this.ParallaxPasses);
            obj.Flags = eval(this.Flags);
            obj.Unknown = eval(this.Unknown);
            obj.Color = eval(this.Color);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Decal_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Decal_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Decal_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MinWidth ?? true)
                {
                    fg.AppendLine($"MinWidth => {MinWidth}");
                }
                if (printMask?.MaxWidth ?? true)
                {
                    fg.AppendLine($"MaxWidth => {MaxWidth}");
                }
                if (printMask?.MinHeight ?? true)
                {
                    fg.AppendLine($"MinHeight => {MinHeight}");
                }
                if (printMask?.MaxHeight ?? true)
                {
                    fg.AppendLine($"MaxHeight => {MaxHeight}");
                }
                if (printMask?.Depth ?? true)
                {
                    fg.AppendLine($"Depth => {Depth}");
                }
                if (printMask?.Shininess ?? true)
                {
                    fg.AppendLine($"Shininess => {Shininess}");
                }
                if (printMask?.ParallaxScale ?? true)
                {
                    fg.AppendLine($"ParallaxScale => {ParallaxScale}");
                }
                if (printMask?.ParallaxPasses ?? true)
                {
                    fg.AppendLine($"ParallaxPasses => {ParallaxPasses}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
                if (printMask?.Color ?? true)
                {
                    fg.AppendLine($"Color => {Color}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Decal_ErrorMask : IErrorMask, IErrorMask<Decal_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MinWidth;
        public Exception MaxWidth;
        public Exception MinHeight;
        public Exception MaxHeight;
        public Exception Depth;
        public Exception Shininess;
        public Exception ParallaxScale;
        public Exception ParallaxPasses;
        public Exception Flags;
        public Exception Unknown;
        public Exception Color;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                    return MinWidth;
                case Decal_FieldIndex.MaxWidth:
                    return MaxWidth;
                case Decal_FieldIndex.MinHeight:
                    return MinHeight;
                case Decal_FieldIndex.MaxHeight:
                    return MaxHeight;
                case Decal_FieldIndex.Depth:
                    return Depth;
                case Decal_FieldIndex.Shininess:
                    return Shininess;
                case Decal_FieldIndex.ParallaxScale:
                    return ParallaxScale;
                case Decal_FieldIndex.ParallaxPasses:
                    return ParallaxPasses;
                case Decal_FieldIndex.Flags:
                    return Flags;
                case Decal_FieldIndex.Unknown:
                    return Unknown;
                case Decal_FieldIndex.Color:
                    return Color;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                    this.MinWidth = ex;
                    break;
                case Decal_FieldIndex.MaxWidth:
                    this.MaxWidth = ex;
                    break;
                case Decal_FieldIndex.MinHeight:
                    this.MinHeight = ex;
                    break;
                case Decal_FieldIndex.MaxHeight:
                    this.MaxHeight = ex;
                    break;
                case Decal_FieldIndex.Depth:
                    this.Depth = ex;
                    break;
                case Decal_FieldIndex.Shininess:
                    this.Shininess = ex;
                    break;
                case Decal_FieldIndex.ParallaxScale:
                    this.ParallaxScale = ex;
                    break;
                case Decal_FieldIndex.ParallaxPasses:
                    this.ParallaxPasses = ex;
                    break;
                case Decal_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Decal_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                case Decal_FieldIndex.Color:
                    this.Color = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Decal_FieldIndex enu = (Decal_FieldIndex)index;
            switch (enu)
            {
                case Decal_FieldIndex.MinWidth:
                    this.MinWidth = (Exception)obj;
                    break;
                case Decal_FieldIndex.MaxWidth:
                    this.MaxWidth = (Exception)obj;
                    break;
                case Decal_FieldIndex.MinHeight:
                    this.MinHeight = (Exception)obj;
                    break;
                case Decal_FieldIndex.MaxHeight:
                    this.MaxHeight = (Exception)obj;
                    break;
                case Decal_FieldIndex.Depth:
                    this.Depth = (Exception)obj;
                    break;
                case Decal_FieldIndex.Shininess:
                    this.Shininess = (Exception)obj;
                    break;
                case Decal_FieldIndex.ParallaxScale:
                    this.ParallaxScale = (Exception)obj;
                    break;
                case Decal_FieldIndex.ParallaxPasses:
                    this.ParallaxPasses = (Exception)obj;
                    break;
                case Decal_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Decal_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                case Decal_FieldIndex.Color:
                    this.Color = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (MinWidth != null) return true;
            if (MaxWidth != null) return true;
            if (MinHeight != null) return true;
            if (MaxHeight != null) return true;
            if (Depth != null) return true;
            if (Shininess != null) return true;
            if (ParallaxScale != null) return true;
            if (ParallaxPasses != null) return true;
            if (Flags != null) return true;
            if (Unknown != null) return true;
            if (Color != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Decal_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MinWidth => {MinWidth}");
            fg.AppendLine($"MaxWidth => {MaxWidth}");
            fg.AppendLine($"MinHeight => {MinHeight}");
            fg.AppendLine($"MaxHeight => {MaxHeight}");
            fg.AppendLine($"Depth => {Depth}");
            fg.AppendLine($"Shininess => {Shininess}");
            fg.AppendLine($"ParallaxScale => {ParallaxScale}");
            fg.AppendLine($"ParallaxPasses => {ParallaxPasses}");
            fg.AppendLine($"Flags => {Flags}");
            fg.AppendLine($"Unknown => {Unknown}");
            fg.AppendLine($"Color => {Color}");
        }
        #endregion

        #region Combine
        public Decal_ErrorMask Combine(Decal_ErrorMask rhs)
        {
            var ret = new Decal_ErrorMask();
            ret.MinWidth = this.MinWidth.Combine(rhs.MinWidth);
            ret.MaxWidth = this.MaxWidth.Combine(rhs.MaxWidth);
            ret.MinHeight = this.MinHeight.Combine(rhs.MinHeight);
            ret.MaxHeight = this.MaxHeight.Combine(rhs.MaxHeight);
            ret.Depth = this.Depth.Combine(rhs.Depth);
            ret.Shininess = this.Shininess.Combine(rhs.Shininess);
            ret.ParallaxScale = this.ParallaxScale.Combine(rhs.ParallaxScale);
            ret.ParallaxPasses = this.ParallaxPasses.Combine(rhs.ParallaxPasses);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            ret.Color = this.Color.Combine(rhs.Color);
            return ret;
        }
        public static Decal_ErrorMask Combine(Decal_ErrorMask lhs, Decal_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Decal_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Decal_ErrorMask();
        }
        #endregion

    }
    public class Decal_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool MinWidth;
        public bool MaxWidth;
        public bool MinHeight;
        public bool MaxHeight;
        public bool Depth;
        public bool Shininess;
        public bool ParallaxScale;
        public bool ParallaxPasses;
        public bool Flags;
        public bool Unknown;
        public bool Color;
        #endregion

        #region Ctors
        public Decal_TranslationMask()
        {
        }

        public Decal_TranslationMask(bool defaultOn)
        {
            this.MinWidth = defaultOn;
            this.MaxWidth = defaultOn;
            this.MinHeight = defaultOn;
            this.MaxHeight = defaultOn;
            this.Depth = defaultOn;
            this.Shininess = defaultOn;
            this.ParallaxScale = defaultOn;
            this.ParallaxPasses = defaultOn;
            this.Flags = defaultOn;
            this.Unknown = defaultOn;
            this.Color = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MinWidth, null));
            ret.Add((MaxWidth, null));
            ret.Add((MinHeight, null));
            ret.Add((MaxHeight, null));
            ret.Add((Depth, null));
            ret.Add((Shininess, null));
            ret.Add((ParallaxScale, null));
            ret.Add((ParallaxPasses, null));
            ret.Add((Flags, null));
            ret.Add((Unknown, null));
            ret.Add((Color, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DecalBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DecalBinaryWriteTranslation Instance = new DecalBinaryWriteTranslation();

        public static void Write_Embedded(
            IDecalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinWidth);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxWidth);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MinHeight);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxHeight);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Depth);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Shininess);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ParallaxScale);
            writer.Write(item.ParallaxPasses);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Decal.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 1);
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color,
                extraByte: true);
        }

        public void Write(
            MutagenWriter writer,
            IDecalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Decal_Registration.DODT_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IDecalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class DecalBinaryCreateTranslation
    {
        public readonly static DecalBinaryCreateTranslation Instance = new DecalBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DecalBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDecalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Decal_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DecalBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Decal_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IDecalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((DecalBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IDecalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((DecalBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DecalBinaryWrapper :
        BinaryWrapper,
        IDecalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Decal_Registration.Instance;
        public static Decal_Registration Registration => Decal_Registration.Instance;
        protected object CommonInstance()
        {
            return DecalCommon.Instance;
        }
        protected object CommonSetterTranslationInstance()
        {
            return DecalSetterTranslationCommon.Instance;
        }
        object IDecalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IDecalGetter.CommonSetterInstance()
        {
            return null;
        }
        object IDecalGetter.CommonSetterTranslationInstance()
        {
            return this.CommonSetterTranslationInstance();
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDecalGetter)rhs, include);

        protected object XmlWriteTranslator => DecalXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((DecalXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => DecalBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((DecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public Single MinWidth => SpanExt.GetFloat(_data.Span.Slice(0, 4));
        public Single MaxWidth => SpanExt.GetFloat(_data.Span.Slice(4, 4));
        public Single MinHeight => SpanExt.GetFloat(_data.Span.Slice(8, 4));
        public Single MaxHeight => SpanExt.GetFloat(_data.Span.Slice(12, 4));
        public Single Depth => SpanExt.GetFloat(_data.Span.Slice(16, 4));
        public Single Shininess => SpanExt.GetFloat(_data.Span.Slice(20, 4));
        public Single ParallaxScale => SpanExt.GetFloat(_data.Span.Slice(24, 4));
        public Byte ParallaxPasses => _data.Span[28];
        public Decal.Flag Flags => (Decal.Flag)_data.Span.Slice(29, 1)[0];
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(30, 2));
        public Color Color => _data.Span.Slice(32, 4).ReadColor();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected DecalBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DecalBinaryWrapper DecalFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new DecalBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

