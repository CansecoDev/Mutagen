/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Faction :
        SkyrimMajorRecord,
        IFactionInternal,
        ILoquiObjectSetter<Faction>,
        INamed,
        IEquatable<Faction>,
        IEqualsMask
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFactionGetter.Name => this.Name;
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Relation> _Relations = new SetList<Relation>();
        public ISetList<Relation> Relations => _Relations;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Relation> IFaction.Relations => _Relations;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Faction.FactionFlag? _Flags;
        public Faction.FactionFlag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Faction.FactionFlag? IFactionGetter.Flags => this.Flags;
        #endregion
        #region PrisonMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<PlacedObject> _PrisonMarker = new FormLinkNullable<PlacedObject>();
        public IFormLinkNullable<PlacedObject> PrisonMarker => this._PrisonMarker;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.PrisonMarker => this.PrisonMarker;
        #endregion
        #region FollowerWaitMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<PlacedObject> _FollowerWaitMarker = new FormLinkNullable<PlacedObject>();
        public IFormLinkNullable<PlacedObject> FollowerWaitMarker => this._FollowerWaitMarker;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.FollowerWaitMarker => this.FollowerWaitMarker;
        #endregion
        #region EvidenceChest
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<PlacedObject> _EvidenceChest = new FormLinkNullable<PlacedObject>();
        public IFormLinkNullable<PlacedObject> EvidenceChest => this._EvidenceChest;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.EvidenceChest => this.EvidenceChest;
        #endregion
        #region PlayerBelongingsChest
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<PlacedObject> _PlayerBelongingsChest = new FormLinkNullable<PlacedObject>();
        public IFormLinkNullable<PlacedObject> PlayerBelongingsChest => this._PlayerBelongingsChest;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.PlayerBelongingsChest => this.PlayerBelongingsChest;
        #endregion
        #region CrimeGroup
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<FormList> _CrimeGroup = new FormLinkNullable<FormList>();
        public IFormLinkNullable<FormList> CrimeGroup => this._CrimeGroup;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.CrimeGroup => this.CrimeGroup;
        #endregion
        #region JailOutfit
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Outfit> _JailOutfit = new FormLinkNullable<Outfit>();
        public IFormLinkNullable<Outfit> JailOutfit => this._JailOutfit;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> IFactionGetter.JailOutfit => this.JailOutfit;
        #endregion
        #region ArrestCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Boolean _ArrestCrimeValue;
        public Boolean ArrestCrimeValue
        {
            get => this._ArrestCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._ArrestCrimeValue = value;
            }
        }
        #endregion
        #region AttackOnSightCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Boolean _AttackOnSightCrimeValue;
        public Boolean AttackOnSightCrimeValue
        {
            get => this._AttackOnSightCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._AttackOnSightCrimeValue = value;
            }
        }
        #endregion
        #region MurderCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _MurderCrimeValue;
        public UInt16 MurderCrimeValue
        {
            get => this._MurderCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._MurderCrimeValue = value;
            }
        }
        #endregion
        #region AssaultCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _AssaultCrimeValue;
        public UInt16 AssaultCrimeValue
        {
            get => this._AssaultCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._AssaultCrimeValue = value;
            }
        }
        #endregion
        #region TrespassCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _TrespassCrimeValue;
        public UInt16 TrespassCrimeValue
        {
            get => this._TrespassCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._TrespassCrimeValue = value;
            }
        }
        #endregion
        #region PickpocketCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _PickpocketCrimeValue;
        public UInt16 PickpocketCrimeValue
        {
            get => this._PickpocketCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._PickpocketCrimeValue = value;
            }
        }
        #endregion
        #region UnknownCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _UnknownCrimeValue;
        public UInt16 UnknownCrimeValue
        {
            get => this._UnknownCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this._UnknownCrimeValue = value;
            }
        }
        #endregion
        #region StealMultCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _StealMultCrimeValue;
        public Single StealMultCrimeValue
        {
            get => this._StealMultCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this.CRVADataTypeState &= ~CRVADataType.Break0;
                this._StealMultCrimeValue = value;
            }
        }
        #endregion
        #region EscapeCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _EscapeCrimeValue;
        public UInt16 EscapeCrimeValue
        {
            get => this._EscapeCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this.CRVADataTypeState &= ~CRVADataType.Break0;
                this.CRVADataTypeState &= ~CRVADataType.Break1;
                this._EscapeCrimeValue = value;
            }
        }
        #endregion
        #region WerewolfCrimeValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _WerewolfCrimeValue;
        public UInt16 WerewolfCrimeValue
        {
            get => this._WerewolfCrimeValue;
            set
            {
                this.CRVADataTypeState |= CRVADataType.Has;
                this.CRVADataTypeState &= ~CRVADataType.Break0;
                this.CRVADataTypeState &= ~CRVADataType.Break1;
                this._WerewolfCrimeValue = value;
            }
        }
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Rank> _Ranks = new SetList<Rank>();
        public ISetList<Rank> Ranks => _Ranks;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Rank> IFaction.Ranks => _Ranks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IRankGetter> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion
        #region VendorList
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<FormList> _VendorList = new FormLinkNullable<FormList>();
        public IFormLinkNullable<FormList> VendorList => this._VendorList;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.VendorList => this.VendorList;
        #endregion
        #region VendorChest
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<PlacedObject> _VendorChest = new FormLinkNullable<PlacedObject>();
        public IFormLinkNullable<PlacedObject> VendorChest => this._VendorChest;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.VendorChest => this.VendorChest;
        #endregion
        #region VendorValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VendorValues? _VendorValues;
        public VendorValues? VendorValues
        {
            get => _VendorValues;
            set => _VendorValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVendorValuesGetter? IFactionGetter.VendorValues => this.VendorValues;
        #endregion
        #region VendorLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VendorLocation? _VendorLocation;
        public VendorLocation? VendorLocation
        {
            get => _VendorLocation;
            set => _VendorLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVendorLocationGetter? IFactionGetter.VendorLocation => this.VendorLocation;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Condition> _Conditions = new SetList<Condition>();
        public ISetList<Condition> Conditions => _Conditions;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Condition> IFaction.Conditions => _Conditions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IConditionGetter> IFactionGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region CRVADataTypeState
        public Faction.CRVADataType CRVADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IFactionGetter rhs)) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Faction obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Faction CreateFromXml(
            XElement node,
            Faction.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Faction CreateFromXml(
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Faction CreateFromXml(
            string path,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Faction CreateFromXml(
            Stream stream,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            SkyrimMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, Relation.Mask<T>?>>());
                this.Flags = initialValue;
                this.PrisonMarker = initialValue;
                this.FollowerWaitMarker = initialValue;
                this.EvidenceChest = initialValue;
                this.PlayerBelongingsChest = initialValue;
                this.CrimeGroup = initialValue;
                this.JailOutfit = initialValue;
                this.ArrestCrimeValue = initialValue;
                this.AttackOnSightCrimeValue = initialValue;
                this.MurderCrimeValue = initialValue;
                this.AssaultCrimeValue = initialValue;
                this.TrespassCrimeValue = initialValue;
                this.PickpocketCrimeValue = initialValue;
                this.UnknownCrimeValue = initialValue;
                this.StealMultCrimeValue = initialValue;
                this.EscapeCrimeValue = initialValue;
                this.WerewolfCrimeValue = initialValue;
                this.Ranks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, Rank.Mask<T>?>>());
                this.VendorList = initialValue;
                this.VendorChest = initialValue;
                this.VendorValues = new MaskItem<T, VendorValues.Mask<T>?>(initialValue, new VendorValues.Mask<T>(initialValue));
                this.VendorLocation = new MaskItem<T, VendorLocation.Mask<T>?>(initialValue, new VendorLocation.Mask<T>(initialValue));
                this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, Condition.Mask<T>?>>());
                this.CRVADataTypeState = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T SkyrimMajorRecordFlags,
                T FormVersion,
                T Version2,
                T Name,
                T Relations,
                T Flags,
                T PrisonMarker,
                T FollowerWaitMarker,
                T EvidenceChest,
                T PlayerBelongingsChest,
                T CrimeGroup,
                T JailOutfit,
                T ArrestCrimeValue,
                T AttackOnSightCrimeValue,
                T MurderCrimeValue,
                T AssaultCrimeValue,
                T TrespassCrimeValue,
                T PickpocketCrimeValue,
                T UnknownCrimeValue,
                T StealMultCrimeValue,
                T EscapeCrimeValue,
                T WerewolfCrimeValue,
                T Ranks,
                T VendorList,
                T VendorChest,
                T VendorValues,
                T VendorLocation,
                T Conditions,
                T CRVADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Relations = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation.Mask<T>?>>>(Relations, Enumerable.Empty<MaskItemIndexed<T, Relation.Mask<T>?>>());
                this.Flags = Flags;
                this.PrisonMarker = PrisonMarker;
                this.FollowerWaitMarker = FollowerWaitMarker;
                this.EvidenceChest = EvidenceChest;
                this.PlayerBelongingsChest = PlayerBelongingsChest;
                this.CrimeGroup = CrimeGroup;
                this.JailOutfit = JailOutfit;
                this.ArrestCrimeValue = ArrestCrimeValue;
                this.AttackOnSightCrimeValue = AttackOnSightCrimeValue;
                this.MurderCrimeValue = MurderCrimeValue;
                this.AssaultCrimeValue = AssaultCrimeValue;
                this.TrespassCrimeValue = TrespassCrimeValue;
                this.PickpocketCrimeValue = PickpocketCrimeValue;
                this.UnknownCrimeValue = UnknownCrimeValue;
                this.StealMultCrimeValue = StealMultCrimeValue;
                this.EscapeCrimeValue = EscapeCrimeValue;
                this.WerewolfCrimeValue = WerewolfCrimeValue;
                this.Ranks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank.Mask<T>?>>>(Ranks, Enumerable.Empty<MaskItemIndexed<T, Rank.Mask<T>?>>());
                this.VendorList = VendorList;
                this.VendorChest = VendorChest;
                this.VendorValues = new MaskItem<T, VendorValues.Mask<T>?>(VendorValues, new VendorValues.Mask<T>(VendorValues));
                this.VendorLocation = new MaskItem<T, VendorLocation.Mask<T>?>(VendorLocation, new VendorLocation.Mask<T>(VendorLocation));
                this.Conditions = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition.Mask<T>?>>>(Conditions, Enumerable.Empty<MaskItemIndexed<T, Condition.Mask<T>?>>());
                this.CRVADataTypeState = CRVADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, Relation.Mask<T>?>>>? Relations;
            public T Flags;
            public T PrisonMarker;
            public T FollowerWaitMarker;
            public T EvidenceChest;
            public T PlayerBelongingsChest;
            public T CrimeGroup;
            public T JailOutfit;
            public T ArrestCrimeValue;
            public T AttackOnSightCrimeValue;
            public T MurderCrimeValue;
            public T AssaultCrimeValue;
            public T TrespassCrimeValue;
            public T PickpocketCrimeValue;
            public T UnknownCrimeValue;
            public T StealMultCrimeValue;
            public T EscapeCrimeValue;
            public T WerewolfCrimeValue;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, Rank.Mask<T>?>>>? Ranks;
            public T VendorList;
            public T VendorChest;
            public MaskItem<T, VendorValues.Mask<T>?>? VendorValues { get; set; }
            public MaskItem<T, VendorLocation.Mask<T>?>? VendorLocation { get; set; }
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, Condition.Mask<T>?>>>? Conditions;
            public T CRVADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.PrisonMarker, rhs.PrisonMarker)) return false;
                if (!object.Equals(this.FollowerWaitMarker, rhs.FollowerWaitMarker)) return false;
                if (!object.Equals(this.EvidenceChest, rhs.EvidenceChest)) return false;
                if (!object.Equals(this.PlayerBelongingsChest, rhs.PlayerBelongingsChest)) return false;
                if (!object.Equals(this.CrimeGroup, rhs.CrimeGroup)) return false;
                if (!object.Equals(this.JailOutfit, rhs.JailOutfit)) return false;
                if (!object.Equals(this.ArrestCrimeValue, rhs.ArrestCrimeValue)) return false;
                if (!object.Equals(this.AttackOnSightCrimeValue, rhs.AttackOnSightCrimeValue)) return false;
                if (!object.Equals(this.MurderCrimeValue, rhs.MurderCrimeValue)) return false;
                if (!object.Equals(this.AssaultCrimeValue, rhs.AssaultCrimeValue)) return false;
                if (!object.Equals(this.TrespassCrimeValue, rhs.TrespassCrimeValue)) return false;
                if (!object.Equals(this.PickpocketCrimeValue, rhs.PickpocketCrimeValue)) return false;
                if (!object.Equals(this.UnknownCrimeValue, rhs.UnknownCrimeValue)) return false;
                if (!object.Equals(this.StealMultCrimeValue, rhs.StealMultCrimeValue)) return false;
                if (!object.Equals(this.EscapeCrimeValue, rhs.EscapeCrimeValue)) return false;
                if (!object.Equals(this.WerewolfCrimeValue, rhs.WerewolfCrimeValue)) return false;
                if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
                if (!object.Equals(this.VendorList, rhs.VendorList)) return false;
                if (!object.Equals(this.VendorChest, rhs.VendorChest)) return false;
                if (!object.Equals(this.VendorValues, rhs.VendorValues)) return false;
                if (!object.Equals(this.VendorLocation, rhs.VendorLocation)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.CRVADataTypeState, rhs.CRVADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Relations?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.PrisonMarker?.GetHashCode());
                ret = ret.CombineHashCode(this.FollowerWaitMarker?.GetHashCode());
                ret = ret.CombineHashCode(this.EvidenceChest?.GetHashCode());
                ret = ret.CombineHashCode(this.PlayerBelongingsChest?.GetHashCode());
                ret = ret.CombineHashCode(this.CrimeGroup?.GetHashCode());
                ret = ret.CombineHashCode(this.JailOutfit?.GetHashCode());
                ret = ret.CombineHashCode(this.ArrestCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.AttackOnSightCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.MurderCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.AssaultCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.TrespassCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.PickpocketCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.UnknownCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.StealMultCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.EscapeCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.WerewolfCrimeValue?.GetHashCode());
                ret = ret.CombineHashCode(this.Ranks?.GetHashCode());
                ret = ret.CombineHashCode(this.VendorList?.GetHashCode());
                ret = ret.CombineHashCode(this.VendorChest?.GetHashCode());
                ret = ret.CombineHashCode(this.VendorValues?.GetHashCode());
                ret = ret.CombineHashCode(this.VendorLocation?.GetHashCode());
                ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
                ret = ret.CombineHashCode(this.CRVADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.PrisonMarker)) return false;
                if (!eval(this.FollowerWaitMarker)) return false;
                if (!eval(this.EvidenceChest)) return false;
                if (!eval(this.PlayerBelongingsChest)) return false;
                if (!eval(this.CrimeGroup)) return false;
                if (!eval(this.JailOutfit)) return false;
                if (!eval(this.ArrestCrimeValue)) return false;
                if (!eval(this.AttackOnSightCrimeValue)) return false;
                if (!eval(this.MurderCrimeValue)) return false;
                if (!eval(this.AssaultCrimeValue)) return false;
                if (!eval(this.TrespassCrimeValue)) return false;
                if (!eval(this.PickpocketCrimeValue)) return false;
                if (!eval(this.UnknownCrimeValue)) return false;
                if (!eval(this.StealMultCrimeValue)) return false;
                if (!eval(this.EscapeCrimeValue)) return false;
                if (!eval(this.WerewolfCrimeValue)) return false;
                if (this.Ranks != null)
                {
                    if (!eval(this.Ranks.Overall)) return false;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.VendorList)) return false;
                if (!eval(this.VendorChest)) return false;
                if (VendorValues != null)
                {
                    if (!eval(this.VendorValues.Overall)) return false;
                    if (this.VendorValues.Specific != null && !this.VendorValues.Specific.All(eval)) return false;
                }
                if (VendorLocation != null)
                {
                    if (!eval(this.VendorLocation.Overall)) return false;
                    if (this.VendorLocation.Specific != null && !this.VendorLocation.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CRVADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.PrisonMarker)) return true;
                if (eval(this.FollowerWaitMarker)) return true;
                if (eval(this.EvidenceChest)) return true;
                if (eval(this.PlayerBelongingsChest)) return true;
                if (eval(this.CrimeGroup)) return true;
                if (eval(this.JailOutfit)) return true;
                if (eval(this.ArrestCrimeValue)) return true;
                if (eval(this.AttackOnSightCrimeValue)) return true;
                if (eval(this.MurderCrimeValue)) return true;
                if (eval(this.AssaultCrimeValue)) return true;
                if (eval(this.TrespassCrimeValue)) return true;
                if (eval(this.PickpocketCrimeValue)) return true;
                if (eval(this.UnknownCrimeValue)) return true;
                if (eval(this.StealMultCrimeValue)) return true;
                if (eval(this.EscapeCrimeValue)) return true;
                if (eval(this.WerewolfCrimeValue)) return true;
                if (this.Ranks != null)
                {
                    if (eval(this.Ranks.Overall)) return true;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.VendorList)) return true;
                if (eval(this.VendorChest)) return true;
                if (VendorValues != null)
                {
                    if (eval(this.VendorValues.Overall)) return true;
                    if (this.VendorValues.Specific != null && this.VendorValues.Specific.Any(eval)) return true;
                }
                if (VendorLocation != null)
                {
                    if (eval(this.VendorLocation.Overall)) return true;
                    if (this.VendorLocation.Specific != null && this.VendorLocation.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CRVADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Faction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation.Mask<R>?>>>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, Relation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Relation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Relation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Relation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.PrisonMarker = eval(this.PrisonMarker);
                obj.FollowerWaitMarker = eval(this.FollowerWaitMarker);
                obj.EvidenceChest = eval(this.EvidenceChest);
                obj.PlayerBelongingsChest = eval(this.PlayerBelongingsChest);
                obj.CrimeGroup = eval(this.CrimeGroup);
                obj.JailOutfit = eval(this.JailOutfit);
                obj.ArrestCrimeValue = eval(this.ArrestCrimeValue);
                obj.AttackOnSightCrimeValue = eval(this.AttackOnSightCrimeValue);
                obj.MurderCrimeValue = eval(this.MurderCrimeValue);
                obj.AssaultCrimeValue = eval(this.AssaultCrimeValue);
                obj.TrespassCrimeValue = eval(this.TrespassCrimeValue);
                obj.PickpocketCrimeValue = eval(this.PickpocketCrimeValue);
                obj.UnknownCrimeValue = eval(this.UnknownCrimeValue);
                obj.StealMultCrimeValue = eval(this.StealMultCrimeValue);
                obj.EscapeCrimeValue = eval(this.EscapeCrimeValue);
                obj.WerewolfCrimeValue = eval(this.WerewolfCrimeValue);
                if (Ranks != null)
                {
                    obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank.Mask<R>?>>>(eval(this.Ranks.Overall), Enumerable.Empty<MaskItemIndexed<R, Rank.Mask<R>?>>());
                    if (Ranks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Rank.Mask<R>?>>();
                        obj.Ranks.Specific = l;
                        foreach (var item in Ranks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Rank.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Rank.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VendorList = eval(this.VendorList);
                obj.VendorChest = eval(this.VendorChest);
                obj.VendorValues = this.VendorValues == null ? null : new MaskItem<R, VendorValues.Mask<R>?>(eval(this.VendorValues.Overall), this.VendorValues.Specific?.Translate(eval));
                obj.VendorLocation = this.VendorLocation == null ? null : new MaskItem<R, VendorLocation.Mask<R>?>(eval(this.VendorLocation.Overall), this.VendorLocation.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CRVADataTypeState = eval(this.CRVADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Faction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Faction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Faction.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Relations?.Overall ?? true)
                    {
                        fg.AppendLine("Relations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Relations != null)
                            {
                                if (Relations.Overall != null)
                                {
                                    fg.AppendLine(Relations.Overall.ToString());
                                }
                                if (Relations.Specific != null)
                                {
                                    foreach (var subItem in Relations.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendLine($"Flags => {Flags}");
                    }
                    if (printMask?.PrisonMarker ?? true)
                    {
                        fg.AppendLine($"PrisonMarker => {PrisonMarker}");
                    }
                    if (printMask?.FollowerWaitMarker ?? true)
                    {
                        fg.AppendLine($"FollowerWaitMarker => {FollowerWaitMarker}");
                    }
                    if (printMask?.EvidenceChest ?? true)
                    {
                        fg.AppendLine($"EvidenceChest => {EvidenceChest}");
                    }
                    if (printMask?.PlayerBelongingsChest ?? true)
                    {
                        fg.AppendLine($"PlayerBelongingsChest => {PlayerBelongingsChest}");
                    }
                    if (printMask?.CrimeGroup ?? true)
                    {
                        fg.AppendLine($"CrimeGroup => {CrimeGroup}");
                    }
                    if (printMask?.JailOutfit ?? true)
                    {
                        fg.AppendLine($"JailOutfit => {JailOutfit}");
                    }
                    if (printMask?.ArrestCrimeValue ?? true)
                    {
                        fg.AppendLine($"ArrestCrimeValue => {ArrestCrimeValue}");
                    }
                    if (printMask?.AttackOnSightCrimeValue ?? true)
                    {
                        fg.AppendLine($"AttackOnSightCrimeValue => {AttackOnSightCrimeValue}");
                    }
                    if (printMask?.MurderCrimeValue ?? true)
                    {
                        fg.AppendLine($"MurderCrimeValue => {MurderCrimeValue}");
                    }
                    if (printMask?.AssaultCrimeValue ?? true)
                    {
                        fg.AppendLine($"AssaultCrimeValue => {AssaultCrimeValue}");
                    }
                    if (printMask?.TrespassCrimeValue ?? true)
                    {
                        fg.AppendLine($"TrespassCrimeValue => {TrespassCrimeValue}");
                    }
                    if (printMask?.PickpocketCrimeValue ?? true)
                    {
                        fg.AppendLine($"PickpocketCrimeValue => {PickpocketCrimeValue}");
                    }
                    if (printMask?.UnknownCrimeValue ?? true)
                    {
                        fg.AppendLine($"UnknownCrimeValue => {UnknownCrimeValue}");
                    }
                    if (printMask?.StealMultCrimeValue ?? true)
                    {
                        fg.AppendLine($"StealMultCrimeValue => {StealMultCrimeValue}");
                    }
                    if (printMask?.EscapeCrimeValue ?? true)
                    {
                        fg.AppendLine($"EscapeCrimeValue => {EscapeCrimeValue}");
                    }
                    if (printMask?.WerewolfCrimeValue ?? true)
                    {
                        fg.AppendLine($"WerewolfCrimeValue => {WerewolfCrimeValue}");
                    }
                    if (printMask?.Ranks?.Overall ?? true)
                    {
                        fg.AppendLine("Ranks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Ranks != null)
                            {
                                if (Ranks.Overall != null)
                                {
                                    fg.AppendLine(Ranks.Overall.ToString());
                                }
                                if (Ranks.Specific != null)
                                {
                                    foreach (var subItem in Ranks.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VendorList ?? true)
                    {
                        fg.AppendLine($"VendorList => {VendorList}");
                    }
                    if (printMask?.VendorChest ?? true)
                    {
                        fg.AppendLine($"VendorChest => {VendorChest}");
                    }
                    if (printMask?.VendorValues?.Overall ?? true)
                    {
                        VendorValues?.ToString(fg);
                    }
                    if (printMask?.VendorLocation?.Overall ?? true)
                    {
                        VendorLocation?.ToString(fg);
                    }
                    if (printMask?.Conditions?.Overall ?? true)
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Conditions != null)
                            {
                                if (Conditions.Overall != null)
                                {
                                    fg.AppendLine(Conditions.Overall.ToString());
                                }
                                if (Conditions.Specific != null)
                                {
                                    foreach (var subItem in Conditions.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.CRVADataTypeState ?? true)
                    {
                        fg.AppendLine($"CRVADataTypeState => {CRVADataTypeState}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>? Relations;
            public Exception? Flags;
            public Exception? PrisonMarker;
            public Exception? FollowerWaitMarker;
            public Exception? EvidenceChest;
            public Exception? PlayerBelongingsChest;
            public Exception? CrimeGroup;
            public Exception? JailOutfit;
            public Exception? ArrestCrimeValue;
            public Exception? AttackOnSightCrimeValue;
            public Exception? MurderCrimeValue;
            public Exception? AssaultCrimeValue;
            public Exception? TrespassCrimeValue;
            public Exception? PickpocketCrimeValue;
            public Exception? UnknownCrimeValue;
            public Exception? StealMultCrimeValue;
            public Exception? EscapeCrimeValue;
            public Exception? WerewolfCrimeValue;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>? Ranks;
            public Exception? VendorList;
            public Exception? VendorChest;
            public MaskItem<Exception?, VendorValues.ErrorMask?>? VendorValues;
            public MaskItem<Exception?, VendorLocation.ErrorMask?>? VendorLocation;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? CRVADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        return Name;
                    case Faction_FieldIndex.Relations:
                        return Relations;
                    case Faction_FieldIndex.Flags:
                        return Flags;
                    case Faction_FieldIndex.PrisonMarker:
                        return PrisonMarker;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        return FollowerWaitMarker;
                    case Faction_FieldIndex.EvidenceChest:
                        return EvidenceChest;
                    case Faction_FieldIndex.PlayerBelongingsChest:
                        return PlayerBelongingsChest;
                    case Faction_FieldIndex.CrimeGroup:
                        return CrimeGroup;
                    case Faction_FieldIndex.JailOutfit:
                        return JailOutfit;
                    case Faction_FieldIndex.ArrestCrimeValue:
                        return ArrestCrimeValue;
                    case Faction_FieldIndex.AttackOnSightCrimeValue:
                        return AttackOnSightCrimeValue;
                    case Faction_FieldIndex.MurderCrimeValue:
                        return MurderCrimeValue;
                    case Faction_FieldIndex.AssaultCrimeValue:
                        return AssaultCrimeValue;
                    case Faction_FieldIndex.TrespassCrimeValue:
                        return TrespassCrimeValue;
                    case Faction_FieldIndex.PickpocketCrimeValue:
                        return PickpocketCrimeValue;
                    case Faction_FieldIndex.UnknownCrimeValue:
                        return UnknownCrimeValue;
                    case Faction_FieldIndex.StealMultCrimeValue:
                        return StealMultCrimeValue;
                    case Faction_FieldIndex.EscapeCrimeValue:
                        return EscapeCrimeValue;
                    case Faction_FieldIndex.WerewolfCrimeValue:
                        return WerewolfCrimeValue;
                    case Faction_FieldIndex.Ranks:
                        return Ranks;
                    case Faction_FieldIndex.VendorList:
                        return VendorList;
                    case Faction_FieldIndex.VendorChest:
                        return VendorChest;
                    case Faction_FieldIndex.VendorValues:
                        return VendorValues;
                    case Faction_FieldIndex.VendorLocation:
                        return VendorLocation;
                    case Faction_FieldIndex.Conditions:
                        return Conditions;
                    case Faction_FieldIndex.CRVADataTypeState:
                        return CRVADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Faction_FieldIndex.PrisonMarker:
                        this.PrisonMarker = ex;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = ex;
                        break;
                    case Faction_FieldIndex.EvidenceChest:
                        this.EvidenceChest = ex;
                        break;
                    case Faction_FieldIndex.PlayerBelongingsChest:
                        this.PlayerBelongingsChest = ex;
                        break;
                    case Faction_FieldIndex.CrimeGroup:
                        this.CrimeGroup = ex;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = ex;
                        break;
                    case Faction_FieldIndex.ArrestCrimeValue:
                        this.ArrestCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.AttackOnSightCrimeValue:
                        this.AttackOnSightCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.MurderCrimeValue:
                        this.MurderCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.AssaultCrimeValue:
                        this.AssaultCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.TrespassCrimeValue:
                        this.TrespassCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.PickpocketCrimeValue:
                        this.PickpocketCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.UnknownCrimeValue:
                        this.UnknownCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.StealMultCrimeValue:
                        this.StealMultCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.EscapeCrimeValue:
                        this.EscapeCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.WerewolfCrimeValue:
                        this.WerewolfCrimeValue = ex;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorList:
                        this.VendorList = ex;
                        break;
                    case Faction_FieldIndex.VendorChest:
                        this.VendorChest = ex;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = new MaskItem<Exception?, VendorValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = new MaskItem<Exception?, VendorLocation.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.CRVADataTypeState:
                        this.CRVADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PrisonMarker:
                        this.PrisonMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.EvidenceChest:
                        this.EvidenceChest = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PlayerBelongingsChest:
                        this.PlayerBelongingsChest = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CrimeGroup:
                        this.CrimeGroup = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.ArrestCrimeValue:
                        this.ArrestCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.AttackOnSightCrimeValue:
                        this.AttackOnSightCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.MurderCrimeValue:
                        this.MurderCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.AssaultCrimeValue:
                        this.AssaultCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.TrespassCrimeValue:
                        this.TrespassCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PickpocketCrimeValue:
                        this.PickpocketCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.UnknownCrimeValue:
                        this.UnknownCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.StealMultCrimeValue:
                        this.StealMultCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.EscapeCrimeValue:
                        this.EscapeCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.WerewolfCrimeValue:
                        this.WerewolfCrimeValue = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.VendorList:
                        this.VendorList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.VendorChest:
                        this.VendorChest = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = (MaskItem<Exception?, VendorValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = (MaskItem<Exception?, VendorLocation.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.CRVADataTypeState:
                        this.CRVADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Relations != null) return true;
                if (Flags != null) return true;
                if (PrisonMarker != null) return true;
                if (FollowerWaitMarker != null) return true;
                if (EvidenceChest != null) return true;
                if (PlayerBelongingsChest != null) return true;
                if (CrimeGroup != null) return true;
                if (JailOutfit != null) return true;
                if (ArrestCrimeValue != null) return true;
                if (AttackOnSightCrimeValue != null) return true;
                if (MurderCrimeValue != null) return true;
                if (AssaultCrimeValue != null) return true;
                if (TrespassCrimeValue != null) return true;
                if (PickpocketCrimeValue != null) return true;
                if (UnknownCrimeValue != null) return true;
                if (StealMultCrimeValue != null) return true;
                if (EscapeCrimeValue != null) return true;
                if (WerewolfCrimeValue != null) return true;
                if (Ranks != null) return true;
                if (VendorList != null) return true;
                if (VendorChest != null) return true;
                if (VendorValues != null) return true;
                if (VendorLocation != null) return true;
                if (Conditions != null) return true;
                if (CRVADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Relations != null)
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"Flags => {Flags}");
                fg.AppendLine($"PrisonMarker => {PrisonMarker}");
                fg.AppendLine($"FollowerWaitMarker => {FollowerWaitMarker}");
                fg.AppendLine($"EvidenceChest => {EvidenceChest}");
                fg.AppendLine($"PlayerBelongingsChest => {PlayerBelongingsChest}");
                fg.AppendLine($"CrimeGroup => {CrimeGroup}");
                fg.AppendLine($"JailOutfit => {JailOutfit}");
                fg.AppendLine($"ArrestCrimeValue => {ArrestCrimeValue}");
                fg.AppendLine($"AttackOnSightCrimeValue => {AttackOnSightCrimeValue}");
                fg.AppendLine($"MurderCrimeValue => {MurderCrimeValue}");
                fg.AppendLine($"AssaultCrimeValue => {AssaultCrimeValue}");
                fg.AppendLine($"TrespassCrimeValue => {TrespassCrimeValue}");
                fg.AppendLine($"PickpocketCrimeValue => {PickpocketCrimeValue}");
                fg.AppendLine($"UnknownCrimeValue => {UnknownCrimeValue}");
                fg.AppendLine($"StealMultCrimeValue => {StealMultCrimeValue}");
                fg.AppendLine($"EscapeCrimeValue => {EscapeCrimeValue}");
                fg.AppendLine($"WerewolfCrimeValue => {WerewolfCrimeValue}");
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Ranks != null)
                    {
                        if (Ranks.Overall != null)
                        {
                            fg.AppendLine(Ranks.Overall.ToString());
                        }
                        if (Ranks.Specific != null)
                        {
                            foreach (var subItem in Ranks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"VendorList => {VendorList}");
                fg.AppendLine($"VendorChest => {VendorChest}");
                VendorValues?.ToString(fg);
                VendorLocation?.ToString(fg);
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Conditions != null)
                    {
                        if (Conditions.Overall != null)
                        {
                            fg.AppendLine(Conditions.Overall.ToString());
                        }
                        if (Conditions.Specific != null)
                        {
                            foreach (var subItem in Conditions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"CRVADataTypeState => {CRVADataTypeState}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.PrisonMarker = this.PrisonMarker.Combine(rhs.PrisonMarker);
                ret.FollowerWaitMarker = this.FollowerWaitMarker.Combine(rhs.FollowerWaitMarker);
                ret.EvidenceChest = this.EvidenceChest.Combine(rhs.EvidenceChest);
                ret.PlayerBelongingsChest = this.PlayerBelongingsChest.Combine(rhs.PlayerBelongingsChest);
                ret.CrimeGroup = this.CrimeGroup.Combine(rhs.CrimeGroup);
                ret.JailOutfit = this.JailOutfit.Combine(rhs.JailOutfit);
                ret.ArrestCrimeValue = this.ArrestCrimeValue.Combine(rhs.ArrestCrimeValue);
                ret.AttackOnSightCrimeValue = this.AttackOnSightCrimeValue.Combine(rhs.AttackOnSightCrimeValue);
                ret.MurderCrimeValue = this.MurderCrimeValue.Combine(rhs.MurderCrimeValue);
                ret.AssaultCrimeValue = this.AssaultCrimeValue.Combine(rhs.AssaultCrimeValue);
                ret.TrespassCrimeValue = this.TrespassCrimeValue.Combine(rhs.TrespassCrimeValue);
                ret.PickpocketCrimeValue = this.PickpocketCrimeValue.Combine(rhs.PickpocketCrimeValue);
                ret.UnknownCrimeValue = this.UnknownCrimeValue.Combine(rhs.UnknownCrimeValue);
                ret.StealMultCrimeValue = this.StealMultCrimeValue.Combine(rhs.StealMultCrimeValue);
                ret.EscapeCrimeValue = this.EscapeCrimeValue.Combine(rhs.EscapeCrimeValue);
                ret.WerewolfCrimeValue = this.WerewolfCrimeValue.Combine(rhs.WerewolfCrimeValue);
                ret.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ExceptionExt.Combine(this.Ranks?.Overall, rhs.Ranks?.Overall), ExceptionExt.Combine(this.Ranks?.Specific, rhs.Ranks?.Specific));
                ret.VendorList = this.VendorList.Combine(rhs.VendorList);
                ret.VendorChest = this.VendorChest.Combine(rhs.VendorChest);
                ret.VendorValues = this.VendorValues.Combine(rhs.VendorValues, (l, r) => l.Combine(r));
                ret.VendorLocation = this.VendorLocation.Combine(rhs.VendorLocation, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.CRVADataTypeState = this.CRVADataTypeState.Combine(rhs.CRVADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Relation.TranslationMask?> Relations;
            public bool Flags;
            public bool PrisonMarker;
            public bool FollowerWaitMarker;
            public bool EvidenceChest;
            public bool PlayerBelongingsChest;
            public bool CrimeGroup;
            public bool JailOutfit;
            public bool ArrestCrimeValue;
            public bool AttackOnSightCrimeValue;
            public bool MurderCrimeValue;
            public bool AssaultCrimeValue;
            public bool TrespassCrimeValue;
            public bool PickpocketCrimeValue;
            public bool UnknownCrimeValue;
            public bool StealMultCrimeValue;
            public bool EscapeCrimeValue;
            public bool WerewolfCrimeValue;
            public MaskItem<bool, Rank.TranslationMask?> Ranks;
            public bool VendorList;
            public bool VendorChest;
            public MaskItem<bool, VendorValues.TranslationMask?> VendorValues;
            public MaskItem<bool, VendorLocation.TranslationMask?> VendorLocation;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool CRVADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Relations = new MaskItem<bool, Relation.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.PrisonMarker = defaultOn;
                this.FollowerWaitMarker = defaultOn;
                this.EvidenceChest = defaultOn;
                this.PlayerBelongingsChest = defaultOn;
                this.CrimeGroup = defaultOn;
                this.JailOutfit = defaultOn;
                this.ArrestCrimeValue = defaultOn;
                this.AttackOnSightCrimeValue = defaultOn;
                this.MurderCrimeValue = defaultOn;
                this.AssaultCrimeValue = defaultOn;
                this.TrespassCrimeValue = defaultOn;
                this.PickpocketCrimeValue = defaultOn;
                this.UnknownCrimeValue = defaultOn;
                this.StealMultCrimeValue = defaultOn;
                this.EscapeCrimeValue = defaultOn;
                this.WerewolfCrimeValue = defaultOn;
                this.Ranks = new MaskItem<bool, Rank.TranslationMask?>(defaultOn, null);
                this.VendorList = defaultOn;
                this.VendorChest = defaultOn;
                this.VendorValues = new MaskItem<bool, VendorValues.TranslationMask?>(defaultOn, null);
                this.VendorLocation = new MaskItem<bool, VendorLocation.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.CRVADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((PrisonMarker, null));
                ret.Add((FollowerWaitMarker, null));
                ret.Add((EvidenceChest, null));
                ret.Add((PlayerBelongingsChest, null));
                ret.Add((CrimeGroup, null));
                ret.Add((JailOutfit, null));
                ret.Add((ArrestCrimeValue, null));
                ret.Add((AttackOnSightCrimeValue, null));
                ret.Add((MurderCrimeValue, null));
                ret.Add((AssaultCrimeValue, null));
                ret.Add((TrespassCrimeValue, null));
                ret.Add((PickpocketCrimeValue, null));
                ret.Add((UnknownCrimeValue, null));
                ret.Add((StealMultCrimeValue, null));
                ret.Add((EscapeCrimeValue, null));
                ret.Add((WerewolfCrimeValue, null));
                ret.Add((Ranks?.Overall ?? true, Ranks?.Specific?.GetCrystal()));
                ret.Add((VendorList, null));
                ret.Add((VendorChest, null));
                ret.Add((VendorValues?.Overall ?? true, VendorValues?.Specific?.GetCrystal()));
                ret.Add((VendorLocation?.Overall ?? true, VendorLocation?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((CRVADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Faction_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum CRVADataType
        {
            Has = 1,
            Break0 = 2,
            Break1 = 4
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => FactionCommon.Instance.GetLinks(this);
        public Faction(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Faction(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Faction CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Faction GetNew()
        {
            return new Faction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IFactionGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IFactionInternal>
    {
        new String? Name { get; set; }
        new ISetList<Relation> Relations { get; }
        new Faction.FactionFlag? Flags { get; set; }
        new IFormLinkNullable<PlacedObject> PrisonMarker { get; }
        new IFormLinkNullable<PlacedObject> FollowerWaitMarker { get; }
        new IFormLinkNullable<PlacedObject> EvidenceChest { get; }
        new IFormLinkNullable<PlacedObject> PlayerBelongingsChest { get; }
        new IFormLinkNullable<FormList> CrimeGroup { get; }
        new IFormLinkNullable<Outfit> JailOutfit { get; }
        new Boolean ArrestCrimeValue { get; set; }
        new Boolean AttackOnSightCrimeValue { get; set; }
        new UInt16 MurderCrimeValue { get; set; }
        new UInt16 AssaultCrimeValue { get; set; }
        new UInt16 TrespassCrimeValue { get; set; }
        new UInt16 PickpocketCrimeValue { get; set; }
        new UInt16 UnknownCrimeValue { get; set; }
        new Single StealMultCrimeValue { get; set; }
        new UInt16 EscapeCrimeValue { get; set; }
        new UInt16 WerewolfCrimeValue { get; set; }
        new ISetList<Rank> Ranks { get; }
        new IFormLinkNullable<FormList> VendorList { get; }
        new IFormLinkNullable<PlacedObject> VendorChest { get; }
        new VendorValues? VendorValues { get; set; }
        new VendorLocation? VendorLocation { get; set; }
        new ISetList<Condition> Conditions { get; }
        new Faction.CRVADataType CRVADataTypeState { get; set; }
    }

    public partial interface IFactionInternal :
        ISkyrimMajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    public partial interface IFactionGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IFactionGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IReadOnlySetList<IRelationGetter> Relations { get; }
        Faction.FactionFlag? Flags { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> PrisonMarker { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> FollowerWaitMarker { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> EvidenceChest { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> PlayerBelongingsChest { get; }
        IFormLinkNullableGetter<IFormListGetter> CrimeGroup { get; }
        IFormLinkNullableGetter<IOutfitGetter> JailOutfit { get; }
        Boolean ArrestCrimeValue { get; }
        Boolean AttackOnSightCrimeValue { get; }
        UInt16 MurderCrimeValue { get; }
        UInt16 AssaultCrimeValue { get; }
        UInt16 TrespassCrimeValue { get; }
        UInt16 PickpocketCrimeValue { get; }
        UInt16 UnknownCrimeValue { get; }
        Single StealMultCrimeValue { get; }
        UInt16 EscapeCrimeValue { get; }
        UInt16 WerewolfCrimeValue { get; }
        IReadOnlySetList<IRankGetter> Ranks { get; }
        IFormLinkNullableGetter<IFormListGetter> VendorList { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> VendorChest { get; }
        IVendorValuesGetter? VendorValues { get; }
        IVendorLocationGetter? VendorLocation { get; }
        IReadOnlySetList<IConditionGetter> Conditions { get; }
        Faction.CRVADataType CRVADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Faction.Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFactionGetter item,
            Faction.Mask<bool?> checkMask)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Faction.Mask<bool> GetHasBeenSetMask(this IFactionGetter item)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            Faction.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Name = 7,
        Relations = 8,
        Flags = 9,
        PrisonMarker = 10,
        FollowerWaitMarker = 11,
        EvidenceChest = 12,
        PlayerBelongingsChest = 13,
        CrimeGroup = 14,
        JailOutfit = 15,
        ArrestCrimeValue = 16,
        AttackOnSightCrimeValue = 17,
        MurderCrimeValue = 18,
        AssaultCrimeValue = 19,
        TrespassCrimeValue = 20,
        PickpocketCrimeValue = 21,
        UnknownCrimeValue = 22,
        StealMultCrimeValue = 23,
        EscapeCrimeValue = 24,
        WerewolfCrimeValue = 25,
        Ranks = 26,
        VendorList = 27,
        VendorChest = 28,
        VendorValues = 29,
        VendorLocation = 30,
        Conditions = 31,
        CRVADataTypeState = 32,
    }
    #endregion

    #region Registration
    public partial class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 27,
            version: 0);

        public const string GUID = "db110917-5be4-4ea2-b679-55c8ac5b6179";

        public const ushort AdditionalFieldCount = 26;

        public const ushort FieldCount = 33;

        public static readonly Type MaskType = typeof(Faction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction.ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type? InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Faction_FieldIndex.Name;
                case "RELATIONS":
                    return (ushort)Faction_FieldIndex.Relations;
                case "FLAGS":
                    return (ushort)Faction_FieldIndex.Flags;
                case "PRISONMARKER":
                    return (ushort)Faction_FieldIndex.PrisonMarker;
                case "FOLLOWERWAITMARKER":
                    return (ushort)Faction_FieldIndex.FollowerWaitMarker;
                case "EVIDENCECHEST":
                    return (ushort)Faction_FieldIndex.EvidenceChest;
                case "PLAYERBELONGINGSCHEST":
                    return (ushort)Faction_FieldIndex.PlayerBelongingsChest;
                case "CRIMEGROUP":
                    return (ushort)Faction_FieldIndex.CrimeGroup;
                case "JAILOUTFIT":
                    return (ushort)Faction_FieldIndex.JailOutfit;
                case "ARRESTCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.ArrestCrimeValue;
                case "ATTACKONSIGHTCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.AttackOnSightCrimeValue;
                case "MURDERCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.MurderCrimeValue;
                case "ASSAULTCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.AssaultCrimeValue;
                case "TRESPASSCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.TrespassCrimeValue;
                case "PICKPOCKETCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.PickpocketCrimeValue;
                case "UNKNOWNCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.UnknownCrimeValue;
                case "STEALMULTCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.StealMultCrimeValue;
                case "ESCAPECRIMEVALUE":
                    return (ushort)Faction_FieldIndex.EscapeCrimeValue;
                case "WEREWOLFCRIMEVALUE":
                    return (ushort)Faction_FieldIndex.WerewolfCrimeValue;
                case "RANKS":
                    return (ushort)Faction_FieldIndex.Ranks;
                case "VENDORLIST":
                    return (ushort)Faction_FieldIndex.VendorList;
                case "VENDORCHEST":
                    return (ushort)Faction_FieldIndex.VendorChest;
                case "VENDORVALUES":
                    return (ushort)Faction_FieldIndex.VendorValues;
                case "VENDORLOCATION":
                    return (ushort)Faction_FieldIndex.VendorLocation;
                case "CONDITIONS":
                    return (ushort)Faction_FieldIndex.Conditions;
                case "CRVADATATYPESTATE":
                    return (ushort)Faction_FieldIndex.CRVADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.Conditions:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.PrisonMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.EvidenceChest:
                case Faction_FieldIndex.PlayerBelongingsChest:
                case Faction_FieldIndex.CrimeGroup:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.ArrestCrimeValue:
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                case Faction_FieldIndex.MurderCrimeValue:
                case Faction_FieldIndex.AssaultCrimeValue:
                case Faction_FieldIndex.TrespassCrimeValue:
                case Faction_FieldIndex.PickpocketCrimeValue:
                case Faction_FieldIndex.UnknownCrimeValue:
                case Faction_FieldIndex.StealMultCrimeValue:
                case Faction_FieldIndex.EscapeCrimeValue:
                case Faction_FieldIndex.WerewolfCrimeValue:
                case Faction_FieldIndex.VendorList:
                case Faction_FieldIndex.VendorChest:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.CRVADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.PrisonMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.EvidenceChest:
                case Faction_FieldIndex.PlayerBelongingsChest:
                case Faction_FieldIndex.CrimeGroup:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.ArrestCrimeValue:
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                case Faction_FieldIndex.MurderCrimeValue:
                case Faction_FieldIndex.AssaultCrimeValue:
                case Faction_FieldIndex.TrespassCrimeValue:
                case Faction_FieldIndex.PickpocketCrimeValue:
                case Faction_FieldIndex.UnknownCrimeValue:
                case Faction_FieldIndex.StealMultCrimeValue:
                case Faction_FieldIndex.EscapeCrimeValue:
                case Faction_FieldIndex.WerewolfCrimeValue:
                case Faction_FieldIndex.VendorList:
                case Faction_FieldIndex.VendorChest:
                case Faction_FieldIndex.CRVADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.PrisonMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.EvidenceChest:
                case Faction_FieldIndex.PlayerBelongingsChest:
                case Faction_FieldIndex.CrimeGroup:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.ArrestCrimeValue:
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                case Faction_FieldIndex.MurderCrimeValue:
                case Faction_FieldIndex.AssaultCrimeValue:
                case Faction_FieldIndex.TrespassCrimeValue:
                case Faction_FieldIndex.PickpocketCrimeValue:
                case Faction_FieldIndex.UnknownCrimeValue:
                case Faction_FieldIndex.StealMultCrimeValue:
                case Faction_FieldIndex.EscapeCrimeValue:
                case Faction_FieldIndex.WerewolfCrimeValue:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorList:
                case Faction_FieldIndex.VendorChest:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                case Faction_FieldIndex.CRVADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return "Name";
                case Faction_FieldIndex.Relations:
                    return "Relations";
                case Faction_FieldIndex.Flags:
                    return "Flags";
                case Faction_FieldIndex.PrisonMarker:
                    return "PrisonMarker";
                case Faction_FieldIndex.FollowerWaitMarker:
                    return "FollowerWaitMarker";
                case Faction_FieldIndex.EvidenceChest:
                    return "EvidenceChest";
                case Faction_FieldIndex.PlayerBelongingsChest:
                    return "PlayerBelongingsChest";
                case Faction_FieldIndex.CrimeGroup:
                    return "CrimeGroup";
                case Faction_FieldIndex.JailOutfit:
                    return "JailOutfit";
                case Faction_FieldIndex.ArrestCrimeValue:
                    return "ArrestCrimeValue";
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                    return "AttackOnSightCrimeValue";
                case Faction_FieldIndex.MurderCrimeValue:
                    return "MurderCrimeValue";
                case Faction_FieldIndex.AssaultCrimeValue:
                    return "AssaultCrimeValue";
                case Faction_FieldIndex.TrespassCrimeValue:
                    return "TrespassCrimeValue";
                case Faction_FieldIndex.PickpocketCrimeValue:
                    return "PickpocketCrimeValue";
                case Faction_FieldIndex.UnknownCrimeValue:
                    return "UnknownCrimeValue";
                case Faction_FieldIndex.StealMultCrimeValue:
                    return "StealMultCrimeValue";
                case Faction_FieldIndex.EscapeCrimeValue:
                    return "EscapeCrimeValue";
                case Faction_FieldIndex.WerewolfCrimeValue:
                    return "WerewolfCrimeValue";
                case Faction_FieldIndex.Ranks:
                    return "Ranks";
                case Faction_FieldIndex.VendorList:
                    return "VendorList";
                case Faction_FieldIndex.VendorChest:
                    return "VendorChest";
                case Faction_FieldIndex.VendorValues:
                    return "VendorValues";
                case Faction_FieldIndex.VendorLocation:
                    return "VendorLocation";
                case Faction_FieldIndex.Conditions:
                    return "Conditions";
                case Faction_FieldIndex.CRVADataTypeState:
                    return "CRVADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.PrisonMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.EvidenceChest:
                case Faction_FieldIndex.PlayerBelongingsChest:
                case Faction_FieldIndex.CrimeGroup:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.ArrestCrimeValue:
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                case Faction_FieldIndex.MurderCrimeValue:
                case Faction_FieldIndex.AssaultCrimeValue:
                case Faction_FieldIndex.TrespassCrimeValue:
                case Faction_FieldIndex.PickpocketCrimeValue:
                case Faction_FieldIndex.UnknownCrimeValue:
                case Faction_FieldIndex.StealMultCrimeValue:
                case Faction_FieldIndex.EscapeCrimeValue:
                case Faction_FieldIndex.WerewolfCrimeValue:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorList:
                case Faction_FieldIndex.VendorChest:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                case Faction_FieldIndex.CRVADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.PrisonMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.EvidenceChest:
                case Faction_FieldIndex.PlayerBelongingsChest:
                case Faction_FieldIndex.CrimeGroup:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.ArrestCrimeValue:
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                case Faction_FieldIndex.MurderCrimeValue:
                case Faction_FieldIndex.AssaultCrimeValue:
                case Faction_FieldIndex.TrespassCrimeValue:
                case Faction_FieldIndex.PickpocketCrimeValue:
                case Faction_FieldIndex.UnknownCrimeValue:
                case Faction_FieldIndex.StealMultCrimeValue:
                case Faction_FieldIndex.EscapeCrimeValue:
                case Faction_FieldIndex.WerewolfCrimeValue:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorList:
                case Faction_FieldIndex.VendorChest:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                case Faction_FieldIndex.CRVADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return typeof(String);
                case Faction_FieldIndex.Relations:
                    return typeof(ISetList<Relation>);
                case Faction_FieldIndex.Flags:
                    return typeof(Faction.FactionFlag);
                case Faction_FieldIndex.PrisonMarker:
                    return typeof(IFormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.FollowerWaitMarker:
                    return typeof(IFormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.EvidenceChest:
                    return typeof(IFormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.PlayerBelongingsChest:
                    return typeof(IFormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.CrimeGroup:
                    return typeof(IFormLinkNullable<FormList>);
                case Faction_FieldIndex.JailOutfit:
                    return typeof(IFormLinkNullable<Outfit>);
                case Faction_FieldIndex.ArrestCrimeValue:
                    return typeof(Boolean);
                case Faction_FieldIndex.AttackOnSightCrimeValue:
                    return typeof(Boolean);
                case Faction_FieldIndex.MurderCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.AssaultCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.TrespassCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.PickpocketCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.UnknownCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.StealMultCrimeValue:
                    return typeof(Single);
                case Faction_FieldIndex.EscapeCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.WerewolfCrimeValue:
                    return typeof(UInt16);
                case Faction_FieldIndex.Ranks:
                    return typeof(ISetList<Rank>);
                case Faction_FieldIndex.VendorList:
                    return typeof(IFormLinkNullable<FormList>);
                case Faction_FieldIndex.VendorChest:
                    return typeof(IFormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.VendorValues:
                    return typeof(VendorValues);
                case Faction_FieldIndex.VendorLocation:
                    return typeof(VendorLocation);
                case Faction_FieldIndex.Conditions:
                    return typeof(ISetList<Condition>);
                case Faction_FieldIndex.CRVADataTypeState:
                    return typeof(Faction.CRVADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FactionXmlWriteTranslation);
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType JAIL_HEADER = new RecordType("JAIL");
        public static readonly RecordType WAIT_HEADER = new RecordType("WAIT");
        public static readonly RecordType STOL_HEADER = new RecordType("STOL");
        public static readonly RecordType PLCN_HEADER = new RecordType("PLCN");
        public static readonly RecordType CRGR_HEADER = new RecordType("CRGR");
        public static readonly RecordType JOUT_HEADER = new RecordType("JOUT");
        public static readonly RecordType CRVA_HEADER = new RecordType("CRVA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType VEND_HEADER = new RecordType("VEND");
        public static readonly RecordType VENC_HEADER = new RecordType("VENC");
        public static readonly RecordType VENV_HEADER = new RecordType("VENV");
        public static readonly RecordType PLVD_HEADER = new RecordType("PLVD");
        public static readonly RecordType CITC_HEADER = new RecordType("CITC");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FACT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 15;
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FactionSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Relations.Unset();
            item.Flags = default;
            item.PrisonMarker.FormKey = null;
            item.FollowerWaitMarker.FormKey = null;
            item.EvidenceChest.FormKey = null;
            item.PlayerBelongingsChest.FormKey = null;
            item.CrimeGroup.FormKey = null;
            item.JailOutfit.FormKey = null;
            item.ArrestCrimeValue = default;
            item.AttackOnSightCrimeValue = default;
            item.MurderCrimeValue = default;
            item.AssaultCrimeValue = default;
            item.TrespassCrimeValue = default;
            item.PickpocketCrimeValue = default;
            item.UnknownCrimeValue = default;
            item.StealMultCrimeValue = default;
            item.EscapeCrimeValue = default;
            item.WerewolfCrimeValue = default;
            item.Ranks.Unset();
            item.VendorList.FormKey = null;
            item.VendorChest.FormKey = null;
            item.VendorValues = null;
            item.VendorLocation = null;
            item.Conditions.Unset();
            item.CRVADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasCRVADataType":
                    item.CRVADataTypeState |= Faction.CRVADataType.Has;
                    break;
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.CRVADataTypeState |= Faction.CRVADataType.Break0;
                item.CRVADataTypeState |= Faction.CRVADataType.Break1;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Faction_Registration.FACT_HEADER;
        protected static void FillBinaryStructs(
            IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Faction_Registration.XNAM_HEADER,
                        item: item.Relations,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out Relation listSubItem) =>
                        {
                            return LoquiBinaryTranslation<Relation>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4C49414A: // JAIL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PrisonMarker.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PrisonMarker);
                }
                case 0x54494157: // WAIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FollowerWaitMarker.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.FollowerWaitMarker);
                }
                case 0x4C4F5453: // STOL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EvidenceChest.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.EvidenceChest);
                }
                case 0x4E434C50: // PLCN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PlayerBelongingsChest.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PlayerBelongingsChest);
                }
                case 0x52475243: // CRGR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CrimeGroup.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeGroup);
                }
                case 0x54554F4A: // JOUT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.JailOutfit.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.JailOutfit);
                }
                case 0x41565243: // CRVA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.CRVADataTypeState = Faction.CRVADataType.Has;
                    }
                    item.ArrestCrimeValue = dataFrame.ReadBoolean();
                    item.AttackOnSightCrimeValue = dataFrame.ReadBoolean();
                    item.MurderCrimeValue = dataFrame.ReadUInt16();
                    item.AssaultCrimeValue = dataFrame.ReadUInt16();
                    item.TrespassCrimeValue = dataFrame.ReadUInt16();
                    item.PickpocketCrimeValue = dataFrame.ReadUInt16();
                    item.UnknownCrimeValue = dataFrame.ReadUInt16();
                    if (dataFrame.Complete)
                    {
                        item.CRVADataTypeState |= Faction.CRVADataType.Break0;
                        return TryGet<int?>.Succeed((int)Faction_FieldIndex.UnknownCrimeValue);
                    }
                    item.StealMultCrimeValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CRVADataTypeState |= Faction.CRVADataType.Break1;
                        return TryGet<int?>.Succeed((int)Faction_FieldIndex.StealMultCrimeValue);
                    }
                    item.EscapeCrimeValue = dataFrame.ReadUInt16();
                    item.WerewolfCrimeValue = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.WerewolfCrimeValue);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Rank_Registration.TriggeringRecordTypes,
                        item: item.Ranks,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out Rank listSubItem) =>
                        {
                            return LoquiBinaryTranslation<Rank>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                case 0x444E4556: // VEND
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VendorList.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorList);
                }
                case 0x434E4556: // VENC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VendorChest.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorChest);
                }
                case 0x564E4556: // VENV
                {
                    item.VendorValues = Mutagen.Bethesda.Skyrim.VendorValues.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorValues);
                }
                case 0x44564C50: // PLVD
                {
                    item.VendorLocation = Mutagen.Bethesda.Skyrim.VendorLocation.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorLocation);
                }
                case 0x43544943: // CITC
                {
                    FactionBinaryCreateTranslation.FillBinaryConditionsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Conditions);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FactionCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction.Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.PrisonMarker = object.Equals(item.PrisonMarker, rhs.PrisonMarker);
            ret.FollowerWaitMarker = object.Equals(item.FollowerWaitMarker, rhs.FollowerWaitMarker);
            ret.EvidenceChest = object.Equals(item.EvidenceChest, rhs.EvidenceChest);
            ret.PlayerBelongingsChest = object.Equals(item.PlayerBelongingsChest, rhs.PlayerBelongingsChest);
            ret.CrimeGroup = object.Equals(item.CrimeGroup, rhs.CrimeGroup);
            ret.JailOutfit = object.Equals(item.JailOutfit, rhs.JailOutfit);
            ret.ArrestCrimeValue = item.ArrestCrimeValue == rhs.ArrestCrimeValue;
            ret.AttackOnSightCrimeValue = item.AttackOnSightCrimeValue == rhs.AttackOnSightCrimeValue;
            ret.MurderCrimeValue = item.MurderCrimeValue == rhs.MurderCrimeValue;
            ret.AssaultCrimeValue = item.AssaultCrimeValue == rhs.AssaultCrimeValue;
            ret.TrespassCrimeValue = item.TrespassCrimeValue == rhs.TrespassCrimeValue;
            ret.PickpocketCrimeValue = item.PickpocketCrimeValue == rhs.PickpocketCrimeValue;
            ret.UnknownCrimeValue = item.UnknownCrimeValue == rhs.UnknownCrimeValue;
            ret.StealMultCrimeValue = item.StealMultCrimeValue.EqualsWithin(rhs.StealMultCrimeValue);
            ret.EscapeCrimeValue = item.EscapeCrimeValue == rhs.EscapeCrimeValue;
            ret.WerewolfCrimeValue = item.WerewolfCrimeValue == rhs.WerewolfCrimeValue;
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VendorList = object.Equals(item.VendorList, rhs.VendorList);
            ret.VendorChest = object.Equals(item.VendorChest, rhs.VendorChest);
            ret.VendorValues = EqualsMaskHelper.EqualsHelper(
                item.VendorValues,
                rhs.VendorValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VendorLocation = EqualsMaskHelper.EqualsHelper(
                item.VendorLocation,
                rhs.VendorLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CRVADataTypeState = item.CRVADataTypeState == rhs.CRVADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Faction =>");
            }
            else
            {
                fg.AppendLine($"{name} (Faction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            FileGeneration fg,
            Faction.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
            if (printMask?.PrisonMarker ?? true)
            {
                fg.AppendLine($"PrisonMarker => {item.PrisonMarker}");
            }
            if (printMask?.FollowerWaitMarker ?? true)
            {
                fg.AppendLine($"FollowerWaitMarker => {item.FollowerWaitMarker}");
            }
            if (printMask?.EvidenceChest ?? true)
            {
                fg.AppendLine($"EvidenceChest => {item.EvidenceChest}");
            }
            if (printMask?.PlayerBelongingsChest ?? true)
            {
                fg.AppendLine($"PlayerBelongingsChest => {item.PlayerBelongingsChest}");
            }
            if (printMask?.CrimeGroup ?? true)
            {
                fg.AppendLine($"CrimeGroup => {item.CrimeGroup}");
            }
            if (printMask?.JailOutfit ?? true)
            {
                fg.AppendLine($"JailOutfit => {item.JailOutfit}");
            }
            if (printMask?.ArrestCrimeValue ?? true)
            {
                fg.AppendLine($"ArrestCrimeValue => {item.ArrestCrimeValue}");
            }
            if (printMask?.AttackOnSightCrimeValue ?? true)
            {
                fg.AppendLine($"AttackOnSightCrimeValue => {item.AttackOnSightCrimeValue}");
            }
            if (printMask?.MurderCrimeValue ?? true)
            {
                fg.AppendLine($"MurderCrimeValue => {item.MurderCrimeValue}");
            }
            if (printMask?.AssaultCrimeValue ?? true)
            {
                fg.AppendLine($"AssaultCrimeValue => {item.AssaultCrimeValue}");
            }
            if (printMask?.TrespassCrimeValue ?? true)
            {
                fg.AppendLine($"TrespassCrimeValue => {item.TrespassCrimeValue}");
            }
            if (printMask?.PickpocketCrimeValue ?? true)
            {
                fg.AppendLine($"PickpocketCrimeValue => {item.PickpocketCrimeValue}");
            }
            if (printMask?.UnknownCrimeValue ?? true)
            {
                fg.AppendLine($"UnknownCrimeValue => {item.UnknownCrimeValue}");
            }
            if (printMask?.StealMultCrimeValue ?? true)
            {
                fg.AppendLine($"StealMultCrimeValue => {item.StealMultCrimeValue}");
            }
            if (printMask?.EscapeCrimeValue ?? true)
            {
                fg.AppendLine($"EscapeCrimeValue => {item.EscapeCrimeValue}");
            }
            if (printMask?.WerewolfCrimeValue ?? true)
            {
                fg.AppendLine($"WerewolfCrimeValue => {item.WerewolfCrimeValue}");
            }
            if (printMask?.Ranks?.Overall ?? true)
            {
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Ranks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VendorList ?? true)
            {
                fg.AppendLine($"VendorList => {item.VendorList}");
            }
            if (printMask?.VendorChest ?? true)
            {
                fg.AppendLine($"VendorChest => {item.VendorChest}");
            }
            if (printMask?.VendorValues?.Overall ?? true)
            {
                item.VendorValues?.ToString(fg, "VendorValues");
            }
            if (printMask?.VendorLocation?.Overall ?? true)
            {
                item.VendorLocation?.ToString(fg, "VendorLocation");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.CRVADataTypeState ?? true)
            {
                fg.AppendLine($"CRVADataTypeState => {item.CRVADataTypeState}");
            }
        }
        
        public bool HasBeenSet(
            IFactionGetter item,
            Faction.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Relations?.Overall.HasValue ?? false && checkMask.Relations!.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.PrisonMarker.HasValue && checkMask.PrisonMarker.Value != (item.PrisonMarker.FormKey != null)) return false;
            if (checkMask.FollowerWaitMarker.HasValue && checkMask.FollowerWaitMarker.Value != (item.FollowerWaitMarker.FormKey != null)) return false;
            if (checkMask.EvidenceChest.HasValue && checkMask.EvidenceChest.Value != (item.EvidenceChest.FormKey != null)) return false;
            if (checkMask.PlayerBelongingsChest.HasValue && checkMask.PlayerBelongingsChest.Value != (item.PlayerBelongingsChest.FormKey != null)) return false;
            if (checkMask.CrimeGroup.HasValue && checkMask.CrimeGroup.Value != (item.CrimeGroup.FormKey != null)) return false;
            if (checkMask.JailOutfit.HasValue && checkMask.JailOutfit.Value != (item.JailOutfit.FormKey != null)) return false;
            if (checkMask.Ranks?.Overall.HasValue ?? false && checkMask.Ranks!.Overall.Value != item.Ranks.HasBeenSet) return false;
            if (checkMask.VendorList.HasValue && checkMask.VendorList.Value != (item.VendorList.FormKey != null)) return false;
            if (checkMask.VendorChest.HasValue && checkMask.VendorChest.Value != (item.VendorChest.FormKey != null)) return false;
            if (checkMask.VendorValues?.Overall.HasValue ?? false && checkMask.VendorValues.Overall.Value != (item.VendorValues != null)) return false;
            if (checkMask.VendorValues?.Specific != null && (item.VendorValues == null || !item.VendorValues.HasBeenSet(checkMask.VendorValues.Specific))) return false;
            if (checkMask.VendorLocation?.Overall.HasValue ?? false && checkMask.VendorLocation.Overall.Value != (item.VendorLocation != null)) return false;
            if (checkMask.VendorLocation?.Specific != null && (item.VendorLocation == null || !item.VendorLocation.HasBeenSet(checkMask.VendorLocation.Specific))) return false;
            if (checkMask.Conditions?.Overall.HasValue ?? false && checkMask.Conditions!.Overall.Value != item.Conditions.HasBeenSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFactionGetter item,
            Faction.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var RelationsItem = item.Relations;
            mask.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Relation.Mask<bool>?>>>(RelationsItem.HasBeenSet, RelationsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Relation.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Flags = (item.Flags != null);
            mask.PrisonMarker = (item.PrisonMarker.FormKey != null);
            mask.FollowerWaitMarker = (item.FollowerWaitMarker.FormKey != null);
            mask.EvidenceChest = (item.EvidenceChest.FormKey != null);
            mask.PlayerBelongingsChest = (item.PlayerBelongingsChest.FormKey != null);
            mask.CrimeGroup = (item.CrimeGroup.FormKey != null);
            mask.JailOutfit = (item.JailOutfit.FormKey != null);
            mask.ArrestCrimeValue = true;
            mask.AttackOnSightCrimeValue = true;
            mask.MurderCrimeValue = true;
            mask.AssaultCrimeValue = true;
            mask.TrespassCrimeValue = true;
            mask.PickpocketCrimeValue = true;
            mask.UnknownCrimeValue = true;
            mask.StealMultCrimeValue = true;
            mask.EscapeCrimeValue = true;
            mask.WerewolfCrimeValue = true;
            var RanksItem = item.Ranks;
            mask.Ranks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Rank.Mask<bool>?>>>(RanksItem.HasBeenSet, RanksItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Rank.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.VendorList = (item.VendorList.FormKey != null);
            mask.VendorChest = (item.VendorChest.FormKey != null);
            var itemVendorValues = item.VendorValues;
            mask.VendorValues = new MaskItem<bool, VendorValues.Mask<bool>?>(itemVendorValues != null, itemVendorValues?.GetHasBeenSetMask());
            var itemVendorLocation = item.VendorLocation;
            mask.VendorLocation = new MaskItem<bool, VendorLocation.Mask<bool>?>(itemVendorLocation != null, itemVendorLocation?.GetHasBeenSetMask());
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>>(ConditionsItem.HasBeenSet, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.CRVADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter? lhs,
            IFactionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Relations.SequenceEqual(rhs.Relations)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.PrisonMarker.Equals(rhs.PrisonMarker)) return false;
            if (!lhs.FollowerWaitMarker.Equals(rhs.FollowerWaitMarker)) return false;
            if (!lhs.EvidenceChest.Equals(rhs.EvidenceChest)) return false;
            if (!lhs.PlayerBelongingsChest.Equals(rhs.PlayerBelongingsChest)) return false;
            if (!lhs.CrimeGroup.Equals(rhs.CrimeGroup)) return false;
            if (!lhs.JailOutfit.Equals(rhs.JailOutfit)) return false;
            if (lhs.ArrestCrimeValue != rhs.ArrestCrimeValue) return false;
            if (lhs.AttackOnSightCrimeValue != rhs.AttackOnSightCrimeValue) return false;
            if (lhs.MurderCrimeValue != rhs.MurderCrimeValue) return false;
            if (lhs.AssaultCrimeValue != rhs.AssaultCrimeValue) return false;
            if (lhs.TrespassCrimeValue != rhs.TrespassCrimeValue) return false;
            if (lhs.PickpocketCrimeValue != rhs.PickpocketCrimeValue) return false;
            if (lhs.UnknownCrimeValue != rhs.UnknownCrimeValue) return false;
            if (!lhs.StealMultCrimeValue.EqualsWithin(rhs.StealMultCrimeValue)) return false;
            if (lhs.EscapeCrimeValue != rhs.EscapeCrimeValue) return false;
            if (lhs.WerewolfCrimeValue != rhs.WerewolfCrimeValue) return false;
            if (!lhs.Ranks.SequenceEqual(rhs.Ranks)) return false;
            if (!lhs.VendorList.Equals(rhs.VendorList)) return false;
            if (!lhs.VendorChest.Equals(rhs.VendorChest)) return false;
            if (!object.Equals(lhs.VendorValues, rhs.VendorValues)) return false;
            if (!object.Equals(lhs.VendorLocation, rhs.VendorLocation)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (lhs.CRVADataTypeState != rhs.CRVADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Relations).CombineHashCode(ret);
            if (item.Flags.TryGet(out var Flagsitem))
            {
                ret = HashHelper.GetHashCode(Flagsitem).CombineHashCode(ret);
            }
            if (item.PrisonMarker.TryGet(out var PrisonMarkeritem))
            {
                ret = HashHelper.GetHashCode(PrisonMarkeritem).CombineHashCode(ret);
            }
            if (item.FollowerWaitMarker.TryGet(out var FollowerWaitMarkeritem))
            {
                ret = HashHelper.GetHashCode(FollowerWaitMarkeritem).CombineHashCode(ret);
            }
            if (item.EvidenceChest.TryGet(out var EvidenceChestitem))
            {
                ret = HashHelper.GetHashCode(EvidenceChestitem).CombineHashCode(ret);
            }
            if (item.PlayerBelongingsChest.TryGet(out var PlayerBelongingsChestitem))
            {
                ret = HashHelper.GetHashCode(PlayerBelongingsChestitem).CombineHashCode(ret);
            }
            if (item.CrimeGroup.TryGet(out var CrimeGroupitem))
            {
                ret = HashHelper.GetHashCode(CrimeGroupitem).CombineHashCode(ret);
            }
            if (item.JailOutfit.TryGet(out var JailOutfititem))
            {
                ret = HashHelper.GetHashCode(JailOutfititem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ArrestCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AttackOnSightCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MurderCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AssaultCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TrespassCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PickpocketCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UnknownCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.StealMultCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EscapeCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WerewolfCrimeValue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Ranks).CombineHashCode(ret);
            if (item.VendorList.TryGet(out var VendorListitem))
            {
                ret = HashHelper.GetHashCode(VendorListitem).CombineHashCode(ret);
            }
            if (item.VendorChest.TryGet(out var VendorChestitem))
            {
                ret = HashHelper.GetHashCode(VendorChestitem).CombineHashCode(ret);
            }
            if (item.VendorValues.TryGet(out var VendorValuesitem))
            {
                ret = HashHelper.GetHashCode(VendorValuesitem).CombineHashCode(ret);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationitem))
            {
                ret = HashHelper.GetHashCode(VendorLocationitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CRVADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Faction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFactionGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return obj.PrisonMarker;
            yield return obj.FollowerWaitMarker;
            yield return obj.EvidenceChest;
            yield return obj.PlayerBelongingsChest;
            yield return obj.CrimeGroup;
            yield return obj.JailOutfit;
            yield return obj.VendorList;
            yield return obj.VendorChest;
            if (obj.VendorLocation != null)
            {
                foreach (var item in obj.VendorLocation.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Faction obj, Faction rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Faction(getNextFormKey());
            ret.DeepCopyIn((Faction)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Faction)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FactionSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFactionInternal item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    if (rhs.Relations.HasBeenSet)
                    {
                        item.Relations.SetTo(
                            items: rhs.Relations,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Relations.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PrisonMarker) ?? true))
            {
                item.PrisonMarker.FormKey = rhs.PrisonMarker.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.FollowerWaitMarker) ?? true))
            {
                item.FollowerWaitMarker.FormKey = rhs.FollowerWaitMarker.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.EvidenceChest) ?? true))
            {
                item.EvidenceChest.FormKey = rhs.EvidenceChest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PlayerBelongingsChest) ?? true))
            {
                item.PlayerBelongingsChest.FormKey = rhs.PlayerBelongingsChest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGroup) ?? true))
            {
                item.CrimeGroup.FormKey = rhs.CrimeGroup.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.JailOutfit) ?? true))
            {
                item.JailOutfit.FormKey = rhs.JailOutfit.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.ArrestCrimeValue) ?? true))
            {
                item.ArrestCrimeValue = rhs.ArrestCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.AttackOnSightCrimeValue) ?? true))
            {
                item.AttackOnSightCrimeValue = rhs.AttackOnSightCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.MurderCrimeValue) ?? true))
            {
                item.MurderCrimeValue = rhs.MurderCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.AssaultCrimeValue) ?? true))
            {
                item.AssaultCrimeValue = rhs.AssaultCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.TrespassCrimeValue) ?? true))
            {
                item.TrespassCrimeValue = rhs.TrespassCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PickpocketCrimeValue) ?? true))
            {
                item.PickpocketCrimeValue = rhs.PickpocketCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.UnknownCrimeValue) ?? true))
            {
                item.UnknownCrimeValue = rhs.UnknownCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.StealMultCrimeValue) ?? true))
            {
                item.StealMultCrimeValue = rhs.StealMultCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.EscapeCrimeValue) ?? true))
            {
                item.EscapeCrimeValue = rhs.EscapeCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.WerewolfCrimeValue) ?? true))
            {
                item.WerewolfCrimeValue = rhs.WerewolfCrimeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    if (rhs.Ranks.HasBeenSet)
                    {
                        item.Ranks.SetTo(
                            items: rhs.Ranks,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Ranks.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorList) ?? true))
            {
                item.VendorList.FormKey = rhs.VendorList.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorChest) ?? true))
            {
                item.VendorChest.FormKey = rhs.VendorChest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                try
                {
                    if(rhs.VendorValues.TryGet(out var rhsVendorValues))
                    {
                        item.VendorValues = rhsVendorValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    else
                    {
                        item.VendorValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                try
                {
                    if(rhs.VendorLocation.TryGet(out var rhsVendorLocation))
                    {
                        item.VendorLocation = rhsVendorLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    else
                    {
                        item.VendorLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Conditions);
                try
                {
                    if (rhs.Conditions.HasBeenSet)
                    {
                        item.Conditions.SetTo(
                            items: rhs.Conditions,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Conditions.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CRVADataTypeState) ?? true))
            {
                item.CRVADataTypeState = rhs.CRVADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Faction DeepCopy(
            IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FactionXmlWriteTranslation Instance = new FactionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFactionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Faction_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if (item.Relations.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<IRelationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Relations),
                    transl: (XElement subNode, IRelationGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RelationXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Faction.FactionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Faction_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.PrisonMarker.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.PrisonMarker) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PrisonMarker),
                    item: item.PrisonMarker.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.PrisonMarker,
                    errorMask: errorMask);
            }
            if ((item.FollowerWaitMarker.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.FollowerWaitMarker) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FollowerWaitMarker),
                    item: item.FollowerWaitMarker.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.FollowerWaitMarker,
                    errorMask: errorMask);
            }
            if ((item.EvidenceChest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.EvidenceChest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EvidenceChest),
                    item: item.EvidenceChest.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.EvidenceChest,
                    errorMask: errorMask);
            }
            if ((item.PlayerBelongingsChest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.PlayerBelongingsChest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PlayerBelongingsChest),
                    item: item.PlayerBelongingsChest.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.PlayerBelongingsChest,
                    errorMask: errorMask);
            }
            if ((item.CrimeGroup.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGroup) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CrimeGroup),
                    item: item.CrimeGroup.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.CrimeGroup,
                    errorMask: errorMask);
            }
            if ((item.JailOutfit.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.JailOutfit) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.JailOutfit),
                    item: item.JailOutfit.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.JailOutfit,
                    errorMask: errorMask);
            }
            if (item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.ArrestCrimeValue) ?? true))
                {
                    BooleanXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ArrestCrimeValue),
                        item: item.ArrestCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.ArrestCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.AttackOnSightCrimeValue) ?? true))
                {
                    BooleanXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AttackOnSightCrimeValue),
                        item: item.AttackOnSightCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.AttackOnSightCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.MurderCrimeValue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MurderCrimeValue),
                        item: item.MurderCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.MurderCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.AssaultCrimeValue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AssaultCrimeValue),
                        item: item.AssaultCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.AssaultCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.TrespassCrimeValue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.TrespassCrimeValue),
                        item: item.TrespassCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.TrespassCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.PickpocketCrimeValue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PickpocketCrimeValue),
                        item: item.PickpocketCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.PickpocketCrimeValue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.UnknownCrimeValue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UnknownCrimeValue),
                        item: item.UnknownCrimeValue,
                        fieldIndex: (int)Faction_FieldIndex.UnknownCrimeValue,
                        errorMask: errorMask);
                }
                if (!item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.StealMultCrimeValue) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.StealMultCrimeValue),
                            item: item.StealMultCrimeValue,
                            fieldIndex: (int)Faction_FieldIndex.StealMultCrimeValue,
                            errorMask: errorMask);
                    }
                    if (!item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Break1))
                    {
                        if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.EscapeCrimeValue) ?? true))
                        {
                            UInt16XmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.EscapeCrimeValue),
                                item: item.EscapeCrimeValue,
                                fieldIndex: (int)Faction_FieldIndex.EscapeCrimeValue,
                                errorMask: errorMask);
                        }
                        if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.WerewolfCrimeValue) ?? true))
                        {
                            UInt16XmlTranslation.Instance.Write(
                                node: node,
                                name: nameof(item.WerewolfCrimeValue),
                                item: item.WerewolfCrimeValue,
                                fieldIndex: (int)Faction_FieldIndex.WerewolfCrimeValue,
                                errorMask: errorMask);
                        }
                    }
                }
                else
                {
                    node.Add(new XElement("HasCRVADataType"));
                }
            }
            if (item.Ranks.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                ListXmlTranslation<IRankGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Ranks),
                    item: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Ranks),
                    transl: (XElement subNode, IRankGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RankXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.VendorList.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorList) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VendorList),
                    item: item.VendorList.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.VendorList,
                    errorMask: errorMask);
            }
            if ((item.VendorChest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorChest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VendorChest),
                    item: item.VendorChest.FormKey,
                    fieldIndex: (int)Faction_FieldIndex.VendorChest,
                    errorMask: errorMask);
            }
            if ((item.VendorValues != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                if (item.VendorValues.TryGet(out var VendorValuesItem))
                {
                    ((VendorValuesXmlWriteTranslation)((IXmlItem)VendorValuesItem).XmlWriteTranslator).Write(
                        item: VendorValuesItem,
                        node: node,
                        name: nameof(item.VendorValues),
                        fieldIndex: (int)Faction_FieldIndex.VendorValues,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                }
            }
            if ((item.VendorLocation != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                if (item.VendorLocation.TryGet(out var VendorLocationItem))
                {
                    ((VendorLocationXmlWriteTranslation)((IXmlItem)VendorLocationItem).XmlWriteTranslator).Write(
                        item: VendorLocationItem,
                        node: node,
                        name: nameof(item.VendorLocation),
                        fieldIndex: (int)Faction_FieldIndex.VendorLocation,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                }
            }
            if (item.Conditions.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)Faction_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.CRVADataTypeState) ?? true))
            {
                EnumXmlTranslation<Faction.CRVADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.CRVADataTypeState),
                    item: item.CRVADataTypeState,
                    fieldIndex: (int)Faction_FieldIndex.CRVADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Faction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Faction");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FactionXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static FactionXmlCreateTranslation Instance = new FactionXmlCreateTranslation();

        public static void FillPublicXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                    try
                    {
                        if (ListXmlTranslation<Relation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<Relation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Faction.FactionFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrisonMarker":
                    errorMask?.PushIndex((int)Faction_FieldIndex.PrisonMarker);
                    try
                    {
                        item.PrisonMarker.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FollowerWaitMarker":
                    errorMask?.PushIndex((int)Faction_FieldIndex.FollowerWaitMarker);
                    try
                    {
                        item.FollowerWaitMarker.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EvidenceChest":
                    errorMask?.PushIndex((int)Faction_FieldIndex.EvidenceChest);
                    try
                    {
                        item.EvidenceChest.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PlayerBelongingsChest":
                    errorMask?.PushIndex((int)Faction_FieldIndex.PlayerBelongingsChest);
                    try
                    {
                        item.PlayerBelongingsChest.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CrimeGroup":
                    errorMask?.PushIndex((int)Faction_FieldIndex.CrimeGroup);
                    try
                    {
                        item.CrimeGroup.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "JailOutfit":
                    errorMask?.PushIndex((int)Faction_FieldIndex.JailOutfit);
                    try
                    {
                        item.JailOutfit.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ArrestCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.ArrestCrimeValue);
                    try
                    {
                        item.ArrestCrimeValue = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CRVADataTypeState |= Faction.CRVADataType.Has;
                    break;
                case "AttackOnSightCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.AttackOnSightCrimeValue);
                    try
                    {
                        item.AttackOnSightCrimeValue = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MurderCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.MurderCrimeValue);
                    try
                    {
                        item.MurderCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AssaultCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.AssaultCrimeValue);
                    try
                    {
                        item.AssaultCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TrespassCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.TrespassCrimeValue);
                    try
                    {
                        item.TrespassCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickpocketCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.PickpocketCrimeValue);
                    try
                    {
                        item.PickpocketCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnknownCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.UnknownCrimeValue);
                    try
                    {
                        item.UnknownCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StealMultCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.StealMultCrimeValue);
                    try
                    {
                        item.StealMultCrimeValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CRVADataTypeState &= ~Faction.CRVADataType.Break0;
                    break;
                case "EscapeCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.EscapeCrimeValue);
                    try
                    {
                        item.EscapeCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.CRVADataTypeState &= ~Faction.CRVADataType.Break1;
                    break;
                case "WerewolfCrimeValue":
                    errorMask?.PushIndex((int)Faction_FieldIndex.WerewolfCrimeValue);
                    try
                    {
                        item.WerewolfCrimeValue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ranks":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                    try
                    {
                        if (ListXmlTranslation<Rank>.Instance.Parse(
                            node: node,
                            enumer: out var RanksItem,
                            transl: LoquiXmlTranslation<Rank>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Ranks.SetTo(RanksItem);
                        }
                        else
                        {
                            item.Ranks.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorList":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorList);
                    try
                    {
                        item.VendorList.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorChest":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorChest);
                    try
                    {
                        item.VendorChest.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorValues":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                    try
                    {
                        item.VendorValues = LoquiXmlTranslation<VendorValues>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorLocation":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                    try
                    {
                        item.VendorLocation = LoquiXmlTranslation<VendorLocation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CRVADataTypeState":
                    errorMask?.PushIndex((int)Faction_FieldIndex.CRVADataTypeState);
                    try
                    {
                        item.CRVADataTypeState = EnumXmlTranslation<Faction.CRVADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FactionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFactionGetter item,
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FactionBinaryWriteTranslation Instance = new FactionBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IFactionGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IFactionGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_Embedded(
            IFactionGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRelationGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PrisonMarker,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.JAIL_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FollowerWaitMarker,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.WAIT_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EvidenceChest,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.STOL_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PlayerBelongingsChest,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.PLCN_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CrimeGroup,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.CRGR_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JailOutfit,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.JOUT_HEADER),
                masterReferences: masterReferences);
            if (item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Faction_Registration.CRVA_HEADER)))
                {
                    writer.Write(item.ArrestCrimeValue);
                    writer.Write(item.AttackOnSightCrimeValue);
                    writer.Write(item.MurderCrimeValue);
                    writer.Write(item.AssaultCrimeValue);
                    writer.Write(item.TrespassCrimeValue);
                    writer.Write(item.PickpocketCrimeValue);
                    writer.Write(item.UnknownCrimeValue);
                    if (!item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.StealMultCrimeValue);
                        if (!item.CRVADataTypeState.HasFlag(Faction.CRVADataType.Break1))
                        {
                            writer.Write(item.EscapeCrimeValue);
                            writer.Write(item.WerewolfCrimeValue);
                        }
                    }
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankGetter>.Instance.Write(
                writer: writer,
                items: item.Ranks,
                transl: (MutagenWriter subWriter, IRankGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RankBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VendorList,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.VEND_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VendorChest,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.VENC_HEADER),
                masterReferences: masterReferences);
            if (item.VendorValues.TryGet(out var VendorValuesItem))
            {
                ((VendorValuesBinaryWriteTranslation)((IBinaryItem)VendorValuesItem).BinaryWriteTranslator).Write(
                    item: VendorValuesItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationItem))
            {
                ((VendorLocationBinaryWriteTranslation)((IBinaryItem)VendorLocationItem).BinaryWriteTranslator).Write(
                    item: VendorLocationItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            FactionBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Faction_Registration.FACT_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IFactionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FactionBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IFactionInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryConditionsCustomPublic(
            MutagenFrame frame,
            IFactionInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryConditionsCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => FactionCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlySetList<IRelationGetter> Relations { get; private set; } = EmptySetList<RelationBinaryOverlay>.Instance;
        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public Faction.FactionFlag? Flags => Flags_IsSet ? (Faction.FactionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)) : default(Faction.FactionFlag?);
        #endregion
        #region PrisonMarker
        private int? _PrisonMarkerLocation;
        public bool PrisonMarker_IsSet => _PrisonMarkerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> PrisonMarker => _PrisonMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PrisonMarkerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Empty;
        #endregion
        #region FollowerWaitMarker
        private int? _FollowerWaitMarkerLocation;
        public bool FollowerWaitMarker_IsSet => _FollowerWaitMarkerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> FollowerWaitMarker => _FollowerWaitMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FollowerWaitMarkerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Empty;
        #endregion
        #region EvidenceChest
        private int? _EvidenceChestLocation;
        public bool EvidenceChest_IsSet => _EvidenceChestLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> EvidenceChest => _EvidenceChestLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EvidenceChestLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Empty;
        #endregion
        #region PlayerBelongingsChest
        private int? _PlayerBelongingsChestLocation;
        public bool PlayerBelongingsChest_IsSet => _PlayerBelongingsChestLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> PlayerBelongingsChest => _PlayerBelongingsChestLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PlayerBelongingsChestLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Empty;
        #endregion
        #region CrimeGroup
        private int? _CrimeGroupLocation;
        public bool CrimeGroup_IsSet => _CrimeGroupLocation.HasValue;
        public IFormLinkNullableGetter<IFormListGetter> CrimeGroup => _CrimeGroupLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CrimeGroupLocation.Value, _package.Meta)))) : FormLinkNullable<IFormListGetter>.Empty;
        #endregion
        #region JailOutfit
        private int? _JailOutfitLocation;
        public bool JailOutfit_IsSet => _JailOutfitLocation.HasValue;
        public IFormLinkNullableGetter<IOutfitGetter> JailOutfit => _JailOutfitLocation.HasValue ? new FormLinkNullable<IOutfitGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _JailOutfitLocation.Value, _package.Meta)))) : FormLinkNullable<IOutfitGetter>.Empty;
        #endregion
        private int? _CRVALocation;
        public Faction.CRVADataType CRVADataTypeState { get; private set; }
        #region ArrestCrimeValue
        private int _ArrestCrimeValueLocation => _CRVALocation!.Value + 0x0;
        private bool _ArrestCrimeValue_IsSet => _CRVALocation.HasValue;
        public Boolean ArrestCrimeValue => _ArrestCrimeValue_IsSet ? _data.Span.Slice(_ArrestCrimeValueLocation, 1)[0] == 1 : default;
        #endregion
        #region AttackOnSightCrimeValue
        private int _AttackOnSightCrimeValueLocation => _CRVALocation!.Value + 0x1;
        private bool _AttackOnSightCrimeValue_IsSet => _CRVALocation.HasValue;
        public Boolean AttackOnSightCrimeValue => _AttackOnSightCrimeValue_IsSet ? _data.Span.Slice(_AttackOnSightCrimeValueLocation, 1)[0] == 1 : default;
        #endregion
        #region MurderCrimeValue
        private int _MurderCrimeValueLocation => _CRVALocation!.Value + 0x2;
        private bool _MurderCrimeValue_IsSet => _CRVALocation.HasValue;
        public UInt16 MurderCrimeValue => _MurderCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_MurderCrimeValueLocation, 2)) : default;
        #endregion
        #region AssaultCrimeValue
        private int _AssaultCrimeValueLocation => _CRVALocation!.Value + 0x4;
        private bool _AssaultCrimeValue_IsSet => _CRVALocation.HasValue;
        public UInt16 AssaultCrimeValue => _AssaultCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_AssaultCrimeValueLocation, 2)) : default;
        #endregion
        #region TrespassCrimeValue
        private int _TrespassCrimeValueLocation => _CRVALocation!.Value + 0x6;
        private bool _TrespassCrimeValue_IsSet => _CRVALocation.HasValue;
        public UInt16 TrespassCrimeValue => _TrespassCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_TrespassCrimeValueLocation, 2)) : default;
        #endregion
        #region PickpocketCrimeValue
        private int _PickpocketCrimeValueLocation => _CRVALocation!.Value + 0x8;
        private bool _PickpocketCrimeValue_IsSet => _CRVALocation.HasValue;
        public UInt16 PickpocketCrimeValue => _PickpocketCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_PickpocketCrimeValueLocation, 2)) : default;
        #endregion
        #region UnknownCrimeValue
        private int _UnknownCrimeValueLocation => _CRVALocation!.Value + 0xA;
        private bool _UnknownCrimeValue_IsSet => _CRVALocation.HasValue;
        public UInt16 UnknownCrimeValue => _UnknownCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_UnknownCrimeValueLocation, 2)) : default;
        #endregion
        #region StealMultCrimeValue
        private int _StealMultCrimeValueLocation => _CRVALocation!.Value + 0xC;
        private bool _StealMultCrimeValue_IsSet => _CRVALocation.HasValue && !CRVADataTypeState.HasFlag(Faction.CRVADataType.Break0);
        public Single StealMultCrimeValue => _StealMultCrimeValue_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_StealMultCrimeValueLocation, 4)) : default;
        #endregion
        #region EscapeCrimeValue
        private int _EscapeCrimeValueLocation => _CRVALocation!.Value + 0x10;
        private bool _EscapeCrimeValue_IsSet => _CRVALocation.HasValue && !CRVADataTypeState.HasFlag(Faction.CRVADataType.Break1);
        public UInt16 EscapeCrimeValue => _EscapeCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_EscapeCrimeValueLocation, 2)) : default;
        #endregion
        #region WerewolfCrimeValue
        private int _WerewolfCrimeValueLocation => _CRVALocation!.Value + 0x12;
        private bool _WerewolfCrimeValue_IsSet => _CRVALocation.HasValue && !CRVADataTypeState.HasFlag(Faction.CRVADataType.Break1);
        public UInt16 WerewolfCrimeValue => _WerewolfCrimeValue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_WerewolfCrimeValueLocation, 2)) : default;
        #endregion
        public IReadOnlySetList<IRankGetter> Ranks { get; private set; } = EmptySetList<RankBinaryOverlay>.Instance;
        #region VendorList
        private int? _VendorListLocation;
        public bool VendorList_IsSet => _VendorListLocation.HasValue;
        public IFormLinkNullableGetter<IFormListGetter> VendorList => _VendorListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VendorListLocation.Value, _package.Meta)))) : FormLinkNullable<IFormListGetter>.Empty;
        #endregion
        #region VendorChest
        private int? _VendorChestLocation;
        public bool VendorChest_IsSet => _VendorChestLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> VendorChest => _VendorChestLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VendorChestLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Empty;
        #endregion
        #region VendorValues
        private RangeInt32? _VendorValuesLocation;
        private bool _VendorValues_IsSet => _VendorValuesLocation.HasValue;
        public IVendorValuesGetter? VendorValues => _VendorValues_IsSet ? VendorValuesBinaryOverlay.VendorValuesFactory(new BinaryMemoryReadStream(_data.Slice(_VendorValuesLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool VendorValues_IsSet => _VendorValuesLocation.HasValue;
        #endregion
        #region VendorLocation
        private RangeInt32? _VendorLocationLocation;
        private bool _VendorLocation_IsSet => _VendorLocationLocation.HasValue;
        public IVendorLocationGetter? VendorLocation => _VendorLocation_IsSet ? VendorLocationBinaryOverlay.VendorLocationFactory(new BinaryMemoryReadStream(_data.Slice(_VendorLocationLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool VendorLocation_IsSet => _VendorLocationLocation.HasValue;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FactionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FactionBinaryOverlay FactionFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new FactionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    this.Relations = BinaryOverlaySetList<RelationBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RelationBinaryOverlay.RelationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4C49414A: // JAIL
                {
                    _PrisonMarkerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PrisonMarker);
                }
                case 0x54494157: // WAIT
                {
                    _FollowerWaitMarkerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.FollowerWaitMarker);
                }
                case 0x4C4F5453: // STOL
                {
                    _EvidenceChestLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.EvidenceChest);
                }
                case 0x4E434C50: // PLCN
                {
                    _PlayerBelongingsChestLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PlayerBelongingsChest);
                }
                case 0x52475243: // CRGR
                {
                    _CrimeGroupLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeGroup);
                }
                case 0x54554F4A: // JOUT
                {
                    _JailOutfitLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.JailOutfit);
                }
                case 0x41565243: // CRVA
                {
                    _CRVALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.CRVADataTypeState = Faction.CRVADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).RecordLength;
                    if (subLen <= 0xC)
                    {
                        this.CRVADataTypeState |= Faction.CRVADataType.Break0;
                    }
                    if (subLen <= 0x10)
                    {
                        this.CRVADataTypeState |= Faction.CRVADataType.Break1;
                    }
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.WerewolfCrimeValue);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                {
                    this.Ranks = this.ParseRepeatedTypelessSubrecord<RankBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Rank_Registration.TriggeringRecordTypes,
                        factory:  RankBinaryOverlay.RankFactory);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                case 0x444E4556: // VEND
                {
                    _VendorListLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorList);
                }
                case 0x434E4556: // VENC
                {
                    _VendorChestLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorChest);
                }
                case 0x564E4556: // VENV
                {
                    _VendorValuesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorValues);
                }
                case 0x44564C50: // PLVD
                {
                    _VendorLocationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorLocation);
                }
                case 0x43544943: // CITC
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Conditions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

