/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class GameSettingString :
        GameSetting,
        IGameSettingStringInternal,
        ILoquiObjectSetter<GameSettingString>,
        IEquatable<GameSettingString>,
        IEqualsMask
    {
        #region Ctor
        protected GameSettingString()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        public bool Data_IsSet
        {
            get => _hasBeenSetTracker[(int)GameSettingString_FieldIndex.Data];
            set => _hasBeenSetTracker[(int)GameSettingString_FieldIndex.Data] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IGameSettingStringGetter.Data_IsSet => Data_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _Data;
        public String Data
        {
            get => this._Data;
            set => Data_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IGameSettingStringGetter.Data => this.Data;
        public void Data_Set(
            String value,
            bool markSet = true)
        {
            _Data = value;
            _hasBeenSetTracker[(int)GameSettingString_FieldIndex.Data] = markSet;
        }
        public void Data_Unset()
        {
            this.Data_Set(default(String), false);
        }
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GameSettingStringMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IGameSettingStringGetter rhs)) return false;
            return ((GameSettingStringCommon)((IGameSettingStringGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(GameSettingString obj)
        {
            return ((GameSettingStringCommon)((IGameSettingStringGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((GameSettingStringCommon)((IGameSettingStringGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GameSettingStringXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((GameSettingStringXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new GameSettingString CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GameSettingString CreateFromXml(
            XElement node,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = GameSettingString_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static GameSettingString CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new GameSettingString() : null;
                    break;
                default:
                    break;
            }
            var ret = new GameSettingString();
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static GameSettingString CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GameSettingString CreateFromXml(
            string path,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GameSettingString CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GameSettingString CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GameSettingString CreateFromXml(
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GameSettingString CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((GameSettingString_FieldIndex)index)
            {
                case GameSettingString_FieldIndex.Data:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = GameSettingString_Registration.TRIGGERING_RECORD_TYPE;
        public GameSettingString(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public GameSettingString(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameSettingStringBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((GameSettingStringBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new GameSettingString CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static GameSettingString CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new GameSettingString();
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGameSettingStringGetter)rhs, include);

        void IClearable.Clear()
        {
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new GameSettingString GetNew()
        {
            return new GameSettingString();
        }

    }
    #endregion

    #region Interface
    public partial interface IGameSettingString :
        IGameSettingStringGetter,
        IGameSetting,
        ILoquiObjectSetter<IGameSettingStringInternal>
    {
        new String Data { get; set; }
        new bool Data_IsSet { get; set; }
        void Data_Set(String value, bool hasBeenSet = true);
        void Data_Unset();

    }

    public partial interface IGameSettingStringInternal :
        IGameSettingInternal,
        IGameSettingString,
        IGameSettingStringGetter
    {
    }

    public partial interface IGameSettingStringGetter :
        IGameSettingGetter,
        ILoquiObject<IGameSettingStringGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region Data
        String Data { get; }
        bool Data_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class GameSettingStringMixIn
    {
        public static void Clear(this IGameSettingStringInternal item)
        {
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static GameSettingString_Mask<bool> GetEqualsMask(
            this IGameSettingStringGetter item,
            IGameSettingStringGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGameSettingStringGetter item,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            return ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGameSettingStringGetter item,
            FileGeneration fg,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGameSettingStringGetter item,
            GameSettingString_Mask<bool?> checkMask)
        {
            return ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GameSettingString_Mask<bool> GetHasBeenSetMask(this IGameSettingStringGetter item)
        {
            var ret = new GameSettingString_Mask<bool>();
            ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGameSettingStringGetter item,
            IGameSettingStringGetter rhs)
        {
            return ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IGameSettingStringInternal lhs,
            IGameSettingStringGetter rhs,
            GameSettingString_TranslationMask copyMask)
        {
            ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyFieldsFrom(
            this IGameSettingStringInternal lhs,
            IGameSettingStringGetter rhs,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = GameSettingString_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IGameSettingStringInternal lhs,
            IGameSettingStringGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static GameSettingString DeepCopy(
            this IGameSettingStringGetter item,
            GameSettingString_TranslationMask copyMask = null)
        {
            return ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GameSettingString DeepCopy(
            this IGameSettingStringGetter item,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask copyMask = null)
        {
            return ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GameSettingString DeepCopy(
            this IGameSettingStringGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((GameSettingStringSetterTranslationCommon)((IGameSettingStringGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            XElement node,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = GameSettingString_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            string path,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            GameSettingString_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGameSettingStringInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            GameSettingString_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IGameSettingStringInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IGameSettingStringInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((GameSettingStringSetterCommon)((IGameSettingStringGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GameSettingString_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Data = 7,
    }
    #endregion

    #region Registration
    public partial class GameSettingString_Registration : ILoquiRegistration
    {
        public static readonly GameSettingString_Registration Instance = new GameSettingString_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 8,
            version: 0);

        public const string GUID = "509a7fa7-9bc7-46bf-b8af-e67ae06c6475";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(GameSettingString_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameSettingString_ErrorMask);

        public static readonly Type ClassType = typeof(GameSettingString);

        public static readonly Type GetterType = typeof(IGameSettingStringGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGameSettingString);

        public static readonly Type InternalSetterType = typeof(IGameSettingStringInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.GameSettingString";

        public const string Name = "GameSettingString";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)GameSettingString_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return "Data";
                default:
                    return GameSetting_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return typeof(String);
                default:
                    return GameSetting_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GameSettingStringXmlWriteTranslation);
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GMST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(GameSettingStringBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GameSettingStringSetterCommon : GameSettingSetterCommon
    {
        public new static readonly GameSettingStringSetterCommon Instance = new GameSettingStringSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGameSettingStringInternal item)
        {
            ClearPartial();
            item.Data_Unset();
            base.Clear(item);
        }
        
        public override void Clear(IGameSettingInternal item)
        {
            Clear(item: (IGameSettingStringInternal)item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IGameSettingStringInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGameSettingStringInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IGameSettingStringInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    GameSettingSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IGameSettingStringInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    GameSettingStringXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => GameSettingString_Registration.GMST_HEADER;
        protected static void FillBinaryStructs(
            IGameSettingStringInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            GameSettingSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IGameSettingStringInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Data = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)GameSettingString_FieldIndex.Data);
                }
                default:
                    return GameSettingSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IGameSettingStringInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IGameSettingStringInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class GameSettingStringCommon : GameSettingCommon
    {
        public new static readonly GameSettingStringCommon Instance = new GameSettingStringCommon();

        public GameSettingString_Mask<bool> GetEqualsMask(
            IGameSettingStringGetter item,
            IGameSettingStringGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameSettingString_Mask<bool>();
            ((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGameSettingStringGetter item,
            IGameSettingStringGetter rhs,
            GameSettingString_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = item.Data_IsSet == rhs.Data_IsSet && string.Equals(item.Data, rhs.Data);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IGameSettingStringGetter item,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGameSettingStringGetter item,
            FileGeneration fg,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GameSettingString =>");
            }
            else
            {
                fg.AppendLine($"{name} (GameSettingString) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGameSettingStringGetter item,
            FileGeneration fg,
            GameSettingString_Mask<bool> printMask = null)
        {
            GameSettingCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Data ?? true)
            {
                fg.AppendLine($"Data => {item.Data}");
            }
        }
        
        public bool HasBeenSet(
            IGameSettingStringGetter item,
            GameSettingString_Mask<bool?> checkMask)
        {
            if (checkMask.Data.HasValue && checkMask.Data.Value != item.Data_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IGameSettingStringGetter item,
            GameSettingString_Mask<bool> mask)
        {
            mask.Data = item.Data_IsSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static GameSettingString_FieldIndex ConvertFieldIndex(GameSetting_FieldIndex index)
        {
            switch (index)
            {
                case GameSetting_FieldIndex.MajorRecordFlagsRaw:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.FormKey:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.Version:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.EditorID:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.SkyrimMajorRecordFlags:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.FormVersion:
                    return (GameSettingString_FieldIndex)((int)index);
                case GameSetting_FieldIndex.Version2:
                    return (GameSettingString_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new GameSettingString_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (GameSettingString_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (GameSettingString_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new GameSettingString_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameSettingString_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GameSettingString_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (GameSettingString_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GameSettingString_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGameSettingStringGetter lhs,
            IGameSettingStringGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Data_IsSet != rhs.Data_IsSet) return false;
            if (lhs.Data_IsSet)
            {
                if (!string.Equals(lhs.Data, rhs.Data)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IGameSettingGetter lhs,
            IGameSettingGetter rhs)
        {
            return Equals(
                lhs: (IGameSettingStringGetter)lhs,
                rhs: rhs as IGameSettingStringGetter);
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter lhs,
            ISkyrimMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IGameSettingStringGetter)lhs,
                rhs: rhs as IGameSettingStringGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IGameSettingStringGetter)lhs,
                rhs: rhs as IGameSettingStringGetter);
        }
        
        public virtual int GetHashCode(IGameSettingStringGetter item)
        {
            int ret = 0;
            if (item.Data_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IGameSettingGetter item)
        {
            return GetHashCode(item: (IGameSettingStringGetter)item);
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameSettingStringGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameSettingStringGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GameSettingString.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IGameSettingStringGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(GameSettingString obj, GameSettingString rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new GameSettingString(getNextFormKey());
            ret.DeepCopyFieldsFrom((GameSettingString)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (GameSettingString)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class GameSettingStringSetterTranslationCommon : GameSettingSetterTranslationCommon
    {
        public new static readonly GameSettingStringSetterTranslationCommon Instance = new GameSettingStringSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IGameSettingStringInternal item,
            IGameSettingStringGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IGameSettingString item,
            IGameSettingStringGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)GameSettingString_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)GameSettingString_FieldIndex.Data);
                try
                {
                    if (rhs.Data_IsSet)
                    {
                        item.Data = rhs.Data;
                    }
                    else
                    {
                        item.Data_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyFieldsFrom(
            IGameSettingInternal item,
            IGameSettingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingStringInternal)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IGameSetting item,
            IGameSettingGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingString)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingStringInternal)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingString)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingStringInternal)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IGameSettingString)item,
                rhs: (IGameSettingStringGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public GameSettingString DeepCopy(
            IGameSettingStringGetter item,
            GameSettingString_TranslationMask copyMask = null)
        {
            GameSettingString ret = (GameSettingString)((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public GameSettingString DeepCopy(
            IGameSettingStringGetter item,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask copyMask = null)
        {
            GameSettingString ret = (GameSettingString)((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public GameSettingString DeepCopy(
            IGameSettingStringGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            GameSettingString ret = (GameSettingString)((GameSettingStringCommon)((IGameSettingStringGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class GameSettingString
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameSettingString_Registration.Instance;
        public new static GameSettingString_Registration Registration => GameSettingString_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameSettingStringCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GameSettingStringSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameSettingStringSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GameSettingStringXmlWriteTranslation :
        GameSettingXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static GameSettingStringXmlWriteTranslation Instance = new GameSettingStringXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGameSettingStringGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            GameSettingXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Data_IsSet
                && (translationMask?.GetShouldTranslate((int)GameSettingString_FieldIndex.Data) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Data),
                    item: item.Data,
                    fieldIndex: (int)GameSettingString_FieldIndex.Data,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IGameSettingStringGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GameSettingString");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GameSettingString");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IGameSettingGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class GameSettingStringXmlCreateTranslation : GameSettingXmlCreateTranslation
    {
        public new readonly static GameSettingStringXmlCreateTranslation Instance = new GameSettingStringXmlCreateTranslation();

        public static void FillPublicXml(
            IGameSettingStringInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GameSettingStringXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGameSettingStringInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Data":
                    try
                    {
                        errorMask?.PushIndex((int)GameSettingString_FieldIndex.Data);
                        item.Data = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    GameSettingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class GameSettingStringXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGameSettingStringGetter item,
            XElement node,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GameSettingStringXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GameSettingString_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGameSettingStringGetter item,
            string path,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGameSettingStringGetter item,
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_TranslationMask translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class GameSettingString_Mask<T> : GameSetting_Mask<T>, IMask<T>, IEquatable<GameSettingString_Mask<T>>
    {
        #region Ctors
        public GameSettingString_Mask()
        {
        }

        public GameSettingString_Mask(T initialValue)
        {
            this.Data = initialValue;
        }

        public GameSettingString_Mask(
            T MajorRecordFlagsRaw,
            T FormKey,
            T Version,
            T EditorID,
            T SkyrimMajorRecordFlags,
            T FormVersion,
            T Version2,
            T Data)
        {
            this.MajorRecordFlagsRaw = MajorRecordFlagsRaw;
            this.FormKey = FormKey;
            this.Version = Version;
            this.EditorID = EditorID;
            this.SkyrimMajorRecordFlags = SkyrimMajorRecordFlags;
            this.FormVersion = FormVersion;
            this.Version2 = Version2;
            this.Data = Data;
        }
        #endregion

        #region Members
        public T Data;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GameSettingString_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GameSettingString_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Data)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new GameSettingString_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GameSettingString_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GameSettingString_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Data = eval(this.Data);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GameSettingString_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GameSettingString_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GameSettingString_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {Data}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GameSettingString_ErrorMask : GameSetting_ErrorMask, IErrorMask<GameSettingString_ErrorMask>
    {
        #region Members
        public Exception Data;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return Data;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    this.Data = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    this.Data = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("GameSettingString_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Data => {Data}");
        }
        #endregion

        #region Combine
        public GameSettingString_ErrorMask Combine(GameSettingString_ErrorMask rhs)
        {
            var ret = new GameSettingString_ErrorMask();
            ret.Data = this.Data.Combine(rhs.Data);
            return ret;
        }
        public static GameSettingString_ErrorMask Combine(GameSettingString_ErrorMask lhs, GameSettingString_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new GameSettingString_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new GameSettingString_ErrorMask();
        }
        #endregion

    }
    public class GameSettingString_TranslationMask : GameSetting_TranslationMask
    {
        #region Members
        public bool Data;
        #endregion

        #region Ctors
        public GameSettingString_TranslationMask()
            : base()
        {
        }

        public GameSettingString_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Data = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Data, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GameSettingStringBinaryWriteTranslation :
        GameSettingBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static GameSettingStringBinaryWriteTranslation Instance = new GameSettingStringBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IGameSettingStringGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.Data_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Data,
                    header: recordTypeConverter.ConvertToCustom(GameSettingString_Registration.DATA_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
        }

        public void Write(
            MutagenWriter writer,
            IGameSettingStringGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: GameSettingString_Registration.GMST_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IGameSettingGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IGameSettingStringGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class GameSettingStringBinaryCreateTranslation : GameSettingBinaryCreateTranslation
    {
        public new readonly static GameSettingStringBinaryCreateTranslation Instance = new GameSettingStringBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class GameSettingStringBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GameSettingStringBinaryOverlay :
        GameSettingBinaryOverlay,
        IGameSettingStringGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameSettingString_Registration.Instance;
        public new static GameSettingString_Registration Registration => GameSettingString_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameSettingStringCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameSettingStringSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGameSettingStringGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GameSettingStringXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((GameSettingStringXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameSettingStringBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((GameSettingStringBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Data
        private int? _DataLocation;
        public bool Data_IsSet => _DataLocation.HasValue;
        public String Data => _DataLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DataLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GameSettingStringBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GameSettingStringBinaryOverlay GameSettingStringFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new GameSettingStringBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _DataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)GameSettingString_FieldIndex.Data);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

