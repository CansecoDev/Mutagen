/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Hair :
        SkyrimMajorRecord,
        IHairInternal,
        ILoquiObjectSetter<Hair>,
        IEquatable<Hair>,
        IEqualsMask
    {
        #region Ctor
        protected Hair()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            HairMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IHairGetter rhs)) return false;
            return ((HairCommon)((IHairGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Hair obj)
        {
            return ((HairCommon)((IHairGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((HairCommon)((IHairGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => HairXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((HairXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Hair CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Hair CreateFromXml(
            XElement node,
            out Hair_ErrorMask errorMask,
            bool doMasks = true,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Hair_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Hair CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Hair() : null;
                    break;
                default:
                    break;
            }
            var ret = new Hair();
            ((HairSetterCommon)((IHairGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Hair CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Hair CreateFromXml(
            string path,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Hair CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Hair CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Hair CreateFromXml(
            Stream stream,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Hair CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Hair_Registration.TRIGGERING_RECORD_TYPE;
        public Hair(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Hair(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HairBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((HairBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Hair CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Hair CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Hair();
            ((HairSetterCommon)((IHairGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHairGetter)rhs, include);

        void IClearable.Clear()
        {
            ((HairSetterCommon)((IHairGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static new Hair GetNew()
        {
            return new Hair();
        }

    }
    #endregion

    #region Interface
    public partial interface IHair :
        IHairGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IHairInternal>
    {
    }

    public partial interface IHairInternal :
        ISkyrimMajorRecordInternal,
        IHair,
        IHairGetter
    {
    }

    public partial interface IHairGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IHairGetter>,
        IXmlItem,
        IBinaryItem
    {

    }

    #endregion

    #region Common MixIn
    public static class HairMixIn
    {
        public static void Clear(this IHairInternal item)
        {
            ((HairSetterCommon)((IHairGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Hair_Mask<bool> GetEqualsMask(
            this IHairGetter item,
            IHairGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HairCommon)((IHairGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHairGetter item,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            return ((HairCommon)((IHairGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHairGetter item,
            FileGeneration fg,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            ((HairCommon)((IHairGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IHairGetter item,
            Hair_Mask<bool?> checkMask)
        {
            return ((HairCommon)((IHairGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Hair_Mask<bool> GetHasBeenSetMask(this IHairGetter item)
        {
            var ret = new Hair_Mask<bool>();
            ((HairCommon)((IHairGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IHairGetter item,
            IHairGetter rhs)
        {
            return ((HairCommon)((IHairGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IHairInternal lhs,
            IHairGetter rhs,
            Hair_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IHairInternal lhs,
            IHairGetter rhs,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((HairSetterTranslationCommon)((IHairGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Hair_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IHairInternal lhs,
            IHairGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((HairSetterTranslationCommon)((IHairGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Hair DeepCopy(
            this IHairGetter item,
            Hair_TranslationMask copyMask = null)
        {
            return ((HairSetterTranslationCommon)((IHairGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Hair DeepCopy(
            this IHairGetter item,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask copyMask = null)
        {
            return ((HairSetterTranslationCommon)((IHairGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Hair DeepCopy(
            this IHairGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((HairSetterTranslationCommon)((IHairGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHairInternal item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHairInternal item,
            XElement node,
            out Hair_ErrorMask errorMask,
            bool doMasks = true,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Hair_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((HairSetterCommon)((IHairGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            string path,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            string path,
            ErrorMaskBuilder errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Hair_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            Stream stream,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHairInternal item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Hair_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IHairInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IHairInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((HairSetterCommon)((IHairGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Hair_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
    }
    #endregion

    #region Registration
    public partial class Hair_Registration : ILoquiRegistration
    {
        public static readonly Hair_Registration Instance = new Hair_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 46,
            version: 0);

        public const string GUID = "988d2dff-b06c-4859-9926-7c3b525ac3ca";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Hair_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Hair_ErrorMask);

        public static readonly Type ClassType = typeof(Hair);

        public static readonly Type GetterType = typeof(IHairGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHair);

        public static readonly Type InternalSetterType = typeof(IHairInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Hair";

        public const string Name = "Hair";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(HairXmlWriteTranslation);
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HAIR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(HairBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HairSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly HairSetterCommon Instance = new HairSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHairInternal item)
        {
            ClearPartial();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IHairInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHairInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IHairInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IHairInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    HairXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Hair_Registration.HAIR_HEADER;
        protected static void FillBinaryStructs(
            IHairInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        public void CopyInFromBinary(
            IHairInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IHairInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class HairCommon : SkyrimMajorRecordCommon
    {
        public new static readonly HairCommon Instance = new HairCommon();

        public Hair_Mask<bool> GetEqualsMask(
            IHairGetter item,
            IHairGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Hair_Mask<bool>();
            ((HairCommon)((IHairGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHairGetter item,
            IHairGetter rhs,
            Hair_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IHairGetter item,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHairGetter item,
            FileGeneration fg,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Hair =>");
            }
            else
            {
                fg.AppendLine($"{name} (Hair) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHairGetter item,
            FileGeneration fg,
            Hair_Mask<bool> printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
        }
        
        public bool HasBeenSet(
            IHairGetter item,
            Hair_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IHairGetter item,
            Hair_Mask<bool> mask)
        {
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Hair_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Hair_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Hair_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Hair_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hair_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Hair_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Hair_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Hair_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHairGetter lhs,
            IHairGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter lhs,
            ISkyrimMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IHairGetter)lhs,
                rhs: rhs as IHairGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter lhs,
            IMajorRecordGetter rhs)
        {
            return Equals(
                lhs: (IHairGetter)lhs,
                rhs: rhs as IHairGetter);
        }
        
        public virtual int GetHashCode(IHairGetter item)
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IHairGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHairGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Hair.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IHairGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Hair obj, Hair rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new Hair(getNextFormKey());
            ret.DeepCopyFieldsFrom((Hair)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Hair)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class HairSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly HairSetterTranslationCommon Instance = new HairSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IHairInternal item,
            IHairGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyFieldsFrom(
            IHair item,
            IHairGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            base.DeepCopyFieldsFrom(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IHairInternal)item,
                rhs: (IHairGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IHair)item,
                rhs: (IHairGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IHairInternal)item,
                rhs: (IHairGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            this.DeepCopyFieldsFrom(
                item: (IHair)item,
                rhs: (IHairGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Hair DeepCopy(
            IHairGetter item,
            Hair_TranslationMask copyMask = null)
        {
            Hair ret = (Hair)((HairCommon)((IHairGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Hair DeepCopy(
            IHairGetter item,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask copyMask = null)
        {
            Hair ret = (Hair)((HairCommon)((IHairGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Hair DeepCopy(
            IHairGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Hair ret = (Hair)((HairCommon)((IHairGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Hair
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hair_Registration.Instance;
        public new static Hair_Registration Registration => Hair_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HairCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HairSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HairSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HairXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static HairXmlWriteTranslation Instance = new HairXmlWriteTranslation();

        public static void WriteToNodeXml(
            IHairGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IHairGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Hair");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Hair");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IHairGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IHairGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IHairGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class HairXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static HairXmlCreateTranslation Instance = new HairXmlCreateTranslation();

        public static void FillPublicXml(
            IHairInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HairXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IHairInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class HairXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IHairGetter item,
            XElement node,
            out Hair_ErrorMask errorMask,
            bool doMasks = true,
            Hair_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((HairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Hair_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IHairGetter item,
            string path,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHairGetter item,
            Stream stream,
            out Hair_ErrorMask errorMask,
            Hair_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class Hair_Mask<T> : SkyrimMajorRecord_Mask<T>, IMask<T>, IEquatable<Hair_Mask<T>>
    {
        #region Ctors
        public Hair_Mask()
        {
        }

        public Hair_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Hair_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Hair_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Hair_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Hair_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Hair_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Hair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Hair_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Hair_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Hair_ErrorMask : SkyrimMajorRecord_ErrorMask, IErrorMask<Hair_ErrorMask>
    {
        #region IErrorMask
        public override object GetNthMask(int index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Hair_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public Hair_ErrorMask Combine(Hair_ErrorMask rhs)
        {
            var ret = new Hair_ErrorMask();
            return ret;
        }
        public static Hair_ErrorMask Combine(Hair_ErrorMask lhs, Hair_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static new Hair_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Hair_ErrorMask();
        }
        #endregion

    }
    public class Hair_TranslationMask : SkyrimMajorRecord_TranslationMask
    {
        #region Ctors
        public Hair_TranslationMask()
            : base()
        {
        }

        public Hair_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
        }

        #endregion

    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HairBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static HairBinaryWriteTranslation Instance = new HairBinaryWriteTranslation();

        public void Write(
            MutagenWriter writer,
            IHairGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Hair_Registration.HAIR_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IHairGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IHairGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IHairGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HairBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static HairBinaryCreateTranslation Instance = new HairBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HairBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HairBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IHairGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hair_Registration.Instance;
        public new static Hair_Registration Registration => Hair_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HairCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HairSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHairGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => HairXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((HairXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HairBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((HairBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected HairBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static HairBinaryOverlay HairFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new HairBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

    }

}
#endregion

#endregion

