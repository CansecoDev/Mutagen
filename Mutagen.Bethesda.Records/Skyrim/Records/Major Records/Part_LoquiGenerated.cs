/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Part :
        IPart,
        ILoquiObjectSetter<Part>,
        IEquatable<Part>,
        IEqualsMask
    {
        #region Ctor
        public Part()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PartType
        public bool PartType_IsSet
        {
            get => _hasBeenSetTracker[(int)Part_FieldIndex.PartType];
            set => _hasBeenSetTracker[(int)Part_FieldIndex.PartType] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IPartGetter.PartType_IsSet => PartType_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Part.PartTypeEnum _PartType;
        public Part.PartTypeEnum PartType
        {
            get => this._PartType;
            set => PartType_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Part.PartTypeEnum IPartGetter.PartType => this.PartType;
        public void PartType_Set(
            Part.PartTypeEnum value,
            bool markSet = true)
        {
            _PartType = value;
            _hasBeenSetTracker[(int)Part_FieldIndex.PartType] = markSet;
        }
        public void PartType_Unset()
        {
            this.PartType_Set(default(Part.PartTypeEnum), false);
        }
        #endregion
        #region FileName
        public bool FileName_IsSet
        {
            get => _hasBeenSetTracker[(int)Part_FieldIndex.FileName];
            set => _hasBeenSetTracker[(int)Part_FieldIndex.FileName] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IPartGetter.FileName_IsSet => FileName_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _FileName;
        public String FileName
        {
            get => this._FileName;
            set => FileName_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IPartGetter.FileName => this.FileName;
        public void FileName_Set(
            String value,
            bool markSet = true)
        {
            _FileName = value;
            _hasBeenSetTracker[(int)Part_FieldIndex.FileName] = markSet;
        }
        public void FileName_Unset()
        {
            this.FileName_Set(default(String), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPartGetter rhs)) return false;
            return ((PartCommon)((IPartGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Part obj)
        {
            return ((PartCommon)((IPartGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((PartCommon)((IPartGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PartXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Part CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Part CreateFromXml(
            XElement node,
            out Part_ErrorMask errorMask,
            bool doMasks = true,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Part_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Part CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Part() : null;
                    break;
                default:
                    break;
            }
            var ret = new Part();
            ((PartSetterCommon)((IPartGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Part CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Part CreateFromXml(
            string path,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Part CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Part CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Part CreateFromXml(
            Stream stream,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Part CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Part_FieldIndex)index)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((PartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Part CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Part CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Part();
            ((PartSetterCommon)((IPartGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPartGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PartSetterCommon)((IPartGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Part GetNew()
        {
            return new Part();
        }

    }
    #endregion

    #region Interface
    public partial interface IPart :
        IPartGetter,
        ILoquiObjectSetter<IPart>
    {
        new Part.PartTypeEnum PartType { get; set; }
        new bool PartType_IsSet { get; set; }
        void PartType_Set(Part.PartTypeEnum value, bool hasBeenSet = true);
        void PartType_Unset();

        new String FileName { get; set; }
        new bool FileName_IsSet { get; set; }
        void FileName_Set(String value, bool hasBeenSet = true);
        void FileName_Unset();

    }

    public partial interface IPartGetter :
        ILoquiObject,
        ILoquiObject<IPartGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region PartType
        Part.PartTypeEnum PartType { get; }
        bool PartType_IsSet { get; }

        #endregion
        #region FileName
        String FileName { get; }
        bool FileName_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class PartMixIn
    {
        public static void Clear(this IPart item)
        {
            ((PartSetterCommon)((IPartGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Part_Mask<bool> GetEqualsMask(
            this IPartGetter item,
            IPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPartGetter item,
            string name = null,
            Part_Mask<bool> printMask = null)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPartGetter item,
            FileGeneration fg,
            string name = null,
            Part_Mask<bool> printMask = null)
        {
            ((PartCommon)((IPartGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPartGetter item,
            Part_Mask<bool?> checkMask)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Part_Mask<bool> GetHasBeenSetMask(this IPartGetter item)
        {
            var ret = new Part_Mask<bool>();
            ((PartCommon)((IPartGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPartGetter item,
            IPartGetter rhs)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IPart lhs,
            IPartGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IPart lhs,
            IPartGetter rhs,
            Part_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IPart lhs,
            IPartGetter rhs,
            out Part_ErrorMask errorMask,
            Part_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Part_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IPart lhs,
            IPartGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            Part_TranslationMask copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            out Part_ErrorMask errorMask,
            Part_TranslationMask copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPart item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPart item,
            XElement node,
            out Part_ErrorMask errorMask,
            bool doMasks = true,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Part_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((PartSetterCommon)((IPartGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPart item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPart item,
            string path,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPart item,
            string path,
            ErrorMaskBuilder errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPart item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Part_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPart item,
            Stream stream,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPart item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Part_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPart item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((PartSetterCommon)((IPartGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Part_FieldIndex
    {
        PartType = 0,
        FileName = 1,
    }
    #endregion

    #region Registration
    public partial class Part_Registration : ILoquiRegistration
    {
        public static readonly Part_Registration Instance = new Part_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 45,
            version: 0);

        public const string GUID = "c4ffaf8a-c25b-42cd-aab4-35f7c641b1e8";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Part_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Part_ErrorMask);

        public static readonly Type ClassType = typeof(Part);

        public static readonly Type GetterType = typeof(IPartGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPart);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Part";

        public const string Name = "Part";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "PARTTYPE":
                    return (ushort)Part_FieldIndex.PartType;
                case "FILENAME":
                    return (ushort)Part_FieldIndex.FileName;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                    return "PartType";
                case Part_FieldIndex.FileName:
                    return "FileName";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                case Part_FieldIndex.FileName:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                    return typeof(Part.PartTypeEnum);
                case Part_FieldIndex.FileName:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PartXmlWriteTranslation);
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        NAM0_HEADER,
                        NAM1_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(PartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PartSetterCommon
    {
        public static readonly PartSetterCommon Instance = new PartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPart item)
        {
            ClearPartial();
            item.PartType_Unset();
            item.FileName_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IPart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IPart item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IPart item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x304D414E: // NAM0
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.PartType) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PartType = EnumBinaryTranslation<Part.PartTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Part_FieldIndex.PartType);
                }
                case 0x314D414E: // NAM1
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.FileName) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FileName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Part_FieldIndex.FileName);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IPart item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PartCommon
    {
        public static readonly PartCommon Instance = new PartCommon();

        public Part_Mask<bool> GetEqualsMask(
            IPartGetter item,
            IPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Part_Mask<bool>();
            ((PartCommon)((IPartGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPartGetter item,
            IPartGetter rhs,
            Part_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.PartType = item.PartType_IsSet == rhs.PartType_IsSet && item.PartType == rhs.PartType;
            ret.FileName = item.FileName_IsSet == rhs.FileName_IsSet && string.Equals(item.FileName, rhs.FileName);
        }
        
        public string ToString(
            IPartGetter item,
            string name = null,
            Part_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPartGetter item,
            FileGeneration fg,
            string name = null,
            Part_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Part =>");
            }
            else
            {
                fg.AppendLine($"{name} (Part) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPartGetter item,
            FileGeneration fg,
            Part_Mask<bool> printMask = null)
        {
            if (printMask?.PartType ?? true)
            {
                fg.AppendLine($"PartType => {item.PartType}");
            }
            if (printMask?.FileName ?? true)
            {
                fg.AppendLine($"FileName => {item.FileName}");
            }
        }
        
        public bool HasBeenSet(
            IPartGetter item,
            Part_Mask<bool?> checkMask)
        {
            if (checkMask.PartType.HasValue && checkMask.PartType.Value != item.PartType_IsSet) return false;
            if (checkMask.FileName.HasValue && checkMask.FileName.Value != item.FileName_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPartGetter item,
            Part_Mask<bool> mask)
        {
            mask.PartType = item.PartType_IsSet;
            mask.FileName = item.FileName_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPartGetter lhs,
            IPartGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.PartType_IsSet != rhs.PartType_IsSet) return false;
            if (lhs.PartType_IsSet)
            {
                if (lhs.PartType != rhs.PartType) return false;
            }
            if (lhs.FileName_IsSet != rhs.FileName_IsSet) return false;
            if (lhs.FileName_IsSet)
            {
                if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPartGetter item)
        {
            int ret = 0;
            if (item.PartType_IsSet)
            {
                ret = HashHelper.GetHashCode(item.PartType).CombineHashCode(ret);
            }
            if (item.FileName_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FileName).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Part.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPartGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PartSetterTranslationCommon
    {
        public static readonly PartSetterTranslationCommon Instance = new PartSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IPart item,
            IPartGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Part_FieldIndex.PartType) ?? true))
            {
                errorMask?.PushIndex((int)Part_FieldIndex.PartType);
                try
                {
                    if (rhs.PartType_IsSet)
                    {
                        item.PartType = rhs.PartType;
                    }
                    else
                    {
                        item.PartType_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Part_FieldIndex.FileName) ?? true))
            {
                errorMask?.PushIndex((int)Part_FieldIndex.FileName);
                try
                {
                    if (rhs.FileName_IsSet)
                    {
                        item.FileName = rhs.FileName;
                    }
                    else
                    {
                        item.FileName_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Part DeepCopy(
            IPartGetter item,
            Part_TranslationMask copyMask = null)
        {
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Part DeepCopy(
            IPartGetter item,
            out Part_ErrorMask errorMask,
            Part_TranslationMask copyMask = null)
        {
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Part DeepCopy(
            IPartGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Part
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Part_Registration.Instance;
        public static Part_Registration Registration => Part_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PartXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PartXmlWriteTranslation Instance = new PartXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPartGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.PartType_IsSet
                && (translationMask?.GetShouldTranslate((int)Part_FieldIndex.PartType) ?? true))
            {
                EnumXmlTranslation<Part.PartTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.PartType),
                    item: item.PartType,
                    fieldIndex: (int)Part_FieldIndex.PartType,
                    errorMask: errorMask);
            }
            if (item.FileName_IsSet
                && (translationMask?.GetShouldTranslate((int)Part_FieldIndex.FileName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FileName),
                    item: item.FileName,
                    fieldIndex: (int)Part_FieldIndex.FileName,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPartGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Part");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Part");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPartGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPartGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IPartGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PartXmlCreateTranslation
    {
        public readonly static PartXmlCreateTranslation Instance = new PartXmlCreateTranslation();

        public static void FillPublicXml(
            IPart item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPart item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "PartType":
                    try
                    {
                        errorMask?.PushIndex((int)Part_FieldIndex.PartType);
                        item.PartType = EnumXmlTranslation<Part.PartTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FileName":
                    try
                    {
                        errorMask?.PushIndex((int)Part_FieldIndex.FileName);
                        item.FileName = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class PartXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPartGetter item,
            XElement node,
            out Part_ErrorMask errorMask,
            bool doMasks = true,
            Part_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Part_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPartGetter item,
            string path,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPartGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPartGetter item,
            Stream stream,
            out Part_ErrorMask errorMask,
            Part_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPartGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPartGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((PartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPartGetter item,
            XElement node,
            string name = null,
            Part_TranslationMask translationMask = null)
        {
            ((PartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IPartGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPartGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class Part_Mask<T> : IMask<T>, IEquatable<Part_Mask<T>>
    {
        #region Ctors
        public Part_Mask()
        {
        }

        public Part_Mask(T initialValue)
        {
            this.PartType = initialValue;
            this.FileName = initialValue;
        }
        #endregion

        #region Members
        public T PartType;
        public T FileName;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Part_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Part_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.PartType, rhs.PartType)) return false;
            if (!object.Equals(this.FileName, rhs.FileName)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.PartType?.GetHashCode());
            ret = ret.CombineHashCode(this.FileName?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.PartType)) return false;
            if (!eval(this.FileName)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Part_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Part_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Part_Mask<R> obj, Func<T, R> eval)
        {
            obj.PartType = eval(this.PartType);
            obj.FileName = eval(this.FileName);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Part_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Part_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Part_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.PartType ?? true)
                {
                    fg.AppendLine($"PartType => {PartType}");
                }
                if (printMask?.FileName ?? true)
                {
                    fg.AppendLine($"FileName => {FileName}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Part_ErrorMask : IErrorMask, IErrorMask<Part_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception PartType;
        public Exception FileName;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                    return PartType;
                case Part_FieldIndex.FileName:
                    return FileName;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                    this.PartType = ex;
                    break;
                case Part_FieldIndex.FileName:
                    this.FileName = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Part_FieldIndex enu = (Part_FieldIndex)index;
            switch (enu)
            {
                case Part_FieldIndex.PartType:
                    this.PartType = (Exception)obj;
                    break;
                case Part_FieldIndex.FileName:
                    this.FileName = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (PartType != null) return true;
            if (FileName != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Part_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"PartType => {PartType}");
            fg.AppendLine($"FileName => {FileName}");
        }
        #endregion

        #region Combine
        public Part_ErrorMask Combine(Part_ErrorMask rhs)
        {
            var ret = new Part_ErrorMask();
            ret.PartType = this.PartType.Combine(rhs.PartType);
            ret.FileName = this.FileName.Combine(rhs.FileName);
            return ret;
        }
        public static Part_ErrorMask Combine(Part_ErrorMask lhs, Part_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Part_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Part_ErrorMask();
        }
        #endregion

    }
    public class Part_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool PartType;
        public bool FileName;
        #endregion

        #region Ctors
        public Part_TranslationMask()
        {
        }

        public Part_TranslationMask(bool defaultOn)
        {
            this.PartType = defaultOn;
            this.FileName = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((PartType, null));
            ret.Add((FileName, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PartBinaryWriteTranslation Instance = new PartBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IPartGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            if (item.PartType_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Part.PartTypeEnum>.Instance.Write(
                    writer,
                    item.PartType,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(Part_Registration.NAM0_HEADER),
                    nullable: false);
            }
            if (item.FileName_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FileName,
                    header: recordTypeConverter.ConvertToCustom(Part_Registration.NAM1_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
        }

        public void Write(
            MutagenWriter writer,
            IPartGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IPartGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PartBinaryCreateTranslation
    {
        public readonly static PartBinaryCreateTranslation Instance = new PartBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPartGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((PartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PartBinaryOverlay :
        BinaryOverlay,
        IPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Part_Registration.Instance;
        public static Part_Registration Registration => Part_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPartGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PartXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((PartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((PartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region PartType
        private int? _PartTypeLocation;
        public bool PartType_IsSet => _PartTypeLocation.HasValue;
        public Part.PartTypeEnum PartType => (Part.PartTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PartTypeLocation.Value, _package.Meta));
        #endregion
        #region FileName
        private int? _FileNameLocation;
        public bool FileName_IsSet => _FileNameLocation.HasValue;
        public String FileName => _FileNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FileNameLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PartBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PartBinaryOverlay PartFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new PartBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x304D414E: // NAM0
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.PartType) return TryGet<int?>.Failure;
                    _PartTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Part_FieldIndex.PartType);
                }
                case 0x314D414E: // NAM1
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.FileName) return TryGet<int?>.Failure;
                    _FileNameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Part_FieldIndex.FileName);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

