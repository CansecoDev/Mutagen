/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Race :
        SkyrimMajorRecord,
        IRaceInternal,
        ILoquiObjectSetter<Race>,
        INamed,
        IEquatable<Race>,
        IEqualsMask
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Description => this.Description;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<SpellAbstract>> _ActorEffect = new SetList<IFormLink<SpellAbstract>>();
        public ISetList<IFormLink<SpellAbstract>> ActorEffect => _ActorEffect;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<SpellAbstract>> IRace.ActorEffect => _ActorEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Armor> _Skin = new FormLinkNullable<Armor>();
        public IFormLinkNullable<Armor> Skin => this._Skin;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IRaceGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Keyword>> _Keywords = new SetList<IFormLink<Keyword>>();
        public ISetList<IFormLink<Keyword>> Keywords => _Keywords;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Keyword>> IRace.Keywords => _Keywords;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IKeywordGetter>> IRaceGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RaceData? _Data;
        public RaceData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceDataGetter? IRaceGetter.Data => this.Data;
        #endregion
        #region MaleSkeletalModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MaleSkeletalModel;
        public String? MaleSkeletalModel
        {
            get => this._MaleSkeletalModel;
            set => this._MaleSkeletalModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.MaleSkeletalModel => this.MaleSkeletalModel;
        #endregion
        #region FemaleSkeletalModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _FemaleSkeletalModel;
        public String? FemaleSkeletalModel
        {
            get => this._FemaleSkeletalModel;
            set => this._FemaleSkeletalModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.FemaleSkeletalModel => this.FemaleSkeletalModel;
        #endregion
        #region MovementTypeNames
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<String> _MovementTypeNames = new SetList<String>();
        public ISetList<String> MovementTypeNames => _MovementTypeNames;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<String> IRace.MovementTypeNames => _MovementTypeNames;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<String> IRaceGetter.MovementTypeNames => _MovementTypeNames;
        #endregion

        #endregion
        #region Voices
        public GenderedItem<IFormLink<VoiceType>>? Voices { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>>? IRaceGetter.Voices => this.Voices;
        #endregion
        #region DecapitateArmors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenderedFormLinks<Armor>? _DecapitateArmors;
        public GenderedFormLinks<Armor>? DecapitateArmors
        {
            get => _DecapitateArmors;
            set => _DecapitateArmors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGenderedFormLinksGetter<IArmorGetter>? IRaceGetter.DecapitateArmors => this.DecapitateArmors;
        #endregion
        #region DefaultHairColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GenderedFormLinks<ColorRecord>? _DefaultHairColors;
        public GenderedFormLinks<ColorRecord>? DefaultHairColors
        {
            get => _DefaultHairColors;
            set => _DefaultHairColors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGenderedFormLinksGetter<IColorRecordGetter>? IRaceGetter.DefaultHairColors => this.DefaultHairColors;
        #endregion
        #region NumberOfTintsInList
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _NumberOfTintsInList;
        public UInt16? NumberOfTintsInList
        {
            get => this._NumberOfTintsInList;
            set => this._NumberOfTintsInList = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IRaceGetter.NumberOfTintsInList => this.NumberOfTintsInList;
        #endregion
        #region FacegenMainClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _FacegenMainClamp;
        public Single? FacegenMainClamp
        {
            get => this._FacegenMainClamp;
            set => this._FacegenMainClamp = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.FacegenMainClamp => this.FacegenMainClamp;
        #endregion
        #region FacegenFaceClamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _FacegenFaceClamp;
        public Single? FacegenFaceClamp
        {
            get => this._FacegenFaceClamp;
            set => this._FacegenFaceClamp = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.FacegenFaceClamp => this.FacegenFaceClamp;
        #endregion
        #region AttackRace
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Race> _AttackRace = new FormLinkNullable<Race>();
        public IFormLinkNullable<Race> AttackRace => this._AttackRace;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<Attack> _Attacks = new SetList<Attack>();
        public ISetList<Attack> Attacks => _Attacks;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<Attack> IRace.Attacks => _Attacks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IAttackGetter> IRaceGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region BodyData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyDataPair? _BodyData;
        public BodyDataPair? BodyData
        {
            get => _BodyData;
            set => _BodyData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyDataPairGetter? IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Hair>> _Hairs = new SetList<IFormLink<Hair>>();
        public ISetList<IFormLink<Hair>> Hairs => _Hairs;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Hair>> IRace.Hairs => _Hairs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IHairGetter>> IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SetList<IFormLink<Eye>> _Eyes = new SetList<IFormLink<Eye>>();
        public ISetList<IFormLink<Eye>> Eyes => _Eyes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISetList<IFormLink<Eye>> IRace.Eyes => _Eyes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region BodyPartData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<BodyPartData> _BodyPartData = new FormLinkNullable<BodyPartData>();
        public IFormLinkNullable<BodyPartData> BodyPartData => this._BodyPartData;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IRaceGetter.BodyPartData => this.BodyPartData;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRaceGetter rhs)) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Race obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Race CreateFromXml(
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Race CreateFromXml(
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Race CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Race CreateFromXml(
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Race CreateFromXml(
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            SkyrimMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Skin = initialValue;
                this.BodyTemplate = new MaskItem<T, BodyTemplate.Mask<T>?>(initialValue, new BodyTemplate.Mask<T>(initialValue));
                this.Keywords = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Data = new MaskItem<T, RaceData.Mask<T>?>(initialValue, new RaceData.Mask<T>(initialValue));
                this.MaleSkeletalModel = initialValue;
                this.FemaleSkeletalModel = initialValue;
                this.MovementTypeNames = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Voices = new MaskItem<T, GenderedItem<T>?>(initialValue, default);
                this.DecapitateArmors = new MaskItem<T, GenderedFormLinks.Mask<T>?>(initialValue, new GenderedFormLinks.Mask<T>(initialValue));
                this.DefaultHairColors = new MaskItem<T, GenderedFormLinks.Mask<T>?>(initialValue, new GenderedFormLinks.Mask<T>(initialValue));
                this.NumberOfTintsInList = initialValue;
                this.FacegenMainClamp = initialValue;
                this.FacegenFaceClamp = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Attack.Mask<T>?>>>(initialValue, Enumerable.Empty<MaskItemIndexed<T, Attack.Mask<T>?>>());
                this.BodyData = new MaskItem<T, BodyDataPair.Mask<T>?>(initialValue, new BodyDataPair.Mask<T>(initialValue));
                this.Hairs = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, Enumerable.Empty<(int Index, T Value)>());
                this.BodyPartData = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T SkyrimMajorRecordFlags,
                T FormVersion,
                T Version2,
                T Name,
                T Description,
                T ActorEffect,
                T Skin,
                T BodyTemplate,
                T Keywords,
                T Data,
                T MaleSkeletalModel,
                T FemaleSkeletalModel,
                T MovementTypeNames,
                T Voices,
                T DecapitateArmors,
                T DefaultHairColors,
                T NumberOfTintsInList,
                T FacegenMainClamp,
                T FacegenFaceClamp,
                T AttackRace,
                T Attacks,
                T BodyData,
                T Hairs,
                T Eyes,
                T BodyPartData)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<T, IEnumerable<(int Index, T Value)>>(ActorEffect, Enumerable.Empty<(int Index, T Value)>());
                this.Skin = Skin;
                this.BodyTemplate = new MaskItem<T, BodyTemplate.Mask<T>?>(BodyTemplate, new BodyTemplate.Mask<T>(BodyTemplate));
                this.Keywords = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Keywords, Enumerable.Empty<(int Index, T Value)>());
                this.Data = new MaskItem<T, RaceData.Mask<T>?>(Data, new RaceData.Mask<T>(Data));
                this.MaleSkeletalModel = MaleSkeletalModel;
                this.FemaleSkeletalModel = FemaleSkeletalModel;
                this.MovementTypeNames = new MaskItem<T, IEnumerable<(int Index, T Value)>>(MovementTypeNames, Enumerable.Empty<(int Index, T Value)>());
                this.Voices = new MaskItem<T, GenderedItem<T>?>(Voices, default);
                this.DecapitateArmors = new MaskItem<T, GenderedFormLinks.Mask<T>?>(DecapitateArmors, new GenderedFormLinks.Mask<T>(DecapitateArmors));
                this.DefaultHairColors = new MaskItem<T, GenderedFormLinks.Mask<T>?>(DefaultHairColors, new GenderedFormLinks.Mask<T>(DefaultHairColors));
                this.NumberOfTintsInList = NumberOfTintsInList;
                this.FacegenMainClamp = FacegenMainClamp;
                this.FacegenFaceClamp = FacegenFaceClamp;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Attack.Mask<T>?>>>(Attacks, Enumerable.Empty<MaskItemIndexed<T, Attack.Mask<T>?>>());
                this.BodyData = new MaskItem<T, BodyDataPair.Mask<T>?>(BodyData, new BodyDataPair.Mask<T>(BodyData));
                this.Hairs = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Hairs, Enumerable.Empty<(int Index, T Value)>());
                this.Eyes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(Eyes, Enumerable.Empty<(int Index, T Value)>());
                this.BodyPartData = BodyPartData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Name;
            public T Description;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? ActorEffect;
            public T Skin;
            public MaskItem<T, BodyTemplate.Mask<T>?>? BodyTemplate { get; set; }
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Keywords;
            public MaskItem<T, RaceData.Mask<T>?>? Data { get; set; }
            public T MaleSkeletalModel;
            public T FemaleSkeletalModel;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? MovementTypeNames;
            public MaskItem<T, GenderedItem<T>?>? Voices;
            public MaskItem<T, GenderedFormLinks.Mask<T>?>? DecapitateArmors { get; set; }
            public MaskItem<T, GenderedFormLinks.Mask<T>?>? DefaultHairColors { get; set; }
            public T NumberOfTintsInList;
            public T FacegenMainClamp;
            public T FacegenFaceClamp;
            public T AttackRace;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, Attack.Mask<T>?>>>? Attacks;
            public MaskItem<T, BodyDataPair.Mask<T>?>? BodyData { get; set; }
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Hairs;
            public MaskItem<T, IEnumerable<(int Index, T Value)>>? Eyes;
            public T BodyPartData;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.MaleSkeletalModel, rhs.MaleSkeletalModel)) return false;
                if (!object.Equals(this.FemaleSkeletalModel, rhs.FemaleSkeletalModel)) return false;
                if (!object.Equals(this.MovementTypeNames, rhs.MovementTypeNames)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DecapitateArmors, rhs.DecapitateArmors)) return false;
                if (!object.Equals(this.DefaultHairColors, rhs.DefaultHairColors)) return false;
                if (!object.Equals(this.NumberOfTintsInList, rhs.NumberOfTintsInList)) return false;
                if (!object.Equals(this.FacegenMainClamp, rhs.FacegenMainClamp)) return false;
                if (!object.Equals(this.FacegenFaceClamp, rhs.FacegenFaceClamp)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.ActorEffect?.GetHashCode());
                ret = ret.CombineHashCode(this.Skin?.GetHashCode());
                ret = ret.CombineHashCode(this.BodyTemplate?.GetHashCode());
                ret = ret.CombineHashCode(this.Keywords?.GetHashCode());
                ret = ret.CombineHashCode(this.Data?.GetHashCode());
                ret = ret.CombineHashCode(this.MaleSkeletalModel?.GetHashCode());
                ret = ret.CombineHashCode(this.FemaleSkeletalModel?.GetHashCode());
                ret = ret.CombineHashCode(this.MovementTypeNames?.GetHashCode());
                ret = ret.CombineHashCode(this.Voices?.GetHashCode());
                ret = ret.CombineHashCode(this.DecapitateArmors?.GetHashCode());
                ret = ret.CombineHashCode(this.DefaultHairColors?.GetHashCode());
                ret = ret.CombineHashCode(this.NumberOfTintsInList?.GetHashCode());
                ret = ret.CombineHashCode(this.FacegenMainClamp?.GetHashCode());
                ret = ret.CombineHashCode(this.FacegenFaceClamp?.GetHashCode());
                ret = ret.CombineHashCode(this.AttackRace?.GetHashCode());
                ret = ret.CombineHashCode(this.Attacks?.GetHashCode());
                ret = ret.CombineHashCode(this.BodyData?.GetHashCode());
                ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
                ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
                ret = ret.CombineHashCode(this.BodyPartData?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public override bool AllEqual(Func<T, bool> eval)
            {
                if (!base.AllEqual(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.AllEqual(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.MaleSkeletalModel)) return false;
                if (!eval(this.FemaleSkeletalModel)) return false;
                if (this.MovementTypeNames != null)
                {
                    if (!eval(this.MovementTypeNames.Overall)) return false;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Voices?.Specific != null && (!eval(this.Voices.Specific.Male) || !eval(this.Voices.Specific.Female))) return false;
                if (DecapitateArmors != null)
                {
                    if (!eval(this.DecapitateArmors.Overall)) return false;
                    if (this.DecapitateArmors.Specific != null && !this.DecapitateArmors.Specific.AllEqual(eval)) return false;
                }
                if (DefaultHairColors != null)
                {
                    if (!eval(this.DefaultHairColors.Overall)) return false;
                    if (this.DefaultHairColors.Specific != null && !this.DefaultHairColors.Specific.AllEqual(eval)) return false;
                }
                if (!eval(this.NumberOfTintsInList)) return false;
                if (!eval(this.FacegenMainClamp)) return false;
                if (!eval(this.FacegenFaceClamp)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                        }
                    }
                }
                if (BodyData != null)
                {
                    if (!eval(this.BodyData.Overall)) return false;
                    if (this.BodyData.Specific != null && !this.BodyData.Specific.AllEqual(eval)) return false;
                }
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BodyPartData)) return false;
                return true;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, RaceData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.MaleSkeletalModel = eval(this.MaleSkeletalModel);
                obj.FemaleSkeletalModel = eval(this.FemaleSkeletalModel);
                if (MovementTypeNames != null)
                {
                    obj.MovementTypeNames = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.MovementTypeNames.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MovementTypeNames.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MovementTypeNames.Specific = l;
                        foreach (var item in MovementTypeNames.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (this.Voices == null)
                {
                    obj.Voices = null;
                }
                else
                {
                    var spec = this.Voices.Specific == null ? null : new GenderedItem<R>(eval(this.Voices.Specific.Male), eval(this.Voices.Specific.Female));
                    obj.Voices = new MaskItem<R, GenderedItem<R>?>(eval(this.Voices.Overall), spec);
                }
                obj.DecapitateArmors = this.DecapitateArmors == null ? null : new MaskItem<R, GenderedFormLinks.Mask<R>?>(eval(this.DecapitateArmors.Overall), this.DecapitateArmors.Specific?.Translate(eval));
                obj.DefaultHairColors = this.DefaultHairColors == null ? null : new MaskItem<R, GenderedFormLinks.Mask<R>?>(eval(this.DefaultHairColors.Overall), this.DefaultHairColors.Specific?.Translate(eval));
                obj.NumberOfTintsInList = eval(this.NumberOfTintsInList);
                obj.FacegenMainClamp = eval(this.FacegenMainClamp);
                obj.FacegenFaceClamp = eval(this.FacegenFaceClamp);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = this.BodyData == null ? null : new MaskItem<R, BodyDataPair.Mask<R>?>(eval(this.BodyData.Overall), this.BodyData.Specific?.Translate(eval));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BodyPartData = eval(this.BodyPartData);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Race.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Race.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Race.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendLine($"Name => {Name}");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendLine($"Description => {Description}");
                    }
                    if (printMask?.ActorEffect?.Overall ?? true)
                    {
                        fg.AppendLine("ActorEffect =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (ActorEffect != null)
                            {
                                if (ActorEffect.Overall != null)
                                {
                                    fg.AppendLine(ActorEffect.Overall.ToString());
                                }
                                if (ActorEffect.Specific != null)
                                {
                                    foreach (var subItem in ActorEffect.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Skin ?? true)
                    {
                        fg.AppendLine($"Skin => {Skin}");
                    }
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.ToString(fg);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Keywords != null)
                            {
                                if (Keywords.Overall != null)
                                {
                                    fg.AppendLine(Keywords.Overall.ToString());
                                }
                                if (Keywords.Specific != null)
                                {
                                    foreach (var subItem in Keywords.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.MaleSkeletalModel ?? true)
                    {
                        fg.AppendLine($"MaleSkeletalModel => {MaleSkeletalModel}");
                    }
                    if (printMask?.FemaleSkeletalModel ?? true)
                    {
                        fg.AppendLine($"FemaleSkeletalModel => {FemaleSkeletalModel}");
                    }
                    if (printMask?.MovementTypeNames?.Overall ?? true)
                    {
                        fg.AppendLine("MovementTypeNames =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (MovementTypeNames != null)
                            {
                                if (MovementTypeNames.Overall != null)
                                {
                                    fg.AppendLine(MovementTypeNames.Overall.ToString());
                                }
                                if (MovementTypeNames.Specific != null)
                                {
                                    foreach (var subItem in MovementTypeNames.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Voices?.Overall ?? true)
                    {
                        if (Voices != null)
                        {
                            fg.AppendLine($"Voices => {Voices}");
                        }
                    }
                    if (printMask?.DecapitateArmors?.Overall ?? true)
                    {
                        DecapitateArmors?.ToString(fg);
                    }
                    if (printMask?.DefaultHairColors?.Overall ?? true)
                    {
                        DefaultHairColors?.ToString(fg);
                    }
                    if (printMask?.NumberOfTintsInList ?? true)
                    {
                        fg.AppendLine($"NumberOfTintsInList => {NumberOfTintsInList}");
                    }
                    if (printMask?.FacegenMainClamp ?? true)
                    {
                        fg.AppendLine($"FacegenMainClamp => {FacegenMainClamp}");
                    }
                    if (printMask?.FacegenFaceClamp ?? true)
                    {
                        fg.AppendLine($"FacegenFaceClamp => {FacegenFaceClamp}");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        fg.AppendLine($"AttackRace => {AttackRace}");
                    }
                    if (printMask?.Attacks?.Overall ?? true)
                    {
                        fg.AppendLine("Attacks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Attacks != null)
                            {
                                if (Attacks.Overall != null)
                                {
                                    fg.AppendLine(Attacks.Overall.ToString());
                                }
                                if (Attacks.Specific != null)
                                {
                                    foreach (var subItem in Attacks.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem?.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BodyData?.Overall ?? true)
                    {
                        BodyData?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        fg.AppendLine("Hairs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Hairs != null)
                            {
                                if (Hairs.Overall != null)
                                {
                                    fg.AppendLine(Hairs.Overall.ToString());
                                }
                                if (Hairs.Specific != null)
                                {
                                    foreach (var subItem in Hairs.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Eyes != null)
                            {
                                if (Eyes.Overall != null)
                                {
                                    fg.AppendLine(Eyes.Overall.ToString());
                                }
                                if (Eyes.Specific != null)
                                {
                                    foreach (var subItem in Eyes.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        fg.AppendLine($"BodyPartData => {BodyPartData}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, RaceData.ErrorMask?>? Data;
            public Exception? MaleSkeletalModel;
            public Exception? FemaleSkeletalModel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MovementTypeNames;
            public Exception? Voices;
            public MaskItem<Exception?, GenderedFormLinks.ErrorMask<Armor.ErrorMask>?>? DecapitateArmors;
            public MaskItem<Exception?, GenderedFormLinks.ErrorMask<ColorRecord.ErrorMask>?>? DefaultHairColors;
            public Exception? NumberOfTintsInList;
            public Exception? FacegenMainClamp;
            public Exception? FacegenFaceClamp;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public MaskItem<Exception?, BodyDataPair.ErrorMask?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? BodyPartData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.Data:
                        return Data;
                    case Race_FieldIndex.MaleSkeletalModel:
                        return MaleSkeletalModel;
                    case Race_FieldIndex.FemaleSkeletalModel:
                        return FemaleSkeletalModel;
                    case Race_FieldIndex.MovementTypeNames:
                        return MovementTypeNames;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DecapitateArmors:
                        return DecapitateArmors;
                    case Race_FieldIndex.DefaultHairColors:
                        return DefaultHairColors;
                    case Race_FieldIndex.NumberOfTintsInList:
                        return NumberOfTintsInList;
                    case Race_FieldIndex.FacegenMainClamp:
                        return FacegenMainClamp;
                    case Race_FieldIndex.FacegenFaceClamp:
                        return FacegenFaceClamp;
                    case Race_FieldIndex.AttackRace:
                        return AttackRace;
                    case Race_FieldIndex.Attacks:
                        return Attacks;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.BodyPartData:
                        return BodyPartData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, RaceData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.MaleSkeletalModel:
                        this.MaleSkeletalModel = ex;
                        break;
                    case Race_FieldIndex.FemaleSkeletalModel:
                        this.FemaleSkeletalModel = ex;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = ex;
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = new MaskItem<Exception?, GenderedFormLinks.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = new MaskItem<Exception?, GenderedFormLinks.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = ex;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, BodyDataPair.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception)obj;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, RaceData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.MaleSkeletalModel:
                        this.MaleSkeletalModel = (Exception)obj;
                        break;
                    case Race_FieldIndex.FemaleSkeletalModel:
                        this.FemaleSkeletalModel = (Exception)obj;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (Exception)obj;
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = (MaskItem<Exception?, GenderedFormLinks.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = (MaskItem<Exception?, GenderedFormLinks.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = (Exception)obj;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = (Exception)obj;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = (Exception)obj;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = (Exception)obj;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, BodyDataPair.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (BodyTemplate != null) return true;
                if (Keywords != null) return true;
                if (Data != null) return true;
                if (MaleSkeletalModel != null) return true;
                if (FemaleSkeletalModel != null) return true;
                if (MovementTypeNames != null) return true;
                if (Voices != null) return true;
                if (DecapitateArmors != null) return true;
                if (DefaultHairColors != null) return true;
                if (NumberOfTintsInList != null) return true;
                if (FacegenMainClamp != null) return true;
                if (FacegenFaceClamp != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (BodyPartData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendLine($"Name => {Name}");
                fg.AppendLine($"Description => {Description}");
                fg.AppendLine("ActorEffect =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (ActorEffect != null)
                    {
                        if (ActorEffect.Overall != null)
                        {
                            fg.AppendLine(ActorEffect.Overall.ToString());
                        }
                        if (ActorEffect.Specific != null)
                        {
                            foreach (var subItem in ActorEffect.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"Skin => {Skin}");
                BodyTemplate?.ToString(fg);
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Keywords != null)
                    {
                        if (Keywords.Overall != null)
                        {
                            fg.AppendLine(Keywords.Overall.ToString());
                        }
                        if (Keywords.Specific != null)
                        {
                            foreach (var subItem in Keywords.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                Data?.ToString(fg);
                fg.AppendLine($"MaleSkeletalModel => {MaleSkeletalModel}");
                fg.AppendLine($"FemaleSkeletalModel => {FemaleSkeletalModel}");
                fg.AppendLine("MovementTypeNames =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (MovementTypeNames != null)
                    {
                        if (MovementTypeNames.Overall != null)
                        {
                            fg.AppendLine(MovementTypeNames.Overall.ToString());
                        }
                        if (MovementTypeNames.Specific != null)
                        {
                            foreach (var subItem in MovementTypeNames.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                if (Voices != null)
                {
                    fg.AppendLine($"Voices => {Voices}");
                }
                DecapitateArmors?.ToString(fg);
                DefaultHairColors?.ToString(fg);
                fg.AppendLine($"NumberOfTintsInList => {NumberOfTintsInList}");
                fg.AppendLine($"FacegenMainClamp => {FacegenMainClamp}");
                fg.AppendLine($"FacegenFaceClamp => {FacegenFaceClamp}");
                fg.AppendLine($"AttackRace => {AttackRace}");
                fg.AppendLine("Attacks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Attacks != null)
                    {
                        if (Attacks.Overall != null)
                        {
                            fg.AppendLine(Attacks.Overall.ToString());
                        }
                        if (Attacks.Specific != null)
                        {
                            foreach (var subItem in Attacks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                BodyData?.ToString(fg);
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Hairs != null)
                    {
                        if (Hairs.Overall != null)
                        {
                            fg.AppendLine(Hairs.Overall.ToString());
                        }
                        if (Hairs.Specific != null)
                        {
                            foreach (var subItem in Hairs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Eyes != null)
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine($"BodyPartData => {BodyPartData}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ExceptionExt.Combine(this.BodyTemplate?.Overall, rhs.BodyTemplate?.Overall), (this.BodyTemplate?.Specific as IErrorMask<BodyTemplate.ErrorMask>)?.Combine(rhs.BodyTemplate?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Data = new MaskItem<Exception?, RaceData.ErrorMask?>(ExceptionExt.Combine(this.Data?.Overall, rhs.Data?.Overall), (this.Data?.Specific as IErrorMask<RaceData.ErrorMask>)?.Combine(rhs.Data?.Specific));
                ret.MaleSkeletalModel = this.MaleSkeletalModel.Combine(rhs.MaleSkeletalModel);
                ret.FemaleSkeletalModel = this.FemaleSkeletalModel.Combine(rhs.FemaleSkeletalModel);
                ret.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.MovementTypeNames?.Overall, rhs.MovementTypeNames?.Overall), ExceptionExt.Combine(this.MovementTypeNames?.Specific, rhs.MovementTypeNames?.Specific));
                ret.Voices = this.Voices.Combine(rhs.Voices);
                ret.DecapitateArmors = new MaskItem<Exception?, GenderedFormLinks.ErrorMask<Armor.ErrorMask>?>(ExceptionExt.Combine(this.DecapitateArmors?.Overall, rhs.DecapitateArmors?.Overall), (this.DecapitateArmors?.Specific as IErrorMask<GenderedFormLinks.ErrorMask<Armor.ErrorMask>>)?.Combine(rhs.DecapitateArmors?.Specific));
                ret.DefaultHairColors = new MaskItem<Exception?, GenderedFormLinks.ErrorMask<ColorRecord.ErrorMask>?>(ExceptionExt.Combine(this.DefaultHairColors?.Overall, rhs.DefaultHairColors?.Overall), (this.DefaultHairColors?.Specific as IErrorMask<GenderedFormLinks.ErrorMask<ColorRecord.ErrorMask>>)?.Combine(rhs.DefaultHairColors?.Specific));
                ret.NumberOfTintsInList = this.NumberOfTintsInList.Combine(rhs.NumberOfTintsInList);
                ret.FacegenMainClamp = this.FacegenMainClamp.Combine(rhs.FacegenMainClamp);
                ret.FacegenFaceClamp = this.FacegenFaceClamp.Combine(rhs.FacegenFaceClamp);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.BodyData = new MaskItem<Exception?, BodyDataPair.ErrorMask?>(ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), (this.BodyData?.Specific as IErrorMask<BodyDataPair.ErrorMask>)?.Combine(rhs.BodyData?.Specific));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public MaskItem<bool, BodyTemplate.TranslationMask?> BodyTemplate;
            public bool Keywords;
            public MaskItem<bool, RaceData.TranslationMask?> Data;
            public bool MaleSkeletalModel;
            public bool FemaleSkeletalModel;
            public bool MovementTypeNames;
            public bool Voices;
            public MaskItem<bool, GenderedFormLinks.TranslationMask<Armor.TranslationMask>?> DecapitateArmors;
            public MaskItem<bool, GenderedFormLinks.TranslationMask<ColorRecord.TranslationMask>?> DefaultHairColors;
            public bool NumberOfTintsInList;
            public bool FacegenMainClamp;
            public bool FacegenFaceClamp;
            public bool AttackRace;
            public MaskItem<bool, Attack.TranslationMask?> Attacks;
            public MaskItem<bool, BodyDataPair.TranslationMask?> BodyData;
            public bool Hairs;
            public bool Eyes;
            public bool BodyPartData;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.BodyTemplate = new MaskItem<bool, BodyTemplate.TranslationMask?>(defaultOn, null);
                this.Keywords = defaultOn;
                this.Data = new MaskItem<bool, RaceData.TranslationMask?>(defaultOn, null);
                this.MaleSkeletalModel = defaultOn;
                this.FemaleSkeletalModel = defaultOn;
                this.MovementTypeNames = defaultOn;
                this.Voices = defaultOn;
                this.DecapitateArmors = new MaskItem<bool, GenderedFormLinks.TranslationMask<Armor.TranslationMask>?>(defaultOn, null);
                this.DefaultHairColors = new MaskItem<bool, GenderedFormLinks.TranslationMask<ColorRecord.TranslationMask>?>(defaultOn, null);
                this.NumberOfTintsInList = defaultOn;
                this.FacegenMainClamp = defaultOn;
                this.FacegenFaceClamp = defaultOn;
                this.AttackRace = defaultOn;
                this.Attacks = new MaskItem<bool, Attack.TranslationMask?>(defaultOn, null);
                this.BodyData = new MaskItem<bool, BodyDataPair.TranslationMask?>(defaultOn, null);
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.BodyPartData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((BodyTemplate?.Overall ?? true, BodyTemplate?.Specific?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((MaleSkeletalModel, null));
                ret.Add((FemaleSkeletalModel, null));
                ret.Add((MovementTypeNames, null));
                ret.Add((Voices, null));
                ret.Add((DecapitateArmors?.Overall ?? true, DecapitateArmors?.Specific?.GetCrystal()));
                ret.Add((DefaultHairColors?.Overall ?? true, DefaultHairColors?.Specific?.GetCrystal()));
                ret.Add((NumberOfTintsInList, null));
                ret.Add((FacegenMainClamp, null));
                ret.Add((FacegenFaceClamp, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks?.Overall ?? true, Attacks?.Specific?.GetCrystal()));
                ret.Add((BodyData?.Overall ?? true, BodyData?.Specific?.GetCrystal()));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((BodyPartData, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Race_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => RaceCommon.Instance.GetLinks(this);
        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Race(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Race CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Race CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IRaceGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IRaceInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new ISetList<IFormLink<SpellAbstract>> ActorEffect { get; }
        new IFormLinkNullable<Armor> Skin { get; }
        new BodyTemplate? BodyTemplate { get; set; }
        new ISetList<IFormLink<Keyword>> Keywords { get; }
        new RaceData? Data { get; set; }
        new String? MaleSkeletalModel { get; set; }
        new String? FemaleSkeletalModel { get; set; }
        new ISetList<String> MovementTypeNames { get; }
        new GenderedItem<IFormLink<VoiceType>>? Voices { get; set; }
        new GenderedFormLinks<Armor>? DecapitateArmors { get; set; }
        new GenderedFormLinks<ColorRecord>? DefaultHairColors { get; set; }
        new UInt16? NumberOfTintsInList { get; set; }
        new Single? FacegenMainClamp { get; set; }
        new Single? FacegenFaceClamp { get; set; }
        new IFormLinkNullable<Race> AttackRace { get; }
        new ISetList<Attack> Attacks { get; }
        new BodyDataPair? BodyData { get; set; }
        new ISetList<IFormLink<Hair>> Hairs { get; }
        new ISetList<IFormLink<Eye>> Eyes { get; }
        new IFormLinkNullable<BodyPartData> BodyPartData { get; }
    }

    public partial interface IRaceInternal :
        ISkyrimMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new GenderedItem<IFormLink<VoiceType>>? Voices { get; set; }
    }

    public partial interface IRaceGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IRaceGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        String? Description { get; }
        IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IBodyTemplateGetter? BodyTemplate { get; }
        IReadOnlySetList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        IRaceDataGetter? Data { get; }
        String? MaleSkeletalModel { get; }
        String? FemaleSkeletalModel { get; }
        IReadOnlySetList<String> MovementTypeNames { get; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>>? Voices { get; }
        IGenderedFormLinksGetter<IArmorGetter>? DecapitateArmors { get; }
        IGenderedFormLinksGetter<IColorRecordGetter>? DefaultHairColors { get; }
        UInt16? NumberOfTintsInList { get; }
        Single? FacegenMainClamp { get; }
        Single? FacegenFaceClamp { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlySetList<IAttackGetter> Attacks { get; }
        IBodyDataPairGetter? BodyData { get; }
        IReadOnlySetList<IFormLinkGetter<IHairGetter>> Hairs { get; }
        IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }

    }

    #endregion

    #region Common MixIn
    public static class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Race.Mask<bool> GetHasBeenSetMask(this IRaceGetter item)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Name = 7,
        Description = 8,
        ActorEffect = 9,
        Skin = 10,
        BodyTemplate = 11,
        Keywords = 12,
        Data = 13,
        MaleSkeletalModel = 14,
        FemaleSkeletalModel = 15,
        MovementTypeNames = 16,
        Voices = 17,
        DecapitateArmors = 18,
        DefaultHairColors = 19,
        NumberOfTintsInList = 20,
        FacegenMainClamp = 21,
        FacegenFaceClamp = 22,
        AttackRace = 23,
        Attacks = 24,
        BodyData = 25,
        Hairs = 26,
        Eyes = 27,
        BodyPartData = 28,
    }
    #endregion

    #region Registration
    public partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 49,
            version: 0);

        public const string GUID = "54b1dfac-1494-41b6-b6d3-653bc47987eb";

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Race_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "ACTOREFFECT":
                    return (ushort)Race_FieldIndex.ActorEffect;
                case "SKIN":
                    return (ushort)Race_FieldIndex.Skin;
                case "BODYTEMPLATE":
                    return (ushort)Race_FieldIndex.BodyTemplate;
                case "KEYWORDS":
                    return (ushort)Race_FieldIndex.Keywords;
                case "DATA":
                    return (ushort)Race_FieldIndex.Data;
                case "MALESKELETALMODEL":
                    return (ushort)Race_FieldIndex.MaleSkeletalModel;
                case "FEMALESKELETALMODEL":
                    return (ushort)Race_FieldIndex.FemaleSkeletalModel;
                case "MOVEMENTTYPENAMES":
                    return (ushort)Race_FieldIndex.MovementTypeNames;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DECAPITATEARMORS":
                    return (ushort)Race_FieldIndex.DecapitateArmors;
                case "DEFAULTHAIRCOLORS":
                    return (ushort)Race_FieldIndex.DefaultHairColors;
                case "NUMBEROFTINTSINLIST":
                    return (ushort)Race_FieldIndex.NumberOfTintsInList;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FacegenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FacegenFaceClamp;
                case "ATTACKRACE":
                    return (ushort)Race_FieldIndex.AttackRace;
                case "ATTACKS":
                    return (ushort)Race_FieldIndex.Attacks;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "BODYPARTDATA":
                    return (ushort)Race_FieldIndex.BodyPartData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.MaleSkeletalModel:
                case Race_FieldIndex.FemaleSkeletalModel:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.BodyPartData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.MaleSkeletalModel:
                case Race_FieldIndex.FemaleSkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.MaleSkeletalModel:
                case Race_FieldIndex.FemaleSkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return "Name";
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.ActorEffect:
                    return "ActorEffect";
                case Race_FieldIndex.Skin:
                    return "Skin";
                case Race_FieldIndex.BodyTemplate:
                    return "BodyTemplate";
                case Race_FieldIndex.Keywords:
                    return "Keywords";
                case Race_FieldIndex.Data:
                    return "Data";
                case Race_FieldIndex.MaleSkeletalModel:
                    return "MaleSkeletalModel";
                case Race_FieldIndex.FemaleSkeletalModel:
                    return "FemaleSkeletalModel";
                case Race_FieldIndex.MovementTypeNames:
                    return "MovementTypeNames";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DecapitateArmors:
                    return "DecapitateArmors";
                case Race_FieldIndex.DefaultHairColors:
                    return "DefaultHairColors";
                case Race_FieldIndex.NumberOfTintsInList:
                    return "NumberOfTintsInList";
                case Race_FieldIndex.FacegenMainClamp:
                    return "FacegenMainClamp";
                case Race_FieldIndex.FacegenFaceClamp:
                    return "FacegenFaceClamp";
                case Race_FieldIndex.AttackRace:
                    return "AttackRace";
                case Race_FieldIndex.Attacks:
                    return "Attacks";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.BodyPartData:
                    return "BodyPartData";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.MaleSkeletalModel:
                case Race_FieldIndex.FemaleSkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.MaleSkeletalModel:
                case Race_FieldIndex.FemaleSkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return typeof(String);
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.ActorEffect:
                    return typeof(ISetList<IFormLink<SpellAbstract>>);
                case Race_FieldIndex.Skin:
                    return typeof(IFormLinkNullable<Armor>);
                case Race_FieldIndex.BodyTemplate:
                    return typeof(BodyTemplate);
                case Race_FieldIndex.Keywords:
                    return typeof(ISetList<IFormLink<Keyword>>);
                case Race_FieldIndex.Data:
                    return typeof(RaceData);
                case Race_FieldIndex.MaleSkeletalModel:
                    return typeof(String);
                case Race_FieldIndex.FemaleSkeletalModel:
                    return typeof(String);
                case Race_FieldIndex.MovementTypeNames:
                    return typeof(ISetList<String>);
                case Race_FieldIndex.Voices:
                    return typeof(GenderedItem<IFormLink<VoiceType>>);
                case Race_FieldIndex.DecapitateArmors:
                    return typeof(GenderedFormLinks<Armor>);
                case Race_FieldIndex.DefaultHairColors:
                    return typeof(GenderedFormLinks<ColorRecord>);
                case Race_FieldIndex.NumberOfTintsInList:
                    return typeof(UInt16);
                case Race_FieldIndex.FacegenMainClamp:
                    return typeof(Single);
                case Race_FieldIndex.FacegenFaceClamp:
                    return typeof(Single);
                case Race_FieldIndex.AttackRace:
                    return typeof(IFormLinkNullable<Race>);
                case Race_FieldIndex.Attacks:
                    return typeof(ISetList<Attack>);
                case Race_FieldIndex.BodyData:
                    return typeof(BodyDataPair);
                case Race_FieldIndex.Hairs:
                    return typeof(ISetList<IFormLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(ISetList<IFormLink<Eye>>);
                case Race_FieldIndex.BodyPartData:
                    return typeof(IFormLinkNullable<BodyPartData>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceXmlWriteTranslation);
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SPCT_HEADER = new RecordType("SPCT");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType BODT_HEADER = new RecordType("BODT");
        public static readonly RecordType KWDA_HEADER = new RecordType("KWDA");
        public static readonly RecordType KSIZ_HEADER = new RecordType("KSIZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType MTNM_HEADER = new RecordType("MTNM");
        public static readonly RecordType VTCK_HEADER = new RecordType("VTCK");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType HCLF_HEADER = new RecordType("HCLF");
        public static readonly RecordType TINL_HEADER = new RecordType("TINL");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATKR_HEADER = new RecordType("ATKR");
        public static readonly RecordType ATKD_HEADER = new RecordType("ATKD");
        public static readonly RecordType ATKE_HEADER = new RecordType("ATKE");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RACE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 22;
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.ActorEffect.Unset();
            item.Skin.FormKey = null;
            item.BodyTemplate = null;
            item.Keywords.Unset();
            item.Data = null;
            item.MaleSkeletalModel = default;
            item.FemaleSkeletalModel = default;
            item.MovementTypeNames.Unset();
            item.Voices = null;
            item.DecapitateArmors = null;
            item.DefaultHairColors = null;
            item.NumberOfTintsInList = default;
            item.FacegenMainClamp = default;
            item.FacegenFaceClamp = default;
            item.AttackRace.FormKey = null;
            item.Attacks.Unset();
            item.BodyData = null;
            item.Hairs.Unset();
            item.Eyes.Unset();
            item.BodyPartData.FormKey = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Race_Registration.RACE_HEADER;
        protected static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
            RaceBinaryCreateTranslation.FillBinaryExtraMarkersCustomPublic(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x54435053: // SPCT
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.MetaData.ReadSubRecordFrame(frame).Content);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<SpellAbstract>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        amount: amount,
                        triggeringRecord: Race_Registration.SPLO_HEADER,
                        masterReferences: masterReferences,
                        item: item.ActorEffect,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ActorEffect);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Skin.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Skin);
                }
                case 0x54444F42: // BODT
                {
                    item.BodyTemplate = Mutagen.Bethesda.Skyrim.BodyTemplate.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyTemplate);
                }
                case 0x5A49534B: // KSIZ
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.MetaData.ReadSubRecordFrame(frame).Content);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        amount: amount,
                        triggeringRecord: Race_Registration.KWDA_HEADER,
                        masterReferences: masterReferences,
                        item: item.Keywords,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    item.Data = Mutagen.Bethesda.Skyrim.RaceData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength;
                    var nextRec = frame.MetaData.GetSubRecord(frame);
                    if (nextRec.RecordType != Race_Registration.ANAM_HEADER) throw new ArgumentException("Marker was read but not followed by expected subrecord.");
                    contentLength = nextRec.RecordLength;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaleSkeletalModel = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MaleSkeletalModel);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength;
                    var nextRec = frame.MetaData.GetSubRecord(frame);
                    if (nextRec.RecordType != Race_Registration.ANAM_HEADER) throw new ArgumentException("Marker was read but not followed by expected subrecord.");
                    contentLength = nextRec.RecordLength;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FemaleSkeletalModel = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FemaleSkeletalModel);
                }
                case 0x4D4E544D: // MTNM
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.MTNM_HEADER,
                        item: item.MovementTypeNames,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: StringBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypeNames);
                }
                case 0x4B435456: // VTCK
                {
                    Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation<IFormLink<VoiceType>>.Instance.Parse(frame: frame);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    item.DecapitateArmors = Mutagen.Bethesda.Skyrim.GenderedFormLinks<Armor>.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitateArmors);
                }
                case 0x464C4348: // HCLF
                {
                    item.DefaultHairColors = Mutagen.Bethesda.Skyrim.GenderedFormLinks<ColorRecord>.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColors);
                }
                case 0x4C4E4954: // TINL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.NumberOfTintsInList = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.NumberOfTintsInList);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FacegenMainClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FacegenFaceClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenFaceClamp);
                }
                case 0x524B5441: // ATKR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.AttackRace.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.AttackRace);
                }
                case 0x444B5441: // ATKD
                case 0x454B5441: // ATKE
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<Attack>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Attack_Registration.TriggeringRecordTypes,
                        item: item.Attacks,
                        lengthLength: frame.MetaData.SubConstants.LengthLength,
                        transl: (MutagenFrame r, out Attack listSubItem) =>
                        {
                            return LoquiBinaryTranslation<Attack>.Instance.Parse(
                                frame: r,
                                item: out listSubItem,
                                masterReferences: masterReferences);
                        });
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Attacks);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Skyrim.BodyDataPair.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Hair>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Hairs,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eye>>.Instance.ParseRepeatedItem(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        item: item.Eyes,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x4D414E47: // GNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BodyPartData.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyPartData);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RaceCommon : SkyrimMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = object.Equals(item.Skin, rhs.Skin);
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.MaleSkeletalModel = string.Equals(item.MaleSkeletalModel, rhs.MaleSkeletalModel);
            ret.FemaleSkeletalModel = string.Equals(item.FemaleSkeletalModel, rhs.FemaleSkeletalModel);
            ret.MovementTypeNames = item.MovementTypeNames.CollectionEqualsHelper(
                rhs.MovementTypeNames,
                (l, r) => string.Equals(l, r),
                include);
            if (item.Voices == null || rhs.Voices == null)
            {
                ret.Voices = new MaskItem<bool, GenderedItem<bool>?>(item.Voices == null && rhs.Voices == null, default);
            }
            else
            {
                var spec = new GenderedItem<bool>(
                    male: object.Equals(item.Voices.Male, rhs.Voices.Male),
                    female: object.Equals(item.Voices.Female, rhs.Voices.Female));
                ret.Voices = new MaskItem<bool, GenderedItem<bool>?>(spec.Male && spec.Female, spec);
            }
            ret.DecapitateArmors = EqualsMaskHelper.EqualsHelper(
                item.DecapitateArmors,
                rhs.DecapitateArmors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.DefaultHairColors = EqualsMaskHelper.EqualsHelper(
                item.DefaultHairColors,
                rhs.DefaultHairColors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.NumberOfTintsInList = item.NumberOfTintsInList == rhs.NumberOfTintsInList;
            ret.FacegenMainClamp = item.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp);
            ret.FacegenFaceClamp = item.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp);
            ret.AttackRace = object.Equals(item.AttackRace, rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = EqualsMaskHelper.EqualsHelper(
                item.BodyData,
                rhs.BodyData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.BodyPartData = object.Equals(item.BodyPartData, rhs.BodyPartData);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Race =>");
            }
            else
            {
                fg.AppendLine($"{name} (Race) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            FileGeneration fg,
            Race.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendLine($"Name => {item.Name}");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendLine($"Description => {item.Description}");
            }
            if (printMask?.ActorEffect?.Overall ?? true)
            {
                fg.AppendLine("ActorEffect =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ActorEffect)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Skin ?? true)
            {
                fg.AppendLine($"Skin => {item.Skin}");
            }
            if (printMask?.BodyTemplate?.Overall ?? true)
            {
                item.BodyTemplate?.ToString(fg, "BodyTemplate");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Keywords)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                item.Data?.ToString(fg, "Data");
            }
            if (printMask?.MaleSkeletalModel ?? true)
            {
                fg.AppendLine($"MaleSkeletalModel => {item.MaleSkeletalModel}");
            }
            if (printMask?.FemaleSkeletalModel ?? true)
            {
                fg.AppendLine($"FemaleSkeletalModel => {item.FemaleSkeletalModel}");
            }
            if (printMask?.MovementTypeNames?.Overall ?? true)
            {
                fg.AppendLine("MovementTypeNames =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MovementTypeNames)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Voices?.Overall ?? true)
            {
                if (item.Voices != null)
                {
                    fg.AppendLine("Voices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Male => {item.Voices.Male}");
                        fg.AppendLine($"Female => {item.Voices.Female}");
                    }
                    fg.AppendLine("]");
                }
            }
            if (printMask?.DecapitateArmors?.Overall ?? true)
            {
                item.DecapitateArmors?.ToString(fg, "DecapitateArmors");
            }
            if (printMask?.DefaultHairColors?.Overall ?? true)
            {
                item.DefaultHairColors?.ToString(fg, "DefaultHairColors");
            }
            if (printMask?.NumberOfTintsInList ?? true)
            {
                fg.AppendLine($"NumberOfTintsInList => {item.NumberOfTintsInList}");
            }
            if (printMask?.FacegenMainClamp ?? true)
            {
                fg.AppendLine($"FacegenMainClamp => {item.FacegenMainClamp}");
            }
            if (printMask?.FacegenFaceClamp ?? true)
            {
                fg.AppendLine($"FacegenFaceClamp => {item.FacegenFaceClamp}");
            }
            if (printMask?.AttackRace ?? true)
            {
                fg.AppendLine($"AttackRace => {item.AttackRace}");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                fg.AppendLine("Attacks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Attacks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BodyData?.Overall ?? true)
            {
                item.BodyData?.ToString(fg, "BodyData");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Hairs)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Eyes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BodyPartData ?? true)
            {
                fg.AppendLine($"BodyPartData => {item.BodyPartData}");
            }
        }
        
        public bool HasBeenSet(
            IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.ActorEffect?.Overall.HasValue ?? false && checkMask.ActorEffect!.Overall.Value != item.ActorEffect.HasBeenSet) return false;
            if (checkMask.Skin.HasValue && checkMask.Skin.Value != (item.Skin.FormKey != null)) return false;
            if (checkMask.BodyTemplate?.Overall.HasValue ?? false && checkMask.BodyTemplate.Overall.Value != (item.BodyTemplate != null)) return false;
            if (checkMask.BodyTemplate?.Specific != null && (item.BodyTemplate == null || !item.BodyTemplate.HasBeenSet(checkMask.BodyTemplate.Specific))) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != item.Keywords.HasBeenSet) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.MaleSkeletalModel.HasValue && checkMask.MaleSkeletalModel.Value != (item.MaleSkeletalModel != null)) return false;
            if (checkMask.FemaleSkeletalModel.HasValue && checkMask.FemaleSkeletalModel.Value != (item.FemaleSkeletalModel != null)) return false;
            if (checkMask.MovementTypeNames?.Overall.HasValue ?? false && checkMask.MovementTypeNames!.Overall.Value != item.MovementTypeNames.HasBeenSet) return false;
            if (checkMask.Voices?.Overall ?? false) return false;
            if (checkMask.DecapitateArmors?.Overall.HasValue ?? false && checkMask.DecapitateArmors.Overall.Value != (item.DecapitateArmors != null)) return false;
            if (checkMask.DecapitateArmors?.Specific != null && (item.DecapitateArmors == null || !item.DecapitateArmors.HasBeenSet(checkMask.DecapitateArmors.Specific))) return false;
            if (checkMask.DefaultHairColors?.Overall.HasValue ?? false && checkMask.DefaultHairColors.Overall.Value != (item.DefaultHairColors != null)) return false;
            if (checkMask.DefaultHairColors?.Specific != null && (item.DefaultHairColors == null || !item.DefaultHairColors.HasBeenSet(checkMask.DefaultHairColors.Specific))) return false;
            if (checkMask.NumberOfTintsInList.HasValue && checkMask.NumberOfTintsInList.Value != (item.NumberOfTintsInList != null)) return false;
            if (checkMask.FacegenMainClamp.HasValue && checkMask.FacegenMainClamp.Value != (item.FacegenMainClamp != null)) return false;
            if (checkMask.FacegenFaceClamp.HasValue && checkMask.FacegenFaceClamp.Value != (item.FacegenFaceClamp != null)) return false;
            if (checkMask.AttackRace.HasValue && checkMask.AttackRace.Value != (item.AttackRace.FormKey != null)) return false;
            if (checkMask.Attacks?.Overall.HasValue ?? false && checkMask.Attacks!.Overall.Value != item.Attacks.HasBeenSet) return false;
            if (checkMask.BodyData?.Overall.HasValue ?? false && checkMask.BodyData.Overall.Value != (item.BodyData != null)) return false;
            if (checkMask.BodyData?.Specific != null && (item.BodyData == null || !item.BodyData.HasBeenSet(checkMask.BodyData.Specific))) return false;
            if (checkMask.Hairs?.Overall.HasValue ?? false && checkMask.Hairs!.Overall.Value != item.Hairs.HasBeenSet) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.BodyPartData.HasValue && checkMask.BodyPartData.Value != (item.BodyPartData.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRaceGetter item,
            Race.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.ActorEffect = new MaskItem<bool, IEnumerable<(int, bool)>>(item.ActorEffect.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Skin = (item.Skin.FormKey != null);
            var itemBodyTemplate = item.BodyTemplate;
            mask.BodyTemplate = new MaskItem<bool, BodyTemplate.Mask<bool>?>(itemBodyTemplate != null, itemBodyTemplate?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Keywords.HasBeenSet, Enumerable.Empty<(int, bool)>());
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, RaceData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            mask.MaleSkeletalModel = (item.MaleSkeletalModel != null);
            mask.FemaleSkeletalModel = (item.FemaleSkeletalModel != null);
            mask.MovementTypeNames = new MaskItem<bool, IEnumerable<(int, bool)>>(item.MovementTypeNames.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Voices = item.Voices == null ? null : new MaskItem<bool, GenderedItem<bool>?>(true, default);
            var itemDecapitateArmors = item.DecapitateArmors;
            mask.DecapitateArmors = new MaskItem<bool, GenderedFormLinks.Mask<bool>?>(itemDecapitateArmors != null, itemDecapitateArmors?.GetHasBeenSetMask());
            var itemDefaultHairColors = item.DefaultHairColors;
            mask.DefaultHairColors = new MaskItem<bool, GenderedFormLinks.Mask<bool>?>(itemDefaultHairColors != null, itemDefaultHairColors?.GetHasBeenSetMask());
            mask.NumberOfTintsInList = (item.NumberOfTintsInList != null);
            mask.FacegenMainClamp = (item.FacegenMainClamp != null);
            mask.FacegenFaceClamp = (item.FacegenFaceClamp != null);
            mask.AttackRace = (item.AttackRace.FormKey != null);
            mask.Attacks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Attack.Mask<bool>?>>>(item.Attacks.HasBeenSet, item.Attacks.WithIndex().Select((i) => new MaskItemIndexed<bool, Attack.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemBodyData = item.BodyData;
            mask.BodyData = new MaskItem<bool, BodyDataPair.Mask<bool>?>(itemBodyData != null, itemBodyData?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Hairs.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.Eyes = new MaskItem<bool, IEnumerable<(int, bool)>>(item.Eyes.HasBeenSet, Enumerable.Empty<(int, bool)>());
            mask.BodyPartData = (item.BodyPartData.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Race_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.ActorEffect.SequenceEqual(rhs.ActorEffect)) return false;
            if (!lhs.Skin.Equals(rhs.Skin)) return false;
            if (!object.Equals(lhs.BodyTemplate, rhs.BodyTemplate)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!string.Equals(lhs.MaleSkeletalModel, rhs.MaleSkeletalModel)) return false;
            if (!string.Equals(lhs.FemaleSkeletalModel, rhs.FemaleSkeletalModel)) return false;
            if (!lhs.MovementTypeNames.SequenceEqual(rhs.MovementTypeNames)) return false;
            if (!Equals(lhs.Voices, rhs.Voices)) return false;
            if (!object.Equals(lhs.DecapitateArmors, rhs.DecapitateArmors)) return false;
            if (!object.Equals(lhs.DefaultHairColors, rhs.DefaultHairColors)) return false;
            if (lhs.NumberOfTintsInList != rhs.NumberOfTintsInList) return false;
            if (!lhs.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp)) return false;
            if (!lhs.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp)) return false;
            if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            if (!lhs.Attacks.SequenceEqual(rhs.Attacks)) return false;
            if (!object.Equals(lhs.BodyData, rhs.BodyData)) return false;
            if (!lhs.Hairs.SequenceEqual(rhs.Hairs)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ActorEffect).CombineHashCode(ret);
            if (item.Skin.TryGet(out var Skinitem))
            {
                ret = HashHelper.GetHashCode(Skinitem).CombineHashCode(ret);
            }
            if (item.BodyTemplate.TryGet(out var BodyTemplateitem))
            {
                ret = HashHelper.GetHashCode(BodyTemplateitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Keywords).CombineHashCode(ret);
            if (item.Data.TryGet(out var Dataitem))
            {
                ret = HashHelper.GetHashCode(Dataitem).CombineHashCode(ret);
            }
            if (item.MaleSkeletalModel.TryGet(out var MaleSkeletalModelitem))
            {
                ret = HashHelper.GetHashCode(MaleSkeletalModelitem).CombineHashCode(ret);
            }
            if (item.FemaleSkeletalModel.TryGet(out var FemaleSkeletalModelitem))
            {
                ret = HashHelper.GetHashCode(FemaleSkeletalModelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.MovementTypeNames).CombineHashCode(ret);
            ret = (item.Voices != null ? HashHelper.GetHashCode(item.Voices.Male, item.Voices.Female) : 0).CombineHashCode(ret);
            if (item.DecapitateArmors.TryGet(out var DecapitateArmorsitem))
            {
                ret = HashHelper.GetHashCode(DecapitateArmorsitem).CombineHashCode(ret);
            }
            if (item.DefaultHairColors.TryGet(out var DefaultHairColorsitem))
            {
                ret = HashHelper.GetHashCode(DefaultHairColorsitem).CombineHashCode(ret);
            }
            if (item.NumberOfTintsInList.TryGet(out var NumberOfTintsInListitem))
            {
                ret = HashHelper.GetHashCode(NumberOfTintsInListitem).CombineHashCode(ret);
            }
            if (item.FacegenMainClamp.TryGet(out var FacegenMainClampitem))
            {
                ret = HashHelper.GetHashCode(FacegenMainClampitem).CombineHashCode(ret);
            }
            if (item.FacegenFaceClamp.TryGet(out var FacegenFaceClampitem))
            {
                ret = HashHelper.GetHashCode(FacegenFaceClampitem).CombineHashCode(ret);
            }
            if (item.AttackRace.TryGet(out var AttackRaceitem))
            {
                ret = HashHelper.GetHashCode(AttackRaceitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Attacks).CombineHashCode(ret);
            if (item.BodyData.TryGet(out var BodyDataitem))
            {
                ret = HashHelper.GetHashCode(BodyDataitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Hairs).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Eyes).CombineHashCode(ret);
            if (item.BodyPartData.TryGet(out var BodyPartDataitem))
            {
                ret = HashHelper.GetHashCode(BodyPartDataitem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRaceGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.ActorEffect)
            {
                yield return item;
            }
            yield return obj.Skin;
            foreach (var item in obj.Keywords)
            {
                yield return item;
            }
            if (obj.DecapitateArmors != null)
            {
                foreach (var item in obj.DecapitateArmors.Links)
                {
                    yield return item;
                }
            }
            if (obj.DefaultHairColors != null)
            {
                foreach (var item in obj.DefaultHairColors.Links)
                {
                    yield return item;
                }
            }
            yield return obj.AttackRace;
            foreach (var item in obj.Attacks.SelectMany(f => f.Links))
            {
                yield return item;
            }
            if (obj.BodyData != null)
            {
                foreach (var item in obj.BodyData.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Hairs)
            {
                yield return item;
            }
            foreach (var item in obj.Eyes)
            {
                yield return item;
            }
            yield return obj.BodyPartData;
            yield break;
        }
        
        partial void PostDuplicate(Race obj, Race rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Race(getNextFormKey());
            ret.DeepCopyIn((Race)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Race)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RaceSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    if (rhs.ActorEffect.HasBeenSet)
                    {
                        item.ActorEffect.SetTo(
                            rhs.ActorEffect,
                            (r) => new FormLink<SpellAbstract>(r.FormKey));
                    }
                    else
                    {
                        item.ActorEffect.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin.FormKey = rhs.Skin.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate.TryGet(out var rhsBodyTemplate))
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if (rhs.Keywords.HasBeenSet)
                    {
                        item.Keywords.SetTo(
                            rhs.Keywords,
                            (r) => new FormLink<Keyword>(r.FormKey));
                    }
                    else
                    {
                        item.Keywords.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MaleSkeletalModel) ?? true))
            {
                item.MaleSkeletalModel = rhs.MaleSkeletalModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleSkeletalModel) ?? true))
            {
                item.FemaleSkeletalModel = rhs.FemaleSkeletalModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                try
                {
                    if (rhs.MovementTypeNames.HasBeenSet)
                    {
                        item.MovementTypeNames.SetTo(rhs.MovementTypeNames);
                    }
                    else
                    {
                        item.MovementTypeNames.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                try
                {
                    if (rhs.Voices == null)
                    {
                        item.Voices = null;
                    }
                    else
                    {
                        item.Voices = new GenderedItem<IFormLink<VoiceType>>(
                            male: new FormLink<VoiceType>(rhs.Voices.Male.FormKey),
                            female: new FormLink<VoiceType>(rhs.Voices.Female.FormKey));
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitateArmors) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.DecapitateArmors);
                try
                {
                    if(rhs.DecapitateArmors.TryGet(out var rhsDecapitateArmors))
                    {
                        item.DecapitateArmors = rhsDecapitateArmors.DeepCopy<Armor, IArmorGetter, Armor.TranslationMask>(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.DecapitateArmors));
                    }
                    else
                    {
                        item.DecapitateArmors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColors) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColors);
                try
                {
                    if(rhs.DefaultHairColors.TryGet(out var rhsDefaultHairColors))
                    {
                        item.DefaultHairColors = rhsDefaultHairColors.DeepCopy<ColorRecord, IColorRecordGetter, ColorRecord.TranslationMask>(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHairColors));
                    }
                    else
                    {
                        item.DefaultHairColors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                item.NumberOfTintsInList = rhs.NumberOfTintsInList;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                item.FacegenMainClamp = rhs.FacegenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                item.FacegenFaceClamp = rhs.FacegenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace.FormKey = rhs.AttackRace.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                try
                {
                    if (rhs.Attacks.HasBeenSet)
                    {
                        item.Attacks.SetTo(
                            items: rhs.Attacks,
                            converter: (r) =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            });
                    }
                    else
                    {
                        item.Attacks.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                try
                {
                    if(rhs.BodyData.TryGet(out var rhsBodyData))
                    {
                        item.BodyData = rhsBodyData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
                    }
                    else
                    {
                        item.BodyData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if (rhs.Hairs.HasBeenSet)
                    {
                        item.Hairs.SetTo(
                            rhs.Hairs,
                            (r) => new FormLink<Hair>(r.FormKey));
                    }
                    else
                    {
                        item.Hairs.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if (rhs.Eyes.HasBeenSet)
                    {
                        item.Eyes.SetTo(
                            rhs.Eyes,
                            (r) => new FormLink<Eye>(r.FormKey));
                    }
                    else
                    {
                        item.Eyes.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData.FormKey = rhs.BodyPartData.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RaceXmlWriteTranslation Instance = new RaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if (item.ActorEffect.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.ActorEffect),
                    item: item.ActorEffect,
                    fieldIndex: (int)Race_FieldIndex.ActorEffect,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.ActorEffect),
                    transl: (XElement subNode, IFormLinkGetter<ISpellAbstractGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Skin.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Skin),
                    item: item.Skin.FormKey,
                    fieldIndex: (int)Race_FieldIndex.Skin,
                    errorMask: errorMask);
            }
            if ((item.BodyTemplate != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                var loquiItem = item.BodyTemplate;
                ((BodyTemplateXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.BodyTemplate),
                    fieldIndex: (int)Race_FieldIndex.BodyTemplate,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
            }
            if (item.Keywords.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)Race_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLinkGetter<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                var loquiItem = item.Data;
                ((RaceDataXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Data),
                    fieldIndex: (int)Race_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
            }
            if ((item.MaleSkeletalModel != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaleSkeletalModel) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleSkeletalModel),
                    item: item.MaleSkeletalModel,
                    fieldIndex: (int)Race_FieldIndex.MaleSkeletalModel,
                    errorMask: errorMask);
            }
            if ((item.FemaleSkeletalModel != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FemaleSkeletalModel) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleSkeletalModel),
                    item: item.FemaleSkeletalModel,
                    fieldIndex: (int)Race_FieldIndex.FemaleSkeletalModel,
                    errorMask: errorMask);
            }
            if (item.MovementTypeNames.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.MovementTypeNames),
                    item: item.MovementTypeNames,
                    fieldIndex: (int)Race_FieldIndex.MovementTypeNames,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.MovementTypeNames),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Voices != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Voices),
                    item: item.Voices.Male.FormKey,
                    errorMask: errorMask);
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Voices),
                    item: item.Voices.Female.FormKey,
                    errorMask: errorMask);
            }
            if ((item.DecapitateArmors != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitateArmors) ?? true))
            {
                var loquiItem = item.DecapitateArmors;
                ((GenderedFormLinksXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IArmorGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.DecapitateArmors),
                    fieldIndex: (int)Race_FieldIndex.DecapitateArmors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DecapitateArmors));
            }
            if ((item.DefaultHairColors != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColors) ?? true))
            {
                var loquiItem = item.DefaultHairColors;
                ((GenderedFormLinksXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IColorRecordGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.DefaultHairColors),
                    fieldIndex: (int)Race_FieldIndex.DefaultHairColors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHairColors));
            }
            if ((item.NumberOfTintsInList != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumberOfTintsInList),
                    item: item.NumberOfTintsInList.Value,
                    fieldIndex: (int)Race_FieldIndex.NumberOfTintsInList,
                    errorMask: errorMask);
            }
            if ((item.FacegenMainClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FacegenMainClamp),
                    item: item.FacegenMainClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FacegenMainClamp,
                    errorMask: errorMask);
            }
            if ((item.FacegenFaceClamp != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FacegenFaceClamp),
                    item: item.FacegenFaceClamp.Value,
                    fieldIndex: (int)Race_FieldIndex.FacegenFaceClamp,
                    errorMask: errorMask);
            }
            if ((item.AttackRace.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackRace),
                    item: item.AttackRace.FormKey,
                    fieldIndex: (int)Race_FieldIndex.AttackRace,
                    errorMask: errorMask);
            }
            if (item.Attacks.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                ListXmlTranslation<IAttackGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Attacks),
                    item: item.Attacks,
                    fieldIndex: (int)Race_FieldIndex.Attacks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Attacks),
                    transl: (XElement subNode, IAttackGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((AttackXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.BodyData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                var loquiItem = item.BodyData;
                ((BodyDataPairXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.BodyData),
                    fieldIndex: (int)Race_FieldIndex.BodyData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
            }
            if (item.Hairs.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Hairs),
                    item: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Hairs),
                    transl: (XElement subNode, IFormLinkGetter<IHairGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if (item.Eyes.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLinkGetter<IEyeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.BodyPartData.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BodyPartData),
                    item: item.BodyPartData.FormKey,
                    fieldIndex: (int)Race_FieldIndex.BodyPartData,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Race");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Race");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RaceXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static RaceXmlCreateTranslation Instance = new RaceXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Name);
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Description);
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorEffect":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                        if (ListXmlTranslation<IFormLink<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var ActorEffectItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.ActorEffect.SetTo(ActorEffectItem);
                        }
                        else
                        {
                            item.ActorEffect.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Skin":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Skin);
                        item.Skin.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyTemplate":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.BodyTemplate);
                        item.BodyTemplate = LoquiXmlTranslation<BodyTemplate>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords.SetTo(KeywordsItem);
                        }
                        else
                        {
                            item.Keywords.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Data);
                        item.Data = LoquiXmlTranslation<RaceData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleSkeletalModel":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.MaleSkeletalModel);
                        item.MaleSkeletalModel = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleSkeletalModel":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FemaleSkeletalModel);
                        item.FemaleSkeletalModel = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MovementTypeNames":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var MovementTypeNamesItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MovementTypeNames.SetTo(MovementTypeNamesItem);
                        }
                        else
                        {
                            item.MovementTypeNames.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Voices":
                    item.Voices = new GenderedItem<IFormLink<VoiceType>>(
                        male: new FormLink<VoiceType>(FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask)),
                        female: new FormLink<VoiceType>(FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask)));
                    break;
                case "DecapitateArmors":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DecapitateArmors);
                        item.DecapitateArmors = LoquiXmlTranslation<GenderedFormLinks<Armor>>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DecapitateArmors));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHairColors":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColors);
                        item.DefaultHairColors = LoquiXmlTranslation<GenderedFormLinks<ColorRecord>>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.DefaultHairColors));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumberOfTintsInList":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.NumberOfTintsInList);
                        item.NumberOfTintsInList = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FacegenMainClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FacegenMainClamp);
                        item.FacegenMainClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FacegenFaceClamp":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.FacegenFaceClamp);
                        item.FacegenFaceClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackRace":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.AttackRace);
                        item.AttackRace.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Attacks":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                        if (ListXmlTranslation<Attack>.Instance.Parse(
                            node: node,
                            enumer: out var AttacksItem,
                            transl: LoquiXmlTranslation<Attack>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Attacks.SetTo(AttacksItem);
                        }
                        else
                        {
                            item.Attacks.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyData":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                        item.BodyData = LoquiXmlTranslation<BodyDataPair>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                        if (ListXmlTranslation<IFormLink<Hair>>.Instance.Parse(
                            node: node,
                            enumer: out var HairsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Hairs.SetTo(HairsItem);
                        }
                        else
                        {
                            item.Hairs.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                        if (ListXmlTranslation<IFormLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes.SetTo(EyesItem);
                        }
                        else
                        {
                            item.Eyes.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyPartData":
                    try
                    {
                        errorMask?.PushIndex((int)Race_FieldIndex.BodyPartData);
                        item.BodyPartData.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceGetter item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RaceBinaryWriteTranslation Instance = new RaceBinaryWriteTranslation();

        static partial void WriteBinaryExtraMarkersCustom(
            MutagenWriter writer,
            IRaceGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryExtraMarkers(
            MutagenWriter writer,
            IRaceGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryExtraMarkersCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                writer: writer,
                items: item.ActorEffect,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellAbstractGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.SPLO_HEADER),
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.WNAM_HEADER),
                masterReferences: masterReferences);
            {
                var loquiItem = item.BodyTemplate;
                if (loquiItem != null)
                {
                    ((BodyTemplateBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Keywords,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.KWDA_HEADER),
                        masterReferences: masterReferences);
                });
            {
                var loquiItem = item.Data;
                if (loquiItem != null)
                {
                    ((RaceDataBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleSkeletalModel,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.ANAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleSkeletalModel,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.ANAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.MovementTypeNames,
                recordType: Race_Registration.MTNM_HEADER,
                transl: StringBinaryTranslation.Instance.Write);
            if (item.Voices != null)
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Voices.Male,
                    masterReferences: masterReferences);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Voices.Female,
                    masterReferences: masterReferences);
            }
            {
                var loquiItem = item.DecapitateArmors;
                if (loquiItem != null)
                {
                    ((GenderedFormLinksBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            {
                var loquiItem = item.DefaultHairColors;
                if (loquiItem != null)
                {
                    ((GenderedFormLinksBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NumberOfTintsInList,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.TINL_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FacegenMainClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FacegenFaceClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.UNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.ATKR_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem) =>
                {
                    {
                        var loquiItem = subItem;
                        if (loquiItem != null)
                        {
                            ((AttackBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                                item: loquiItem,
                                writer: subWriter,
                                masterReferences: masterReferences,
                                recordTypeConverter: null);
                        }
                    }
                });
            {
                var loquiItem = item.BodyData;
                if (loquiItem != null)
                {
                    using (HeaderExport.ExportHeader(writer, Race_Registration.NAM1_HEADER, ObjectType.Subrecord)) { }
                    ((BodyDataPairBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: Race_Registration.HNAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: Race_Registration.ENAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        masterReferences: masterReferences);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.GNAM_HEADER),
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Race_Registration.RACE_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRaceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        static partial void FillBinaryExtraMarkersCustom(
            MutagenFrame frame,
            IRaceInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryExtraMarkersCustomPublic(
            MutagenFrame frame,
            IRaceInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryExtraMarkersCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => RaceCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlySetList<IFormLinkGetter<ISpellAbstractGetter>> ActorEffect { get; private set; } = EmptySetList<IFormLinkGetter<ISpellAbstractGetter>>.Instance;
        #region Skin
        private int? _SkinLocation;
        public bool Skin_IsSet => _SkinLocation.HasValue;
        public IFormLinkNullableGetter<IArmorGetter> Skin => _SkinLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SkinLocation.Value, _package.Meta)))) : FormLinkNullable<IArmorGetter>.Empty;
        #endregion
        #region BodyTemplate
        private RangeInt32? _BodyTemplateLocation;
        private bool _BodyTemplate_IsSet => _BodyTemplateLocation.HasValue;
        public IBodyTemplateGetter? BodyTemplate => _BodyTemplate_IsSet ? BodyTemplateBinaryOverlay.BodyTemplateFactory(new BinaryMemoryReadStream(_data.Slice(_BodyTemplateLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool BodyTemplate_IsSet => _BodyTemplateLocation.HasValue;
        #endregion
        public IReadOnlySetList<IFormLinkGetter<IKeywordGetter>> Keywords { get; private set; } = EmptySetList<IFormLinkGetter<IKeywordGetter>>.Instance;
        #region Data
        private RangeInt32? _DataLocation;
        private bool _Data_IsSet => _DataLocation.HasValue;
        public IRaceDataGetter? Data => _Data_IsSet ? RaceDataBinaryOverlay.RaceDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        #region MaleSkeletalModel
        private int? _MaleSkeletalModelLocation;
        public String? MaleSkeletalModel => _MaleSkeletalModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MaleSkeletalModelLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region FemaleSkeletalModel
        private int? _FemaleSkeletalModelLocation;
        public String? FemaleSkeletalModel => _FemaleSkeletalModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FemaleSkeletalModelLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlySetList<String> MovementTypeNames { get; private set; } = EmptySetList<String>.Instance;
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>>? Voices => _VoicesLocation.HasValue ? new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(new FormLink<IVoiceTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data))), new FormLink<IVoiceTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(4))))) : default;
        #endregion
        #region DecapitateArmors
        public IGenderedFormLinksGetter<IArmorGetter>? DecapitateArmors { get; private set; }
        public bool DecapitateArmors_IsSet => DecapitateArmors != null;
        #endregion
        #region DefaultHairColors
        public IGenderedFormLinksGetter<IColorRecordGetter>? DefaultHairColors { get; private set; }
        public bool DefaultHairColors_IsSet => DefaultHairColors != null;
        #endregion
        #region NumberOfTintsInList
        private int? _NumberOfTintsInListLocation;
        public UInt16? NumberOfTintsInList => _NumberOfTintsInListLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NumberOfTintsInListLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        #region FacegenMainClamp
        private int? _FacegenMainClampLocation;
        public Single? FacegenMainClamp => _FacegenMainClampLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FacegenMainClampLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region FacegenFaceClamp
        private int? _FacegenFaceClampLocation;
        public Single? FacegenFaceClamp => _FacegenFaceClampLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FacegenFaceClampLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public bool AttackRace_IsSet => _AttackRaceLocation.HasValue;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => _AttackRaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _AttackRaceLocation.Value, _package.Meta)))) : FormLinkNullable<IRaceGetter>.Empty;
        #endregion
        public IReadOnlySetList<IAttackGetter> Attacks { get; private set; } = EmptySetList<AttackBinaryOverlay>.Instance;
        #region BodyData
        public IBodyDataPairGetter? BodyData { get; private set; }
        public bool BodyData_IsSet => BodyData != null;
        #endregion
        public IReadOnlySetList<IFormLinkGetter<IHairGetter>> Hairs { get; private set; } = EmptySetList<IFormLinkGetter<IHairGetter>>.Instance;
        public IReadOnlySetList<IFormLinkGetter<IEyeGetter>> Eyes { get; private set; } = EmptySetList<IFormLinkGetter<IEyeGetter>>.Instance;
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public bool BodyPartData_IsSet => _BodyPartDataLocation.HasValue;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => _BodyPartDataLocation.HasValue ? new FormLinkNullable<IBodyPartDataGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BodyPartDataLocation.Value, _package.Meta)))) : FormLinkNullable<IBodyPartDataGetter>.Empty;
        #endregion
        #region ExtraMarkers
        partial void ExtraMarkersCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RaceBinaryOverlay RaceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new RaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x54435053: // SPCT
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.ActorEffect = BinaryOverlaySetList<IFormLinkGetter<ISpellAbstractGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ISpellAbstractGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ActorEffect);
                }
                case 0x4D414E57: // WNAM
                {
                    _SkinLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Skin);
                }
                case 0x54444F42: // BODT
                {
                    _BodyTemplateLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyTemplate);
                }
                case 0x5A49534B: // KSIZ
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Keywords = BinaryOverlaySetList<IFormLinkGetter<IKeywordGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MaleSkeletalModelLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MaleSkeletalModel);
                }
                case 0x4D414E46: // FNAM
                {
                    _FemaleSkeletalModelLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FemaleSkeletalModel);
                }
                case 0x4D4E544D: // MTNM
                {
                    this.MovementTypeNames = BinaryOverlaySetList<String>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypeNames);
                }
                case 0x4B435456: // VTCK
                {
                    _VoicesLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    this.DecapitateArmors = GenderedFormLinksBinaryOverlay<IArmorGetter>.GenderedFormLinksFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitateArmors);
                }
                case 0x464C4348: // HCLF
                {
                    this.DefaultHairColors = GenderedFormLinksBinaryOverlay<IColorRecordGetter>.GenderedFormLinksFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColors);
                }
                case 0x4C4E4954: // TINL
                {
                    _NumberOfTintsInListLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.NumberOfTintsInList);
                }
                case 0x4D414E50: // PNAM
                {
                    _FacegenMainClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    _FacegenFaceClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenFaceClamp);
                }
                case 0x524B5441: // ATKR
                {
                    _AttackRaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.AttackRace);
                }
                case 0x444B5441: // ATKD
                case 0x454B5441: // ATKE
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<AttackBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Attack_Registration.TriggeringRecordTypes,
                        factory:  AttackBinaryOverlay.AttackFactory);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Attacks);
                }
                case 0x314D414E: // NAM1
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.BodyData = BodyDataPairBinaryOverlay.BodyDataPairFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Hairs = BinaryOverlaySetList<IFormLinkGetter<IHairGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IHairGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Eyes = BinaryOverlaySetList<IFormLinkGetter<IEyeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyeGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x4D414E47: // GNAM
                {
                    _BodyPartDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyPartData);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

