/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Rank :
        IRank,
        ILoquiObjectSetter<Rank>,
        IEquatable<Rank>,
        IEqualsMask
    {
        #region Ctor
        public Rank()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RankID
        public bool RankID_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.RankID];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.RankID] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IRankGetter.RankID_IsSet => RankID_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _RankID;
        public UInt32 RankID
        {
            get => this._RankID;
            set => RankID_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32 IRankGetter.RankID => this.RankID;
        public void RankID_Set(
            UInt32 value,
            bool markSet = true)
        {
            _RankID = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.RankID] = markSet;
        }
        public void RankID_Unset()
        {
            this.RankID_Set(default(UInt32), false);
        }
        #endregion
        #region MaleRankTitle
        public bool MaleRankTitle_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.MaleRankTitle];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.MaleRankTitle] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IRankGetter.MaleRankTitle_IsSet => MaleRankTitle_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _MaleRankTitle;
        public String MaleRankTitle
        {
            get => this._MaleRankTitle;
            set => MaleRankTitle_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IRankGetter.MaleRankTitle => this.MaleRankTitle;
        public void MaleRankTitle_Set(
            String value,
            bool markSet = true)
        {
            _MaleRankTitle = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.MaleRankTitle] = markSet;
        }
        public void MaleRankTitle_Unset()
        {
            this.MaleRankTitle_Set(default(String), false);
        }
        #endregion
        #region FemaleRankTitle
        public bool FemaleRankTitle_IsSet
        {
            get => _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleRankTitle];
            set => _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleRankTitle] = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool IRankGetter.FemaleRankTitle_IsSet => FemaleRankTitle_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String _FemaleRankTitle;
        public String FemaleRankTitle
        {
            get => this._FemaleRankTitle;
            set => FemaleRankTitle_Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String IRankGetter.FemaleRankTitle => this.FemaleRankTitle;
        public void FemaleRankTitle_Set(
            String value,
            bool markSet = true)
        {
            _FemaleRankTitle = value;
            _hasBeenSetTracker[(int)Rank_FieldIndex.FemaleRankTitle] = markSet;
        }
        public void FemaleRankTitle_Unset()
        {
            this.FemaleRankTitle_Set(default(String), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IRankGetter rhs)) return false;
            return ((RankCommon)((IRankGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Rank obj)
        {
            return ((RankCommon)((IRankGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((RankCommon)((IRankGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Rank() : null;
                    break;
                default:
                    break;
            }
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Rank CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Rank CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Rank_FieldIndex)index)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Rank CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Rank CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RankSetterCommon)((IRankGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Rank GetNew()
        {
            return new Rank();
        }

    }
    #endregion

    #region Interface
    public partial interface IRank :
        IRankGetter,
        ILoquiObjectSetter<IRank>
    {
        new UInt32 RankID { get; set; }
        new bool RankID_IsSet { get; set; }
        void RankID_Set(UInt32 value, bool hasBeenSet = true);
        void RankID_Unset();

        new String MaleRankTitle { get; set; }
        new bool MaleRankTitle_IsSet { get; set; }
        void MaleRankTitle_Set(String value, bool hasBeenSet = true);
        void MaleRankTitle_Unset();

        new String FemaleRankTitle { get; set; }
        new bool FemaleRankTitle_IsSet { get; set; }
        void FemaleRankTitle_Set(String value, bool hasBeenSet = true);
        void FemaleRankTitle_Unset();

    }

    public partial interface IRankGetter :
        ILoquiObject,
        ILoquiObject<IRankGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region RankID
        UInt32 RankID { get; }
        bool RankID_IsSet { get; }

        #endregion
        #region MaleRankTitle
        String MaleRankTitle { get; }
        bool MaleRankTitle_IsSet { get; }

        #endregion
        #region FemaleRankTitle
        String FemaleRankTitle { get; }
        bool FemaleRankTitle_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RankMixIn
    {
        public static void Clear(this IRank item)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Rank_Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            ((RankCommon)((IRankGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Rank_Mask<bool> GetHasBeenSetMask(this IRankGetter item)
        {
            var ret = new Rank_Mask<bool>();
            ((RankCommon)((IRankGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRankGetter item,
            IRankGetter rhs)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            Rank_TranslationMask copyMask)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IRank lhs,
            IRankGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            Rank_TranslationMask copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Rank_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Rank_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        RankID = 0,
        MaleRankTitle = 1,
        FemaleRankTitle = 2,
    }
    #endregion

    #region Registration
    public partial class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 32,
            version: 0);

        public const string GUID = "168a7e1e-9304-4604-b927-7b61cfa16730";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Rank_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank_ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RANKID":
                    return (ushort)Rank_FieldIndex.RankID;
                case "MALERANKTITLE":
                    return (ushort)Rank_FieldIndex.MaleRankTitle;
                case "FEMALERANKTITLE":
                    return (ushort)Rank_FieldIndex.FemaleRankTitle;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                    return "RankID";
                case Rank_FieldIndex.MaleRankTitle:
                    return "MaleRankTitle";
                case Rank_FieldIndex.FemaleRankTitle:
                    return "FemaleRankTitle";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                    return typeof(UInt32);
                case Rank_FieldIndex.MaleRankTitle:
                    return typeof(String);
                case Rank_FieldIndex.FemaleRankTitle:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RankXmlWriteTranslation);
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RNAM_HEADER,
                        MNAM_HEADER,
                        FNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(RankBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RankSetterCommon
    {
        public static readonly RankSetterCommon Instance = new RankSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRank item)
        {
            ClearPartial();
            item.RankID_Unset();
            item.MaleRankTitle_Unset();
            item.FemaleRankTitle_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRank item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankID) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RankID = frame.ReadUInt32();
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankID);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleRankTitle) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaleRankTitle = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleRankTitle);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleRankTitle) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FemaleRankTitle = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleRankTitle);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IRank item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RankCommon
    {
        public static readonly RankCommon Instance = new RankCommon();

        public Rank_Mask<bool> GetEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Rank_Mask<bool>();
            ((RankCommon)((IRankGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RankID = item.RankID_IsSet == rhs.RankID_IsSet && item.RankID == rhs.RankID;
            ret.MaleRankTitle = item.MaleRankTitle_IsSet == rhs.MaleRankTitle_IsSet && string.Equals(item.MaleRankTitle, rhs.MaleRankTitle);
            ret.FemaleRankTitle = item.FemaleRankTitle_IsSet == rhs.FemaleRankTitle_IsSet && string.Equals(item.FemaleRankTitle, rhs.FemaleRankTitle);
        }
        
        public string ToString(
            IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Rank =>");
            }
            else
            {
                fg.AppendLine($"{name} (Rank) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankGetter item,
            FileGeneration fg,
            Rank_Mask<bool> printMask = null)
        {
            if (printMask?.RankID ?? true)
            {
                fg.AppendLine($"RankID => {item.RankID}");
            }
            if (printMask?.MaleRankTitle ?? true)
            {
                fg.AppendLine($"MaleRankTitle => {item.MaleRankTitle}");
            }
            if (printMask?.FemaleRankTitle ?? true)
            {
                fg.AppendLine($"FemaleRankTitle => {item.FemaleRankTitle}");
            }
        }
        
        public bool HasBeenSet(
            IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            if (checkMask.RankID.HasValue && checkMask.RankID.Value != item.RankID_IsSet) return false;
            if (checkMask.MaleRankTitle.HasValue && checkMask.MaleRankTitle.Value != item.MaleRankTitle_IsSet) return false;
            if (checkMask.FemaleRankTitle.HasValue && checkMask.FemaleRankTitle.Value != item.FemaleRankTitle_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRankGetter item,
            Rank_Mask<bool> mask)
        {
            mask.RankID = item.RankID_IsSet;
            mask.MaleRankTitle = item.MaleRankTitle_IsSet;
            mask.FemaleRankTitle = item.FemaleRankTitle_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankGetter lhs,
            IRankGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.RankID_IsSet != rhs.RankID_IsSet) return false;
            if (lhs.RankID_IsSet)
            {
                if (lhs.RankID != rhs.RankID) return false;
            }
            if (lhs.MaleRankTitle_IsSet != rhs.MaleRankTitle_IsSet) return false;
            if (lhs.MaleRankTitle_IsSet)
            {
                if (!string.Equals(lhs.MaleRankTitle, rhs.MaleRankTitle)) return false;
            }
            if (lhs.FemaleRankTitle_IsSet != rhs.FemaleRankTitle_IsSet) return false;
            if (lhs.FemaleRankTitle_IsSet)
            {
                if (!string.Equals(lhs.FemaleRankTitle, rhs.FemaleRankTitle)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IRankGetter item)
        {
            int ret = 0;
            if (item.RankID_IsSet)
            {
                ret = HashHelper.GetHashCode(item.RankID).CombineHashCode(ret);
            }
            if (item.MaleRankTitle_IsSet)
            {
                ret = HashHelper.GetHashCode(item.MaleRankTitle).CombineHashCode(ret);
            }
            if (item.FemaleRankTitle_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FemaleRankTitle).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Rank.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRankGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RankSetterTranslationCommon
    {
        public static readonly RankSetterTranslationCommon Instance = new RankSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IRank item,
            IRankGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.RankID) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.RankID);
                try
                {
                    if (rhs.RankID_IsSet)
                    {
                        item.RankID = rhs.RankID;
                    }
                    else
                    {
                        item.RankID_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleRankTitle) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.MaleRankTitle);
                try
                {
                    if (rhs.MaleRankTitle_IsSet)
                    {
                        item.MaleRankTitle = rhs.MaleRankTitle;
                    }
                    else
                    {
                        item.MaleRankTitle_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleRankTitle) ?? true))
            {
                errorMask?.PushIndex((int)Rank_FieldIndex.FemaleRankTitle);
                try
                {
                    if (rhs.FemaleRankTitle_IsSet)
                    {
                        item.FemaleRankTitle = rhs.FemaleRankTitle;
                    }
                    else
                    {
                        item.FemaleRankTitle_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Rank DeepCopy(
            IRankGetter item,
            Rank_TranslationMask copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Rank
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RankSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RankXmlWriteTranslation Instance = new RankXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRankGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.RankID_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.RankID) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RankID),
                    item: item.RankID,
                    fieldIndex: (int)Rank_FieldIndex.RankID,
                    errorMask: errorMask);
            }
            if (item.MaleRankTitle_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleRankTitle) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleRankTitle),
                    item: item.MaleRankTitle,
                    fieldIndex: (int)Rank_FieldIndex.MaleRankTitle,
                    errorMask: errorMask);
            }
            if (item.FemaleRankTitle_IsSet
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleRankTitle) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleRankTitle),
                    item: item.FemaleRankTitle,
                    fieldIndex: (int)Rank_FieldIndex.FemaleRankTitle,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Rank");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Rank");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRankGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRankGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RankXmlCreateTranslation
    {
        public readonly static RankXmlCreateTranslation Instance = new RankXmlCreateTranslation();

        public static void FillPublicXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRank item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "RankID":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.RankID);
                        item.RankID = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleRankTitle":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.MaleRankTitle);
                        item.MaleRankTitle = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleRankTitle":
                    try
                    {
                        errorMask?.PushIndex((int)Rank_FieldIndex.FemaleRankTitle);
                        item.FemaleRankTitle = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RankXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            out Rank_ErrorMask errorMask,
            Rank_TranslationMask translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            string name = null,
            Rank_TranslationMask translationMask = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class Rank_Mask<T> : IMask<T>, IEquatable<Rank_Mask<T>>
    {
        #region Ctors
        public Rank_Mask()
        {
        }

        public Rank_Mask(T initialValue)
        {
            this.RankID = initialValue;
            this.MaleRankTitle = initialValue;
            this.FemaleRankTitle = initialValue;
        }

        public Rank_Mask(
            T RankID,
            T MaleRankTitle,
            T FemaleRankTitle)
        {
            this.RankID = RankID;
            this.MaleRankTitle = MaleRankTitle;
            this.FemaleRankTitle = FemaleRankTitle;
        }
        #endregion

        #region Members
        public T RankID;
        public T MaleRankTitle;
        public T FemaleRankTitle;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Rank_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RankID, rhs.RankID)) return false;
            if (!object.Equals(this.MaleRankTitle, rhs.MaleRankTitle)) return false;
            if (!object.Equals(this.FemaleRankTitle, rhs.FemaleRankTitle)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RankID?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleRankTitle?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleRankTitle?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.RankID)) return false;
            if (!eval(this.MaleRankTitle)) return false;
            if (!eval(this.FemaleRankTitle)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Rank_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Rank_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Rank_Mask<R> obj, Func<T, R> eval)
        {
            obj.RankID = eval(this.RankID);
            obj.MaleRankTitle = eval(this.MaleRankTitle);
            obj.FemaleRankTitle = eval(this.FemaleRankTitle);
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Rank_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Rank_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankID ?? true)
                {
                    fg.AppendLine($"RankID => {RankID}");
                }
                if (printMask?.MaleRankTitle ?? true)
                {
                    fg.AppendLine($"MaleRankTitle => {MaleRankTitle}");
                }
                if (printMask?.FemaleRankTitle ?? true)
                {
                    fg.AppendLine($"FemaleRankTitle => {FemaleRankTitle}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Rank_ErrorMask : IErrorMask, IErrorMask<Rank_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception RankID;
        public Exception MaleRankTitle;
        public Exception FemaleRankTitle;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                    return RankID;
                case Rank_FieldIndex.MaleRankTitle:
                    return MaleRankTitle;
                case Rank_FieldIndex.FemaleRankTitle:
                    return FemaleRankTitle;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                    this.RankID = ex;
                    break;
                case Rank_FieldIndex.MaleRankTitle:
                    this.MaleRankTitle = ex;
                    break;
                case Rank_FieldIndex.FemaleRankTitle:
                    this.FemaleRankTitle = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankID:
                    this.RankID = (Exception)obj;
                    break;
                case Rank_FieldIndex.MaleRankTitle:
                    this.MaleRankTitle = (Exception)obj;
                    break;
                case Rank_FieldIndex.FemaleRankTitle:
                    this.FemaleRankTitle = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (RankID != null) return true;
            if (MaleRankTitle != null) return true;
            if (FemaleRankTitle != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Rank_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"RankID => {RankID}");
            fg.AppendLine($"MaleRankTitle => {MaleRankTitle}");
            fg.AppendLine($"FemaleRankTitle => {FemaleRankTitle}");
        }
        #endregion

        #region Combine
        public Rank_ErrorMask Combine(Rank_ErrorMask rhs)
        {
            var ret = new Rank_ErrorMask();
            ret.RankID = this.RankID.Combine(rhs.RankID);
            ret.MaleRankTitle = this.MaleRankTitle.Combine(rhs.MaleRankTitle);
            ret.FemaleRankTitle = this.FemaleRankTitle.Combine(rhs.FemaleRankTitle);
            return ret;
        }
        public static Rank_ErrorMask Combine(Rank_ErrorMask lhs, Rank_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Rank_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Rank_ErrorMask();
        }
        #endregion

    }
    public class Rank_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool RankID;
        public bool MaleRankTitle;
        public bool FemaleRankTitle;
        #endregion

        #region Ctors
        public Rank_TranslationMask()
        {
        }

        public Rank_TranslationMask(bool defaultOn)
        {
            this.RankID = defaultOn;
            this.MaleRankTitle = defaultOn;
            this.FemaleRankTitle = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal(ret.ToArray());
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((RankID, null));
            ret.Add((MaleRankTitle, null));
            ret.Add((FemaleRankTitle, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankBinaryWriteTranslation Instance = new RankBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IRankGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            MasterReferences masterReferences)
        {
            if (item.RankID_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RankID,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.RNAM_HEADER),
                    nullable: false);
            }
            if (item.MaleRankTitle_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaleRankTitle,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.MNAM_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
            if (item.FemaleRankTitle_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FemaleRankTitle,
                    header: recordTypeConverter.ConvertToCustom(Rank_Registration.FNAM_HEADER),
                    nullable: false,
                    binaryType: StringBinaryType.NullTerminate);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRankGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            Write(
                item: (IRankGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RankBinaryCreateTranslation
    {
        public readonly static RankBinaryCreateTranslation Instance = new RankBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RankBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankBinaryOverlay :
        BinaryOverlay,
        IRankGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region RankID
        private int? _RankIDLocation;
        public bool RankID_IsSet => _RankIDLocation.HasValue;
        public UInt32 RankID => _RankIDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RankIDLocation.Value, _package.Meta)) : default;
        #endregion
        #region MaleRankTitle
        private int? _MaleRankTitleLocation;
        public bool MaleRankTitle_IsSet => _MaleRankTitleLocation.HasValue;
        public String MaleRankTitle => _MaleRankTitleLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MaleRankTitleLocation.Value, _package.Meta)) : default;
        #endregion
        #region FemaleRankTitle
        private int? _FemaleRankTitleLocation;
        public bool FemaleRankTitle_IsSet => _FemaleRankTitleLocation.HasValue;
        public String FemaleRankTitle => _FemaleRankTitleLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _FemaleRankTitleLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RankBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RankBinaryOverlay RankFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new RankBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankID) return TryGet<int?>.Failure;
                    _RankIDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankID);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleRankTitle) return TryGet<int?>.Failure;
                    _MaleRankTitleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleRankTitle);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleRankTitle) return TryGet<int?>.Failure;
                    _FemaleRankTitleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleRankTitle);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

