/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TextureSet :
        SkyrimMajorRecord,
        ITextureSetInternal,
        ILoquiObjectSetter<TextureSet>,
        IEquatable<TextureSet>,
        IEqualsMask
    {
        #region Ctor
        protected TextureSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public bool ObjectBounds_IsSet
        {
            get => _hasBeenSetTracker[(int)TextureSet_FieldIndex.ObjectBounds];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)TextureSet_FieldIndex.ObjectBounds, nameof(ObjectBounds_IsSet));
        }
        bool ITextureSetGetter.ObjectBounds_IsSet => ObjectBounds_IsSet;
        private ObjectBounds _ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ObjectBounds ObjectBounds
        {
            get => _ObjectBounds;
            set => ObjectBounds_Set(value);
        }
        public void ObjectBounds_Set(
            ObjectBounds value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ObjectBounds, value, _hasBeenSetTracker, hasBeenSet, (int)TextureSet_FieldIndex.ObjectBounds, nameof(ObjectBounds), nameof(ObjectBounds_IsSet));
        }
        public void ObjectBounds_Unset()
        {
            this.ObjectBounds_Set(default(ObjectBounds), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsInternalGetter ITextureSetGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #region Textures
        public bool Textures_IsSet
        {
            get => _hasBeenSetTracker[(int)TextureSet_FieldIndex.Textures];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)TextureSet_FieldIndex.Textures, nameof(Textures_IsSet));
        }
        bool ITextureSetGetter.Textures_IsSet => Textures_IsSet;
        private Textures _Textures;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Textures Textures
        {
            get => _Textures;
            set => Textures_Set(value);
        }
        public void Textures_Set(
            Textures value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Textures, value, _hasBeenSetTracker, hasBeenSet, (int)TextureSet_FieldIndex.Textures, nameof(Textures), nameof(Textures_IsSet));
        }
        public void Textures_Unset()
        {
            this.Textures_Set(default(Textures), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITexturesInternalGetter ITextureSetGetter.Textures => this.Textures;
        #endregion
        #region Decal
        public bool Decal_IsSet
        {
            get => _hasBeenSetTracker[(int)TextureSet_FieldIndex.Decal];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)TextureSet_FieldIndex.Decal, nameof(Decal_IsSet));
        }
        bool ITextureSetGetter.Decal_IsSet => Decal_IsSet;
        private Decal _Decal;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Decal Decal
        {
            get => _Decal;
            set => Decal_Set(value);
        }
        public void Decal_Set(
            Decal value,
            bool hasBeenSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Decal, value, _hasBeenSetTracker, hasBeenSet, (int)TextureSet_FieldIndex.Decal, nameof(Decal), nameof(Decal_IsSet));
        }
        public void Decal_Unset()
        {
            this.Decal_Set(default(Decal), false);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDecalInternalGetter ITextureSetGetter.Decal => this.Decal;
        #endregion
        #region Flags
        public bool Flags_IsSet
        {
            get => _hasBeenSetTracker[(int)TextureSet_FieldIndex.Flags];
            set => _hasBeenSetTracker[(int)TextureSet_FieldIndex.Flags] = value;
        }
        bool ITextureSetGetter.Flags_IsSet => Flags_IsSet;
        private TextureSet.Flag _Flags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TextureSet.Flag Flags
        {
            get => this._Flags;
            set => Flags_Set(value);
        }
        TextureSet.Flag ITextureSetGetter.Flags => this.Flags;
        public void Flags_Set(
            TextureSet.Flag value,
            bool markSet = true)
        {
            _Flags = value;
            _hasBeenSetTracker[(int)TextureSet_FieldIndex.Flags] = markSet;
        }
        public void Flags_Unset()
        {
            this.Flags_Set(default(TextureSet.Flag), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITextureSetInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TextureSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ITextureSetInternalGetter rhs)) return false;
            return ((TextureSetCommon)((ITextureSetInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(TextureSet obj)
        {
            return ((TextureSetCommon)((ITextureSetInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((TextureSetCommon)((ITextureSetInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => TextureSetXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TextureSetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TextureSet CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            TextureSet_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TextureSet CreateFromXml(
            XElement node,
            out TextureSet_ErrorMask errorMask,
            bool doMasks = true,
            TextureSet_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TextureSet_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static TextureSet CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new TextureSet() : null;
                    break;
                default:
                    break;
            }
            var ret = new TextureSet();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TextureSetXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TextureSet CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            TextureSet_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            string path,
            out TextureSet_ErrorMask errorMask,
            TextureSet_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            TextureSet_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            TextureSet_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            out TextureSet_ErrorMask errorMask,
            TextureSet_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TextureSet_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            TextureSet item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((TextureSet_FieldIndex)index)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = TextureSet_Registration.TRIGGERING_RECORD_TYPE;
        public TextureSet(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public TextureSet(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static TextureSet CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static TextureSet CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out TextureSet_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = TextureSet_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static TextureSet CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<TextureSet>(
                record: new TextureSet(),
                frame: frame,
                errorMask: errorMask,
                recType: TextureSet_Registration.TXST_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }

        #endregion

        protected static void FillBinaryStructs(
            TextureSet item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            SkyrimMajorRecord.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            TextureSet item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                        item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.ObjectBounds);
                }
                case 0x30305854: // TX00
                case 0x31305854: // TX01
                case 0x32305854: // TX02
                case 0x33305854: // TX03
                case 0x34305854: // TX04
                case 0x35305854: // TX05
                case 0x36305854: // TX06
                case 0x37305854: // TX07
                {
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.Textures);
                        item.Textures = Mutagen.Bethesda.Skyrim.Textures.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Textures);
                }
                case 0x54444F44: // DODT
                {
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                        item.Decal = Mutagen.Bethesda.Skyrim.Decal.CreateFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Decal);
                }
                case 0x4D414E44: // DNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (EnumBinaryTranslation<TextureSet.Flag>.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out TextureSet.Flag FlagsParse))
                    {
                        item.Flags = FlagsParse;
                    }
                    else
                    {
                        item.Flags = default(TextureSet.Flag);
                    }
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Flags);
                }
                default:
                    return SkyrimMajorRecord.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public TextureSet Copy(
            TextureSet_CopyMask copyMask = null,
            TextureSet def = null)
        {
            return TextureSet.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TextureSet Copy(
            TextureSet item,
            TextureSet_CopyMask copyMask = null,
            TextureSet def = null)
        {
            TextureSet ret;
            if (item.GetType().Equals(typeof(TextureSet)))
            {
                ret = new TextureSet();
            }
            else
            {
                ret = (TextureSet)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void IClearable.Clear()
        {
            ((TextureSetSetterCommon)((ITextureSetInternalGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface ITextureSet :
        ITextureSetInternalGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ITextureSetInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new bool ObjectBounds_IsSet { get; set; }
        void ObjectBounds_Set(ObjectBounds value, bool hasBeenSet = true);
        void ObjectBounds_Unset();

        new Textures Textures { get; set; }
        new bool Textures_IsSet { get; set; }
        void Textures_Set(Textures value, bool hasBeenSet = true);
        void Textures_Unset();

        new Decal Decal { get; set; }
        new bool Decal_IsSet { get; set; }
        void Decal_Set(Decal value, bool hasBeenSet = true);
        void Decal_Unset();

        new TextureSet.Flag Flags { get; set; }
        new bool Flags_IsSet { get; set; }
        void Flags_Set(TextureSet.Flag value, bool hasBeenSet = true);
        void Flags_Unset();

    }

    public partial interface ITextureSetInternal :
        ISkyrimMajorRecordInternal,
        ITextureSet,
        ITextureSetInternalGetter
    {
    }

    public partial interface ITextureSetGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ITextureSetInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region ObjectBounds
        IObjectBoundsInternalGetter ObjectBounds { get; }
        bool ObjectBounds_IsSet { get; }

        #endregion
        #region Textures
        ITexturesInternalGetter Textures { get; }
        bool Textures_IsSet { get; }

        #endregion
        #region Decal
        IDecalInternalGetter Decal { get; }
        bool Decal_IsSet { get; }

        #endregion
        #region Flags
        TextureSet.Flag Flags { get; }
        bool Flags_IsSet { get; }

        #endregion

    }

    public partial interface ITextureSetInternalGetter :
        ISkyrimMajorRecordInternalGetter,
        ITextureSetGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class TextureSetMixIn
    {
        public static void Clear(this ITextureSetInternal item)
        {
            ((TextureSetSetterCommon)((ITextureSetInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static TextureSet_Mask<bool> GetEqualsMask(
            this ITextureSetInternalGetter item,
            ITextureSetInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITextureSetInternalGetter item,
            string name = null,
            TextureSet_Mask<bool> printMask = null)
        {
            return ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITextureSetInternalGetter item,
            FileGeneration fg,
            string name = null,
            TextureSet_Mask<bool> printMask = null)
        {
            ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITextureSetInternalGetter item,
            TextureSet_Mask<bool?> checkMask)
        {
            return ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TextureSet_Mask<bool> GetHasBeenSetMask(this ITextureSetInternalGetter item)
        {
            var ret = new TextureSet_Mask<bool>();
            ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITextureSetInternalGetter item,
            ITextureSetInternalGetter rhs)
        {
            return ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this TextureSet lhs,
            TextureSet rhs,
            TextureSet_CopyMask copyMask,
            TextureSet def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this TextureSet lhs,
            TextureSet rhs,
            out TextureSet_ErrorMask errorMask,
            TextureSet_CopyMask copyMask = null,
            TextureSet def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TextureSetSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = TextureSet_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this TextureSet lhs,
            TextureSet rhs,
            ErrorMaskBuilder errorMask,
            TextureSet_CopyMask copyMask = null,
            TextureSet def = null)
        {
            TextureSetSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TextureSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        ObjectBounds = 7,
        Textures = 8,
        Decal = 9,
        Flags = 10,
    }
    #endregion

    #region Registration
    public class TextureSet_Registration : ILoquiRegistration
    {
        public static readonly TextureSet_Registration Instance = new TextureSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 22,
            version: 0);

        public const string GUID = "7d698f54-6430-49c7-ab37-7649204e689b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(TextureSet_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TextureSet_ErrorMask);

        public static readonly Type ClassType = typeof(TextureSet);

        public static readonly Type GetterType = typeof(ITextureSetGetter);

        public static readonly Type InternalGetterType = typeof(ITextureSetInternalGetter);

        public static readonly Type SetterType = typeof(ITextureSet);

        public static readonly Type InternalSetterType = typeof(ITextureSetInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.TextureSet";

        public const string Name = "TextureSet";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)TextureSet_FieldIndex.ObjectBounds;
                case "TEXTURES":
                    return (ushort)TextureSet_FieldIndex.Textures;
                case "DECAL":
                    return (ushort)TextureSet_FieldIndex.Decal;
                case "FLAGS":
                    return (ushort)TextureSet_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                    return true;
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case TextureSet_FieldIndex.Textures:
                    return "Textures";
                case TextureSet_FieldIndex.Decal:
                    return "Decal";
                case TextureSet_FieldIndex.Flags:
                    return "Flags";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Textures:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case TextureSet_FieldIndex.Textures:
                    return typeof(Textures);
                case TextureSet_FieldIndex.Decal:
                    return typeof(Decal);
                case TextureSet_FieldIndex.Flags:
                    return typeof(TextureSet.Flag);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TextureSetXmlWriteTranslation);
        public static readonly RecordType TXST_HEADER = new RecordType("TXST");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType TX00_HEADER = new RecordType("TX00");
        public static readonly RecordType TX01_HEADER = new RecordType("TX01");
        public static readonly RecordType TX02_HEADER = new RecordType("TX02");
        public static readonly RecordType TX03_HEADER = new RecordType("TX03");
        public static readonly RecordType TX04_HEADER = new RecordType("TX04");
        public static readonly RecordType TX05_HEADER = new RecordType("TX05");
        public static readonly RecordType TX06_HEADER = new RecordType("TX06");
        public static readonly RecordType TX07_HEADER = new RecordType("TX07");
        public static readonly RecordType DODT_HEADER = new RecordType("DODT");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = TXST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(TextureSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TextureSetSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TextureSetSetterCommon Instance = new TextureSetSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ITextureSetInternal item)
        {
            ClearPartial();
            item.ObjectBounds_Unset();
            item.Textures_Unset();
            item.Decal_Unset();
            item.Flags_Unset();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
    }
    public partial class TextureSetCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TextureSetCommon Instance = new TextureSetCommon();

        public TextureSet_Mask<bool> GetEqualsMask(
            ITextureSetInternalGetter item,
            ITextureSetInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TextureSet_Mask<bool>();
            ((TextureSetCommon)((ITextureSetInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITextureSetInternalGetter item,
            ITextureSetInternalGetter rhs,
            TextureSet_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = EqualsMaskHelper.EqualsHelper(
                item.ObjectBounds_IsSet,
                rhs.ObjectBounds_IsSet,
                item.ObjectBounds,
                rhs.ObjectBounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Textures = EqualsMaskHelper.EqualsHelper(
                item.Textures_IsSet,
                rhs.Textures_IsSet,
                item.Textures,
                rhs.Textures,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Decal = EqualsMaskHelper.EqualsHelper(
                item.Decal_IsSet,
                rhs.Decal_IsSet,
                item.Decal,
                rhs.Decal,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Flags = item.Flags_IsSet == rhs.Flags_IsSet && item.Flags == rhs.Flags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITextureSetInternalGetter item,
            string name = null,
            TextureSet_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITextureSetInternalGetter item,
            FileGeneration fg,
            string name = null,
            TextureSet_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TextureSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (TextureSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITextureSetInternalGetter item,
            FileGeneration fg,
            TextureSet_Mask<bool> printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.Textures?.Overall ?? true)
            {
                item.Textures?.ToString(fg, "Textures");
            }
            if (printMask?.Decal?.Overall ?? true)
            {
                item.Decal?.ToString(fg, "Decal");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendLine($"Flags => {item.Flags}");
            }
        }
        
        public bool HasBeenSet(
            ITextureSetInternalGetter item,
            TextureSet_Mask<bool?> checkMask)
        {
            if (checkMask.ObjectBounds.Overall.HasValue && checkMask.ObjectBounds.Overall.Value != item.ObjectBounds_IsSet) return false;
            if (checkMask.ObjectBounds.Specific != null && (item.ObjectBounds == null || !item.ObjectBounds.HasBeenSet(checkMask.ObjectBounds.Specific))) return false;
            if (checkMask.Textures.Overall.HasValue && checkMask.Textures.Overall.Value != item.Textures_IsSet) return false;
            if (checkMask.Textures.Specific != null && (item.Textures == null || !item.Textures.HasBeenSet(checkMask.Textures.Specific))) return false;
            if (checkMask.Decal.Overall.HasValue && checkMask.Decal.Overall.Value != item.Decal_IsSet) return false;
            if (checkMask.Decal.Specific != null && (item.Decal == null || !item.Decal.HasBeenSet(checkMask.Decal.Specific))) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_IsSet) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITextureSetInternalGetter item,
            TextureSet_Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds_Mask<bool>>(item.ObjectBounds_IsSet, item.ObjectBounds.GetHasBeenSetMask());
            mask.Textures = new MaskItem<bool, Textures_Mask<bool>>(item.Textures_IsSet, item.Textures.GetHasBeenSetMask());
            mask.Decal = new MaskItem<bool, Decal_Mask<bool>>(item.Decal_IsSet, item.Decal.GetHasBeenSetMask());
            mask.Flags = item.Flags_IsSet;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static TextureSet_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static TextureSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITextureSetInternalGetter lhs,
            ITextureSetInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.ObjectBounds_IsSet != rhs.ObjectBounds_IsSet) return false;
            if (lhs.ObjectBounds_IsSet)
            {
                if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            }
            if (lhs.Textures_IsSet != rhs.Textures_IsSet) return false;
            if (lhs.Textures_IsSet)
            {
                if (!object.Equals(lhs.Textures, rhs.Textures)) return false;
            }
            if (lhs.Decal_IsSet != rhs.Decal_IsSet) return false;
            if (lhs.Decal_IsSet)
            {
                if (!object.Equals(lhs.Decal, rhs.Decal)) return false;
            }
            if (lhs.Flags_IsSet != rhs.Flags_IsSet) return false;
            if (lhs.Flags_IsSet)
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordInternalGetter lhs,
            ISkyrimMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (ITextureSetInternalGetter)lhs,
                rhs: rhs as ITextureSetInternalGetter);
        }
        
        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (ITextureSetInternalGetter)lhs,
                rhs: rhs as ITextureSetInternalGetter);
        }
        
        public virtual int GetHashCode(ITextureSetInternalGetter item)
        {
            int ret = 0;
            if (item.ObjectBounds_IsSet)
            {
                ret = HashHelper.GetHashCode(item.ObjectBounds).CombineHashCode(ret);
            }
            if (item.Textures_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Textures).CombineHashCode(ret);
            }
            if (item.Decal_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Decal).CombineHashCode(ret);
            }
            if (item.Flags_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (ITextureSetInternalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (ITextureSetInternalGetter)item);
        }
        
        #endregion
        
        
        #region Mutagen
        partial void PostDuplicate(TextureSet obj, TextureSet rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new TextureSet(getNextFormKey());
            ret.CopyFieldsFrom((TextureSet)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (TextureSet)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TextureSetSetterCopyCommon : SkyrimMajorRecordSetterCopyCommon
    {
        public new static readonly TextureSetSetterCopyCommon Instance = new TextureSetSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            TextureSet item,
            TextureSet rhs,
            TextureSet def,
            ErrorMaskBuilder errorMask,
            TextureSet_CopyMask copyMask)
        {
            SkyrimMajorRecordSetterCopyCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.ObjectBounds.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ObjectBounds,
                        rhsHasBeenSet: rhs.ObjectBounds_IsSet,
                        defItem: def?.ObjectBounds,
                        defHasBeenSet: def?.ObjectBounds_IsSet ?? false,
                        outRhsItem: out var rhsObjectBoundsItem,
                        outDefItem: out var defObjectBoundsItem))
                    {
                        switch (copyMask?.ObjectBounds.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                ObjectBoundsSetterCopyCommon.CopyFieldsFrom(
                                    item: item.ObjectBounds,
                                    rhs: rhs.ObjectBounds,
                                    def: def?.ObjectBounds,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.ObjectBounds.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.ObjectBounds = ObjectBounds.Copy(
                                    rhsObjectBoundsItem,
                                    copyMask?.ObjectBounds?.Specific,
                                    def: defObjectBoundsItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.ObjectBounds?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.ObjectBounds_Set(
                            value: default(ObjectBounds),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Textures.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.Textures);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Textures,
                        rhsHasBeenSet: rhs.Textures_IsSet,
                        defItem: def?.Textures,
                        defHasBeenSet: def?.Textures_IsSet ?? false,
                        outRhsItem: out var rhsTexturesItem,
                        outDefItem: out var defTexturesItem))
                    {
                        switch (copyMask?.Textures.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                TexturesSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Textures,
                                    rhs: rhs.Textures,
                                    def: def?.Textures,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Textures.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Textures = Textures.Copy(
                                    rhsTexturesItem,
                                    copyMask?.Textures?.Specific,
                                    def: defTexturesItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Textures?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Textures_Set(
                            value: default(Textures),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Decal.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Decal,
                        rhsHasBeenSet: rhs.Decal_IsSet,
                        defItem: def?.Decal,
                        defHasBeenSet: def?.Decal_IsSet ?? false,
                        outRhsItem: out var rhsDecalItem,
                        outDefItem: out var defDecalItem))
                    {
                        switch (copyMask?.Decal.Overall ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                throw new NotImplementedException("Need to implement an ISetter copy function to support reference copies.");
                            case CopyOption.CopyIn:
                                DecalSetterCopyCommon.CopyFieldsFrom(
                                    item: item.Decal,
                                    rhs: rhs.Decal,
                                    def: def?.Decal,
                                    errorMask: errorMask,
                                    copyMask: copyMask?.Decal.Specific);
                                break;
                            case CopyOption.MakeCopy:
                                item.Decal = Decal.Copy(
                                    rhsDecalItem,
                                    copyMask?.Decal?.Specific,
                                    def: defDecalItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.Decal?.Overall}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Decal_Set(
                            value: default(Decal),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Flags ?? true)
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.Flags);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Flags,
                        rhsHasBeenSet: rhs.Flags_IsSet,
                        defItem: def?.Flags ?? default(TextureSet.Flag),
                        defHasBeenSet: def?.Flags_IsSet ?? false,
                        outRhsItem: out var rhsFlagsItem,
                        outDefItem: out var defFlagsItem))
                    {
                        item.Flags = rhsFlagsItem;
                    }
                    else
                    {
                        item.Flags_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TextureSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static TextureSet_Registration Registration => TextureSet_Registration.Instance;
        protected override object CommonInstance()
        {
            return TextureSetCommon.Instance;
        }
        protected override object CommonSetterInstance()
        {
            return TextureSetSetterCommon.Instance;
        }
        protected override object CommonSetterCopyInstance()
        {
            return TextureSetSetterCopyCommon.Instance;
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TextureSetXmlWriteTranslation Instance = new TextureSetXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITextureSetInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.ObjectBounds_IsSet
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
            {
                var loquiItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)TextureSet_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds));
            }
            if (item.Textures_IsSet
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Textures) ?? true))
            {
                var loquiItem = item.Textures;
                ((TexturesXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Textures),
                    fieldIndex: (int)TextureSet_FieldIndex.Textures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Textures));
            }
            if (item.Decal_IsSet
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Decal) ?? true))
            {
                var loquiItem = item.Decal;
                ((DecalXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Decal),
                    fieldIndex: (int)TextureSet_FieldIndex.Decal,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal));
            }
            if (item.Flags_IsSet
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<TextureSet.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)TextureSet_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITextureSetInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TextureSet");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TextureSet");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TextureSetXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static TextureSetXmlCreateTranslation Instance = new TextureSetXmlCreateTranslation();

        public static void FillPublicXml(
            ITextureSetInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TextureSetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITextureSetInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                        if (LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            item: out ObjectBounds ObjectBoundsParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds)))
                        {
                            item.ObjectBounds = ObjectBoundsParse;
                        }
                        else
                        {
                            item.ObjectBounds = default(ObjectBounds);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Textures":
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.Textures);
                        if (LoquiXmlTranslation<Textures>.Instance.Parse(
                            node: node,
                            item: out Textures TexturesParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Textures)))
                        {
                            item.Textures = TexturesParse;
                        }
                        else
                        {
                            item.Textures = default(Textures);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Decal":
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                        if (LoquiXmlTranslation<Decal>.Instance.Parse(
                            node: node,
                            item: out Decal DecalParse,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal)))
                        {
                            item.Decal = DecalParse;
                        }
                        else
                        {
                            item.Decal = default(Decal);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    try
                    {
                        errorMask?.PushIndex((int)TextureSet_FieldIndex.Flags);
                        if (EnumXmlTranslation<TextureSet.Flag>.Instance.Parse(
                            node: node,
                            item: out TextureSet.Flag FlagsParse,
                            errorMask: errorMask))
                        {
                            item.Flags = FlagsParse;
                        }
                        else
                        {
                            item.Flags = default(TextureSet.Flag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TextureSetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITextureSetInternalGetter item,
            XElement node,
            out TextureSet_ErrorMask errorMask,
            bool doMasks = true,
            TextureSet_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TextureSetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TextureSet_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITextureSetInternalGetter item,
            string path,
            out TextureSet_ErrorMask errorMask,
            TextureSet_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITextureSetInternalGetter item,
            Stream stream,
            out TextureSet_ErrorMask errorMask,
            TextureSet_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class TextureSet_Mask<T> : SkyrimMajorRecord_Mask<T>, IMask<T>, IEquatable<TextureSet_Mask<T>>
    {
        #region Ctors
        public TextureSet_Mask()
        {
        }

        public TextureSet_Mask(T initialValue)
        {
            this.ObjectBounds = new MaskItem<T, ObjectBounds_Mask<T>>(initialValue, new ObjectBounds_Mask<T>(initialValue));
            this.Textures = new MaskItem<T, Textures_Mask<T>>(initialValue, new Textures_Mask<T>(initialValue));
            this.Decal = new MaskItem<T, Decal_Mask<T>>(initialValue, new Decal_Mask<T>(initialValue));
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, ObjectBounds_Mask<T>> ObjectBounds { get; set; }
        public MaskItem<T, Textures_Mask<T>> Textures { get; set; }
        public MaskItem<T, Decal_Mask<T>> Decal { get; set; }
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TextureSet_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TextureSet_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(this.Textures, rhs.Textures)) return false;
            if (!object.Equals(this.Decal, rhs.Decal)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ObjectBounds?.GetHashCode());
            ret = ret.CombineHashCode(this.Textures?.GetHashCode());
            ret = ret.CombineHashCode(this.Decal?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (ObjectBounds != null)
            {
                if (!eval(this.ObjectBounds.Overall)) return false;
                if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.AllEqual(eval)) return false;
            }
            if (Textures != null)
            {
                if (!eval(this.Textures.Overall)) return false;
                if (this.Textures.Specific != null && !this.Textures.Specific.AllEqual(eval)) return false;
            }
            if (Decal != null)
            {
                if (!eval(this.Decal.Overall)) return false;
                if (this.Decal.Specific != null && !this.Decal.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new TextureSet_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TextureSet_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TextureSet_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.ObjectBounds != null)
            {
                obj.ObjectBounds = new MaskItem<R, ObjectBounds_Mask<R>>();
                obj.ObjectBounds.Overall = eval(this.ObjectBounds.Overall);
                if (this.ObjectBounds.Specific != null)
                {
                    obj.ObjectBounds.Specific = this.ObjectBounds.Specific.Translate(eval);
                }
            }
            if (this.Textures != null)
            {
                obj.Textures = new MaskItem<R, Textures_Mask<R>>();
                obj.Textures.Overall = eval(this.Textures.Overall);
                if (this.Textures.Specific != null)
                {
                    obj.Textures.Specific = this.Textures.Specific.Translate(eval);
                }
            }
            if (this.Decal != null)
            {
                obj.Decal = new MaskItem<R, Decal_Mask<R>>();
                obj.Decal.Overall = eval(this.Decal.Overall);
                if (this.Decal.Specific != null)
                {
                    obj.Decal.Specific = this.Decal.Specific.Translate(eval);
                }
            }
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TextureSet_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TextureSet_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TextureSet_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ObjectBounds?.Overall ?? true)
                {
                    ObjectBounds?.ToString(fg);
                }
                if (printMask?.Textures?.Overall ?? true)
                {
                    Textures?.ToString(fg);
                }
                if (printMask?.Decal?.Overall ?? true)
                {
                    Decal?.ToString(fg);
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TextureSet_ErrorMask : SkyrimMajorRecord_ErrorMask, IErrorMask<TextureSet_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, ObjectBounds_ErrorMask> ObjectBounds;
        public MaskItem<Exception, Textures_ErrorMask> Textures;
        public MaskItem<Exception, Decal_ErrorMask> Decal;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    return ObjectBounds;
                case TextureSet_FieldIndex.Textures:
                    return Textures;
                case TextureSet_FieldIndex.Decal:
                    return Decal;
                case TextureSet_FieldIndex.Flags:
                    return Flags;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    this.ObjectBounds = new MaskItem<Exception, ObjectBounds_ErrorMask>(ex, null);
                    break;
                case TextureSet_FieldIndex.Textures:
                    this.Textures = new MaskItem<Exception, Textures_ErrorMask>(ex, null);
                    break;
                case TextureSet_FieldIndex.Decal:
                    this.Decal = new MaskItem<Exception, Decal_ErrorMask>(ex, null);
                    break;
                case TextureSet_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    this.ObjectBounds = (MaskItem<Exception, ObjectBounds_ErrorMask>)obj;
                    break;
                case TextureSet_FieldIndex.Textures:
                    this.Textures = (MaskItem<Exception, Textures_ErrorMask>)obj;
                    break;
                case TextureSet_FieldIndex.Decal:
                    this.Decal = (MaskItem<Exception, Decal_ErrorMask>)obj;
                    break;
                case TextureSet_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (ObjectBounds != null) return true;
            if (Textures != null) return true;
            if (Decal != null) return true;
            if (Flags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("TextureSet_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            ObjectBounds?.ToString(fg);
            Textures?.ToString(fg);
            Decal?.ToString(fg);
            fg.AppendLine($"Flags => {Flags}");
        }
        #endregion

        #region Combine
        public TextureSet_ErrorMask Combine(TextureSet_ErrorMask rhs)
        {
            var ret = new TextureSet_ErrorMask();
            ret.ObjectBounds = new MaskItem<Exception, ObjectBounds_ErrorMask>(this.ObjectBounds.Overall.Combine(rhs.ObjectBounds.Overall), ((IErrorMask<ObjectBounds_ErrorMask>)this.ObjectBounds.Specific).Combine(rhs.ObjectBounds.Specific));
            ret.Textures = new MaskItem<Exception, Textures_ErrorMask>(this.Textures.Overall.Combine(rhs.Textures.Overall), ((IErrorMask<Textures_ErrorMask>)this.Textures.Specific).Combine(rhs.Textures.Specific));
            ret.Decal = new MaskItem<Exception, Decal_ErrorMask>(this.Decal.Overall.Combine(rhs.Decal.Overall), ((IErrorMask<Decal_ErrorMask>)this.Decal.Specific).Combine(rhs.Decal.Specific));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static TextureSet_ErrorMask Combine(TextureSet_ErrorMask lhs, TextureSet_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TextureSet_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TextureSet_ErrorMask();
        }
        #endregion

    }
    public class TextureSet_CopyMask : SkyrimMajorRecord_CopyMask
    {
        public TextureSet_CopyMask()
        {
        }

        public TextureSet_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ObjectBounds = new MaskItem<CopyOption, ObjectBounds_CopyMask>(deepCopyOption, default);
            this.Textures = new MaskItem<CopyOption, Textures_CopyMask>(deepCopyOption, default);
            this.Decal = new MaskItem<CopyOption, Decal_CopyMask>(deepCopyOption, default);
            this.Flags = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, ObjectBounds_CopyMask> ObjectBounds;
        public MaskItem<CopyOption, Textures_CopyMask> Textures;
        public MaskItem<CopyOption, Decal_CopyMask> Decal;
        public bool Flags;
        #endregion

    }

    public class TextureSet_TranslationMask : SkyrimMajorRecord_TranslationMask
    {
        #region Members
        public MaskItem<bool, ObjectBounds_TranslationMask> ObjectBounds;
        public MaskItem<bool, Textures_TranslationMask> Textures;
        public MaskItem<bool, Decal_TranslationMask> Decal;
        public bool Flags;
        #endregion

        #region Ctors
        public TextureSet_TranslationMask()
            : base()
        {
        }

        public TextureSet_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.ObjectBounds = new MaskItem<bool, ObjectBounds_TranslationMask>(defaultOn, null);
            this.Textures = new MaskItem<bool, Textures_TranslationMask>(defaultOn, null);
            this.Decal = new MaskItem<bool, Decal_TranslationMask>(defaultOn, null);
            this.Flags = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
            ret.Add((Textures?.Overall ?? true, Textures?.Specific?.GetCrystal()));
            ret.Add((Decal?.Overall ?? true, Decal?.Specific?.GetCrystal()));
            ret.Add((Flags, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TextureSetBinaryWriteTranslation Instance = new TextureSetBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ITextureSetInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            if (item.ObjectBounds_IsSet)
            {
                var loquiItem = item.ObjectBounds;
                ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Textures_IsSet)
            {
                var loquiItem = item.Textures;
                ((TexturesBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Decal_IsSet)
            {
                var loquiItem = item.Decal;
                ((DecalBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Flags_IsSet)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TextureSet.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 2,
                    header: recordTypeConverter.ConvertToCustom(TextureSet_Registration.DNAM_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITextureSetInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: TextureSet_Registration.TXST_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITextureSetInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class TextureSetBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static TextureSetBinaryCreateTranslation Instance = new TextureSetBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TextureSetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITextureSetInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out TextureSet_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TextureSetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = TextureSet_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetBinaryWrapper :
        SkyrimMajorRecordBinaryWrapper,
        ITextureSetInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static TextureSet_Registration Registration => TextureSet_Registration.Instance;
        protected override object CommonInstance()
        {
            return TextureSetCommon.Instance;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITextureSetInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => TextureSetXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TextureSetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region ObjectBounds
        public IObjectBoundsInternalGetter ObjectBounds { get; private set; }
        public bool ObjectBounds_IsSet => ObjectBounds != null;
        #endregion
        #region Textures
        public ITexturesInternalGetter Textures { get; private set; }
        public bool Textures_IsSet => Textures != null;
        #endregion
        #region Decal
        public IDecalInternalGetter Decal { get; private set; }
        public bool Decal_IsSet => Decal != null;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        public TextureSet.Flag Flags => (TextureSet.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation.Value, _package.Meta));
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected TextureSetBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TextureSetBinaryWrapper TextureSetFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new TextureSetBinaryWrapper(
                bytes: HeaderTranslation.ExtractRecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength;
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    this.ObjectBounds = ObjectBoundsBinaryWrapper.ObjectBoundsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.ObjectBounds);
                }
                case 0x30305854: // TX00
                case 0x31305854: // TX01
                case 0x32305854: // TX02
                case 0x33305854: // TX03
                case 0x34305854: // TX04
                case 0x35305854: // TX05
                case 0x36305854: // TX06
                case 0x37305854: // TX07
                {
                    this.Textures = TexturesBinaryWrapper.TexturesFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Textures);
                }
                case 0x54444F44: // DODT
                {
                    this.Decal = DecalBinaryWrapper.DecalFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Decal);
                }
                case 0x4D414E44: // DNAM
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TextureSet_FieldIndex.Flags);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

