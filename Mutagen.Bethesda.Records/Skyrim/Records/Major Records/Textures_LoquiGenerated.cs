/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Textures :
        ITextures,
        ILoquiObjectSetter<Textures>,
        IEquatable<Textures>,
        IEqualsMask
    {
        #region Ctor
        public Textures()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Diffuse
        public bool Diffuse_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.Diffuse];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.Diffuse] = value;
        }
        bool ITexturesGetter.Diffuse_IsSet => Diffuse_IsSet;
        private String _Diffuse;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Diffuse
        {
            get => this._Diffuse;
            set => Diffuse_Set(value);
        }
        String ITexturesGetter.Diffuse => this.Diffuse;
        public void Diffuse_Set(
            String value,
            bool markSet = true)
        {
            _Diffuse = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.Diffuse] = markSet;
        }
        public void Diffuse_Unset()
        {
            this.Diffuse_Set(default(String), false);
        }
        #endregion
        #region NormalOrGloss
        public bool NormalOrGloss_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.NormalOrGloss];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.NormalOrGloss] = value;
        }
        bool ITexturesGetter.NormalOrGloss_IsSet => NormalOrGloss_IsSet;
        private String _NormalOrGloss;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String NormalOrGloss
        {
            get => this._NormalOrGloss;
            set => NormalOrGloss_Set(value);
        }
        String ITexturesGetter.NormalOrGloss => this.NormalOrGloss;
        public void NormalOrGloss_Set(
            String value,
            bool markSet = true)
        {
            _NormalOrGloss = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.NormalOrGloss] = markSet;
        }
        public void NormalOrGloss_Unset()
        {
            this.NormalOrGloss_Set(default(String), false);
        }
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        public bool EnvironmentMaskOrSubsurfaceTint_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint] = value;
        }
        bool ITexturesGetter.EnvironmentMaskOrSubsurfaceTint_IsSet => EnvironmentMaskOrSubsurfaceTint_IsSet;
        private String _EnvironmentMaskOrSubsurfaceTint;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String EnvironmentMaskOrSubsurfaceTint
        {
            get => this._EnvironmentMaskOrSubsurfaceTint;
            set => EnvironmentMaskOrSubsurfaceTint_Set(value);
        }
        String ITexturesGetter.EnvironmentMaskOrSubsurfaceTint => this.EnvironmentMaskOrSubsurfaceTint;
        public void EnvironmentMaskOrSubsurfaceTint_Set(
            String value,
            bool markSet = true)
        {
            _EnvironmentMaskOrSubsurfaceTint = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint] = markSet;
        }
        public void EnvironmentMaskOrSubsurfaceTint_Unset()
        {
            this.EnvironmentMaskOrSubsurfaceTint_Set(default(String), false);
        }
        #endregion
        #region GlowOrDetailMap
        public bool GlowOrDetailMap_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.GlowOrDetailMap];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.GlowOrDetailMap] = value;
        }
        bool ITexturesGetter.GlowOrDetailMap_IsSet => GlowOrDetailMap_IsSet;
        private String _GlowOrDetailMap;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String GlowOrDetailMap
        {
            get => this._GlowOrDetailMap;
            set => GlowOrDetailMap_Set(value);
        }
        String ITexturesGetter.GlowOrDetailMap => this.GlowOrDetailMap;
        public void GlowOrDetailMap_Set(
            String value,
            bool markSet = true)
        {
            _GlowOrDetailMap = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.GlowOrDetailMap] = markSet;
        }
        public void GlowOrDetailMap_Unset()
        {
            this.GlowOrDetailMap_Set(default(String), false);
        }
        #endregion
        #region Height
        public bool Height_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.Height];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.Height] = value;
        }
        bool ITexturesGetter.Height_IsSet => Height_IsSet;
        private String _Height;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Height
        {
            get => this._Height;
            set => Height_Set(value);
        }
        String ITexturesGetter.Height => this.Height;
        public void Height_Set(
            String value,
            bool markSet = true)
        {
            _Height = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.Height] = markSet;
        }
        public void Height_Unset()
        {
            this.Height_Set(default(String), false);
        }
        #endregion
        #region Environment
        public bool Environment_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.Environment];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.Environment] = value;
        }
        bool ITexturesGetter.Environment_IsSet => Environment_IsSet;
        private String _Environment;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Environment
        {
            get => this._Environment;
            set => Environment_Set(value);
        }
        String ITexturesGetter.Environment => this.Environment;
        public void Environment_Set(
            String value,
            bool markSet = true)
        {
            _Environment = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.Environment] = markSet;
        }
        public void Environment_Unset()
        {
            this.Environment_Set(default(String), false);
        }
        #endregion
        #region Multilayer
        public bool Multilayer_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.Multilayer];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.Multilayer] = value;
        }
        bool ITexturesGetter.Multilayer_IsSet => Multilayer_IsSet;
        private String _Multilayer;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Multilayer
        {
            get => this._Multilayer;
            set => Multilayer_Set(value);
        }
        String ITexturesGetter.Multilayer => this.Multilayer;
        public void Multilayer_Set(
            String value,
            bool markSet = true)
        {
            _Multilayer = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.Multilayer] = markSet;
        }
        public void Multilayer_Unset()
        {
            this.Multilayer_Set(default(String), false);
        }
        #endregion
        #region BacklightMaskOrSpecular
        public bool BacklightMaskOrSpecular_IsSet
        {
            get => _hasBeenSetTracker[(int)Textures_FieldIndex.BacklightMaskOrSpecular];
            set => _hasBeenSetTracker[(int)Textures_FieldIndex.BacklightMaskOrSpecular] = value;
        }
        bool ITexturesGetter.BacklightMaskOrSpecular_IsSet => BacklightMaskOrSpecular_IsSet;
        private String _BacklightMaskOrSpecular;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String BacklightMaskOrSpecular
        {
            get => this._BacklightMaskOrSpecular;
            set => BacklightMaskOrSpecular_Set(value);
        }
        String ITexturesGetter.BacklightMaskOrSpecular => this.BacklightMaskOrSpecular;
        public void BacklightMaskOrSpecular_Set(
            String value,
            bool markSet = true)
        {
            _BacklightMaskOrSpecular = value;
            _hasBeenSetTracker[(int)Textures_FieldIndex.BacklightMaskOrSpecular] = markSet;
        }
        public void BacklightMaskOrSpecular_Unset()
        {
            this.BacklightMaskOrSpecular_Set(default(String), false);
        }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TexturesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ITexturesGetter rhs)) return false;
            return ((TexturesCommon)((ITexturesGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Textures obj)
        {
            return ((TexturesCommon)((ITexturesGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((TexturesCommon)((ITexturesGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => TexturesXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TexturesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Textures CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Textures CreateFromXml(
            XElement node,
            out Textures_ErrorMask errorMask,
            bool doMasks = true,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Textures CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Textures() : null;
                    break;
                default:
                    break;
            }
            var ret = new Textures();
            ((TexturesSetterCommon)((ITexturesGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Textures CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Textures CreateFromXml(
            string path,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Textures CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Textures CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Textures CreateFromXml(
            Stream stream,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Textures CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Textures_FieldIndex)index)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        protected object BinaryWriteTranslator => TexturesBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((TexturesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Textures CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Textures CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Textures_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Textures CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Textures();
            ((TexturesSetterCommon)((ITexturesGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITexturesGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TexturesSetterCommon)((ITexturesGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static Textures GetNew()
        {
            return new Textures();
        }

    }
    #endregion

    #region Interface
    public partial interface ITextures :
        ITexturesGetter,
        ILoquiObjectSetter<ITextures>
    {
        new String Diffuse { get; set; }
        new bool Diffuse_IsSet { get; set; }
        void Diffuse_Set(String value, bool hasBeenSet = true);
        void Diffuse_Unset();

        new String NormalOrGloss { get; set; }
        new bool NormalOrGloss_IsSet { get; set; }
        void NormalOrGloss_Set(String value, bool hasBeenSet = true);
        void NormalOrGloss_Unset();

        new String EnvironmentMaskOrSubsurfaceTint { get; set; }
        new bool EnvironmentMaskOrSubsurfaceTint_IsSet { get; set; }
        void EnvironmentMaskOrSubsurfaceTint_Set(String value, bool hasBeenSet = true);
        void EnvironmentMaskOrSubsurfaceTint_Unset();

        new String GlowOrDetailMap { get; set; }
        new bool GlowOrDetailMap_IsSet { get; set; }
        void GlowOrDetailMap_Set(String value, bool hasBeenSet = true);
        void GlowOrDetailMap_Unset();

        new String Height { get; set; }
        new bool Height_IsSet { get; set; }
        void Height_Set(String value, bool hasBeenSet = true);
        void Height_Unset();

        new String Environment { get; set; }
        new bool Environment_IsSet { get; set; }
        void Environment_Set(String value, bool hasBeenSet = true);
        void Environment_Unset();

        new String Multilayer { get; set; }
        new bool Multilayer_IsSet { get; set; }
        void Multilayer_Set(String value, bool hasBeenSet = true);
        void Multilayer_Unset();

        new String BacklightMaskOrSpecular { get; set; }
        new bool BacklightMaskOrSpecular_IsSet { get; set; }
        void BacklightMaskOrSpecular_Set(String value, bool hasBeenSet = true);
        void BacklightMaskOrSpecular_Unset();

    }

    public partial interface ITexturesGetter :
        ILoquiObject,
        ILoquiObject<ITexturesGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region Diffuse
        String Diffuse { get; }
        bool Diffuse_IsSet { get; }

        #endregion
        #region NormalOrGloss
        String NormalOrGloss { get; }
        bool NormalOrGloss_IsSet { get; }

        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        String EnvironmentMaskOrSubsurfaceTint { get; }
        bool EnvironmentMaskOrSubsurfaceTint_IsSet { get; }

        #endregion
        #region GlowOrDetailMap
        String GlowOrDetailMap { get; }
        bool GlowOrDetailMap_IsSet { get; }

        #endregion
        #region Height
        String Height { get; }
        bool Height_IsSet { get; }

        #endregion
        #region Environment
        String Environment { get; }
        bool Environment_IsSet { get; }

        #endregion
        #region Multilayer
        String Multilayer { get; }
        bool Multilayer_IsSet { get; }

        #endregion
        #region BacklightMaskOrSpecular
        String BacklightMaskOrSpecular { get; }
        bool BacklightMaskOrSpecular_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class TexturesMixIn
    {
        public static void Clear(this ITextures item)
        {
            ((TexturesSetterCommon)((ITexturesGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Textures_Mask<bool> GetEqualsMask(
            this ITexturesGetter item,
            ITexturesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITexturesGetter item,
            string name = null,
            Textures_Mask<bool> printMask = null)
        {
            return ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITexturesGetter item,
            FileGeneration fg,
            string name = null,
            Textures_Mask<bool> printMask = null)
        {
            ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITexturesGetter item,
            Textures_Mask<bool?> checkMask)
        {
            return ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Textures_Mask<bool> GetHasBeenSetMask(this ITexturesGetter item)
        {
            var ret = new Textures_Mask<bool>();
            ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITexturesGetter item,
            ITexturesGetter rhs)
        {
            return ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ITextures lhs,
            ITexturesGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ITextures lhs,
            ITexturesGetter rhs,
            Textures_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ITextures lhs,
            ITexturesGetter rhs,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TexturesSetterTranslationCommon)((ITexturesGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ITextures lhs,
            ITexturesGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((TexturesSetterTranslationCommon)((ITexturesGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Textures DeepCopy(
            this ITexturesGetter item,
            Textures_TranslationMask copyMask = null)
        {
            return ((TexturesSetterTranslationCommon)((ITexturesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Textures DeepCopy(
            this ITexturesGetter item,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask copyMask = null)
        {
            return ((TexturesSetterTranslationCommon)((ITexturesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Textures DeepCopy(
            this ITexturesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((TexturesSetterTranslationCommon)((ITexturesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITextures item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITextures item,
            XElement node,
            out Textures_ErrorMask errorMask,
            bool doMasks = true,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITextures item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((TexturesSetterCommon)((ITexturesGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextures item,
            string path,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextures item,
            string path,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextures item,
            string path,
            ErrorMaskBuilder errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITextures item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Textures_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextures item,
            Stream stream,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextures item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            Textures_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITextures item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITextures item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Textures_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this ITextures item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((TexturesSetterCommon)((ITexturesGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Textures_FieldIndex
    {
        Diffuse = 0,
        NormalOrGloss = 1,
        EnvironmentMaskOrSubsurfaceTint = 2,
        GlowOrDetailMap = 3,
        Height = 4,
        Environment = 5,
        Multilayer = 6,
        BacklightMaskOrSpecular = 7,
    }
    #endregion

    #region Registration
    public class Textures_Registration : ILoquiRegistration
    {
        public static readonly Textures_Registration Instance = new Textures_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 23,
            version: 0);

        public const string GUID = "b396554a-0fa3-48ff-a6b0-b6d4d7943658";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Textures_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Textures_ErrorMask);

        public static readonly Type ClassType = typeof(Textures);

        public static readonly Type GetterType = typeof(ITexturesGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITextures);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Textures";

        public const string Name = "Textures";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DIFFUSE":
                    return (ushort)Textures_FieldIndex.Diffuse;
                case "NORMALORGLOSS":
                    return (ushort)Textures_FieldIndex.NormalOrGloss;
                case "ENVIRONMENTMASKORSUBSURFACETINT":
                    return (ushort)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                case "GLOWORDETAILMAP":
                    return (ushort)Textures_FieldIndex.GlowOrDetailMap;
                case "HEIGHT":
                    return (ushort)Textures_FieldIndex.Height;
                case "ENVIRONMENT":
                    return (ushort)Textures_FieldIndex.Environment;
                case "MULTILAYER":
                    return (ushort)Textures_FieldIndex.Multilayer;
                case "BACKLIGHTMASKORSPECULAR":
                    return (ushort)Textures_FieldIndex.BacklightMaskOrSpecular;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                    return "Diffuse";
                case Textures_FieldIndex.NormalOrGloss:
                    return "NormalOrGloss";
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    return "EnvironmentMaskOrSubsurfaceTint";
                case Textures_FieldIndex.GlowOrDetailMap:
                    return "GlowOrDetailMap";
                case Textures_FieldIndex.Height:
                    return "Height";
                case Textures_FieldIndex.Environment:
                    return "Environment";
                case Textures_FieldIndex.Multilayer:
                    return "Multilayer";
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return "BacklightMaskOrSpecular";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                case Textures_FieldIndex.NormalOrGloss:
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case Textures_FieldIndex.GlowOrDetailMap:
                case Textures_FieldIndex.Height:
                case Textures_FieldIndex.Environment:
                case Textures_FieldIndex.Multilayer:
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                    return typeof(String);
                case Textures_FieldIndex.NormalOrGloss:
                    return typeof(String);
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    return typeof(String);
                case Textures_FieldIndex.GlowOrDetailMap:
                    return typeof(String);
                case Textures_FieldIndex.Height:
                    return typeof(String);
                case Textures_FieldIndex.Environment:
                    return typeof(String);
                case Textures_FieldIndex.Multilayer:
                    return typeof(String);
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TexturesXmlWriteTranslation);
        public static readonly RecordType TX00_HEADER = new RecordType("TX00");
        public static readonly RecordType TX01_HEADER = new RecordType("TX01");
        public static readonly RecordType TX02_HEADER = new RecordType("TX02");
        public static readonly RecordType TX03_HEADER = new RecordType("TX03");
        public static readonly RecordType TX04_HEADER = new RecordType("TX04");
        public static readonly RecordType TX05_HEADER = new RecordType("TX05");
        public static readonly RecordType TX06_HEADER = new RecordType("TX06");
        public static readonly RecordType TX07_HEADER = new RecordType("TX07");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TX00_HEADER,
                        TX01_HEADER,
                        TX02_HEADER,
                        TX03_HEADER,
                        TX04_HEADER,
                        TX05_HEADER,
                        TX06_HEADER,
                        TX07_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        public static readonly Type BinaryWriteTranslation = typeof(TexturesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TexturesSetterCommon
    {
        public static readonly TexturesSetterCommon Instance = new TexturesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITextures item)
        {
            ClearPartial();
            item.Diffuse_Unset();
            item.NormalOrGloss_Unset();
            item.EnvironmentMaskOrSubsurfaceTint_Unset();
            item.GlowOrDetailMap_Unset();
            item.Height_Unset();
            item.Environment_Unset();
            item.Multilayer_Unset();
            item.BacklightMaskOrSpecular_Unset();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ITextures item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TexturesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ITextures item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITextures item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x30305854: // TX00
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Diffuse) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String DiffuseParse))
                    {
                        item.Diffuse = DiffuseParse;
                    }
                    else
                    {
                        item.Diffuse = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Diffuse);
                }
                case 0x31305854: // TX01
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.NormalOrGloss) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String NormalOrGlossParse))
                    {
                        item.NormalOrGloss = NormalOrGlossParse;
                    }
                    else
                    {
                        item.NormalOrGloss = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.NormalOrGloss);
                }
                case 0x32305854: // TX02
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String EnvironmentMaskOrSubsurfaceTintParse))
                    {
                        item.EnvironmentMaskOrSubsurfaceTint = EnvironmentMaskOrSubsurfaceTintParse;
                    }
                    else
                    {
                        item.EnvironmentMaskOrSubsurfaceTint = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint);
                }
                case 0x33305854: // TX03
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.GlowOrDetailMap) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String GlowOrDetailMapParse))
                    {
                        item.GlowOrDetailMap = GlowOrDetailMapParse;
                    }
                    else
                    {
                        item.GlowOrDetailMap = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.GlowOrDetailMap);
                }
                case 0x34305854: // TX04
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Height) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String HeightParse))
                    {
                        item.Height = HeightParse;
                    }
                    else
                    {
                        item.Height = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Height);
                }
                case 0x35305854: // TX05
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Environment) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String EnvironmentParse))
                    {
                        item.Environment = EnvironmentParse;
                    }
                    else
                    {
                        item.Environment = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Environment);
                }
                case 0x36305854: // TX06
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Multilayer) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String MultilayerParse))
                    {
                        item.Multilayer = MultilayerParse;
                    }
                    else
                    {
                        item.Multilayer = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Multilayer);
                }
                case 0x37305854: // TX07
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.BacklightMaskOrSpecular) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String BacklightMaskOrSpecularParse))
                    {
                        item.BacklightMaskOrSpecular = BacklightMaskOrSpecularParse;
                    }
                    else
                    {
                        item.BacklightMaskOrSpecular = default(String);
                    }
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.BacklightMaskOrSpecular);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ITextures item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TexturesCommon
    {
        public static readonly TexturesCommon Instance = new TexturesCommon();

        public Textures_Mask<bool> GetEqualsMask(
            ITexturesGetter item,
            ITexturesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Textures_Mask<bool>();
            ((TexturesCommon)((ITexturesGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITexturesGetter item,
            ITexturesGetter rhs,
            Textures_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Diffuse = item.Diffuse_IsSet == rhs.Diffuse_IsSet && string.Equals(item.Diffuse, rhs.Diffuse);
            ret.NormalOrGloss = item.NormalOrGloss_IsSet == rhs.NormalOrGloss_IsSet && string.Equals(item.NormalOrGloss, rhs.NormalOrGloss);
            ret.EnvironmentMaskOrSubsurfaceTint = item.EnvironmentMaskOrSubsurfaceTint_IsSet == rhs.EnvironmentMaskOrSubsurfaceTint_IsSet && string.Equals(item.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint);
            ret.GlowOrDetailMap = item.GlowOrDetailMap_IsSet == rhs.GlowOrDetailMap_IsSet && string.Equals(item.GlowOrDetailMap, rhs.GlowOrDetailMap);
            ret.Height = item.Height_IsSet == rhs.Height_IsSet && string.Equals(item.Height, rhs.Height);
            ret.Environment = item.Environment_IsSet == rhs.Environment_IsSet && string.Equals(item.Environment, rhs.Environment);
            ret.Multilayer = item.Multilayer_IsSet == rhs.Multilayer_IsSet && string.Equals(item.Multilayer, rhs.Multilayer);
            ret.BacklightMaskOrSpecular = item.BacklightMaskOrSpecular_IsSet == rhs.BacklightMaskOrSpecular_IsSet && string.Equals(item.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular);
        }
        
        public string ToString(
            ITexturesGetter item,
            string name = null,
            Textures_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITexturesGetter item,
            FileGeneration fg,
            string name = null,
            Textures_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Textures =>");
            }
            else
            {
                fg.AppendLine($"{name} (Textures) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITexturesGetter item,
            FileGeneration fg,
            Textures_Mask<bool> printMask = null)
        {
            if (printMask?.Diffuse ?? true)
            {
                fg.AppendLine($"Diffuse => {item.Diffuse}");
            }
            if (printMask?.NormalOrGloss ?? true)
            {
                fg.AppendLine($"NormalOrGloss => {item.NormalOrGloss}");
            }
            if (printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
            {
                fg.AppendLine($"EnvironmentMaskOrSubsurfaceTint => {item.EnvironmentMaskOrSubsurfaceTint}");
            }
            if (printMask?.GlowOrDetailMap ?? true)
            {
                fg.AppendLine($"GlowOrDetailMap => {item.GlowOrDetailMap}");
            }
            if (printMask?.Height ?? true)
            {
                fg.AppendLine($"Height => {item.Height}");
            }
            if (printMask?.Environment ?? true)
            {
                fg.AppendLine($"Environment => {item.Environment}");
            }
            if (printMask?.Multilayer ?? true)
            {
                fg.AppendLine($"Multilayer => {item.Multilayer}");
            }
            if (printMask?.BacklightMaskOrSpecular ?? true)
            {
                fg.AppendLine($"BacklightMaskOrSpecular => {item.BacklightMaskOrSpecular}");
            }
        }
        
        public bool HasBeenSet(
            ITexturesGetter item,
            Textures_Mask<bool?> checkMask)
        {
            if (checkMask.Diffuse.HasValue && checkMask.Diffuse.Value != item.Diffuse_IsSet) return false;
            if (checkMask.NormalOrGloss.HasValue && checkMask.NormalOrGloss.Value != item.NormalOrGloss_IsSet) return false;
            if (checkMask.EnvironmentMaskOrSubsurfaceTint.HasValue && checkMask.EnvironmentMaskOrSubsurfaceTint.Value != item.EnvironmentMaskOrSubsurfaceTint_IsSet) return false;
            if (checkMask.GlowOrDetailMap.HasValue && checkMask.GlowOrDetailMap.Value != item.GlowOrDetailMap_IsSet) return false;
            if (checkMask.Height.HasValue && checkMask.Height.Value != item.Height_IsSet) return false;
            if (checkMask.Environment.HasValue && checkMask.Environment.Value != item.Environment_IsSet) return false;
            if (checkMask.Multilayer.HasValue && checkMask.Multilayer.Value != item.Multilayer_IsSet) return false;
            if (checkMask.BacklightMaskOrSpecular.HasValue && checkMask.BacklightMaskOrSpecular.Value != item.BacklightMaskOrSpecular_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITexturesGetter item,
            Textures_Mask<bool> mask)
        {
            mask.Diffuse = item.Diffuse_IsSet;
            mask.NormalOrGloss = item.NormalOrGloss_IsSet;
            mask.EnvironmentMaskOrSubsurfaceTint = item.EnvironmentMaskOrSubsurfaceTint_IsSet;
            mask.GlowOrDetailMap = item.GlowOrDetailMap_IsSet;
            mask.Height = item.Height_IsSet;
            mask.Environment = item.Environment_IsSet;
            mask.Multilayer = item.Multilayer_IsSet;
            mask.BacklightMaskOrSpecular = item.BacklightMaskOrSpecular_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITexturesGetter lhs,
            ITexturesGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Diffuse_IsSet != rhs.Diffuse_IsSet) return false;
            if (lhs.Diffuse_IsSet)
            {
                if (!string.Equals(lhs.Diffuse, rhs.Diffuse)) return false;
            }
            if (lhs.NormalOrGloss_IsSet != rhs.NormalOrGloss_IsSet) return false;
            if (lhs.NormalOrGloss_IsSet)
            {
                if (!string.Equals(lhs.NormalOrGloss, rhs.NormalOrGloss)) return false;
            }
            if (lhs.EnvironmentMaskOrSubsurfaceTint_IsSet != rhs.EnvironmentMaskOrSubsurfaceTint_IsSet) return false;
            if (lhs.EnvironmentMaskOrSubsurfaceTint_IsSet)
            {
                if (!string.Equals(lhs.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
            }
            if (lhs.GlowOrDetailMap_IsSet != rhs.GlowOrDetailMap_IsSet) return false;
            if (lhs.GlowOrDetailMap_IsSet)
            {
                if (!string.Equals(lhs.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
            }
            if (lhs.Height_IsSet != rhs.Height_IsSet) return false;
            if (lhs.Height_IsSet)
            {
                if (!string.Equals(lhs.Height, rhs.Height)) return false;
            }
            if (lhs.Environment_IsSet != rhs.Environment_IsSet) return false;
            if (lhs.Environment_IsSet)
            {
                if (!string.Equals(lhs.Environment, rhs.Environment)) return false;
            }
            if (lhs.Multilayer_IsSet != rhs.Multilayer_IsSet) return false;
            if (lhs.Multilayer_IsSet)
            {
                if (!string.Equals(lhs.Multilayer, rhs.Multilayer)) return false;
            }
            if (lhs.BacklightMaskOrSpecular_IsSet != rhs.BacklightMaskOrSpecular_IsSet) return false;
            if (lhs.BacklightMaskOrSpecular_IsSet)
            {
                if (!string.Equals(lhs.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITexturesGetter item)
        {
            int ret = 0;
            if (item.Diffuse_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Diffuse).CombineHashCode(ret);
            }
            if (item.NormalOrGloss_IsSet)
            {
                ret = HashHelper.GetHashCode(item.NormalOrGloss).CombineHashCode(ret);
            }
            if (item.EnvironmentMaskOrSubsurfaceTint_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EnvironmentMaskOrSubsurfaceTint).CombineHashCode(ret);
            }
            if (item.GlowOrDetailMap_IsSet)
            {
                ret = HashHelper.GetHashCode(item.GlowOrDetailMap).CombineHashCode(ret);
            }
            if (item.Height_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Height).CombineHashCode(ret);
            }
            if (item.Environment_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Environment).CombineHashCode(ret);
            }
            if (item.Multilayer_IsSet)
            {
                ret = HashHelper.GetHashCode(item.Multilayer).CombineHashCode(ret);
            }
            if (item.BacklightMaskOrSpecular_IsSet)
            {
                ret = HashHelper.GetHashCode(item.BacklightMaskOrSpecular).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Textures.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITexturesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class TexturesSetterTranslationCommon
    {
        public static readonly TexturesSetterTranslationCommon Instance = new TexturesSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ITextures item,
            ITexturesGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.Diffuse) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.Diffuse);
                try
                {
                    if (rhs.Diffuse_IsSet)
                    {
                        item.Diffuse = rhs.Diffuse;
                    }
                    else
                    {
                        item.Diffuse_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.NormalOrGloss) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.NormalOrGloss);
                try
                {
                    if (rhs.NormalOrGloss_IsSet)
                    {
                        item.NormalOrGloss = rhs.NormalOrGloss;
                    }
                    else
                    {
                        item.NormalOrGloss_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint);
                try
                {
                    if (rhs.EnvironmentMaskOrSubsurfaceTint_IsSet)
                    {
                        item.EnvironmentMaskOrSubsurfaceTint = rhs.EnvironmentMaskOrSubsurfaceTint;
                    }
                    else
                    {
                        item.EnvironmentMaskOrSubsurfaceTint_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.GlowOrDetailMap) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.GlowOrDetailMap);
                try
                {
                    if (rhs.GlowOrDetailMap_IsSet)
                    {
                        item.GlowOrDetailMap = rhs.GlowOrDetailMap;
                    }
                    else
                    {
                        item.GlowOrDetailMap_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.Height) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.Height);
                try
                {
                    if (rhs.Height_IsSet)
                    {
                        item.Height = rhs.Height;
                    }
                    else
                    {
                        item.Height_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.Environment) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.Environment);
                try
                {
                    if (rhs.Environment_IsSet)
                    {
                        item.Environment = rhs.Environment;
                    }
                    else
                    {
                        item.Environment_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.Multilayer) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.Multilayer);
                try
                {
                    if (rhs.Multilayer_IsSet)
                    {
                        item.Multilayer = rhs.Multilayer;
                    }
                    else
                    {
                        item.Multilayer_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Textures_FieldIndex.BacklightMaskOrSpecular) ?? true))
            {
                errorMask?.PushIndex((int)Textures_FieldIndex.BacklightMaskOrSpecular);
                try
                {
                    if (rhs.BacklightMaskOrSpecular_IsSet)
                    {
                        item.BacklightMaskOrSpecular = rhs.BacklightMaskOrSpecular;
                    }
                    else
                    {
                        item.BacklightMaskOrSpecular_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Textures DeepCopy(
            ITexturesGetter item,
            Textures_TranslationMask copyMask = null)
        {
            Textures ret = (Textures)((TexturesCommon)((ITexturesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Textures DeepCopy(
            ITexturesGetter item,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask copyMask = null)
        {
            Textures ret = (Textures)((TexturesCommon)((ITexturesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Textures DeepCopy(
            ITexturesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            Textures ret = (Textures)((TexturesCommon)((ITexturesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Textures
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Textures_Registration.Instance;
        public static Textures_Registration Registration => Textures_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TexturesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TexturesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TexturesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITexturesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITexturesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITexturesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TexturesXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TexturesXmlWriteTranslation Instance = new TexturesXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITexturesGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.Diffuse_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.Diffuse) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Diffuse),
                    item: item.Diffuse,
                    fieldIndex: (int)Textures_FieldIndex.Diffuse,
                    errorMask: errorMask);
            }
            if (item.NormalOrGloss_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.NormalOrGloss) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NormalOrGloss),
                    item: item.NormalOrGloss,
                    fieldIndex: (int)Textures_FieldIndex.NormalOrGloss,
                    errorMask: errorMask);
            }
            if (item.EnvironmentMaskOrSubsurfaceTint_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnvironmentMaskOrSubsurfaceTint),
                    item: item.EnvironmentMaskOrSubsurfaceTint,
                    fieldIndex: (int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint,
                    errorMask: errorMask);
            }
            if (item.GlowOrDetailMap_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.GlowOrDetailMap) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlowOrDetailMap),
                    item: item.GlowOrDetailMap,
                    fieldIndex: (int)Textures_FieldIndex.GlowOrDetailMap,
                    errorMask: errorMask);
            }
            if (item.Height_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.Height) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Height),
                    item: item.Height,
                    fieldIndex: (int)Textures_FieldIndex.Height,
                    errorMask: errorMask);
            }
            if (item.Environment_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.Environment) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Environment),
                    item: item.Environment,
                    fieldIndex: (int)Textures_FieldIndex.Environment,
                    errorMask: errorMask);
            }
            if (item.Multilayer_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.Multilayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Multilayer),
                    item: item.Multilayer,
                    fieldIndex: (int)Textures_FieldIndex.Multilayer,
                    errorMask: errorMask);
            }
            if (item.BacklightMaskOrSpecular_IsSet
                && (translationMask?.GetShouldTranslate((int)Textures_FieldIndex.BacklightMaskOrSpecular) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BacklightMaskOrSpecular),
                    item: item.BacklightMaskOrSpecular,
                    fieldIndex: (int)Textures_FieldIndex.BacklightMaskOrSpecular,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITexturesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Textures");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Textures");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITexturesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITexturesGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ITexturesGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TexturesXmlCreateTranslation
    {
        public readonly static TexturesXmlCreateTranslation Instance = new TexturesXmlCreateTranslation();

        public static void FillPublicXml(
            ITextures item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TexturesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITextures item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Diffuse":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.Diffuse);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DiffuseParse,
                            errorMask: errorMask))
                        {
                            item.Diffuse = DiffuseParse;
                        }
                        else
                        {
                            item.Diffuse = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NormalOrGloss":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.NormalOrGloss);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String NormalOrGlossParse,
                            errorMask: errorMask))
                        {
                            item.NormalOrGloss = NormalOrGlossParse;
                        }
                        else
                        {
                            item.NormalOrGloss = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnvironmentMaskOrSubsurfaceTint":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String EnvironmentMaskOrSubsurfaceTintParse,
                            errorMask: errorMask))
                        {
                            item.EnvironmentMaskOrSubsurfaceTint = EnvironmentMaskOrSubsurfaceTintParse;
                        }
                        else
                        {
                            item.EnvironmentMaskOrSubsurfaceTint = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlowOrDetailMap":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.GlowOrDetailMap);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String GlowOrDetailMapParse,
                            errorMask: errorMask))
                        {
                            item.GlowOrDetailMap = GlowOrDetailMapParse;
                        }
                        else
                        {
                            item.GlowOrDetailMap = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Height":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.Height);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String HeightParse,
                            errorMask: errorMask))
                        {
                            item.Height = HeightParse;
                        }
                        else
                        {
                            item.Height = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Environment":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.Environment);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String EnvironmentParse,
                            errorMask: errorMask))
                        {
                            item.Environment = EnvironmentParse;
                        }
                        else
                        {
                            item.Environment = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Multilayer":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.Multilayer);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String MultilayerParse,
                            errorMask: errorMask))
                        {
                            item.Multilayer = MultilayerParse;
                        }
                        else
                        {
                            item.Multilayer = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BacklightMaskOrSpecular":
                    try
                    {
                        errorMask?.PushIndex((int)Textures_FieldIndex.BacklightMaskOrSpecular);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String BacklightMaskOrSpecularParse,
                            errorMask: errorMask))
                        {
                            item.BacklightMaskOrSpecular = BacklightMaskOrSpecularParse;
                        }
                        else
                        {
                            item.BacklightMaskOrSpecular = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TexturesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITexturesGetter item,
            XElement node,
            out Textures_ErrorMask errorMask,
            bool doMasks = true,
            Textures_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TexturesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            string path,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            Stream stream,
            out Textures_ErrorMask errorMask,
            Textures_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((TexturesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            XElement node,
            string name = null,
            Textures_TranslationMask translationMask = null)
        {
            ((TexturesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TexturesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITexturesGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TexturesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class Textures_Mask<T> : IMask<T>, IEquatable<Textures_Mask<T>>
    {
        #region Ctors
        public Textures_Mask()
        {
        }

        public Textures_Mask(T initialValue)
        {
            this.Diffuse = initialValue;
            this.NormalOrGloss = initialValue;
            this.EnvironmentMaskOrSubsurfaceTint = initialValue;
            this.GlowOrDetailMap = initialValue;
            this.Height = initialValue;
            this.Environment = initialValue;
            this.Multilayer = initialValue;
            this.BacklightMaskOrSpecular = initialValue;
        }
        #endregion

        #region Members
        public T Diffuse;
        public T NormalOrGloss;
        public T EnvironmentMaskOrSubsurfaceTint;
        public T GlowOrDetailMap;
        public T Height;
        public T Environment;
        public T Multilayer;
        public T BacklightMaskOrSpecular;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Textures_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Textures_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Diffuse, rhs.Diffuse)) return false;
            if (!object.Equals(this.NormalOrGloss, rhs.NormalOrGloss)) return false;
            if (!object.Equals(this.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
            if (!object.Equals(this.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
            if (!object.Equals(this.Height, rhs.Height)) return false;
            if (!object.Equals(this.Environment, rhs.Environment)) return false;
            if (!object.Equals(this.Multilayer, rhs.Multilayer)) return false;
            if (!object.Equals(this.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Diffuse?.GetHashCode());
            ret = ret.CombineHashCode(this.NormalOrGloss?.GetHashCode());
            ret = ret.CombineHashCode(this.EnvironmentMaskOrSubsurfaceTint?.GetHashCode());
            ret = ret.CombineHashCode(this.GlowOrDetailMap?.GetHashCode());
            ret = ret.CombineHashCode(this.Height?.GetHashCode());
            ret = ret.CombineHashCode(this.Environment?.GetHashCode());
            ret = ret.CombineHashCode(this.Multilayer?.GetHashCode());
            ret = ret.CombineHashCode(this.BacklightMaskOrSpecular?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Diffuse)) return false;
            if (!eval(this.NormalOrGloss)) return false;
            if (!eval(this.EnvironmentMaskOrSubsurfaceTint)) return false;
            if (!eval(this.GlowOrDetailMap)) return false;
            if (!eval(this.Height)) return false;
            if (!eval(this.Environment)) return false;
            if (!eval(this.Multilayer)) return false;
            if (!eval(this.BacklightMaskOrSpecular)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Textures_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Textures_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Textures_Mask<R> obj, Func<T, R> eval)
        {
            obj.Diffuse = eval(this.Diffuse);
            obj.NormalOrGloss = eval(this.NormalOrGloss);
            obj.EnvironmentMaskOrSubsurfaceTint = eval(this.EnvironmentMaskOrSubsurfaceTint);
            obj.GlowOrDetailMap = eval(this.GlowOrDetailMap);
            obj.Height = eval(this.Height);
            obj.Environment = eval(this.Environment);
            obj.Multilayer = eval(this.Multilayer);
            obj.BacklightMaskOrSpecular = eval(this.BacklightMaskOrSpecular);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Textures_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Textures_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Textures_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Diffuse ?? true)
                {
                    fg.AppendLine($"Diffuse => {Diffuse}");
                }
                if (printMask?.NormalOrGloss ?? true)
                {
                    fg.AppendLine($"NormalOrGloss => {NormalOrGloss}");
                }
                if (printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
                {
                    fg.AppendLine($"EnvironmentMaskOrSubsurfaceTint => {EnvironmentMaskOrSubsurfaceTint}");
                }
                if (printMask?.GlowOrDetailMap ?? true)
                {
                    fg.AppendLine($"GlowOrDetailMap => {GlowOrDetailMap}");
                }
                if (printMask?.Height ?? true)
                {
                    fg.AppendLine($"Height => {Height}");
                }
                if (printMask?.Environment ?? true)
                {
                    fg.AppendLine($"Environment => {Environment}");
                }
                if (printMask?.Multilayer ?? true)
                {
                    fg.AppendLine($"Multilayer => {Multilayer}");
                }
                if (printMask?.BacklightMaskOrSpecular ?? true)
                {
                    fg.AppendLine($"BacklightMaskOrSpecular => {BacklightMaskOrSpecular}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Textures_ErrorMask : IErrorMask, IErrorMask<Textures_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Diffuse;
        public Exception NormalOrGloss;
        public Exception EnvironmentMaskOrSubsurfaceTint;
        public Exception GlowOrDetailMap;
        public Exception Height;
        public Exception Environment;
        public Exception Multilayer;
        public Exception BacklightMaskOrSpecular;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                    return Diffuse;
                case Textures_FieldIndex.NormalOrGloss:
                    return NormalOrGloss;
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    return EnvironmentMaskOrSubsurfaceTint;
                case Textures_FieldIndex.GlowOrDetailMap:
                    return GlowOrDetailMap;
                case Textures_FieldIndex.Height:
                    return Height;
                case Textures_FieldIndex.Environment:
                    return Environment;
                case Textures_FieldIndex.Multilayer:
                    return Multilayer;
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    return BacklightMaskOrSpecular;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                    this.Diffuse = ex;
                    break;
                case Textures_FieldIndex.NormalOrGloss:
                    this.NormalOrGloss = ex;
                    break;
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    this.EnvironmentMaskOrSubsurfaceTint = ex;
                    break;
                case Textures_FieldIndex.GlowOrDetailMap:
                    this.GlowOrDetailMap = ex;
                    break;
                case Textures_FieldIndex.Height:
                    this.Height = ex;
                    break;
                case Textures_FieldIndex.Environment:
                    this.Environment = ex;
                    break;
                case Textures_FieldIndex.Multilayer:
                    this.Multilayer = ex;
                    break;
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    this.BacklightMaskOrSpecular = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Textures_FieldIndex enu = (Textures_FieldIndex)index;
            switch (enu)
            {
                case Textures_FieldIndex.Diffuse:
                    this.Diffuse = (Exception)obj;
                    break;
                case Textures_FieldIndex.NormalOrGloss:
                    this.NormalOrGloss = (Exception)obj;
                    break;
                case Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    this.EnvironmentMaskOrSubsurfaceTint = (Exception)obj;
                    break;
                case Textures_FieldIndex.GlowOrDetailMap:
                    this.GlowOrDetailMap = (Exception)obj;
                    break;
                case Textures_FieldIndex.Height:
                    this.Height = (Exception)obj;
                    break;
                case Textures_FieldIndex.Environment:
                    this.Environment = (Exception)obj;
                    break;
                case Textures_FieldIndex.Multilayer:
                    this.Multilayer = (Exception)obj;
                    break;
                case Textures_FieldIndex.BacklightMaskOrSpecular:
                    this.BacklightMaskOrSpecular = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Diffuse != null) return true;
            if (NormalOrGloss != null) return true;
            if (EnvironmentMaskOrSubsurfaceTint != null) return true;
            if (GlowOrDetailMap != null) return true;
            if (Height != null) return true;
            if (Environment != null) return true;
            if (Multilayer != null) return true;
            if (BacklightMaskOrSpecular != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Textures_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Diffuse => {Diffuse}");
            fg.AppendLine($"NormalOrGloss => {NormalOrGloss}");
            fg.AppendLine($"EnvironmentMaskOrSubsurfaceTint => {EnvironmentMaskOrSubsurfaceTint}");
            fg.AppendLine($"GlowOrDetailMap => {GlowOrDetailMap}");
            fg.AppendLine($"Height => {Height}");
            fg.AppendLine($"Environment => {Environment}");
            fg.AppendLine($"Multilayer => {Multilayer}");
            fg.AppendLine($"BacklightMaskOrSpecular => {BacklightMaskOrSpecular}");
        }
        #endregion

        #region Combine
        public Textures_ErrorMask Combine(Textures_ErrorMask rhs)
        {
            var ret = new Textures_ErrorMask();
            ret.Diffuse = this.Diffuse.Combine(rhs.Diffuse);
            ret.NormalOrGloss = this.NormalOrGloss.Combine(rhs.NormalOrGloss);
            ret.EnvironmentMaskOrSubsurfaceTint = this.EnvironmentMaskOrSubsurfaceTint.Combine(rhs.EnvironmentMaskOrSubsurfaceTint);
            ret.GlowOrDetailMap = this.GlowOrDetailMap.Combine(rhs.GlowOrDetailMap);
            ret.Height = this.Height.Combine(rhs.Height);
            ret.Environment = this.Environment.Combine(rhs.Environment);
            ret.Multilayer = this.Multilayer.Combine(rhs.Multilayer);
            ret.BacklightMaskOrSpecular = this.BacklightMaskOrSpecular.Combine(rhs.BacklightMaskOrSpecular);
            return ret;
        }
        public static Textures_ErrorMask Combine(Textures_ErrorMask lhs, Textures_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Textures_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Textures_ErrorMask();
        }
        #endregion

    }
    public class Textures_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Diffuse;
        public bool NormalOrGloss;
        public bool EnvironmentMaskOrSubsurfaceTint;
        public bool GlowOrDetailMap;
        public bool Height;
        public bool Environment;
        public bool Multilayer;
        public bool BacklightMaskOrSpecular;
        #endregion

        #region Ctors
        public Textures_TranslationMask()
        {
        }

        public Textures_TranslationMask(bool defaultOn)
        {
            this.Diffuse = defaultOn;
            this.NormalOrGloss = defaultOn;
            this.EnvironmentMaskOrSubsurfaceTint = defaultOn;
            this.GlowOrDetailMap = defaultOn;
            this.Height = defaultOn;
            this.Environment = defaultOn;
            this.Multilayer = defaultOn;
            this.BacklightMaskOrSpecular = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Diffuse, null));
            ret.Add((NormalOrGloss, null));
            ret.Add((EnvironmentMaskOrSubsurfaceTint, null));
            ret.Add((GlowOrDetailMap, null));
            ret.Add((Height, null));
            ret.Add((Environment, null));
            ret.Add((Multilayer, null));
            ret.Add((BacklightMaskOrSpecular, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TexturesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TexturesBinaryWriteTranslation Instance = new TexturesBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ITexturesGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Diffuse_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Diffuse,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX00_HEADER),
                    nullable: false);
            }
            if (item.NormalOrGloss_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NormalOrGloss,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX01_HEADER),
                    nullable: false);
            }
            if (item.EnvironmentMaskOrSubsurfaceTint_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnvironmentMaskOrSubsurfaceTint,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX02_HEADER),
                    nullable: false);
            }
            if (item.GlowOrDetailMap_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GlowOrDetailMap,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX03_HEADER),
                    nullable: false);
            }
            if (item.Height_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Height,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX04_HEADER),
                    nullable: false);
            }
            if (item.Environment_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Environment,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX05_HEADER),
                    nullable: false);
            }
            if (item.Multilayer_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Multilayer,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX06_HEADER),
                    nullable: false);
            }
            if (item.BacklightMaskOrSpecular_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BacklightMaskOrSpecular,
                    header: recordTypeConverter.ConvertToCustom(Textures_Registration.TX07_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITexturesGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ITexturesGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class TexturesBinaryCreateTranslation
    {
        public readonly static TexturesBinaryCreateTranslation Instance = new TexturesBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TexturesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITexturesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Textures_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TexturesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Textures_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ITexturesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((TexturesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ITexturesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((TexturesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TexturesBinaryWrapper :
        BinaryWrapper,
        ITexturesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Textures_Registration.Instance;
        public static Textures_Registration Registration => Textures_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TexturesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TexturesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITexturesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITexturesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITexturesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITexturesGetter)rhs, include);

        protected object XmlWriteTranslator => TexturesXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TexturesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => TexturesBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((TexturesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Diffuse
        private int? _DiffuseLocation;
        public bool Diffuse_IsSet => _DiffuseLocation.HasValue;
        public String Diffuse => _DiffuseLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _DiffuseLocation.Value, _package.Meta)) : default;
        #endregion
        #region NormalOrGloss
        private int? _NormalOrGlossLocation;
        public bool NormalOrGloss_IsSet => _NormalOrGlossLocation.HasValue;
        public String NormalOrGloss => _NormalOrGlossLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _NormalOrGlossLocation.Value, _package.Meta)) : default;
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        private int? _EnvironmentMaskOrSubsurfaceTintLocation;
        public bool EnvironmentMaskOrSubsurfaceTint_IsSet => _EnvironmentMaskOrSubsurfaceTintLocation.HasValue;
        public String EnvironmentMaskOrSubsurfaceTint => _EnvironmentMaskOrSubsurfaceTintLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _EnvironmentMaskOrSubsurfaceTintLocation.Value, _package.Meta)) : default;
        #endregion
        #region GlowOrDetailMap
        private int? _GlowOrDetailMapLocation;
        public bool GlowOrDetailMap_IsSet => _GlowOrDetailMapLocation.HasValue;
        public String GlowOrDetailMap => _GlowOrDetailMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _GlowOrDetailMapLocation.Value, _package.Meta)) : default;
        #endregion
        #region Height
        private int? _HeightLocation;
        public bool Height_IsSet => _HeightLocation.HasValue;
        public String Height => _HeightLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _HeightLocation.Value, _package.Meta)) : default;
        #endregion
        #region Environment
        private int? _EnvironmentLocation;
        public bool Environment_IsSet => _EnvironmentLocation.HasValue;
        public String Environment => _EnvironmentLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _EnvironmentLocation.Value, _package.Meta)) : default;
        #endregion
        #region Multilayer
        private int? _MultilayerLocation;
        public bool Multilayer_IsSet => _MultilayerLocation.HasValue;
        public String Multilayer => _MultilayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MultilayerLocation.Value, _package.Meta)) : default;
        #endregion
        #region BacklightMaskOrSpecular
        private int? _BacklightMaskOrSpecularLocation;
        public bool BacklightMaskOrSpecular_IsSet => _BacklightMaskOrSpecularLocation.HasValue;
        public String BacklightMaskOrSpecular => _BacklightMaskOrSpecularLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _BacklightMaskOrSpecularLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TexturesBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TexturesBinaryWrapper TexturesFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new TexturesBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x30305854: // TX00
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Diffuse) return TryGet<int?>.Failure;
                    _DiffuseLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Diffuse);
                }
                case 0x31305854: // TX01
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.NormalOrGloss) return TryGet<int?>.Failure;
                    _NormalOrGlossLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.NormalOrGloss);
                }
                case 0x32305854: // TX02
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint) return TryGet<int?>.Failure;
                    _EnvironmentMaskOrSubsurfaceTintLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.EnvironmentMaskOrSubsurfaceTint);
                }
                case 0x33305854: // TX03
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.GlowOrDetailMap) return TryGet<int?>.Failure;
                    _GlowOrDetailMapLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.GlowOrDetailMap);
                }
                case 0x34305854: // TX04
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Height) return TryGet<int?>.Failure;
                    _HeightLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Height);
                }
                case 0x35305854: // TX05
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Environment) return TryGet<int?>.Failure;
                    _EnvironmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Environment);
                }
                case 0x36305854: // TX06
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.Multilayer) return TryGet<int?>.Failure;
                    _MultilayerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.Multilayer);
                }
                case 0x37305854: // TX07
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Textures_FieldIndex.BacklightMaskOrSpecular) return TryGet<int?>.Failure;
                    _BacklightMaskOrSpecularLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Textures_FieldIndex.BacklightMaskOrSpecular);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

