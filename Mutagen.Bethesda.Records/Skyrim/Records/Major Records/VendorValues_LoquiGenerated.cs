/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class VendorValues :
        IVendorValues,
        ILoquiObjectSetter<VendorValues>,
        IEquatable<VendorValues>,
        IEqualsMask
    {
        #region Ctor
        public VendorValues()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StartHour
        public UInt16 StartHour { get; set; }
        #endregion
        #region EndHour
        public UInt16 EndHour { get; set; }
        #endregion
        #region Radius
        public UInt32 Radius { get; set; }
        #endregion
        #region OnlyBuysStolenItems
        public Boolean OnlyBuysStolenItems { get; set; }
        #endregion
        #region NotSellBuy
        public Boolean NotSellBuy { get; set; }
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; }
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            VendorValuesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IVendorValuesGetter rhs)) return false;
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(VendorValues obj)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => VendorValuesXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((VendorValuesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static VendorValues CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static VendorValues CreateFromXml(
            XElement node,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static VendorValues CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new VendorValues() : null;
                    break;
                default:
                    break;
            }
            var ret = new VendorValues();
            ((VendorValuesSetterCommon)((IVendorValuesGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static VendorValues CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static VendorValues CreateFromXml(
            string path,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static VendorValues CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static VendorValues CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static VendorValues CreateFromXml(
            Stream stream,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static VendorValues CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((VendorValues_FieldIndex)index)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = VendorValues_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static VendorValues CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static VendorValues CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static VendorValues CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new VendorValues();
            ((VendorValuesSetterCommon)((IVendorValuesGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IVendorValuesGetter)rhs, include);

        void IClearable.Clear()
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static VendorValues GetNew()
        {
            return new VendorValues();
        }

    }
    #endregion

    #region Interface
    public partial interface IVendorValues :
        IVendorValuesGetter,
        ILoquiObjectSetter<IVendorValues>
    {
        new UInt16 StartHour { get; set; }

        new UInt16 EndHour { get; set; }

        new UInt32 Radius { get; set; }

        new Boolean OnlyBuysStolenItems { get; set; }

        new Boolean NotSellBuy { get; set; }

        new UInt16 Unknown { get; set; }

    }

    public partial interface IVendorValuesGetter :
        ILoquiObject,
        ILoquiObject<IVendorValuesGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region StartHour
        UInt16 StartHour { get; }

        #endregion
        #region EndHour
        UInt16 EndHour { get; }

        #endregion
        #region Radius
        UInt32 Radius { get; }

        #endregion
        #region OnlyBuysStolenItems
        Boolean OnlyBuysStolenItems { get; }

        #endregion
        #region NotSellBuy
        Boolean NotSellBuy { get; }

        #endregion
        #region Unknown
        UInt16 Unknown { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class VendorValuesMixIn
    {
        public static void Clear(this IVendorValues item)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static VendorValues_Mask<bool> GetEqualsMask(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IVendorValuesGetter item,
            string name = null,
            VendorValues_Mask<bool> printMask = null)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IVendorValuesGetter item,
            FileGeneration fg,
            string name = null,
            VendorValues_Mask<bool> printMask = null)
        {
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IVendorValuesGetter item,
            VendorValues_Mask<bool?> checkMask)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static VendorValues_Mask<bool> GetHasBeenSetMask(this IVendorValuesGetter item)
        {
            var ret = new VendorValues_Mask<bool>();
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this IVendorValues lhs,
            IVendorValuesGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            VendorValues_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            VendorValues_TranslationMask copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IVendorValues item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IVendorValues item,
            XElement node,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            string path,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            string path,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            string path,
            ErrorMaskBuilder errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            VendorValues_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            Stream stream,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IVendorValues item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            VendorValues_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IVendorValues item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IVendorValues item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IVendorValues item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum VendorValues_FieldIndex
    {
        StartHour = 0,
        EndHour = 1,
        Radius = 2,
        OnlyBuysStolenItems = 3,
        NotSellBuy = 4,
        Unknown = 5,
    }
    #endregion

    #region Registration
    public partial class VendorValues_Registration : ILoquiRegistration
    {
        public static readonly VendorValues_Registration Instance = new VendorValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 34,
            version: 0);

        public const string GUID = "31dd7308-ffd1-4311-a69c-f6c0bed71382";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(VendorValues_Mask<>);

        public static readonly Type ErrorMaskType = typeof(VendorValues_ErrorMask);

        public static readonly Type ClassType = typeof(VendorValues);

        public static readonly Type GetterType = typeof(IVendorValuesGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVendorValues);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.VendorValues";

        public const string Name = "VendorValues";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STARTHOUR":
                    return (ushort)VendorValues_FieldIndex.StartHour;
                case "ENDHOUR":
                    return (ushort)VendorValues_FieldIndex.EndHour;
                case "RADIUS":
                    return (ushort)VendorValues_FieldIndex.Radius;
                case "ONLYBUYSSTOLENITEMS":
                    return (ushort)VendorValues_FieldIndex.OnlyBuysStolenItems;
                case "NOTSELLBUY":
                    return (ushort)VendorValues_FieldIndex.NotSellBuy;
                case "UNKNOWN":
                    return (ushort)VendorValues_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                    return "StartHour";
                case VendorValues_FieldIndex.EndHour:
                    return "EndHour";
                case VendorValues_FieldIndex.Radius:
                    return "Radius";
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                    return "OnlyBuysStolenItems";
                case VendorValues_FieldIndex.NotSellBuy:
                    return "NotSellBuy";
                case VendorValues_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                case VendorValues_FieldIndex.EndHour:
                case VendorValues_FieldIndex.Radius:
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                case VendorValues_FieldIndex.NotSellBuy:
                case VendorValues_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                    return typeof(UInt16);
                case VendorValues_FieldIndex.EndHour:
                    return typeof(UInt16);
                case VendorValues_FieldIndex.Radius:
                    return typeof(UInt32);
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                    return typeof(Boolean);
                case VendorValues_FieldIndex.NotSellBuy:
                    return typeof(Boolean);
                case VendorValues_FieldIndex.Unknown:
                    return typeof(UInt16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(VendorValuesXmlWriteTranslation);
        public static readonly RecordType VENV_HEADER = new RecordType("VENV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = VENV_HEADER;
        public const int NumStructFields = 6;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(VendorValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class VendorValuesSetterCommon
    {
        public static readonly VendorValuesSetterCommon Instance = new VendorValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVendorValues item)
        {
            ClearPartial();
            item.StartHour = default(UInt16);
            item.EndHour = default(UInt16);
            item.Radius = default(UInt32);
            item.OnlyBuysStolenItems = default(Boolean);
            item.NotSellBuy = default(Boolean);
            item.Unknown = default(UInt16);
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IVendorValues item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    VendorValuesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IVendorValues item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            item.StartHour = frame.ReadUInt16();
            item.EndHour = frame.ReadUInt16();
            item.Radius = frame.ReadUInt32();
            item.OnlyBuysStolenItems = frame.ReadBoolean();
            item.NotSellBuy = frame.ReadBoolean();
            item.Unknown = frame.ReadUInt16();
        }
        
        public void CopyInFromBinary(
            IVendorValues item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(VendorValues_Registration.VENV_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class VendorValuesCommon
    {
        public static readonly VendorValuesCommon Instance = new VendorValuesCommon();

        public VendorValues_Mask<bool> GetEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VendorValues_Mask<bool>();
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            VendorValues_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.StartHour = item.StartHour == rhs.StartHour;
            ret.EndHour = item.EndHour == rhs.EndHour;
            ret.Radius = item.Radius == rhs.Radius;
            ret.OnlyBuysStolenItems = item.OnlyBuysStolenItems == rhs.OnlyBuysStolenItems;
            ret.NotSellBuy = item.NotSellBuy == rhs.NotSellBuy;
            ret.Unknown = item.Unknown == rhs.Unknown;
        }
        
        public string ToString(
            IVendorValuesGetter item,
            string name = null,
            VendorValues_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IVendorValuesGetter item,
            FileGeneration fg,
            string name = null,
            VendorValues_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"VendorValues =>");
            }
            else
            {
                fg.AppendLine($"{name} (VendorValues) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IVendorValuesGetter item,
            FileGeneration fg,
            VendorValues_Mask<bool> printMask = null)
        {
            if (printMask?.StartHour ?? true)
            {
                fg.AppendLine($"StartHour => {item.StartHour}");
            }
            if (printMask?.EndHour ?? true)
            {
                fg.AppendLine($"EndHour => {item.EndHour}");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendLine($"Radius => {item.Radius}");
            }
            if (printMask?.OnlyBuysStolenItems ?? true)
            {
                fg.AppendLine($"OnlyBuysStolenItems => {item.OnlyBuysStolenItems}");
            }
            if (printMask?.NotSellBuy ?? true)
            {
                fg.AppendLine($"NotSellBuy => {item.NotSellBuy}");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {item.Unknown}");
            }
        }
        
        public bool HasBeenSet(
            IVendorValuesGetter item,
            VendorValues_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IVendorValuesGetter item,
            VendorValues_Mask<bool> mask)
        {
            mask.StartHour = true;
            mask.EndHour = true;
            mask.Radius = true;
            mask.OnlyBuysStolenItems = true;
            mask.NotSellBuy = true;
            mask.Unknown = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVendorValuesGetter lhs,
            IVendorValuesGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.StartHour != rhs.StartHour) return false;
            if (lhs.EndHour != rhs.EndHour) return false;
            if (lhs.Radius != rhs.Radius) return false;
            if (lhs.OnlyBuysStolenItems != rhs.OnlyBuysStolenItems) return false;
            if (lhs.NotSellBuy != rhs.NotSellBuy) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            return true;
        }
        
        public virtual int GetHashCode(IVendorValuesGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.StartHour).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EndHour).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Radius).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.OnlyBuysStolenItems).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NotSellBuy).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unknown).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VendorValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IVendorValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class VendorValuesSetterTranslationCommon
    {
        public static readonly VendorValuesSetterTranslationCommon Instance = new VendorValuesSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            IVendorValues item,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.StartHour) ?? true))
            {
                item.StartHour = rhs.StartHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.EndHour) ?? true))
            {
                item.EndHour = rhs.EndHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.OnlyBuysStolenItems) ?? true))
            {
                item.OnlyBuysStolenItems = rhs.OnlyBuysStolenItems;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.NotSellBuy) ?? true))
            {
                item.NotSellBuy = rhs.NotSellBuy;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
        }
        
        #endregion
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            VendorValues_TranslationMask copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class VendorValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static VendorValues_Registration Registration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VendorValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class VendorValuesXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static VendorValuesXmlWriteTranslation Instance = new VendorValuesXmlWriteTranslation();

        public static void WriteToNodeXml(
            IVendorValuesGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.StartHour) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartHour),
                    item: item.StartHour,
                    fieldIndex: (int)VendorValues_FieldIndex.StartHour,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.EndHour) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EndHour),
                    item: item.EndHour,
                    fieldIndex: (int)VendorValues_FieldIndex.EndHour,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Radius) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Radius),
                    item: item.Radius,
                    fieldIndex: (int)VendorValues_FieldIndex.Radius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.OnlyBuysStolenItems) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OnlyBuysStolenItems),
                    item: item.OnlyBuysStolenItems,
                    fieldIndex: (int)VendorValues_FieldIndex.OnlyBuysStolenItems,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.NotSellBuy) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NotSellBuy),
                    item: item.NotSellBuy,
                    fieldIndex: (int)VendorValues_FieldIndex.NotSellBuy,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)VendorValues_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IVendorValuesGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.VendorValues");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.VendorValues");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IVendorValuesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IVendorValuesGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IVendorValuesGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class VendorValuesXmlCreateTranslation
    {
        public readonly static VendorValuesXmlCreateTranslation Instance = new VendorValuesXmlCreateTranslation();

        public static void FillPublicXml(
            IVendorValues item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    VendorValuesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IVendorValues item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "StartHour":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.StartHour);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 StartHourParse,
                            errorMask: errorMask))
                        {
                            item.StartHour = StartHourParse;
                        }
                        else
                        {
                            item.StartHour = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EndHour":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.EndHour);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 EndHourParse,
                            errorMask: errorMask))
                        {
                            item.EndHour = EndHourParse;
                        }
                        else
                        {
                            item.EndHour = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Radius":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.Radius);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 RadiusParse,
                            errorMask: errorMask))
                        {
                            item.Radius = RadiusParse;
                        }
                        else
                        {
                            item.Radius = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OnlyBuysStolenItems":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.OnlyBuysStolenItems);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean OnlyBuysStolenItemsParse,
                            errorMask: errorMask))
                        {
                            item.OnlyBuysStolenItems = OnlyBuysStolenItemsParse;
                        }
                        else
                        {
                            item.OnlyBuysStolenItems = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NotSellBuy":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.NotSellBuy);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean NotSellBuyParse,
                            errorMask: errorMask))
                        {
                            item.NotSellBuy = NotSellBuyParse;
                        }
                        else
                        {
                            item.NotSellBuy = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    try
                    {
                        errorMask?.PushIndex((int)VendorValues_FieldIndex.Unknown);
                        if (UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt16 UnknownParse,
                            errorMask: errorMask))
                        {
                            item.Unknown = UnknownParse;
                        }
                        else
                        {
                            item.Unknown = default(UInt16);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class VendorValuesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IVendorValuesGetter item,
            XElement node,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true,
            VendorValues_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((VendorValuesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            string path,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            Stream stream,
            out VendorValues_ErrorMask errorMask,
            VendorValues_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((VendorValuesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            XElement node,
            string name = null,
            VendorValues_TranslationMask translationMask = null)
        {
            ((VendorValuesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((VendorValuesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IVendorValuesGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((VendorValuesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class VendorValues_Mask<T> : IMask<T>, IEquatable<VendorValues_Mask<T>>
    {
        #region Ctors
        public VendorValues_Mask()
        {
        }

        public VendorValues_Mask(T initialValue)
        {
            this.StartHour = initialValue;
            this.EndHour = initialValue;
            this.Radius = initialValue;
            this.OnlyBuysStolenItems = initialValue;
            this.NotSellBuy = initialValue;
            this.Unknown = initialValue;
        }
        #endregion

        #region Members
        public T StartHour;
        public T EndHour;
        public T Radius;
        public T OnlyBuysStolenItems;
        public T NotSellBuy;
        public T Unknown;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is VendorValues_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(VendorValues_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.StartHour, rhs.StartHour)) return false;
            if (!object.Equals(this.EndHour, rhs.EndHour)) return false;
            if (!object.Equals(this.Radius, rhs.Radius)) return false;
            if (!object.Equals(this.OnlyBuysStolenItems, rhs.OnlyBuysStolenItems)) return false;
            if (!object.Equals(this.NotSellBuy, rhs.NotSellBuy)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.StartHour?.GetHashCode());
            ret = ret.CombineHashCode(this.EndHour?.GetHashCode());
            ret = ret.CombineHashCode(this.Radius?.GetHashCode());
            ret = ret.CombineHashCode(this.OnlyBuysStolenItems?.GetHashCode());
            ret = ret.CombineHashCode(this.NotSellBuy?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.StartHour)) return false;
            if (!eval(this.EndHour)) return false;
            if (!eval(this.Radius)) return false;
            if (!eval(this.OnlyBuysStolenItems)) return false;
            if (!eval(this.NotSellBuy)) return false;
            if (!eval(this.Unknown)) return false;
            return true;
        }
        #endregion

        #region Translate
        public VendorValues_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new VendorValues_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(VendorValues_Mask<R> obj, Func<T, R> eval)
        {
            obj.StartHour = eval(this.StartHour);
            obj.EndHour = eval(this.EndHour);
            obj.Radius = eval(this.Radius);
            obj.OnlyBuysStolenItems = eval(this.OnlyBuysStolenItems);
            obj.NotSellBuy = eval(this.NotSellBuy);
            obj.Unknown = eval(this.Unknown);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(VendorValues_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, VendorValues_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(VendorValues_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StartHour ?? true)
                {
                    fg.AppendLine($"StartHour => {StartHour}");
                }
                if (printMask?.EndHour ?? true)
                {
                    fg.AppendLine($"EndHour => {EndHour}");
                }
                if (printMask?.Radius ?? true)
                {
                    fg.AppendLine($"Radius => {Radius}");
                }
                if (printMask?.OnlyBuysStolenItems ?? true)
                {
                    fg.AppendLine($"OnlyBuysStolenItems => {OnlyBuysStolenItems}");
                }
                if (printMask?.NotSellBuy ?? true)
                {
                    fg.AppendLine($"NotSellBuy => {NotSellBuy}");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class VendorValues_ErrorMask : IErrorMask, IErrorMask<VendorValues_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception StartHour;
        public Exception EndHour;
        public Exception Radius;
        public Exception OnlyBuysStolenItems;
        public Exception NotSellBuy;
        public Exception Unknown;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                    return StartHour;
                case VendorValues_FieldIndex.EndHour:
                    return EndHour;
                case VendorValues_FieldIndex.Radius:
                    return Radius;
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                    return OnlyBuysStolenItems;
                case VendorValues_FieldIndex.NotSellBuy:
                    return NotSellBuy;
                case VendorValues_FieldIndex.Unknown:
                    return Unknown;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                    this.StartHour = ex;
                    break;
                case VendorValues_FieldIndex.EndHour:
                    this.EndHour = ex;
                    break;
                case VendorValues_FieldIndex.Radius:
                    this.Radius = ex;
                    break;
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                    this.OnlyBuysStolenItems = ex;
                    break;
                case VendorValues_FieldIndex.NotSellBuy:
                    this.NotSellBuy = ex;
                    break;
                case VendorValues_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
            switch (enu)
            {
                case VendorValues_FieldIndex.StartHour:
                    this.StartHour = (Exception)obj;
                    break;
                case VendorValues_FieldIndex.EndHour:
                    this.EndHour = (Exception)obj;
                    break;
                case VendorValues_FieldIndex.Radius:
                    this.Radius = (Exception)obj;
                    break;
                case VendorValues_FieldIndex.OnlyBuysStolenItems:
                    this.OnlyBuysStolenItems = (Exception)obj;
                    break;
                case VendorValues_FieldIndex.NotSellBuy:
                    this.NotSellBuy = (Exception)obj;
                    break;
                case VendorValues_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (StartHour != null) return true;
            if (EndHour != null) return true;
            if (Radius != null) return true;
            if (OnlyBuysStolenItems != null) return true;
            if (NotSellBuy != null) return true;
            if (Unknown != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("VendorValues_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"StartHour => {StartHour}");
            fg.AppendLine($"EndHour => {EndHour}");
            fg.AppendLine($"Radius => {Radius}");
            fg.AppendLine($"OnlyBuysStolenItems => {OnlyBuysStolenItems}");
            fg.AppendLine($"NotSellBuy => {NotSellBuy}");
            fg.AppendLine($"Unknown => {Unknown}");
        }
        #endregion

        #region Combine
        public VendorValues_ErrorMask Combine(VendorValues_ErrorMask rhs)
        {
            var ret = new VendorValues_ErrorMask();
            ret.StartHour = this.StartHour.Combine(rhs.StartHour);
            ret.EndHour = this.EndHour.Combine(rhs.EndHour);
            ret.Radius = this.Radius.Combine(rhs.Radius);
            ret.OnlyBuysStolenItems = this.OnlyBuysStolenItems.Combine(rhs.OnlyBuysStolenItems);
            ret.NotSellBuy = this.NotSellBuy.Combine(rhs.NotSellBuy);
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            return ret;
        }
        public static VendorValues_ErrorMask Combine(VendorValues_ErrorMask lhs, VendorValues_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static VendorValues_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new VendorValues_ErrorMask();
        }
        #endregion

    }
    public class VendorValues_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool StartHour;
        public bool EndHour;
        public bool Radius;
        public bool OnlyBuysStolenItems;
        public bool NotSellBuy;
        public bool Unknown;
        #endregion

        #region Ctors
        public VendorValues_TranslationMask()
        {
        }

        public VendorValues_TranslationMask(bool defaultOn)
        {
            this.StartHour = defaultOn;
            this.EndHour = defaultOn;
            this.Radius = defaultOn;
            this.OnlyBuysStolenItems = defaultOn;
            this.NotSellBuy = defaultOn;
            this.Unknown = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((StartHour, null));
            ret.Add((EndHour, null));
            ret.Add((Radius, null));
            ret.Add((OnlyBuysStolenItems, null));
            ret.Add((NotSellBuy, null));
            ret.Add((Unknown, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class VendorValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static VendorValuesBinaryWriteTranslation Instance = new VendorValuesBinaryWriteTranslation();

        public static void Write_Embedded(
            IVendorValuesGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            writer.Write(item.StartHour);
            writer.Write(item.EndHour);
            writer.Write(item.Radius);
            writer.Write(item.OnlyBuysStolenItems);
            writer.Write(item.NotSellBuy);
            writer.Write(item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            IVendorValuesGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: VendorValues_Registration.VENV_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IVendorValuesGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class VendorValuesBinaryCreateTranslation
    {
        public readonly static VendorValuesBinaryCreateTranslation Instance = new VendorValuesBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class VendorValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVendorValuesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out VendorValues_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((VendorValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = VendorValues_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IVendorValuesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((VendorValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IVendorValuesGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((VendorValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class VendorValuesBinaryWrapper :
        BinaryWrapper,
        IVendorValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static VendorValues_Registration Registration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IVendorValuesGetter)rhs, include);

        protected object XmlWriteTranslator => VendorValuesXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((VendorValuesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public UInt16 StartHour => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0, 2));
        public UInt16 EndHour => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(2, 2));
        public UInt32 Radius => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4));
        public Boolean OnlyBuysStolenItems => _data.Span.Slice(8, 1)[0] == 1;
        public Boolean NotSellBuy => _data.Span.Slice(9, 1)[0] == 1;
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(10, 2));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected VendorValuesBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static VendorValuesBinaryWrapper VendorValuesFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new VendorValuesBinaryWrapper(
                bytes: HeaderTranslation.ExtractSubrecordWrapperMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

