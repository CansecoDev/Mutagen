/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimMod :
        ISkyrimMod,
        ILoquiObjectSetter<SkyrimMod>,
        IEquatable<SkyrimMod>,
        IEqualsMask
    {
        #region Ctor
        protected SkyrimMod()
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ModHeader _ModHeader_Object = new ModHeader();
        public ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModHeaderGetter ISkyrimModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGameSettingGetter> ISkyrimModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Keyword> _Keywords_Object;
        public Group<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeywordGetter> ISkyrimModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<LocationReferenceType> _LocationReferenceTypes_Object;
        public Group<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationReferenceTypeGetter> ISkyrimModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<ActionRecord> _Actions_Object;
        public Group<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActionRecordGetter> ISkyrimModGetter.Actions => _Actions_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<TextureSet> _TextureSets_Object;
        public Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITextureSetGetter> ISkyrimModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGlobalGetter> ISkyrimModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClassGetter> ISkyrimModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFactionGetter> ISkyrimModGetter.Factions => _Factions_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISkyrimModGetter rhs)) return false;
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkyrimMod obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SkyrimMod();
            ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            string path,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, ModKey? modKeyOverride) => this.WriteToBinary(path, modKeyOverride, importMask: null);
        Task IModGetter.WriteToBinaryAsync(string path, ModKey? modKeyOverride) => this.WriteToBinaryAsync(path, modKeyOverride);
        void IModGetter.WriteToBinaryParallel(string path, ModKey? modKeyOverride) => this.WriteToBinaryParallel(path, modKeyOverride);
        public void AddRecords(
            SkyrimMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
        }

        public Dictionary<FormKey, IMajorRecordCommon> CopyInDuplicate(
            SkyrimMod rhs,
            GroupMask? mask = null)
        {
            var duppedRecords = new List<(IMajorRecordCommon Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(
                    rhs.GameSettings.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(
                    rhs.Keywords.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Keyword>());
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(
                    rhs.LocationReferenceTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LocationReferenceType>());
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(
                    rhs.Actions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ActionRecord>());
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(
                    rhs.TextureSets.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<TextureSet>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(
                    rhs.Globals.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(
                    rhs.Classes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Class>());
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(
                    rhs.Factions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Faction>());
            }
            Dictionary<FormKey, IMajorRecordCommon> router = new Dictionary<FormKey, IMajorRecordCommon>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, IMajorRecordCommon>(dup.OriginalFormKey, dup.Record)));
            var package = this.CreateLinkCache();
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links.WhereCastable<ILinkGetter, IFormIDLink>())
                {
                    if (link.TryResolveFormKey(package, out var formKey)
                        && router.TryGetValue(formKey, out var duppedRecord))
                    {
                        link.FormKey = duppedRecord.FormKey;
                    }
                }
            }
            return router;
        }

        public void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : 0;
            count += Keywords.RecordCache.Count > 0 ? 1 : 0;
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Actions.RecordCache.Count > 0 ? 1 : 0;
            count += TextureSets.RecordCache.Count > 0 ? 1 : 0;
            count += Globals.RecordCache.Count > 0 ? 1 : 0;
            count += Classes.RecordCache.Count > 0 ? 1 : 0;
            count += Factions.RecordCache.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => SkyrimModCommon.Instance.GetLinks(this);
        public static Task<SkyrimMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey)
        {
            return CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: null);
        }

        public static async Task<(SkyrimMod Mod, SkyrimMod_ErrorMask ErrorMask)> CreateFromXmlFolderWithErrorMask(
            DirectoryPath dir,
            ModKey modKey)
        {
            ErrorMaskBuilder? errorMaskBuilder = new ErrorMaskBuilder();
            var ret = await CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: errorMaskBuilder);
            var errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
            return (ret, errorMask);
        }

        public static async Task<SkyrimMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey,
            ErrorMaskBuilder? errorMask)
        {
            var item = new SkyrimMod(modKey);
            var tasks = new List<Task>();
            item.ModHeader.CopyInFromXml(
                path: Path.Combine(dir.Path, "ModHeader.xml"),
                errorMask: errorMask,
                translationMask: null);
            tasks.Add(Task.Run(() => item.GameSettings.CreateFromXmlFolder<GameSetting>(
                dir: dir,
                name: nameof(GameSettings),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.GameSettings)));
            tasks.Add(Task.Run(() => item.Keywords.CreateFromXmlFolder<Keyword>(
                dir: dir,
                name: nameof(Keywords),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Keywords)));
            tasks.Add(Task.Run(() => item.LocationReferenceTypes.CreateFromXmlFolder<LocationReferenceType>(
                dir: dir,
                name: nameof(LocationReferenceTypes),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.LocationReferenceTypes)));
            tasks.Add(Task.Run(() => item.Actions.CreateFromXmlFolder<ActionRecord>(
                dir: dir,
                name: nameof(Actions),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Actions)));
            tasks.Add(Task.Run(() => item.TextureSets.CreateFromXmlFolder<TextureSet>(
                dir: dir,
                name: nameof(TextureSets),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.TextureSets)));
            tasks.Add(Task.Run(() => item.Globals.CreateFromXmlFolder<Global>(
                dir: dir,
                name: nameof(Globals),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Globals)));
            tasks.Add(Task.Run(() => item.Classes.CreateFromXmlFolder<Class>(
                dir: dir,
                name: nameof(Classes),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Classes)));
            tasks.Add(Task.Run(() => item.Factions.CreateFromXmlFolder<Faction>(
                dir: dir,
                name: nameof(Factions),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Factions)));
            await Task.WhenAll(tasks);
            return item;
        }

        public async Task<SkyrimMod_ErrorMask?> WriteToXmlFolder(
            DirectoryPath dir,
            bool doMasks = true)
        {
            ErrorMaskBuilder? errorMaskBuilder = null;
            dir.Create();
            using (new FolderCleaner(dir, FolderCleaner.CleanType.AccessTime))
            {
                var tasks = new List<Task>();
                tasks.Add(Task.Run(() => this.ModHeader.WriteToXml(
                    path: Path.Combine(dir.Path, "ModHeader.xml"),
                    errorMask: errorMaskBuilder,
                    translationMask: null)));
                tasks.Add(Task.Run(() => GameSettings.WriteToXmlFolder<GameSetting, GameSetting_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(GameSettings),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.GameSettings)));
                tasks.Add(Task.Run(() => Keywords.WriteToXmlFolder<Keyword, Keyword_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Keywords),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Keywords)));
                tasks.Add(Task.Run(() => LocationReferenceTypes.WriteToXmlFolder<LocationReferenceType, LocationReferenceType_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(LocationReferenceTypes),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.LocationReferenceTypes)));
                tasks.Add(Task.Run(() => Actions.WriteToXmlFolder<ActionRecord, ActionRecord_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Actions),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Actions)));
                tasks.Add(Task.Run(() => TextureSets.WriteToXmlFolder<TextureSet, TextureSet_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(TextureSets),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.TextureSets)));
                tasks.Add(Task.Run(() => Globals.WriteToXmlFolder<Global, Global_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Globals),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Globals)));
                tasks.Add(Task.Run(() => Classes.WriteToXmlFolder<Class, Class_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Classes),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Classes)));
                tasks.Add(Task.Run(() => Factions.WriteToXmlFolder<Faction, Faction_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Factions),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Factions)));
                await Task.WhenAll(tasks);
            }
            return null;
        }
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<SkyrimMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            return await CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter,
            GroupMask? importMask = null)
        {
            var ret = new SkyrimMod(modKey);
            await ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            string path,
            ErrorMaskBuilder? errorMask,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        #endregion

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            ModKey modKey)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                new BinaryMemoryReadStream(bytes),
                modKey: modKey,
                shouldDispose: false);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            string path,
            ModKey? modKeyOverride = null)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: new BinaryReadStream(path),
                modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)),
                shouldDispose: true);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            IBinaryReadStream stream,
            ModKey modKey)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: stream,
                modKey: modKey,
                shouldDispose: false);
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SkyrimMod GetNew()
        {
            return new SkyrimMod();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimMod :
        ISkyrimModGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ISkyrimMod>,
        IMod
    {
        new ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Keyword> Keywords { get; }
        new Group<LocationReferenceType> LocationReferenceTypes { get; }
        new Group<ActionRecord> Actions { get; }
        new Group<TextureSet> TextureSets { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
    }

    public partial interface ISkyrimModGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ISkyrimModGetter>,
        IXmlItem,
        IModGetter,
        ILinkContainer
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IModHeaderGetter ModHeader { get; }
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        IGroupGetter<IKeywordGetter> Keywords { get; }
        IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IGroupGetter<IActionRecordGetter> Actions { get; }
        IGroupGetter<ITextureSetGetter> TextureSets { get; }
        IGroupGetter<IGlobalGetter> Globals { get; }
        IGroupGetter<IClassGetter> Classes { get; }
        IGroupGetter<IFactionGetter> Factions { get; }

    }

    #endregion

    #region Common MixIn
    public static class SkyrimModMixIn
    {
        public static void Clear(this ISkyrimMod item)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkyrimMod_Mask<bool> GetEqualsMask(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkyrimModGetter item,
            string? name = null,
            SkyrimMod_Mask<bool>? printMask = null)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod_Mask<bool>? printMask = null)
        {
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkyrimModGetter item,
            SkyrimMod_Mask<bool?> checkMask)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkyrimMod_Mask<bool> GetHasBeenSetMask(this ISkyrimModGetter item)
        {
            var ret = new SkyrimMod_Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetGroupGetter<T>(this ISkyrimModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this ISkyrimMod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static Task WriteToBinaryAsync(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey)
        {
            return SkyrimModCommon.WriteAsync(
                item: item,
                stream: stream,
                modKey: modKey);
        }

        public static async Task WriteToBinaryAsync(
            this ISkyrimModGetter item,
            string path,
            ModKey? modKeyOverride)
        {
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                await SkyrimModCommon.WriteAsync(
                    item: item,
                    stream: stream,
                    modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)));
            }
        }
        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey)
        {
            SkyrimModCommon.WriteParallel(
                item: item,
                stream: stream,
                modKey: modKey);
        }

        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            string path,
            ModKey? modKeyOverride)
        {
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                SkyrimModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)));
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ISkyrimModGetter obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ISkyrimMod obj)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            await CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter,
            GroupMask? importMask = null)
        {
            await ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        public static async Task CopyInFromBinary(
            this ISkyrimMod item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task CopyInFromBinary(
            this ISkyrimMod item,
            Stream stream,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                await CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        TextureSets = 5,
        Globals = 6,
        Classes = 7,
        Factions = 8,
    }
    #endregion

    #region Registration
    public partial class SkyrimMod_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMod_Registration Instance = new SkyrimMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "61f5127d-406d-41a1-897e-6d17188258ea";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(SkyrimMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMod_ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMod);

        public static readonly Type GetterType = typeof(ISkyrimModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMod";

        public const string Name = "SkyrimMod";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODHEADER":
                    return (ushort)SkyrimMod_FieldIndex.ModHeader;
                case "GAMESETTINGS":
                    return (ushort)SkyrimMod_FieldIndex.GameSettings;
                case "KEYWORDS":
                    return (ushort)SkyrimMod_FieldIndex.Keywords;
                case "LOCATIONREFERENCETYPES":
                    return (ushort)SkyrimMod_FieldIndex.LocationReferenceTypes;
                case "ACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Actions;
                case "TEXTURESETS":
                    return (ushort)SkyrimMod_FieldIndex.TextureSets;
                case "GLOBALS":
                    return (ushort)SkyrimMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)SkyrimMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Factions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return "ModHeader";
                case SkyrimMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case SkyrimMod_FieldIndex.Keywords:
                    return "Keywords";
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return "LocationReferenceTypes";
                case SkyrimMod_FieldIndex.Actions:
                    return "Actions";
                case SkyrimMod_FieldIndex.TextureSets:
                    return "TextureSets";
                case SkyrimMod_FieldIndex.Globals:
                    return "Globals";
                case SkyrimMod_FieldIndex.Classes:
                    return "Classes";
                case SkyrimMod_FieldIndex.Factions:
                    return "Factions";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return true;
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return typeof(ModHeader);
                case SkyrimMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case SkyrimMod_FieldIndex.Keywords:
                    return typeof(Group<Keyword>);
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return typeof(Group<LocationReferenceType>);
                case SkyrimMod_FieldIndex.Actions:
                    return typeof(Group<ActionRecord>);
                case SkyrimMod_FieldIndex.TextureSets:
                    return typeof(Group<TextureSet>);
                case SkyrimMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case SkyrimMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case SkyrimMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkyrimModXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType KYWD_HEADER = new RecordType("KYWD");
        public static readonly RecordType LCRT_HEADER = new RecordType("LCRT");
        public static readonly RecordType AACT_HEADER = new RecordType("AACT");
        public static readonly RecordType TXST_HEADER = new RecordType("TXST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TES4_HEADER,
                        GMST_HEADER,
                        KYWD_HEADER,
                        LCRT_HEADER,
                        AACT_HEADER,
                        TXST_HEADER,
                        GLOB_HEADER,
                        CLAS_HEADER,
                        FACT_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkyrimModSetterCommon
    {
        public static readonly SkyrimModSetterCommon Instance = new SkyrimModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkyrimMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ModHeader":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                        item.ModHeader.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ISkyrimMod obj)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ISkyrimMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISkyrimMod item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            ISkyrimMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        await item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.GameSettings);
                }
                case 0x4457594B: // KYWD
                {
                    if (importMask?.Keywords ?? true)
                    {
                        await item.Keywords.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keywords);
                }
                case 0x5452434C: // LCRT
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        await item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                }
                case 0x54434141: // AACT
                {
                    if (importMask?.Actions ?? true)
                    {
                        await item.Actions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Actions);
                }
                case 0x54535854: // TXST
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        await item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TextureSets);
                }
                case 0x424F4C47: // GLOB
                {
                    if (importMask?.Globals ?? true)
                    {
                        await item.Globals.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    if (importMask?.Classes ?? true)
                    {
                        await item.Classes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    if (importMask?.Factions ?? true)
                    {
                        await item.Factions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Factions);
                }
                default:
                    frame.Position += contentLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public async Task CopyInFromBinary(
            ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter,
            GroupMask? importMask = null)
        {
            var masterReferences = new MasterReferences(modKey, item.ModHeader.MasterReferences);
            await UtilityAsyncTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes).ConfigureAwait(false);
        }
        
        #endregion
        
    }
    public partial class SkyrimModCommon
    {
        public static readonly SkyrimModCommon Instance = new SkyrimModCommon();

        public SkyrimMod_Mask<bool> GetEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMod_Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
        }
        
        public string ToString(
            ISkyrimModGetter item,
            string? name = null,
            SkyrimMod_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod_Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkyrimMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkyrimMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkyrimModGetter item,
            FileGeneration fg,
            SkyrimMod_Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.ToString(fg, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.ToString(fg, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.ToString(fg, "Actions");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.ToString(fg, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
        }
        
        public bool HasBeenSet(
            ISkyrimModGetter item,
            SkyrimMod_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISkyrimModGetter item,
            SkyrimMod_Mask<bool> mask)
        {
            mask.ModHeader = new MaskItem<bool, ModHeader_Mask<bool>?>(true, item.ModHeader?.GetHasBeenSetMask());
            mask.GameSettings = new MaskItem<bool, Group_Mask<bool>?>(true, item.GameSettings?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, Group_Mask<bool>?>(true, item.Keywords?.GetHasBeenSetMask());
            mask.LocationReferenceTypes = new MaskItem<bool, Group_Mask<bool>?>(true, item.LocationReferenceTypes?.GetHasBeenSetMask());
            mask.Actions = new MaskItem<bool, Group_Mask<bool>?>(true, item.Actions?.GetHasBeenSetMask());
            mask.TextureSets = new MaskItem<bool, Group_Mask<bool>?>(true, item.TextureSets?.GetHasBeenSetMask());
            mask.Globals = new MaskItem<bool, Group_Mask<bool>?>(true, item.Globals?.GetHasBeenSetMask());
            mask.Classes = new MaskItem<bool, Group_Mask<bool>?>(true, item.Classes?.GetHasBeenSetMask());
            mask.Factions = new MaskItem<bool, Group_Mask<bool>?>(true, item.Factions?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimModGetter? lhs,
            ISkyrimModGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Keywords, rhs.Keywords)) return false;
            if (!object.Equals(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
            if (!object.Equals(lhs.Actions, rhs.Actions)) return false;
            if (!object.Equals(lhs.TextureSets, rhs.TextureSets)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISkyrimModGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ModHeader).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GameSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Keywords).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LocationReferenceTypes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Actions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TextureSets).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Globals).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Classes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Factions).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SkyrimMod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<T>(ISkyrimModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            switch (typeof(T).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.RecordCache;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords.RecordCache;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes.RecordCache;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions.RecordCache;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets.RecordCache;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.RecordCache;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.RecordCache;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.RecordCache;
                default:
                    throw new ArgumentException($"Unknown group type: {typeof(T)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            ISkyrimModGetter item,
            Stream stream,
            ModKey modKey)
        {
            var masterRefs = new MasterReferences(modKey, item.MasterReferences);
            item.ModHeader.WriteToBinary(
                new MutagenWriter(stream, MetaDataConstants.Skyrim),
                masterRefs);
            Stream[] outputStreams = new Stream[8];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, masterRefs, 0, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Keywords, masterRefs, 1, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, masterRefs, 2, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Actions, masterRefs, 3, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, masterRefs, 4, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Globals, masterRefs, 5, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Classes, masterRefs, 6, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Factions, masterRefs, 7, outputStreams));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferences masters,
            int targetIndex,
            Stream[] streamDepositArray)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Records.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[MetaDataConstants.Skyrim.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), Group_Registration.GRUP_HEADER.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, MetaDataConstants.Skyrim, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.Write_Embedded<T>(group, stream, default!);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, MetaDataConstants.Skyrim, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream, masters);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public static async Task WriteAsync(
            ISkyrimModGetter item,
            Stream stream,
            ModKey modKey)
        {
            var masterRefs = new MasterReferences(modKey, item.MasterReferences);
            item.ModHeader.WriteToBinary(
                new MutagenWriter(stream, MetaDataConstants.Skyrim),
                masterRefs);
            List<Task<IEnumerable<Stream>>> outputStreams = new List<Task<IEnumerable<Stream>>>();
            outputStreams.Add(WriteGroupAsync(item.GameSettings, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Keywords, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.LocationReferenceTypes, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Actions, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.TextureSets, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Globals, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Classes, masterRefs));
            outputStreams.Add(WriteGroupAsync(item.Factions, masterRefs));
            await UtilityTranslation.CompileStreamsInto(
                outputStreams,
                stream);
        }
        
        public static async Task<IEnumerable<Stream>> WriteGroupAsync<T>(
            IGroupGetter<T> group,
            MasterReferences masters)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return EnumerableExt<Stream>.Empty;
            List<Task<Stream>> streams = new List<Task<Stream>>();
            byte[] groupBytes = new byte[MetaDataConstants.Oblivion.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), Group_Registration.GRUP_HEADER.TypeInt);
            using (var stream = new MutagenWriter(new MemoryStream(groupBytes), MetaDataConstants.Skyrim))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.Write_Embedded<T>(group, stream, default!);
            }
            streams.Add(Task.FromResult<Stream>(new MemoryStream(groupBytes)));
            foreach (var cutItems in group.Records.Cut(CutCount))
            {
                streams.Add(
                    Task.Run<Stream>(() =>
                    {
                        MemoryTributary trib = new MemoryTributary();
                        using (var stream = new MutagenWriter(trib, MetaDataConstants.Skyrim, dispose: false))
                        {
                            foreach (var item in cutItems)
                            {
                                item.WriteToBinary(stream, masters);
                            }
                        }
                        return trib;
                    }));
            }
            return await UtilityTranslation.CompileSetGroupLength(streams, groupBytes);
        }
        
        public IEnumerable<ILinkGetter> GetLinks(ISkyrimModGetter obj)
        {
            foreach (var item in obj.ModHeader.Links)
            {
                yield return item;
            }
            if (obj.GameSettings is ILinkContainer GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is ILinkContainer KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is ILinkContainer LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Actions is ILinkContainer ActionslinkCont)
            {
                foreach (var item in ActionslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.TextureSets is ILinkContainer TextureSetslinkCont)
            {
                foreach (var item in TextureSetslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Globals is ILinkContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Classes is ILinkContainer ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.Links)
                {
                    yield return item;
                }
            }
            if (obj.Factions is ILinkContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ISkyrimModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ISkyrimModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "ISkyrimMajorRecordGetter":
                case "SkyrimMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class SkyrimModSetterTranslationCommon
    {
        public static readonly SkyrimModSetterTranslationCommon Instance = new SkyrimModSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISkyrimMod item,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SkyrimModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SkyrimModXmlWriteTranslation Instance = new SkyrimModXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                var loquiItem = item.ModHeader;
                ((ModHeaderXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.ModHeader),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ModHeader,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                var loquiItem = item.GameSettings;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IGameSettingGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)SkyrimMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                var loquiItem = item.Keywords;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IKeywordGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Keywords),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                var loquiItem = item.LocationReferenceTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ILocationReferenceTypeGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.LocationReferenceTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LocationReferenceTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                var loquiItem = item.Actions;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IActionRecordGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Actions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Actions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                var loquiItem = item.TextureSets;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<ITextureSetGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.TextureSets),
                    fieldIndex: (int)SkyrimMod_FieldIndex.TextureSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                var loquiItem = item.Globals;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IGlobalGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Globals),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                var loquiItem = item.Classes;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IClassGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Classes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Classes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                var loquiItem = item.Factions;
                ((GroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write<IFactionGetter>(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.Factions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
            }
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMod");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ISkyrimModGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SkyrimModXmlCreateTranslation
    {
        public readonly static SkyrimModXmlCreateTranslation Instance = new SkyrimModXmlCreateTranslation();

        public static void FillPublicXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                        item.GameSettings.CopyInFromXml<GameSetting>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                        item.Keywords.CopyInFromXml<Keyword>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocationReferenceTypes":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                        item.LocationReferenceTypes.CopyInFromXml<LocationReferenceType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Actions":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                        item.Actions.CopyInFromXml<ActionRecord>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSets":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                        item.TextureSets.CopyInFromXml<TextureSet>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                        item.Globals.CopyInFromXml<Global>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classes":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                        item.Classes.CopyInFromXml<Class>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                        item.Factions.CopyInFromXml<Faction>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SkyrimModXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            string? name = null,
            SkyrimMod_TranslationMask? translationMask = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public class SkyrimMod_Mask<T> :
        IMask<T>,
        IEquatable<SkyrimMod_Mask<T>>
        where T : notnull
    {
        #region Ctors
        public SkyrimMod_Mask(T initialValue)
        {
            this.ModHeader = new MaskItem<T, ModHeader_Mask<T>?>(initialValue, new ModHeader_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.Keywords = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.LocationReferenceTypes = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.Actions = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.TextureSets = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.Classes = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
            this.Factions = new MaskItem<T, Group_Mask<T>?>(initialValue, new Group_Mask<T>(initialValue));
        }

        public SkyrimMod_Mask(
            T ModHeader,
            T GameSettings,
            T Keywords,
            T LocationReferenceTypes,
            T Actions,
            T TextureSets,
            T Globals,
            T Classes,
            T Factions)
        {
            this.ModHeader = new MaskItem<T, ModHeader_Mask<T>?>(ModHeader, new ModHeader_Mask<T>(ModHeader));
            this.GameSettings = new MaskItem<T, Group_Mask<T>?>(GameSettings, new Group_Mask<T>(GameSettings));
            this.Keywords = new MaskItem<T, Group_Mask<T>?>(Keywords, new Group_Mask<T>(Keywords));
            this.LocationReferenceTypes = new MaskItem<T, Group_Mask<T>?>(LocationReferenceTypes, new Group_Mask<T>(LocationReferenceTypes));
            this.Actions = new MaskItem<T, Group_Mask<T>?>(Actions, new Group_Mask<T>(Actions));
            this.TextureSets = new MaskItem<T, Group_Mask<T>?>(TextureSets, new Group_Mask<T>(TextureSets));
            this.Globals = new MaskItem<T, Group_Mask<T>?>(Globals, new Group_Mask<T>(Globals));
            this.Classes = new MaskItem<T, Group_Mask<T>?>(Classes, new Group_Mask<T>(Classes));
            this.Factions = new MaskItem<T, Group_Mask<T>?>(Factions, new Group_Mask<T>(Factions));
        }

        #pragma warning disable CS8618
        protected SkyrimMod_Mask()
        {
        }
        #pragma warning restore CS8618

        #endregion

        #region Members
        public MaskItem<T, ModHeader_Mask<T>?>? ModHeader { get; set; }
        public MaskItem<T, Group_Mask<T>?>? GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>?>? Keywords { get; set; }
        public MaskItem<T, Group_Mask<T>?>? LocationReferenceTypes { get; set; }
        public MaskItem<T, Group_Mask<T>?>? Actions { get; set; }
        public MaskItem<T, Group_Mask<T>?>? TextureSets { get; set; }
        public MaskItem<T, Group_Mask<T>?>? Globals { get; set; }
        public MaskItem<T, Group_Mask<T>?>? Classes { get; set; }
        public MaskItem<T, Group_Mask<T>?>? Factions { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkyrimMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkyrimMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
            if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
            if (!object.Equals(this.Actions, rhs.Actions)) return false;
            if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ModHeader?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Keywords?.GetHashCode());
            ret = ret.CombineHashCode(this.LocationReferenceTypes?.GetHashCode());
            ret = ret.CombineHashCode(this.Actions?.GetHashCode());
            ret = ret.CombineHashCode(this.TextureSets?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            ret = ret.CombineHashCode(this.Classes?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (ModHeader != null)
            {
                if (!eval(this.ModHeader.Overall)) return false;
                if (this.ModHeader.Specific != null && !this.ModHeader.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (this.GameSettings.Specific != null && !this.GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Keywords != null)
            {
                if (!eval(this.Keywords.Overall)) return false;
                if (this.Keywords.Specific != null && !this.Keywords.Specific.AllEqual(eval)) return false;
            }
            if (LocationReferenceTypes != null)
            {
                if (!eval(this.LocationReferenceTypes.Overall)) return false;
                if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.AllEqual(eval)) return false;
            }
            if (Actions != null)
            {
                if (!eval(this.Actions.Overall)) return false;
                if (this.Actions.Specific != null && !this.Actions.Specific.AllEqual(eval)) return false;
            }
            if (TextureSets != null)
            {
                if (!eval(this.TextureSets.Overall)) return false;
                if (this.TextureSets.Specific != null && !this.TextureSets.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (this.Globals.Specific != null && !this.Globals.Specific.AllEqual(eval)) return false;
            }
            if (Classes != null)
            {
                if (!eval(this.Classes.Overall)) return false;
                if (this.Classes.Specific != null && !this.Classes.Specific.AllEqual(eval)) return false;
            }
            if (Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (this.Factions.Specific != null && !this.Factions.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public SkyrimMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkyrimMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkyrimMod_Mask<R> obj, Func<T, R> eval)
        {
            obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, ModHeader_Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
            obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
            obj.Keywords = this.Keywords == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
            obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
            obj.Actions = this.Actions == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
            obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
            obj.Globals = this.Globals == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
            obj.Classes = this.Classes == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
            obj.Factions = this.Factions == null ? null : new MaskItem<R, Group_Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkyrimMod_Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkyrimMod_Mask<bool>? printMask = null)
        {
            fg.AppendLine($"{nameof(SkyrimMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ModHeader?.Overall ?? true)
                {
                    ModHeader?.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings?.ToString(fg);
                }
                if (printMask?.Keywords?.Overall ?? true)
                {
                    Keywords?.ToString(fg);
                }
                if (printMask?.LocationReferenceTypes?.Overall ?? true)
                {
                    LocationReferenceTypes?.ToString(fg);
                }
                if (printMask?.Actions?.Overall ?? true)
                {
                    Actions?.ToString(fg);
                }
                if (printMask?.TextureSets?.Overall ?? true)
                {
                    TextureSets?.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals?.ToString(fg);
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    Classes?.ToString(fg);
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    Factions?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkyrimMod_ErrorMask : IErrorMask, IErrorMask<SkyrimMod_ErrorMask>
    {
        #region Members
        public Exception? Overall { get; set; }
        private List<string>? _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception?, ModHeader_ErrorMask?>? ModHeader;
        public MaskItem<Exception?, Group_ErrorMask<GameSetting_ErrorMask>?>? GameSettings;
        public MaskItem<Exception?, Group_ErrorMask<Keyword_ErrorMask>?>? Keywords;
        public MaskItem<Exception?, Group_ErrorMask<LocationReferenceType_ErrorMask>?>? LocationReferenceTypes;
        public MaskItem<Exception?, Group_ErrorMask<ActionRecord_ErrorMask>?>? Actions;
        public MaskItem<Exception?, Group_ErrorMask<TextureSet_ErrorMask>?>? TextureSets;
        public MaskItem<Exception?, Group_ErrorMask<Global_ErrorMask>?>? Globals;
        public MaskItem<Exception?, Group_ErrorMask<Class_ErrorMask>?>? Classes;
        public MaskItem<Exception?, Group_ErrorMask<Faction_ErrorMask>?>? Factions;
        #endregion

        #region IErrorMask
        public object? GetNthMask(int index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return ModHeader;
                case SkyrimMod_FieldIndex.GameSettings:
                    return GameSettings;
                case SkyrimMod_FieldIndex.Keywords:
                    return Keywords;
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return LocationReferenceTypes;
                case SkyrimMod_FieldIndex.Actions:
                    return Actions;
                case SkyrimMod_FieldIndex.TextureSets:
                    return TextureSets;
                case SkyrimMod_FieldIndex.Globals:
                    return Globals;
                case SkyrimMod_FieldIndex.Classes:
                    return Classes;
                case SkyrimMod_FieldIndex.Factions:
                    return Factions;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    this.ModHeader = new MaskItem<Exception?, ModHeader_ErrorMask?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception?, Group_ErrorMask<GameSetting_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Keywords:
                    this.Keywords = new MaskItem<Exception?, Group_ErrorMask<Keyword_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    this.LocationReferenceTypes = new MaskItem<Exception?, Group_ErrorMask<LocationReferenceType_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Actions:
                    this.Actions = new MaskItem<Exception?, Group_ErrorMask<ActionRecord_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.TextureSets:
                    this.TextureSets = new MaskItem<Exception?, Group_ErrorMask<TextureSet_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception?, Group_ErrorMask<Global_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Classes:
                    this.Classes = new MaskItem<Exception?, Group_ErrorMask<Class_ErrorMask>?>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception?, Group_ErrorMask<Faction_ErrorMask>?>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    this.ModHeader = (MaskItem<Exception?, ModHeader_ErrorMask?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception?, Group_ErrorMask<GameSetting_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.Keywords:
                    this.Keywords = (MaskItem<Exception?, Group_ErrorMask<Keyword_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    this.LocationReferenceTypes = (MaskItem<Exception?, Group_ErrorMask<LocationReferenceType_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.Actions:
                    this.Actions = (MaskItem<Exception?, Group_ErrorMask<ActionRecord_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.TextureSets:
                    this.TextureSets = (MaskItem<Exception?, Group_ErrorMask<TextureSet_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception?, Group_ErrorMask<Global_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.Classes:
                    this.Classes = (MaskItem<Exception?, Group_ErrorMask<Class_ErrorMask>?>?)obj;
                    break;
                case SkyrimMod_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception?, Group_ErrorMask<Faction_ErrorMask>?>?)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ModHeader != null) return true;
            if (GameSettings != null) return true;
            if (Keywords != null) return true;
            if (LocationReferenceTypes != null) return true;
            if (Actions != null) return true;
            if (TextureSets != null) return true;
            if (Globals != null) return true;
            if (Classes != null) return true;
            if (Factions != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkyrimMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            ModHeader?.ToString(fg);
            GameSettings?.ToString(fg);
            Keywords?.ToString(fg);
            LocationReferenceTypes?.ToString(fg);
            Actions?.ToString(fg);
            TextureSets?.ToString(fg);
            Globals?.ToString(fg);
            Classes?.ToString(fg);
            Factions?.ToString(fg);
        }
        #endregion

        #region Combine
        public SkyrimMod_ErrorMask Combine(SkyrimMod_ErrorMask? rhs)
        {
            if (rhs == null) return this;
            var ret = new SkyrimMod_ErrorMask();
            ret.ModHeader = new MaskItem<Exception?, ModHeader_ErrorMask?>(ExceptionExt.Combine(this.ModHeader?.Overall, rhs.ModHeader?.Overall), (this.ModHeader?.Specific as IErrorMask<ModHeader_ErrorMask>)?.Combine(rhs.ModHeader?.Specific));
            ret.GameSettings = new MaskItem<Exception?, Group_ErrorMask<GameSetting_ErrorMask>?>(ExceptionExt.Combine(this.GameSettings?.Overall, rhs.GameSettings?.Overall), (this.GameSettings?.Specific as IErrorMask<Group_ErrorMask<GameSetting_ErrorMask>>)?.Combine(rhs.GameSettings?.Specific));
            ret.Keywords = new MaskItem<Exception?, Group_ErrorMask<Keyword_ErrorMask>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), (this.Keywords?.Specific as IErrorMask<Group_ErrorMask<Keyword_ErrorMask>>)?.Combine(rhs.Keywords?.Specific));
            ret.LocationReferenceTypes = new MaskItem<Exception?, Group_ErrorMask<LocationReferenceType_ErrorMask>?>(ExceptionExt.Combine(this.LocationReferenceTypes?.Overall, rhs.LocationReferenceTypes?.Overall), (this.LocationReferenceTypes?.Specific as IErrorMask<Group_ErrorMask<LocationReferenceType_ErrorMask>>)?.Combine(rhs.LocationReferenceTypes?.Specific));
            ret.Actions = new MaskItem<Exception?, Group_ErrorMask<ActionRecord_ErrorMask>?>(ExceptionExt.Combine(this.Actions?.Overall, rhs.Actions?.Overall), (this.Actions?.Specific as IErrorMask<Group_ErrorMask<ActionRecord_ErrorMask>>)?.Combine(rhs.Actions?.Specific));
            ret.TextureSets = new MaskItem<Exception?, Group_ErrorMask<TextureSet_ErrorMask>?>(ExceptionExt.Combine(this.TextureSets?.Overall, rhs.TextureSets?.Overall), (this.TextureSets?.Specific as IErrorMask<Group_ErrorMask<TextureSet_ErrorMask>>)?.Combine(rhs.TextureSets?.Specific));
            ret.Globals = new MaskItem<Exception?, Group_ErrorMask<Global_ErrorMask>?>(ExceptionExt.Combine(this.Globals?.Overall, rhs.Globals?.Overall), (this.Globals?.Specific as IErrorMask<Group_ErrorMask<Global_ErrorMask>>)?.Combine(rhs.Globals?.Specific));
            ret.Classes = new MaskItem<Exception?, Group_ErrorMask<Class_ErrorMask>?>(ExceptionExt.Combine(this.Classes?.Overall, rhs.Classes?.Overall), (this.Classes?.Specific as IErrorMask<Group_ErrorMask<Class_ErrorMask>>)?.Combine(rhs.Classes?.Specific));
            ret.Factions = new MaskItem<Exception?, Group_ErrorMask<Faction_ErrorMask>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), (this.Factions?.Specific as IErrorMask<Group_ErrorMask<Faction_ErrorMask>>)?.Combine(rhs.Factions?.Specific));
            return ret;
        }
        public static SkyrimMod_ErrorMask? Combine(SkyrimMod_ErrorMask? lhs, SkyrimMod_ErrorMask? rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SkyrimMod_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            return new SkyrimMod_ErrorMask();
        }
        #endregion

    }
    public class SkyrimMod_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal? _crystal;
        public MaskItem<bool, ModHeader_TranslationMask?> ModHeader;
        public MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>?> GameSettings;
        public MaskItem<bool, Group_TranslationMask<Keyword_TranslationMask>?> Keywords;
        public MaskItem<bool, Group_TranslationMask<LocationReferenceType_TranslationMask>?> LocationReferenceTypes;
        public MaskItem<bool, Group_TranslationMask<ActionRecord_TranslationMask>?> Actions;
        public MaskItem<bool, Group_TranslationMask<TextureSet_TranslationMask>?> TextureSets;
        public MaskItem<bool, Group_TranslationMask<Global_TranslationMask>?> Globals;
        public MaskItem<bool, Group_TranslationMask<Class_TranslationMask>?> Classes;
        public MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>?> Factions;
        #endregion

        #region Ctors
        public SkyrimMod_TranslationMask(bool defaultOn)
        {
            this.ModHeader = new MaskItem<bool, ModHeader_TranslationMask?>(defaultOn, null);
            this.GameSettings = new MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>?>(defaultOn, null);
            this.Keywords = new MaskItem<bool, Group_TranslationMask<Keyword_TranslationMask>?>(defaultOn, null);
            this.LocationReferenceTypes = new MaskItem<bool, Group_TranslationMask<LocationReferenceType_TranslationMask>?>(defaultOn, null);
            this.Actions = new MaskItem<bool, Group_TranslationMask<ActionRecord_TranslationMask>?>(defaultOn, null);
            this.TextureSets = new MaskItem<bool, Group_TranslationMask<TextureSet_TranslationMask>?>(defaultOn, null);
            this.Globals = new MaskItem<bool, Group_TranslationMask<Global_TranslationMask>?>(defaultOn, null);
            this.Classes = new MaskItem<bool, Group_TranslationMask<Class_TranslationMask>?>(defaultOn, null);
            this.Factions = new MaskItem<bool, Group_TranslationMask<Faction_TranslationMask>?>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal(ret.ToArray());
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
        {
            ret.Add((ModHeader?.Overall ?? true, ModHeader?.Specific?.GetCrystal()));
            ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
            ret.Add((Keywords?.Overall ?? true, Keywords?.Specific?.GetCrystal()));
            ret.Add((LocationReferenceTypes?.Overall ?? true, LocationReferenceTypes?.Specific?.GetCrystal()));
            ret.Add((Actions?.Overall ?? true, Actions?.Specific?.GetCrystal()));
            ret.Add((TextureSets?.Overall ?? true, TextureSets?.Specific?.GetCrystal()));
            ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
            ret.Add((Classes?.Overall ?? true, Classes?.Specific?.GetCrystal()));
            ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#region Mutagen
namespace Mutagen.Bethesda.Skyrim
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool TextureSets;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
        }
    }

    public interface ISkyrimModDisposableGetter : ISkyrimModGetter, IModDisposeGetter
    {
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryWriteTranslation
    {
        public readonly static SkyrimModBinaryWriteTranslation Instance = new SkyrimModBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter)
        {
            MasterReferences masterReferences = new MasterReferences(modKey, item.ModHeader.MasterReferences);
            {
                var loquiItem = item.ModHeader;
                ((ModHeaderBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write(
                    item: loquiItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (importMask?.GameSettings ?? true)
            {
                if (item.GameSettings.RecordCache.Count > 0)
                {
                    var loquiItem = item.GameSettings;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                if (item.Keywords.RecordCache.Count > 0)
                {
                    var loquiItem = item.Keywords;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                if (item.LocationReferenceTypes.RecordCache.Count > 0)
                {
                    var loquiItem = item.LocationReferenceTypes;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Actions ?? true)
            {
                if (item.Actions.RecordCache.Count > 0)
                {
                    var loquiItem = item.Actions;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                if (item.TextureSets.RecordCache.Count > 0)
                {
                    var loquiItem = item.TextureSets;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Globals ?? true)
            {
                if (item.Globals.RecordCache.Count > 0)
                {
                    var loquiItem = item.Globals;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Classes ?? true)
            {
                if (item.Classes.RecordCache.Count > 0)
                {
                    var loquiItem = item.Classes;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Factions ?? true)
            {
                if (item.Factions.RecordCache.Count > 0)
                {
                    var loquiItem = item.Factions;
                    ((GroupBinaryWriteTranslation)((IBinaryItem)loquiItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: loquiItem,
                        writer: writer,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkyrimModGetter item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter,
            GroupMask? importMask = null)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter,
            GroupMask? importMask = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkyrimModBinaryCreateTranslation
    {
        public readonly static SkyrimModBinaryCreateTranslation Instance = new SkyrimModBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                    SkyrimModBinaryWriteTranslation.Instance.Write(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        recordTypeConverter: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            using (var writer = new MutagenWriter(stream, meta: item.GameMode, dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    recordTypeConverter: null);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryOverlay : ISkyrimModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISkyrimModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        public GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, ModKey? modKey) => this.WriteToBinary(path, modKey, importMask: null);
        Task IModGetter.WriteToBinaryAsync(string path, ModKey? modKey) => this.WriteToBinaryAsync(path, modKey);
        void IModGetter.WriteToBinaryParallel(string path, ModKey? modKey) => this.WriteToBinaryParallel(path, modKey);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public IEnumerable<ILinkGetter> Links => SkyrimModCommon.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _data;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _data.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private bool _ModHeader_IsSet => _ModHeaderLocation.HasValue;
        private IModHeaderGetter? _ModHeader => _ModHeader_IsSet ? ModHeaderBinaryOverlay.ModHeaderFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max)), _package) : default;
        public IModHeaderGetter ModHeader => _ModHeader ?? new ModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private bool _GameSettings_IsSet => _GameSettingsLocation.HasValue;
        private IGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettings_IsSet ? GroupBinaryOverlay<IGameSettingGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _GameSettingsLocation!.Value.Min, _GameSettingsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Keywords
        private RangeInt64? _KeywordsLocation;
        private bool _Keywords_IsSet => _KeywordsLocation.HasValue;
        private IGroupGetter<IKeywordGetter>? _Keywords => _Keywords_IsSet ? GroupBinaryOverlay<IKeywordGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _KeywordsLocation!.Value.Min, _KeywordsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new Group<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private RangeInt64? _LocationReferenceTypesLocation;
        private bool _LocationReferenceTypes_IsSet => _LocationReferenceTypesLocation.HasValue;
        private IGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypes_IsSet ? GroupBinaryOverlay<ILocationReferenceTypeGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LocationReferenceTypesLocation!.Value.Min, _LocationReferenceTypesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new Group<LocationReferenceType>(this);
        #endregion
        #region Actions
        private RangeInt64? _ActionsLocation;
        private bool _Actions_IsSet => _ActionsLocation.HasValue;
        private IGroupGetter<IActionRecordGetter>? _Actions => _Actions_IsSet ? GroupBinaryOverlay<IActionRecordGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ActionsLocation!.Value.Min, _ActionsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IActionRecordGetter> Actions => _Actions ?? new Group<ActionRecord>(this);
        #endregion
        #region TextureSets
        private RangeInt64? _TextureSetsLocation;
        private bool _TextureSets_IsSet => _TextureSetsLocation.HasValue;
        private IGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSets_IsSet ? GroupBinaryOverlay<ITextureSetGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _TextureSetsLocation!.Value.Min, _TextureSetsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Group<TextureSet>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private bool _Globals_IsSet => _GlobalsLocation.HasValue;
        private IGroupGetter<IGlobalGetter>? _Globals => _Globals_IsSet ? GroupBinaryOverlay<IGlobalGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _GlobalsLocation!.Value.Min, _GlobalsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private bool _Classes_IsSet => _ClassesLocation.HasValue;
        private IGroupGetter<IClassGetter>? _Classes => _Classes_IsSet ? GroupBinaryOverlay<IClassGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ClassesLocation!.Value.Min, _ClassesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private bool _Factions_IsSet => _FactionsLocation.HasValue;
        private IGroupGetter<IFactionGetter>? _Factions => _Factions_IsSet ? GroupBinaryOverlay<IFactionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _FactionsLocation!.Value.Min, _FactionsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            long finalPos,
            int offset);

        protected SkyrimModBinaryOverlay(
            IBinaryReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._data = stream;
            this._package = new BinaryOverlayFactoryPackage(modKey, GameMode.Skyrim);
            this._shouldDispose = shouldDispose;
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey)
        {
            return SkyrimModFactory(
                stream: new BinaryMemoryReadStream(data),
                modKey: modKey,
                shouldDispose: false);
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            IBinaryReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new SkyrimModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            BinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MasterReferences.Masters.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.GameSettings);
                }
                case 0x4457594B: // KYWD
                {
                    _KeywordsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keywords);
                }
                case 0x5452434C: // LCRT
                {
                    _LocationReferenceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                }
                case 0x54434141: // AACT
                {
                    _ActionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Actions);
                }
                case 0x54535854: // TXST
                {
                    _TextureSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TextureSets);
                }
                case 0x424F4C47: // GLOB
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Factions);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

}
#endregion

#endregion

