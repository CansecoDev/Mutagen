/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    /// <summary>
    /// Implemented by: [UnknownConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetActorValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuModeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetScriptVariableConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, GetQuestVariableConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetCurrentAIPackageConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, HasBeenEatenConditionData, GetStaminaPercentageConditionData, GetPCIsClassConditionData, GetPCIsRaceConditionData, GetPCIsSexConditionData, GetPCInFactionConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetWalkSpeedConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocAsRefConditionData, HasSameEditorLocAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, GetAnimActionConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationClearedConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, GetBaseActorValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetInCurrentLocConditionData, GetInCurrentLocAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, HasShoutConditionData, GetHasNoteConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsLimbGoneConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetVATSValueConditionData, IsKillerConditionData, IsKillerObjectConditionData, GetFactionCombatReactionConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetIsObjectTypeConditionData, GetDialogueEmotionConditionData, GetDialogueEmotionValueConditionData, GetIsCreatureTypeConditionData, GetInCurrentLocFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, IsCarryableConditionData, GetConcussedConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentActorValueConditionData, GetKillingBlowLimbConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetLastHitCriticalConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetLockIsBrokenConditionData, IsPS3ConditionData, IsWin32ConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetQuestCompletedConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetSpellUsageNumConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, GetEventDataConditionData, IsCloserToAThanBConditionData, GetEquippedShoutConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasClearedConditionData, GetLocAliasRefTypeDeadCountConditionData, GetLocAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocAsRefConditionData, IsInSameCurrentLocAsRefAliasConditionData, LocAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsFurnitureAnimTypeConditionData, IsFurnitureEntryTypeConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetVMScriptVariableConditionData, IsEnteringInteractionQuickConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsExitingInstantConditionData, IsInFriendStateWithPlayerConditionData, GetWithinDistanceConditionData, GetActorValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, IsInFurnitureStateConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, EPTemperingItemIsEnchantedConditionData, EPTemperingItemHasKeywordConditionData, GetReplacedItemTypeConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetCurrentShoutVariationConditionData, ShouldAttackKillConditionData, GetActivatorHeightConditionData, EPMagic_IsAdvanceSkillConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, EPModSkillUsage_AdvanceObjectHasKeywordConditionData, EPModSkillUsage_IsAdvanceActionConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, IsExitingInteractionQuickConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockedStateEnumConditionData, DoesNotExistConditionData, IsOnFlyingMountConditionData, CanFlyHereConditionData, IsFlyingMountPatrolQueudConditionData, IsFlyingMountFastTravellingConditionData, IsOverEncumberedConditionData, GetActorWarmthConditionData, GetSKSEVersionConditionData, GetSKSEVersionMinorConditionData, GetSKSEVersionBetaConditionData, GetSKSEReleaseConditionData, ClearInvalidRegistrationsConditionData]
    /// </summary>
    public abstract partial class FunctionConditionData :
        ConditionData,
        IEquatable<IFunctionConditionDataGetter>,
        IFunctionConditionData,
        ILoquiObjectSetter<FunctionConditionData>
    {
        #region Ctor
        public FunctionConditionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Function
        public Condition.Function Function { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FunctionConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFunctionConditionDataGetter rhs) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFunctionConditionDataGetter? obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ConditionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Function = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem UseAliases,
                TItem Function,
                TItem Unknown2)
            : base(
                RunOnType: RunOnType,
                Reference: Reference,
                Unknown3: Unknown3,
                UseAliases: UseAliases)
            {
                this.Function = Function;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Function;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Function, rhs.Function)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Function);
                hash.Add(this.Unknown2);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Function)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Function)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FunctionConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Function = eval(this.Function);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FunctionConditionData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FunctionConditionData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FunctionConditionData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Function ?? true)
                    {
                        sb.AppendItem(Function, "Function");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Function;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        return Function;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = ex;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FunctionConditionData_FieldIndex enu = (FunctionConditionData_FieldIndex)index;
                switch (enu)
                {
                    case FunctionConditionData_FieldIndex.Function:
                        this.Function = (Exception?)obj;
                        break;
                    case FunctionConditionData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Function != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Function, "Function");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Function = this.Function.Combine(rhs.Function);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Function;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Function = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Function, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FunctionConditionDataCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FunctionConditionDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FunctionConditionData GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [UnknownConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetActorValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuModeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetScriptVariableConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, GetQuestVariableConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetCurrentAIPackageConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, HasBeenEatenConditionData, GetStaminaPercentageConditionData, GetPCIsClassConditionData, GetPCIsRaceConditionData, GetPCIsSexConditionData, GetPCInFactionConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetWalkSpeedConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocAsRefConditionData, HasSameEditorLocAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, GetAnimActionConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationClearedConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, GetBaseActorValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetInCurrentLocConditionData, GetInCurrentLocAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, HasShoutConditionData, GetHasNoteConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsLimbGoneConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetVATSValueConditionData, IsKillerConditionData, IsKillerObjectConditionData, GetFactionCombatReactionConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetIsObjectTypeConditionData, GetDialogueEmotionConditionData, GetDialogueEmotionValueConditionData, GetIsCreatureTypeConditionData, GetInCurrentLocFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, IsCarryableConditionData, GetConcussedConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentActorValueConditionData, GetKillingBlowLimbConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetLastHitCriticalConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetLockIsBrokenConditionData, IsPS3ConditionData, IsWin32ConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetQuestCompletedConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetSpellUsageNumConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, GetEventDataConditionData, IsCloserToAThanBConditionData, GetEquippedShoutConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasClearedConditionData, GetLocAliasRefTypeDeadCountConditionData, GetLocAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocAsRefConditionData, IsInSameCurrentLocAsRefAliasConditionData, LocAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsFurnitureAnimTypeConditionData, IsFurnitureEntryTypeConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetVMScriptVariableConditionData, IsEnteringInteractionQuickConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsExitingInstantConditionData, IsInFriendStateWithPlayerConditionData, GetWithinDistanceConditionData, GetActorValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, IsInFurnitureStateConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, EPTemperingItemIsEnchantedConditionData, EPTemperingItemHasKeywordConditionData, GetReplacedItemTypeConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetCurrentShoutVariationConditionData, ShouldAttackKillConditionData, GetActivatorHeightConditionData, EPMagic_IsAdvanceSkillConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, EPModSkillUsage_AdvanceObjectHasKeywordConditionData, EPModSkillUsage_IsAdvanceActionConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, IsExitingInteractionQuickConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockedStateEnumConditionData, DoesNotExistConditionData, IsOnFlyingMountConditionData, CanFlyHereConditionData, IsFlyingMountPatrolQueudConditionData, IsFlyingMountFastTravellingConditionData, IsOverEncumberedConditionData, GetActorWarmthConditionData, GetSKSEVersionConditionData, GetSKSEVersionMinorConditionData, GetSKSEVersionBetaConditionData, GetSKSEReleaseConditionData, ClearInvalidRegistrationsConditionData]
    /// </summary>
    public partial interface IFunctionConditionData :
        IConditionData,
        IFormLinkContainer,
        IFunctionConditionDataGetter,
        ILoquiObjectSetter<IFunctionConditionData>
    {
        new Condition.Function Function { get; set; }
        new UInt16 Unknown2 { get; set; }
    }

    /// <summary>
    /// Implemented by: [UnknownConditionData, GetWantBlockingConditionData, GetDistanceConditionData, GetLockedConditionData, GetPosConditionData, GetAngleConditionData, GetStartingPosConditionData, GetStartingAngleConditionData, GetSecondsPassedConditionData, GetActorValueConditionData, GetCurrentTimeConditionData, GetScaleConditionData, IsMovingConditionData, IsTurningConditionData, GetLineOfSightConditionData, GetInSameCellConditionData, GetDisabledConditionData, MenuModeConditionData, GetDiseaseConditionData, GetClothingValueConditionData, SameFactionConditionData, SameRaceConditionData, SameSexConditionData, GetDetectedConditionData, GetDeadConditionData, GetItemCountConditionData, GetGoldConditionData, GetSleepingConditionData, GetTalkedToPCConditionData, GetScriptVariableConditionData, GetQuestRunningConditionData, GetStageConditionData, GetStageDoneConditionData, GetFactionRankDifferenceConditionData, GetAlarmedConditionData, IsRainingConditionData, GetAttackedConditionData, GetIsCreatureConditionData, GetLockLevelConditionData, GetShouldAttackConditionData, GetInCellConditionData, GetIsClassConditionData, GetIsRaceConditionData, GetIsSexConditionData, GetInFactionConditionData, GetIsIDConditionData, GetFactionRankConditionData, GetGlobalValueConditionData, IsSnowingConditionData, GetRandomPercentConditionData, GetQuestVariableConditionData, GetLevelConditionData, IsRotatingConditionData, GetDeadCountConditionData, GetIsAlertedConditionData, GetPlayerControlsDisabledConditionData, GetHeadingAngleConditionData, IsWeaponMagicOutConditionData, IsTorchOutConditionData, IsShieldOutConditionData, IsFacingUpConditionData, GetKnockedStateConditionData, GetWeaponAnimTypeConditionData, IsWeaponSkillTypeConditionData, GetCurrentAIPackageConditionData, IsWaitingConditionData, IsIdlePlayingConditionData, IsIntimidatedbyPlayerConditionData, IsPlayerInRegionConditionData, GetActorAggroRadiusViolatedConditionData, GetCrimeConditionData, IsGreetingPlayerConditionData, IsGuardConditionData, HasBeenEatenConditionData, GetStaminaPercentageConditionData, GetPCIsClassConditionData, GetPCIsRaceConditionData, GetPCIsSexConditionData, GetPCInFactionConditionData, SameFactionAsPCConditionData, SameRaceAsPCConditionData, SameSexAsPCConditionData, GetIsReferenceConditionData, IsTalkingConditionData, GetWalkSpeedConditionData, GetCurrentAIProcedureConditionData, GetTrespassWarningLevelConditionData, IsTrespassingConditionData, IsInMyOwnedCellConditionData, GetWindSpeedConditionData, GetCurrentWeatherPercentConditionData, GetIsCurrentWeatherConditionData, IsContinuingPackagePCNearConditionData, GetIsCrimeFactionConditionData, CanHaveFlamesConditionData, HasFlamesConditionData, GetOpenStateConditionData, GetSittingConditionData, GetIsCurrentPackageConditionData, IsCurrentFurnitureRefConditionData, IsCurrentFurnitureObjConditionData, GetDayOfWeekConditionData, GetTalkedToPCParamConditionData, IsPCSleepingConditionData, IsPCAMurdererConditionData, HasSameEditorLocAsRefConditionData, HasSameEditorLocAsRefAliasConditionData, GetEquippedConditionData, IsSwimmingConditionData, GetAmountSoldStolenConditionData, GetIgnoreCrimeConditionData, GetPCExpelledConditionData, GetPCFactionMurderConditionData, GetPCEnemyofFactionConditionData, GetPCFactionAttackConditionData, GetDestroyedConditionData, HasMagicEffectConditionData, GetDefaultOpenConditionData, GetAnimActionConditionData, IsSpellTargetConditionData, GetVATSModeConditionData, GetPersuasionNumberConditionData, GetVampireFeedConditionData, GetCannibalConditionData, GetIsClassDefaultConditionData, GetClassDefaultMatchConditionData, GetInCellParamConditionData, GetVatsTargetHeightConditionData, GetIsGhostConditionData, GetUnconsciousConditionData, GetRestrainedConditionData, GetIsUsedItemConditionData, GetIsUsedItemTypeConditionData, IsScenePlayingConditionData, IsInDialogueWithPlayerConditionData, GetLocationClearedConditionData, GetIsPlayableRaceConditionData, GetOffersServicesNowConditionData, HasAssociationTypeConditionData, HasFamilyRelationshipConditionData, HasParentRelationshipConditionData, IsWarningAboutConditionData, IsWeaponOutConditionData, HasSpellConditionData, IsTimePassingConditionData, IsPleasantConditionData, IsCloudyConditionData, IsSmallBumpConditionData, GetBaseActorValueConditionData, IsOwnerConditionData, IsCellOwnerConditionData, IsHorseStolenConditionData, IsLeftUpConditionData, IsSneakingConditionData, IsRunningConditionData, GetFriendHitConditionData, IsInCombatConditionData, IsInInteriorConditionData, IsWaterObjectConditionData, GetPlayerActionConditionData, IsActorUsingATorchConditionData, IsXBoxConditionData, GetInWorldspaceConditionData, GetPCMiscStatConditionData, GetPairedAnimationConditionData, IsActorAVictimConditionData, GetTotalPersuasionNumberConditionData, GetIdleDoneOnceConditionData, GetNoRumorsConditionData, GetCombatStateConditionData, GetWithinPackageLocationConditionData, IsRidingMountConditionData, IsFleeingConditionData, IsInDangerousWaterConditionData, GetIgnoreFriendlyHitsConditionData, IsPlayersLastRiddenMountConditionData, IsActorConditionData, IsEssentialConditionData, IsPlayerMovingIntoNewSpaceConditionData, GetInCurrentLocConditionData, GetInCurrentLocAliasConditionData, GetTimeDeadConditionData, HasLinkedRefConditionData, IsChildConditionData, GetStolenItemValueNoCrimeConditionData, GetLastPlayerActionConditionData, IsPlayerActionActiveConditionData, IsTalkingActivatorActorConditionData, IsInListConditionData, GetStolenItemValueConditionData, GetCrimeGoldViolentConditionData, GetCrimeGoldNonviolentConditionData, HasShoutConditionData, GetHasNoteConditionData, GetHitLocationConditionData, IsPC1stPersonConditionData, GetCauseofDeathConditionData, IsLimbGoneConditionData, IsWeaponInListConditionData, IsBribedbyPlayerConditionData, GetRelationshipRankConditionData, GetVATSValueConditionData, IsKillerConditionData, IsKillerObjectConditionData, GetFactionCombatReactionConditionData, ExistsConditionData, GetGroupMemberCountConditionData, GetGroupTargetCountConditionData, GetIsVoiceTypeConditionData, GetPlantedExplosiveConditionData, IsScenePackageRunningConditionData, GetHealthPercentageConditionData, GetIsObjectTypeConditionData, GetDialogueEmotionConditionData, GetDialogueEmotionValueConditionData, GetIsCreatureTypeConditionData, GetInCurrentLocFormListConditionData, GetInZoneConditionData, GetVelocityConditionData, GetGraphVariableFloatConditionData, HasPerkConditionData, GetFactionRelationConditionData, IsLastIdlePlayedConditionData, GetPlayerTeammateConditionData, GetPlayerTeammateCountConditionData, GetActorCrimePlayerEnemyConditionData, GetCrimeGoldConditionData, IsPlayerGrabbedRefConditionData, GetKeywordItemCountConditionData, GetDestructionStageConditionData, GetIsAlignmentConditionData, IsProtectedConditionData, GetThreatRatioConditionData, GetIsUsedItemEquipTypeConditionData, IsCarryableConditionData, GetConcussedConditionData, GetMapMarkerVisibleConditionData, PlayerKnowsConditionData, GetPermanentActorValueConditionData, GetKillingBlowLimbConditionData, CanPayCrimeGoldConditionData, GetDaysInJailConditionData, EPAlchemyGetMakingPoisonConditionData, EPAlchemyEffectHasKeywordConditionData, GetAllowWorldInteractionsConditionData, GetLastHitCriticalConditionData, IsCombatTargetConditionData, GetVATSRightAreaFreeConditionData, GetVATSLeftAreaFreeConditionData, GetVATSBackAreaFreeConditionData, GetVATSFrontAreaFreeConditionData, GetLockIsBrokenConditionData, IsPS3ConditionData, IsWin32ConditionData, GetVATSRightTargetVisibleConditionData, GetVATSLeftTargetVisibleConditionData, GetVATSBackTargetVisibleConditionData, GetVATSFrontTargetVisibleConditionData, IsInCriticalStageConditionData, GetXPForNextLevelConditionData, GetInfamyConditionData, GetInfamyViolentConditionData, GetInfamyNonViolentConditionData, GetQuestCompletedConditionData, IsGoreDisabledConditionData, IsSceneActionCompleteConditionData, GetSpellUsageNumConditionData, GetActorsInHighConditionData, HasLoaded3DConditionData, HasKeywordConditionData, HasRefTypeConditionData, LocationHasKeywordConditionData, LocationHasRefTypeConditionData, GetIsEditorLocationConditionData, GetIsAliasRefConditionData, GetIsEditorLocAliasConditionData, IsSprintingConditionData, IsBlockingConditionData, HasEquippedSpellConditionData, GetCurrentCastingTypeConditionData, GetCurrentDeliveryTypeConditionData, GetAttackStateConditionData, GetEventDataConditionData, IsCloserToAThanBConditionData, GetEquippedShoutConditionData, IsBleedingOutConditionData, GetRelativeAngleConditionData, GetMovementDirectionConditionData, IsInSceneConditionData, GetRefTypeDeadCountConditionData, GetRefTypeAliveCountConditionData, GetIsFlyingConditionData, IsCurrentSpellConditionData, SpellHasKeywordConditionData, GetEquippedItemTypeConditionData, GetLocationAliasClearedConditionData, GetLocAliasRefTypeDeadCountConditionData, GetLocAliasRefTypeAliveCountConditionData, IsWardStateConditionData, IsInSameCurrentLocAsRefConditionData, IsInSameCurrentLocAsRefAliasConditionData, LocAliasIsLocationConditionData, GetKeywordDataForLocationConditionData, GetKeywordDataForAliasConditionData, LocAliasHasKeywordConditionData, IsNullPackageDataConditionData, GetNumericPackageDataConditionData, IsFurnitureAnimTypeConditionData, IsFurnitureEntryTypeConditionData, GetHighestRelationshipRankConditionData, GetLowestRelationshipRankConditionData, HasAssociationTypeAnyConditionData, HasFamilyRelationshipAnyConditionData, GetPathingTargetOffsetConditionData, GetPathingTargetAngleOffsetConditionData, GetPathingTargetSpeedConditionData, GetPathingTargetSpeedAngleConditionData, GetMovementSpeedConditionData, GetInContainerConditionData, IsLocationLoadedConditionData, IsLocAliasLoadedConditionData, IsDualCastingConditionData, GetVMQuestVariableConditionData, GetVMScriptVariableConditionData, IsEnteringInteractionQuickConditionData, IsCastingConditionData, GetFlyingStateConditionData, IsInFavorStateConditionData, HasTwoHandedWeaponEquippedConditionData, IsExitingInstantConditionData, IsInFriendStateWithPlayerConditionData, GetWithinDistanceConditionData, GetActorValuePercentConditionData, IsUniqueConditionData, GetLastBumpDirectionConditionData, IsInFurnitureStateConditionData, GetIsInjuredConditionData, GetIsCrashLandRequestConditionData, GetIsHastyLandRequestConditionData, IsLinkedToConditionData, GetKeywordDataForCurrentLocationConditionData, GetInSharedCrimeFactionConditionData, GetBribeSuccessConditionData, GetIntimidateSuccessConditionData, GetArrestedStateConditionData, GetArrestingActorConditionData, EPTemperingItemIsEnchantedConditionData, EPTemperingItemHasKeywordConditionData, GetReplacedItemTypeConditionData, IsAttackingConditionData, IsPowerAttackingConditionData, IsLastHostileActorConditionData, GetGraphVariableIntConditionData, GetCurrentShoutVariationConditionData, ShouldAttackKillConditionData, GetActivatorHeightConditionData, EPMagic_IsAdvanceSkillConditionData, WornHasKeywordConditionData, GetPathingCurrentSpeedConditionData, GetPathingCurrentSpeedAngleConditionData, EPModSkillUsage_AdvanceObjectHasKeywordConditionData, EPModSkillUsage_IsAdvanceActionConditionData, EPMagic_SpellHasKeywordConditionData, GetNoBleedoutRecoveryConditionData, EPMagic_SpellHasSkillConditionData, IsAttackTypeConditionData, IsAllowedToFlyConditionData, HasMagicEffectKeywordConditionData, IsCommandedActorConditionData, IsStaggeredConditionData, IsRecoilingConditionData, IsExitingInteractionQuickConditionData, IsPathingConditionData, GetShouldHelpConditionData, HasBoundWeaponEquippedConditionData, GetCombatTargetHasKeywordConditionData, GetCombatGroupMemberCountConditionData, IsIgnoringCombatConditionData, GetLightLevelConditionData, SpellHasCastingPerkConditionData, IsBeingRiddenConditionData, IsUndeadConditionData, GetRealHoursPassedConditionData, IsUnlockedDoorConditionData, IsHostileToActorConditionData, GetTargetHeightConditionData, IsPoisonConditionData, WornApparelHasKeywordCountConditionData, GetItemHealthPercentConditionData, EffectWasDualCastConditionData, GetKnockedStateEnumConditionData, DoesNotExistConditionData, IsOnFlyingMountConditionData, CanFlyHereConditionData, IsFlyingMountPatrolQueudConditionData, IsFlyingMountFastTravellingConditionData, IsOverEncumberedConditionData, GetActorWarmthConditionData, GetSKSEVersionConditionData, GetSKSEVersionMinorConditionData, GetSKSEVersionBetaConditionData, GetSKSEReleaseConditionData, ClearInvalidRegistrationsConditionData]
    /// </summary>
    public partial interface IFunctionConditionDataGetter :
        IConditionDataGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFunctionConditionDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => FunctionConditionData_Registration.Instance;
        Condition.Function Function { get; }
        UInt16 Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FunctionConditionDataMixIn
    {
        public static void Clear(this IFunctionConditionData item)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FunctionConditionData.Mask<bool> GetEqualsMask(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFunctionConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData.TranslationMask? equalsMask = null)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFunctionConditionData lhs,
            IFunctionConditionDataGetter rhs,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFunctionConditionData lhs,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FunctionConditionData DeepCopy(
            this IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFunctionConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FunctionConditionDataSetterCommon)((IFunctionConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum FunctionConditionData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        UseAliases = 3,
        Function = 4,
        Unknown2 = 5,
    }
    #endregion

    #region Registration
    internal partial class FunctionConditionData_Registration : ILoquiRegistration
    {
        public static readonly FunctionConditionData_Registration Instance = new FunctionConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 39,
            version: 0);

        public const string GUID = "c7686727-e470-4c34-80ce-423cf65c7b92";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(FunctionConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FunctionConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(FunctionConditionData);

        public static readonly Type GetterType = typeof(IFunctionConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFunctionConditionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FunctionConditionData";

        public const string Name = "FunctionConditionData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(FunctionConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FunctionConditionDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly FunctionConditionDataSetterCommon Instance = new FunctionConditionDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IFunctionConditionData item)
        {
            ClearPartial();
            item.Function = default;
            item.Unknown2 = default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IFunctionConditionData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFunctionConditionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFunctionConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FunctionConditionDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FunctionConditionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FunctionConditionDataCommon : ConditionDataCommon
    {
        public new static readonly FunctionConditionDataCommon Instance = new FunctionConditionDataCommon();

        public FunctionConditionData.Mask<bool> GetEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FunctionConditionData.Mask<bool>(false);
            ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFunctionConditionDataGetter item,
            IFunctionConditionDataGetter rhs,
            FunctionConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Function = item.Function == rhs.Function;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFunctionConditionDataGetter item,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFunctionConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FunctionConditionData =>");
            }
            else
            {
                sb.AppendLine($"{name} (FunctionConditionData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFunctionConditionDataGetter item,
            StructuredStringBuilder sb,
            FunctionConditionData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Function ?? true)
            {
                sb.AppendItem(item.Function, "Function");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        public static FunctionConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                case ConditionData_FieldIndex.RunOnType:
                    return (FunctionConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Reference:
                    return (FunctionConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Unknown3:
                    return (FunctionConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.UseAliases:
                    return (FunctionConditionData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFunctionConditionDataGetter? lhs,
            IFunctionConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IConditionDataGetter)lhs, (IConditionDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                if (lhs.Function != rhs.Function) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFunctionConditionDataGetter?)lhs,
                rhs: rhs as IFunctionConditionDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFunctionConditionDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Function);
            hash.Add(item.Unknown2);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IFunctionConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FunctionConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFunctionConditionDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FunctionConditionDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly FunctionConditionDataSetterTranslationCommon Instance = new FunctionConditionDataSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IFunctionConditionData item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IConditionData)item,
                (IConditionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Function) ?? true))
            {
                item.Function = rhs.Function;
            }
            if ((copyMask?.GetShouldTranslate((int)FunctionConditionData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFunctionConditionData)item,
                rhs: (IFunctionConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            out FunctionConditionData.ErrorMask errorMask,
            FunctionConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FunctionConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FunctionConditionData DeepCopy(
            IFunctionConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FunctionConditionData ret = (FunctionConditionData)((FunctionConditionDataCommon)((IFunctionConditionDataGetter)item).CommonInstance()!).GetNew();
            ((FunctionConditionDataSetterTranslationCommon)((IFunctionConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FunctionConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FunctionConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class FunctionConditionDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FunctionConditionDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IFunctionConditionDataGetter item,
            MutagenWriter writer)
        {
            ConditionDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            EnumBinaryTranslation<Condition.Function, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Function,
                length: 2);
            writer.Write(item.Unknown2);
        }

        public virtual void Write(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFunctionConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FunctionConditionDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new static readonly FunctionConditionDataBinaryCreateTranslation Instance = new FunctionConditionDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFunctionConditionData item,
            MutagenFrame frame)
        {
            ConditionDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Function = EnumBinaryTranslation<Condition.Function, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 2);
            item.Unknown2 = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FunctionConditionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal abstract partial class FunctionConditionDataBinaryOverlay :
        ConditionDataBinaryOverlay,
        IFunctionConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FunctionConditionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FunctionConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FunctionConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FunctionConditionDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FunctionConditionDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FunctionConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FunctionConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Condition.Function Function => (Condition.Function)BinaryPrimitives.ReadUInt16LittleEndian(_structData.Span.Slice(0x0, 0x2));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x2, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FunctionConditionDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FunctionConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFunctionConditionDataGetter rhs) return false;
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFunctionConditionDataGetter? obj)
        {
            return ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FunctionConditionDataCommon)((IFunctionConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

