/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class HasLoaded3DConditionData :
        FunctionConditionData,
        IEquatable<IHasLoaded3DConditionDataGetter>,
        IHasLoaded3DConditionData,
        ILoquiObjectSetter<HasLoaded3DConditionData>
    {
        #region Ctor
        public HasLoaded3DConditionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FirstParameter
        public Int32 FirstParameter { get; set; } = default;
        #endregion
        #region SecondParameter
        public Int32 SecondParameter { get; set; } = default;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HasLoaded3DConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHasLoaded3DConditionDataGetter rhs) return false;
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHasLoaded3DConditionDataGetter? obj)
        {
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            FunctionConditionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FirstParameter = initialValue;
                this.SecondParameter = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem Function,
                TItem Unknown2,
                TItem ParameterOneString,
                TItem ParameterTwoString,
                TItem FirstParameter,
                TItem SecondParameter)
            : base(
                RunOnType: RunOnType,
                Reference: Reference,
                Unknown3: Unknown3,
                Function: Function,
                Unknown2: Unknown2,
                ParameterOneString: ParameterOneString,
                ParameterTwoString: ParameterTwoString)
            {
                this.FirstParameter = FirstParameter;
                this.SecondParameter = SecondParameter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FirstParameter;
            public TItem SecondParameter;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FirstParameter, rhs.FirstParameter)) return false;
                if (!object.Equals(this.SecondParameter, rhs.SecondParameter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FirstParameter);
                hash.Add(this.SecondParameter);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FirstParameter)) return false;
                if (!eval(this.SecondParameter)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FirstParameter)) return true;
                if (eval(this.SecondParameter)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HasLoaded3DConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FirstParameter = eval(this.FirstParameter);
                obj.SecondParameter = eval(this.SecondParameter);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HasLoaded3DConditionData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HasLoaded3DConditionData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HasLoaded3DConditionData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FirstParameter ?? true)
                    {
                        sb.AppendItem(FirstParameter, "FirstParameter");
                    }
                    if (printMask?.SecondParameter ?? true)
                    {
                        sb.AppendItem(SecondParameter, "SecondParameter");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            FunctionConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FirstParameter;
            public Exception? SecondParameter;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                HasLoaded3DConditionData_FieldIndex enu = (HasLoaded3DConditionData_FieldIndex)index;
                switch (enu)
                {
                    case HasLoaded3DConditionData_FieldIndex.FirstParameter:
                        return FirstParameter;
                    case HasLoaded3DConditionData_FieldIndex.SecondParameter:
                        return SecondParameter;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                HasLoaded3DConditionData_FieldIndex enu = (HasLoaded3DConditionData_FieldIndex)index;
                switch (enu)
                {
                    case HasLoaded3DConditionData_FieldIndex.FirstParameter:
                        this.FirstParameter = ex;
                        break;
                    case HasLoaded3DConditionData_FieldIndex.SecondParameter:
                        this.SecondParameter = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                HasLoaded3DConditionData_FieldIndex enu = (HasLoaded3DConditionData_FieldIndex)index;
                switch (enu)
                {
                    case HasLoaded3DConditionData_FieldIndex.FirstParameter:
                        this.FirstParameter = (Exception?)obj;
                        break;
                    case HasLoaded3DConditionData_FieldIndex.SecondParameter:
                        this.SecondParameter = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FirstParameter != null) return true;
                if (SecondParameter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FirstParameter, "FirstParameter");
                }
                {
                    sb.AppendItem(SecondParameter, "SecondParameter");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FirstParameter = this.FirstParameter.Combine(rhs.FirstParameter);
                ret.SecondParameter = this.SecondParameter.Combine(rhs.SecondParameter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            FunctionConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FirstParameter;
            public bool SecondParameter;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FirstParameter = defaultOn;
                this.SecondParameter = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FirstParameter, null));
                ret.Add((SecondParameter, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HasLoaded3DConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HasLoaded3DConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static HasLoaded3DConditionData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HasLoaded3DConditionData();
            ((HasLoaded3DConditionDataSetterCommon)((IHasLoaded3DConditionDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HasLoaded3DConditionData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HasLoaded3DConditionDataSetterCommon)((IHasLoaded3DConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new HasLoaded3DConditionData GetNew()
        {
            return new HasLoaded3DConditionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHasLoaded3DConditionData :
        IFunctionConditionData,
        IHasLoaded3DConditionDataGetter,
        ILoquiObjectSetter<IHasLoaded3DConditionData>
    {
        new Int32 FirstParameter { get; set; }
        new Int32 SecondParameter { get; set; }
    }

    public partial interface IHasLoaded3DConditionDataGetter :
        IFunctionConditionDataGetter,
        IBinaryItem,
        ILoquiObject<IHasLoaded3DConditionDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => HasLoaded3DConditionData_Registration.Instance;
        Int32 FirstParameter { get; }
        Int32 SecondParameter { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HasLoaded3DConditionDataMixIn
    {
        public static void Clear(this IHasLoaded3DConditionData item)
        {
            ((HasLoaded3DConditionDataSetterCommon)((IHasLoaded3DConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HasLoaded3DConditionData.Mask<bool> GetEqualsMask(
            this IHasLoaded3DConditionDataGetter item,
            IHasLoaded3DConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHasLoaded3DConditionDataGetter item,
            string? name = null,
            HasLoaded3DConditionData.Mask<bool>? printMask = null)
        {
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHasLoaded3DConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HasLoaded3DConditionData.Mask<bool>? printMask = null)
        {
            ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHasLoaded3DConditionDataGetter item,
            IHasLoaded3DConditionDataGetter rhs,
            HasLoaded3DConditionData.TranslationMask? equalsMask = null)
        {
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHasLoaded3DConditionData lhs,
            IHasLoaded3DConditionDataGetter rhs,
            out HasLoaded3DConditionData.ErrorMask errorMask,
            HasLoaded3DConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HasLoaded3DConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHasLoaded3DConditionData lhs,
            IHasLoaded3DConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HasLoaded3DConditionData DeepCopy(
            this IHasLoaded3DConditionDataGetter item,
            HasLoaded3DConditionData.TranslationMask? copyMask = null)
        {
            return ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HasLoaded3DConditionData DeepCopy(
            this IHasLoaded3DConditionDataGetter item,
            out HasLoaded3DConditionData.ErrorMask errorMask,
            HasLoaded3DConditionData.TranslationMask? copyMask = null)
        {
            return ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HasLoaded3DConditionData DeepCopy(
            this IHasLoaded3DConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHasLoaded3DConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HasLoaded3DConditionDataSetterCommon)((IHasLoaded3DConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum HasLoaded3DConditionData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        Function = 3,
        Unknown2 = 4,
        ParameterOneString = 5,
        ParameterTwoString = 6,
        FirstParameter = 7,
        SecondParameter = 8,
    }
    #endregion

    #region Registration
    internal partial class HasLoaded3DConditionData_Registration : ILoquiRegistration
    {
        public static readonly HasLoaded3DConditionData_Registration Instance = new HasLoaded3DConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 10267,
            version: 0);

        public const string GUID = "4d932a4a-3155-4551-b4c8-811a2af2ba68";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(HasLoaded3DConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HasLoaded3DConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(HasLoaded3DConditionData);

        public static readonly Type GetterType = typeof(IHasLoaded3DConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHasLoaded3DConditionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.HasLoaded3DConditionData";

        public const string Name = "HasLoaded3DConditionData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(HasLoaded3DConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HasLoaded3DConditionDataSetterCommon : FunctionConditionDataSetterCommon
    {
        public new static readonly HasLoaded3DConditionDataSetterCommon Instance = new HasLoaded3DConditionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHasLoaded3DConditionData item)
        {
            ClearPartial();
            item.FirstParameter = default;
            item.SecondParameter = default;
            base.Clear(item);
        }
        
        public override void Clear(IFunctionConditionData item)
        {
            Clear(item: (IHasLoaded3DConditionData)item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IHasLoaded3DConditionData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IHasLoaded3DConditionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHasLoaded3DConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: HasLoaded3DConditionDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IFunctionConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (HasLoaded3DConditionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (HasLoaded3DConditionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class HasLoaded3DConditionDataCommon : FunctionConditionDataCommon
    {
        public new static readonly HasLoaded3DConditionDataCommon Instance = new HasLoaded3DConditionDataCommon();

        public HasLoaded3DConditionData.Mask<bool> GetEqualsMask(
            IHasLoaded3DConditionDataGetter item,
            IHasLoaded3DConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HasLoaded3DConditionData.Mask<bool>(false);
            ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHasLoaded3DConditionDataGetter item,
            IHasLoaded3DConditionDataGetter rhs,
            HasLoaded3DConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FirstParameter = item.FirstParameter == rhs.FirstParameter;
            ret.SecondParameter = item.SecondParameter == rhs.SecondParameter;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IHasLoaded3DConditionDataGetter item,
            string? name = null,
            HasLoaded3DConditionData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHasLoaded3DConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HasLoaded3DConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HasLoaded3DConditionData =>");
            }
            else
            {
                sb.AppendLine($"{name} (HasLoaded3DConditionData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHasLoaded3DConditionDataGetter item,
            StructuredStringBuilder sb,
            HasLoaded3DConditionData.Mask<bool>? printMask = null)
        {
            FunctionConditionDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.FirstParameter ?? true)
            {
                sb.AppendItem(item.FirstParameter, "FirstParameter");
            }
            if (printMask?.SecondParameter ?? true)
            {
                sb.AppendItem(item.SecondParameter, "SecondParameter");
            }
        }
        
        public static HasLoaded3DConditionData_FieldIndex ConvertFieldIndex(FunctionConditionData_FieldIndex index)
        {
            switch (index)
            {
                case FunctionConditionData_FieldIndex.RunOnType:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.Reference:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.Unknown3:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.Function:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.Unknown2:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.ParameterOneString:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case FunctionConditionData_FieldIndex.ParameterTwoString:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new HasLoaded3DConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                case ConditionData_FieldIndex.RunOnType:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Reference:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Unknown3:
                    return (HasLoaded3DConditionData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHasLoaded3DConditionDataGetter? lhs,
            IHasLoaded3DConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFunctionConditionDataGetter)lhs, (IFunctionConditionDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)HasLoaded3DConditionData_FieldIndex.FirstParameter) ?? true))
            {
                if (lhs.FirstParameter != rhs.FirstParameter) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HasLoaded3DConditionData_FieldIndex.SecondParameter) ?? true))
            {
                if (lhs.SecondParameter != rhs.SecondParameter) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFunctionConditionDataGetter? lhs,
            IFunctionConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHasLoaded3DConditionDataGetter?)lhs,
                rhs: rhs as IHasLoaded3DConditionDataGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHasLoaded3DConditionDataGetter?)lhs,
                rhs: rhs as IHasLoaded3DConditionDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IHasLoaded3DConditionDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FirstParameter);
            hash.Add(item.SecondParameter);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFunctionConditionDataGetter item)
        {
            return GetHashCode(item: (IHasLoaded3DConditionDataGetter)item);
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IHasLoaded3DConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return HasLoaded3DConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHasLoaded3DConditionDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class HasLoaded3DConditionDataSetterTranslationCommon : FunctionConditionDataSetterTranslationCommon
    {
        public new static readonly HasLoaded3DConditionDataSetterTranslationCommon Instance = new HasLoaded3DConditionDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHasLoaded3DConditionData item,
            IHasLoaded3DConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFunctionConditionData)item,
                (IFunctionConditionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)HasLoaded3DConditionData_FieldIndex.FirstParameter) ?? true))
            {
                item.FirstParameter = rhs.FirstParameter;
            }
            if ((copyMask?.GetShouldTranslate((int)HasLoaded3DConditionData_FieldIndex.SecondParameter) ?? true))
            {
                item.SecondParameter = rhs.SecondParameter;
            }
        }
        
        
        public override void DeepCopyIn(
            IFunctionConditionData item,
            IFunctionConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHasLoaded3DConditionData)item,
                rhs: (IHasLoaded3DConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHasLoaded3DConditionData)item,
                rhs: (IHasLoaded3DConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public HasLoaded3DConditionData DeepCopy(
            IHasLoaded3DConditionDataGetter item,
            HasLoaded3DConditionData.TranslationMask? copyMask = null)
        {
            HasLoaded3DConditionData ret = (HasLoaded3DConditionData)((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).GetNew();
            ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HasLoaded3DConditionData DeepCopy(
            IHasLoaded3DConditionDataGetter item,
            out HasLoaded3DConditionData.ErrorMask errorMask,
            HasLoaded3DConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HasLoaded3DConditionData ret = (HasLoaded3DConditionData)((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).GetNew();
            ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HasLoaded3DConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HasLoaded3DConditionData DeepCopy(
            IHasLoaded3DConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HasLoaded3DConditionData ret = (HasLoaded3DConditionData)((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)item).CommonInstance()!).GetNew();
            ((HasLoaded3DConditionDataSetterTranslationCommon)((IHasLoaded3DConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class HasLoaded3DConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HasLoaded3DConditionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => HasLoaded3DConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HasLoaded3DConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HasLoaded3DConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HasLoaded3DConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class HasLoaded3DConditionDataBinaryWriteTranslation :
        FunctionConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly HasLoaded3DConditionDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IHasLoaded3DConditionDataGetter item,
            MutagenWriter writer)
        {
            FunctionConditionDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.FirstParameter);
            writer.Write(item.SecondParameter);
        }

        public void Write(
            MutagenWriter writer,
            IHasLoaded3DConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHasLoaded3DConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFunctionConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHasLoaded3DConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHasLoaded3DConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HasLoaded3DConditionDataBinaryCreateTranslation : FunctionConditionDataBinaryCreateTranslation
    {
        public new static readonly HasLoaded3DConditionDataBinaryCreateTranslation Instance = new HasLoaded3DConditionDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IHasLoaded3DConditionData item,
            MutagenFrame frame)
        {
            FunctionConditionDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.FirstParameter = frame.ReadInt32();
            item.SecondParameter = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HasLoaded3DConditionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class HasLoaded3DConditionDataBinaryOverlay :
        FunctionConditionDataBinaryOverlay,
        IHasLoaded3DConditionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HasLoaded3DConditionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => HasLoaded3DConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HasLoaded3DConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HasLoaded3DConditionDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HasLoaded3DConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HasLoaded3DConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 FirstParameter => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public Int32 SecondParameter => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HasLoaded3DConditionDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHasLoaded3DConditionDataGetter HasLoaded3DConditionDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new HasLoaded3DConditionDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IHasLoaded3DConditionDataGetter HasLoaded3DConditionDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HasLoaded3DConditionDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HasLoaded3DConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHasLoaded3DConditionDataGetter rhs) return false;
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHasLoaded3DConditionDataGetter? obj)
        {
            return ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HasLoaded3DConditionDataCommon)((IHasLoaded3DConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

