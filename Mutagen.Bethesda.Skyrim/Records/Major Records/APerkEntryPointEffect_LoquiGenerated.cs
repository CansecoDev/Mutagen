/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public abstract partial class APerkEntryPointEffect :
        APerkEffect,
        IAPerkEntryPointEffect,
        ILoquiObjectSetter<APerkEntryPointEffect>,
        IEquatable<APerkEntryPointEffect>,
        IEqualsMask
    {
        #region Ctor
        public APerkEntryPointEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EntryPoint
        public APerkEntryPointEffect.EntryType EntryPoint { get; set; } = default;
        #endregion
        #region PerkConditionTabCount
        public Byte PerkConditionTabCount { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APerkEntryPointEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPerkEntryPointEffectGetter rhs)) return false;
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(APerkEntryPointEffect obj)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => APerkEntryPointEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((APerkEntryPointEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new APerkEntryPointEffect CreateFromXml(
            XElement node,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static APerkEntryPointEffect CreateFromXml(
            XElement node,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static APerkEntryPointEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate<APerkEntryPointEffect>(node, out var ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown APerkEntryPointEffect subclass: {node.Name.LocalName}");
            }
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static APerkEntryPointEffect CreateFromXml(
            string path,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static APerkEntryPointEffect CreateFromXml(
            string path,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static APerkEntryPointEffect CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static APerkEntryPointEffect CreateFromXml(
            Stream stream,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static APerkEntryPointEffect CreateFromXml(
            Stream stream,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static APerkEntryPointEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEffect.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.EntryPoint = initialValue;
                this.PerkConditionTabCount = initialValue;
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState,
                TItem EntryPoint,
                TItem PerkConditionTabCount)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions,
                PRKEDataTypeState: PRKEDataTypeState)
            {
                this.EntryPoint = EntryPoint;
                this.PerkConditionTabCount = PerkConditionTabCount;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EntryPoint;
            public TItem PerkConditionTabCount;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.EntryPoint, rhs.EntryPoint)) return false;
                if (!object.Equals(this.PerkConditionTabCount, rhs.PerkConditionTabCount)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EntryPoint);
                hash.Add(this.PerkConditionTabCount);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.EntryPoint)) return false;
                if (!eval(this.PerkConditionTabCount)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.EntryPoint)) return true;
                if (eval(this.PerkConditionTabCount)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APerkEntryPointEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.EntryPoint = eval(this.EntryPoint);
                obj.PerkConditionTabCount = eval(this.PerkConditionTabCount);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(APerkEntryPointEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, APerkEntryPointEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(APerkEntryPointEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EntryPoint ?? true)
                    {
                        fg.AppendItem(EntryPoint, "EntryPoint");
                    }
                    if (printMask?.PerkConditionTabCount ?? true)
                    {
                        fg.AppendItem(PerkConditionTabCount, "PerkConditionTabCount");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? EntryPoint;
            public Exception? PerkConditionTabCount;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        return EntryPoint;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        return PerkConditionTabCount;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        this.EntryPoint = ex;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        this.PerkConditionTabCount = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEntryPointEffect_FieldIndex.EntryPoint:
                        this.EntryPoint = (Exception?)obj;
                        break;
                    case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                        this.PerkConditionTabCount = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (EntryPoint != null) return true;
                if (PerkConditionTabCount != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(EntryPoint, "EntryPoint");
                fg.AppendItem(PerkConditionTabCount, "PerkConditionTabCount");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EntryPoint = this.EntryPoint.Combine(rhs.EntryPoint);
                ret.PerkConditionTabCount = this.PerkConditionTabCount.Combine(rhs.PerkConditionTabCount);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool EntryPoint;
            public bool PerkConditionTabCount;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.EntryPoint = defaultOn;
                this.PerkConditionTabCount = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((EntryPoint, null));
                ret.Add((PerkConditionTabCount, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = APerkEntryPointEffect_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => APerkEntryPointEffectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => APerkEntryPointEffectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEntryPointEffectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEntryPointEffectCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APerkEntryPointEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEntryPointEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAPerkEntryPointEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new APerkEntryPointEffect GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IAPerkEntryPointEffect :
        IAPerkEntryPointEffectGetter,
        IAPerkEffect,
        ILoquiObjectSetter<IAPerkEntryPointEffect>
    {
        new APerkEntryPointEffect.EntryType EntryPoint { get; set; }
        new Byte PerkConditionTabCount { get; set; }
    }

    public partial interface IAPerkEntryPointEffectGetter :
        IAPerkEffectGetter,
        ILoquiObject<IAPerkEntryPointEffectGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => APerkEntryPointEffect_Registration.Instance;
        APerkEntryPointEffect.EntryType EntryPoint { get; }
        Byte PerkConditionTabCount { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class APerkEntryPointEffectMixIn
    {
        public static void Clear(this IAPerkEntryPointEffect item)
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APerkEntryPointEffect.Mask<bool> GetEqualsMask(
            this IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAPerkEntryPointEffectGetter item,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAPerkEntryPointEffectGetter item,
            FileGeneration fg,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.Mask<bool?> checkMask)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static APerkEntryPointEffect.Mask<bool> GetHasBeenSetMask(this IAPerkEntryPointEffectGetter item)
        {
            var ret = new APerkEntryPointEffect.Mask<bool>(false);
            ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs)
        {
            return ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAPerkEntryPointEffect lhs,
            IAPerkEntryPointEffectGetter rhs,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPerkEntryPointEffect lhs,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APerkEntryPointEffect DeepCopy(
            this IAPerkEntryPointEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APerkEntryPointEffectSetterTranslationCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            XElement node,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            XElement node,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            string path,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            string path,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            string path,
            ErrorMaskBuilder? errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            Stream stream,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            Stream stream,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPerkEntryPointEffect item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAPerkEntryPointEffect item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEntryPointEffectSetterCommon)((IAPerkEntryPointEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum APerkEntryPointEffect_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
        EntryPoint = 4,
        PerkConditionTabCount = 5,
    }
    #endregion

    #region Registration
    public partial class APerkEntryPointEffect_Registration : ILoquiRegistration
    {
        public static readonly APerkEntryPointEffect_Registration Instance = new APerkEntryPointEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 415,
            version: 0);

        public const string GUID = "e1dd9360-79b5-43f6-bac0-d7eb2b3cb6f7";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(APerkEntryPointEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APerkEntryPointEffect.ErrorMask);

        public static readonly Type ClassType = typeof(APerkEntryPointEffect);

        public static readonly Type GetterType = typeof(IAPerkEntryPointEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPerkEntryPointEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.APerkEntryPointEffect";

        public const string Name = "APerkEntryPointEffect";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENTRYPOINT":
                    return (ushort)APerkEntryPointEffect_FieldIndex.EntryPoint;
                case "PERKCONDITIONTABCOUNT":
                    return (ushort)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return false;
                default:
                    return APerkEffect_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return false;
                default:
                    return APerkEffect_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return false;
                default:
                    return APerkEffect_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return "EntryPoint";
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return "PerkConditionTabCount";
                default:
                    return APerkEffect_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return false;
                default:
                    return APerkEffect_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return false;
                default:
                    return APerkEffect_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            APerkEntryPointEffect_FieldIndex enu = (APerkEntryPointEffect_FieldIndex)index;
            switch (enu)
            {
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return typeof(APerkEntryPointEffect.EntryType);
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return typeof(Byte);
                default:
                    return APerkEffect_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(APerkEntryPointEffectXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(APerkEntryPointEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class APerkEntryPointEffectSetterCommon : APerkEffectSetterCommon
    {
        public new static readonly APerkEntryPointEffectSetterCommon Instance = new APerkEntryPointEffectSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPerkEntryPointEffect item)
        {
            ClearPartial();
            item.EntryPoint = default;
            item.PerkConditionTabCount = default;
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IAPerkEntryPointEffect)item);
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IAPerkEntryPointEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    APerkEntryPointEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IAPerkEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (APerkEntryPointEffect)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APerkEntryPointEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class APerkEntryPointEffectCommon : APerkEffectCommon
    {
        public new static readonly APerkEntryPointEffectCommon Instance = new APerkEntryPointEffectCommon();

        public APerkEntryPointEffect.Mask<bool> GetEqualsMask(
            IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APerkEntryPointEffect.Mask<bool>(false);
            ((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPerkEntryPointEffectGetter item,
            IAPerkEntryPointEffectGetter rhs,
            APerkEntryPointEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EntryPoint = item.EntryPoint == rhs.EntryPoint;
            ret.PerkConditionTabCount = item.PerkConditionTabCount == rhs.PerkConditionTabCount;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAPerkEntryPointEffectGetter item,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAPerkEntryPointEffectGetter item,
            FileGeneration fg,
            string? name = null,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"APerkEntryPointEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (APerkEntryPointEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAPerkEntryPointEffectGetter item,
            FileGeneration fg,
            APerkEntryPointEffect.Mask<bool>? printMask = null)
        {
            APerkEffectCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.EntryPoint ?? true)
            {
                fg.AppendItem(item.EntryPoint, "EntryPoint");
            }
            if (printMask?.PerkConditionTabCount ?? true)
            {
                fg.AppendItem(item.PerkConditionTabCount, "PerkConditionTabCount");
            }
        }
        
        public bool HasBeenSet(
            IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.Mask<bool> mask)
        {
            mask.EntryPoint = true;
            mask.PerkConditionTabCount = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static APerkEntryPointEffect_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.PRKEDataTypeState:
                    return (APerkEntryPointEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.EntryPoint != rhs.EntryPoint) return false;
            if (lhs.PerkConditionTabCount != rhs.PerkConditionTabCount) return false;
            return true;
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            return Equals(
                lhs: (IAPerkEntryPointEffectGetter?)lhs,
                rhs: rhs as IAPerkEntryPointEffectGetter);
        }
        
        public virtual int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EntryPoint);
            hash.Add(item.PerkConditionTabCount);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IAPerkEntryPointEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return APerkEntryPointEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAPerkEntryPointEffectGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IAPerkEntryPointEffectGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class APerkEntryPointEffectSetterTranslationCommon : APerkEffectSetterTranslationCommon
    {
        public new static readonly APerkEntryPointEffectSetterTranslationCommon Instance = new APerkEntryPointEffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IAPerkEffect)item,
                (IAPerkEffectGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.EntryPoint) ?? true))
            {
                item.EntryPoint = rhs.EntryPoint;
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount) ?? true))
            {
                item.PerkConditionTabCount = rhs.PerkConditionTabCount;
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAPerkEntryPointEffect)item,
                rhs: (IAPerkEntryPointEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? copyMask = null)
        {
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public APerkEntryPointEffect DeepCopy(
            IAPerkEntryPointEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APerkEntryPointEffect ret = (APerkEntryPointEffect)((APerkEntryPointEffectCommon)((IAPerkEntryPointEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class APerkEntryPointEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEntryPointEffect_Registration.Instance;
        public new static APerkEntryPointEffect_Registration Registration => APerkEntryPointEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APerkEntryPointEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return APerkEntryPointEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APerkEntryPointEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APerkEntryPointEffectXmlWriteTranslation :
        APerkEffectXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static APerkEntryPointEffectXmlWriteTranslation Instance = new APerkEntryPointEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAPerkEntryPointEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            APerkEffectXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.EntryPoint) ?? true))
            {
                EnumXmlTranslation<APerkEntryPointEffect.EntryType>.Instance.Write(
                    node: node,
                    name: nameof(item.EntryPoint),
                    item: item.EntryPoint,
                    fieldIndex: (int)APerkEntryPointEffect_FieldIndex.EntryPoint,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PerkConditionTabCount),
                    item: item.PerkConditionTabCount,
                    fieldIndex: (int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IAPerkEntryPointEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.APerkEntryPointEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.APerkEntryPointEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IAPerkEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class APerkEntryPointEffectXmlCreateTranslation : APerkEffectXmlCreateTranslation
    {
        public new readonly static APerkEntryPointEffectXmlCreateTranslation Instance = new APerkEntryPointEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IAPerkEntryPointEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    APerkEntryPointEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAPerkEntryPointEffect item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "EntryPoint":
                    errorMask?.PushIndex((int)APerkEntryPointEffect_FieldIndex.EntryPoint);
                    try
                    {
                        item.EntryPoint = EnumXmlTranslation<APerkEntryPointEffect.EntryType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PerkConditionTabCount":
                    errorMask?.PushIndex((int)APerkEntryPointEffect_FieldIndex.PerkConditionTabCount);
                    try
                    {
                        item.PerkConditionTabCount = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    APerkEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class APerkEntryPointEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAPerkEntryPointEffectGetter item,
            XElement node,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((APerkEntryPointEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APerkEntryPointEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAPerkEntryPointEffectGetter item,
            string path,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAPerkEntryPointEffectGetter item,
            Stream stream,
            out APerkEntryPointEffect.ErrorMask errorMask,
            APerkEntryPointEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APerkEntryPointEffectBinaryWriteTranslation :
        APerkEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static APerkEntryPointEffectBinaryWriteTranslation Instance = new APerkEntryPointEffectBinaryWriteTranslation();

        static partial void WriteBinaryFunctionParametersCustom(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item);

        public static void WriteBinaryFunctionParameters(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item)
        {
            WriteBinaryFunctionParametersCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAPerkEntryPointEffectGetter item,
            MutagenWriter writer)
        {
            APerkEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<APerkEntryPointEffect.EntryType>.Instance.Write(
                writer,
                item.EntryPoint,
                length: 1);
            writer.Write(item.PerkConditionTabCount);
        }

        public static void WriteRecordTypes(
            IAPerkEntryPointEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APerkEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            APerkEntryPointEffectBinaryWriteTranslation.WriteBinaryFunctionParameters(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPerkEntryPointEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class APerkEntryPointEffectBinaryCreateTranslation : APerkEffectBinaryCreateTranslation
    {
        public new readonly static APerkEntryPointEffectBinaryCreateTranslation Instance = new APerkEntryPointEffectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAPerkEntryPointEffect item,
            MutagenFrame frame)
        {
            APerkEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.EntryPoint = EnumBinaryTranslation<APerkEntryPointEffect.EntryType>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.PerkConditionTabCount = frame.ReadUInt8();
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EPFT:
                {
                    APerkEntryPointEffectBinaryCreateTranslation.FillBinaryFunctionParametersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return APerkEffectBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryFunctionParametersCustom(
            MutagenFrame frame,
            IAPerkEntryPointEffect item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class APerkEntryPointEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APerkEntryPointEffectBinaryOverlay :
        APerkEffectBinaryOverlay,
        IAPerkEntryPointEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEntryPointEffect_Registration.Instance;
        public new static APerkEntryPointEffect_Registration Registration => APerkEntryPointEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APerkEntryPointEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APerkEntryPointEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAPerkEntryPointEffectGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => APerkEntryPointEffectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => APerkEntryPointEffectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEntryPointEffectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEntryPointEffectCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => APerkEntryPointEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((APerkEntryPointEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APerkEntryPointEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEntryPointEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public APerkEntryPointEffect.EntryType EntryPoint => (APerkEntryPointEffect.EntryType)_data.Span.Slice(0x0, 0x1)[0];
        public Byte PerkConditionTabCount => _data.Span[0x1];
        #region FunctionParameters
        partial void FunctionParametersCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APerkEntryPointEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EPFT:
                {
                    FunctionParametersCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APerkEntryPointEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

