/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public abstract partial class APlacedTrap :
        SkyrimMajorRecord,
        IAPlacedTrapInternal,
        ILoquiObjectSetter<APlacedTrap>,
        IEquatable<APlacedTrap>,
        IEqualsMask
    {
        #region Ctor
        protected APlacedTrap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IAPlacedTrapGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region EncounterZone
        public FormLinkNullable<EncounterZone> EncounterZone { get; set; } = new FormLinkNullable<EncounterZone>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IEncounterZoneGetter> IAPlacedTrapGetter.EncounterZone => this.EncounterZone;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? IAPlacedTrapGetter.Ownership => this.Ownership;
        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.FavorCost => this.FavorCost;
        #endregion
        #region Reflections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WaterReflection> _Reflections = new ExtendedList<WaterReflection>();
        public ExtendedList<WaterReflection> Reflections
        {
            get => this._Reflections;
            protected set => this._Reflections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWaterReflectionGetter> IAPlacedTrapGetter.Reflections => _Reflections;
        #endregion

        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            protected set => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IAPlacedTrapGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IAPlacedTrapGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IAPlacedTrapGetter.EnableParent => this.EnableParent;
        #endregion
        #region Emittance
        public FormLinkNullable<IEmittance> Emittance { get; set; } = new FormLinkNullable<IEmittance>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IEmittanceGetter> IAPlacedTrapGetter.Emittance => this.Emittance;
        #endregion
        #region MultiBoundReference
        public FormLinkNullable<PlacedObject> MultiBoundReference { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IPlacedObjectGetter> IAPlacedTrapGetter.MultiBoundReference => this.MultiBoundReference;
        #endregion
        #region IgnoredBySandbox
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _IgnoredBySandbox;
        public MemorySlice<Byte>? IgnoredBySandbox
        {
            get => this._IgnoredBySandbox;
            set => this._IgnoredBySandbox = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAPlacedTrapGetter.IgnoredBySandbox => this.IgnoredBySandbox;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<LocationReferenceType>>? _LocationRefTypes;
        public ExtendedList<IFormLink<LocationReferenceType>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? IAPlacedTrapGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region LocationReference
        public FormLinkNullable<ILocationRecord> LocationReference { get; set; } = new FormLinkNullable<ILocationRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ILocationRecordGetter> IAPlacedTrapGetter.LocationReference => this.LocationReference;
        #endregion
        #region DistantLodData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single>? _DistantLodData;
        public ExtendedList<Single>? DistantLodData
        {
            get => this._DistantLodData;
            set => this._DistantLodData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single>? IAPlacedTrapGetter.DistantLodData => _DistantLodData;
        #endregion

        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.Scale => this.Scale;
        #endregion
        #region Position
        public P3Float Position { get; set; } = default;
        #endregion
        #region Rotation
        public P3Float Rotation { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public APlacedTrap.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APlacedTrapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPlacedTrapGetter rhs)) return false;
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(APlacedTrap? obj)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => APlacedTrapXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((APlacedTrapXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new APlacedTrap CreateFromXml(
            XElement node,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static APlacedTrap CreateFromXml(
            XElement node,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static APlacedTrap CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate<APlacedTrap>(node, out var ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown APlacedTrap subclass: {node.Name.LocalName}");
            }
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static APlacedTrap CreateFromXml(
            string path,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static APlacedTrap CreateFromXml(
            string path,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static APlacedTrap CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static APlacedTrap CreateFromXml(
            Stream stream,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static APlacedTrap CreateFromXml(
            Stream stream,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static APlacedTrap CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.EncounterZone = initialValue;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Emittance = initialValue;
                this.MultiBoundReference = initialValue;
                this.IgnoredBySandbox = initialValue;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = initialValue;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Ownership,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Position,
                TItem Rotation,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.EncounterZone = EncounterZone;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(Reflections, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Emittance = Emittance;
                this.MultiBoundReference = MultiBoundReference;
                this.IgnoredBySandbox = IgnoredBySandbox;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = LocationReference;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DistantLodData, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = Scale;
                this.Position = Position;
                this.Rotation = Rotation;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem EncounterZone;
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>? Reflections;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem Emittance;
            public TItem MultiBoundReference;
            public TItem IgnoredBySandbox;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem LocationReference;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DistantLodData;
            public TItem Scale;
            public TItem Position;
            public TItem Rotation;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.MultiBoundReference, rhs.MultiBoundReference)) return false;
                if (!object.Equals(this.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.DistantLodData, rhs.DistantLodData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.EncounterZone);
                hash.Add(this.Ownership);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.Reflections);
                hash.Add(this.LinkedReferences);
                hash.Add(this.ActivateParents);
                hash.Add(this.EnableParent);
                hash.Add(this.Emittance);
                hash.Add(this.MultiBoundReference);
                hash.Add(this.IgnoredBySandbox);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.LocationReference);
                hash.Add(this.DistantLodData);
                hash.Add(this.Scale);
                hash.Add(this.Position);
                hash.Add(this.Rotation);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.EncounterZone)) return false;
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (this.Reflections != null)
                {
                    if (!eval(this.Reflections.Overall)) return false;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.Emittance)) return false;
                if (!eval(this.MultiBoundReference)) return false;
                if (!eval(this.IgnoredBySandbox)) return false;
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LocationReference)) return false;
                if (this.DistantLodData != null)
                {
                    if (!eval(this.DistantLodData.Overall)) return false;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Scale)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.EncounterZone)) return true;
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (this.Reflections != null)
                {
                    if (eval(this.Reflections.Overall)) return true;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.Emittance)) return true;
                if (eval(this.MultiBoundReference)) return true;
                if (eval(this.IgnoredBySandbox)) return true;
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LocationReference)) return true;
                if (this.DistantLodData != null)
                {
                    if (eval(this.DistantLodData.Overall)) return true;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Scale)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APlacedTrap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.EncounterZone = eval(this.EncounterZone);
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                if (Reflections != null)
                {
                    obj.Reflections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WaterReflection.Mask<R>?>>?>(eval(this.Reflections.Overall), Enumerable.Empty<MaskItemIndexed<R, WaterReflection.Mask<R>?>>());
                    if (Reflections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WaterReflection.Mask<R>?>>();
                        obj.Reflections.Specific = l;
                        foreach (var item in Reflections.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WaterReflection.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WaterReflection.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Emittance = eval(this.Emittance);
                obj.MultiBoundReference = eval(this.MultiBoundReference);
                obj.IgnoredBySandbox = eval(this.IgnoredBySandbox);
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LocationReference = eval(this.LocationReference);
                if (DistantLodData != null)
                {
                    obj.DistantLodData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DistantLodData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DistantLodData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DistantLodData.Specific = l;
                        foreach (var item in DistantLodData.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Scale = eval(this.Scale);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(APlacedTrap.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, APlacedTrap.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(APlacedTrap.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.ToString(fg);
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        fg.AppendItem(FavorCost, "FavorCost");
                    }
                    if ((printMask?.Reflections?.Overall ?? true)
                        && Reflections.TryGet(out var ReflectionsItem))
                    {
                        fg.AppendLine("Reflections =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ReflectionsItem.Overall);
                            if (ReflectionsItem.Specific != null)
                            {
                                foreach (var subItem in ReflectionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences.TryGet(out var LinkedReferencesItem))
                    {
                        fg.AppendLine("LinkedReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.ToString(fg);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        fg.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.MultiBoundReference ?? true)
                    {
                        fg.AppendItem(MultiBoundReference, "MultiBoundReference");
                    }
                    if (printMask?.IgnoredBySandbox ?? true)
                    {
                        fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes.TryGet(out var LocationRefTypesItem))
                    {
                        fg.AppendLine("LocationRefTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        fg.AppendItem(LocationReference, "LocationReference");
                    }
                    if ((printMask?.DistantLodData?.Overall ?? true)
                        && DistantLodData.TryGet(out var DistantLodDataItem))
                    {
                        fg.AppendLine("DistantLodData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DistantLodDataItem.Overall);
                            if (DistantLodDataItem.Specific != null)
                            {
                                foreach (var subItem in DistantLodDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Position ?? true)
                    {
                        fg.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        fg.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? EncounterZone;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>? Reflections;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? Emittance;
            public Exception? MultiBoundReference;
            public Exception? IgnoredBySandbox;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? LocationReference;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DistantLodData;
            public Exception? Scale;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case APlacedTrap_FieldIndex.Ownership:
                        return Ownership;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case APlacedTrap_FieldIndex.FavorCost:
                        return FavorCost;
                    case APlacedTrap_FieldIndex.Reflections:
                        return Reflections;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case APlacedTrap_FieldIndex.EnableParent:
                        return EnableParent;
                    case APlacedTrap_FieldIndex.Emittance:
                        return Emittance;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        return MultiBoundReference;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        return IgnoredBySandbox;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case APlacedTrap_FieldIndex.LocationReference:
                        return LocationReference;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        return DistantLodData;
                    case APlacedTrap_FieldIndex.Scale:
                        return Scale;
                    case APlacedTrap_FieldIndex.Position:
                        return Position;
                    case APlacedTrap_FieldIndex.Rotation:
                        return Rotation;
                    case APlacedTrap_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case APlacedTrap_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = ex;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case APlacedTrap_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case APlacedTrap_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case APlacedTrap_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (EncounterZone != null) return true;
                if (Ownership != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (Reflections != null) return true;
                if (LinkedReferences != null) return true;
                if (ActivateParents != null) return true;
                if (EnableParent != null) return true;
                if (Emittance != null) return true;
                if (MultiBoundReference != null) return true;
                if (IgnoredBySandbox != null) return true;
                if (LocationRefTypes != null) return true;
                if (LocationReference != null) return true;
                if (DistantLodData != null) return true;
                if (Scale != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(EncounterZone, "EncounterZone");
                Ownership?.ToString(fg);
                fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                fg.AppendItem(FavorCost, "FavorCost");
                if (Reflections.TryGet(out var ReflectionsItem))
                {
                    fg.AppendLine("Reflections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ReflectionsItem.Overall);
                        if (ReflectionsItem.Specific != null)
                        {
                            foreach (var subItem in ReflectionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (LinkedReferences.TryGet(out var LinkedReferencesItem))
                {
                    fg.AppendLine("LinkedReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                ActivateParents?.ToString(fg);
                EnableParent?.ToString(fg);
                fg.AppendItem(Emittance, "Emittance");
                fg.AppendItem(MultiBoundReference, "MultiBoundReference");
                fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                if (LocationRefTypes.TryGet(out var LocationRefTypesItem))
                {
                    fg.AppendLine("LocationRefTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(LocationReference, "LocationReference");
                if (DistantLodData.TryGet(out var DistantLodDataItem))
                {
                    fg.AppendLine("DistantLodData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DistantLodDataItem.Overall);
                        if (DistantLodDataItem.Specific != null)
                        {
                            foreach (var subItem in DistantLodDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Scale, "Scale");
                fg.AppendItem(Position, "Position");
                fg.AppendItem(Rotation, "Rotation");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ExceptionExt.Combine(this.Reflections?.Overall, rhs.Reflections?.Overall), ExceptionExt.Combine(this.Reflections?.Specific, rhs.Reflections?.Specific));
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.MultiBoundReference = this.MultiBoundReference.Combine(rhs.MultiBoundReference);
                ret.IgnoredBySandbox = this.IgnoredBySandbox.Combine(rhs.IgnoredBySandbox);
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.DistantLodData?.Overall, rhs.DistantLodData?.Overall), ExceptionExt.Combine(this.DistantLodData?.Specific, rhs.DistantLodData?.Specific));
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public bool EncounterZone;
            public MaskItem<bool, Ownership.TranslationMask?> Ownership;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public MaskItem<bool, WaterReflection.TranslationMask?> Reflections;
            public MaskItem<bool, LinkedReferences.TranslationMask?> LinkedReferences;
            public MaskItem<bool, ActivateParents.TranslationMask?> ActivateParents;
            public MaskItem<bool, EnableParent.TranslationMask?> EnableParent;
            public bool Emittance;
            public bool MultiBoundReference;
            public bool IgnoredBySandbox;
            public bool LocationRefTypes;
            public bool LocationReference;
            public bool DistantLodData;
            public bool Scale;
            public bool Position;
            public bool Rotation;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.EncounterZone = defaultOn;
                this.Ownership = new MaskItem<bool, Ownership.TranslationMask?>(defaultOn, null);
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.Reflections = new MaskItem<bool, WaterReflection.TranslationMask?>(defaultOn, null);
                this.LinkedReferences = new MaskItem<bool, LinkedReferences.TranslationMask?>(defaultOn, null);
                this.ActivateParents = new MaskItem<bool, ActivateParents.TranslationMask?>(defaultOn, null);
                this.EnableParent = new MaskItem<bool, EnableParent.TranslationMask?>(defaultOn, null);
                this.Emittance = defaultOn;
                this.MultiBoundReference = defaultOn;
                this.IgnoredBySandbox = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.LocationReference = defaultOn;
                this.DistantLodData = defaultOn;
                this.Scale = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((EncounterZone, null));
                ret.Add((Ownership?.Overall ?? true, Ownership?.Specific?.GetCrystal()));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((Reflections?.Overall ?? true, Reflections?.Specific?.GetCrystal()));
                ret.Add((LinkedReferences?.Overall ?? true, LinkedReferences?.Specific?.GetCrystal()));
                ret.Add((ActivateParents?.Overall ?? true, ActivateParents?.Specific?.GetCrystal()));
                ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
                ret.Add((Emittance, null));
                ret.Add((MultiBoundReference, null));
                ret.Add((IgnoredBySandbox, null));
                ret.Add((LocationRefTypes, null));
                ret.Add((LocationReference, null));
                ret.Add((DistantLodData, null));
                ret.Add((Scale, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => APlacedTrapCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => APlacedTrapCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapCommon.Instance.RemapLinks(this, mapping);
        public APlacedTrap(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public APlacedTrap(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public APlacedTrap(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAPlacedTrapGetter)rhs, include);

        void IClearable.Clear()
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new APlacedTrap GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IAPlacedTrap :
        IAPlacedTrapGetter,
        ISkyrimMajorRecord,
        IPlaced,
        IPlacedThing,
        ILinkedReference,
        IPositionRotation,
        ILoquiObjectSetter<IAPlacedTrapInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new FormLinkNullable<EncounterZone> EncounterZone { get; set; }
        new Ownership? Ownership { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new ExtendedList<WaterReflection> Reflections { get; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new ActivateParents? ActivateParents { get; set; }
        new EnableParent? EnableParent { get; set; }
        new FormLinkNullable<IEmittance> Emittance { get; set; }
        new FormLinkNullable<PlacedObject> MultiBoundReference { get; set; }
        new MemorySlice<Byte>? IgnoredBySandbox { get; set; }
        new ExtendedList<IFormLink<LocationReferenceType>>? LocationRefTypes { get; set; }
        new FormLinkNullable<ILocationRecord> LocationReference { get; set; }
        new ExtendedList<Single>? DistantLodData { get; set; }
        new Single? Scale { get; set; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new APlacedTrap.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new APlacedTrap.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IAPlacedTrapInternal :
        ISkyrimMajorRecordInternal,
        IAPlacedTrap,
        IAPlacedTrapGetter
    {
    }

    public partial interface IAPlacedTrapGetter :
        ISkyrimMajorRecordGetter,
        IPlacedGetter,
        IPlacedThingGetter,
        ILinkedReferenceGetter,
        IPositionRotationGetter,
        ILoquiObject<IAPlacedTrapGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => APlacedTrap_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IFormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        IOwnershipGetter? Ownership { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        IReadOnlyList<IWaterReflectionGetter> Reflections { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IActivateParentsGetter? ActivateParents { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullable<IEmittanceGetter> Emittance { get; }
        IFormLinkNullable<IPlacedObjectGetter> MultiBoundReference { get; }
        ReadOnlyMemorySlice<Byte>? IgnoredBySandbox { get; }
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        IFormLinkNullable<ILocationRecordGetter> LocationReference { get; }
        IReadOnlyList<Single>? DistantLodData { get; }
        Single? Scale { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        APlacedTrap.DATADataType DATADataTypeState { get; }

        #region Mutagen
        APlacedTrap.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class APlacedTrapMixIn
    {
        public static void Clear(this IAPlacedTrapInternal item)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APlacedTrap.Mask<bool> GetEqualsMask(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAPlacedTrapGetter item,
            FileGeneration fg,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAPlacedTrapGetter item,
            APlacedTrap.Mask<bool?> checkMask)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static APlacedTrap.Mask<bool> GetHasBeenSetMask(this IAPlacedTrapGetter item)
        {
            var ret = new APlacedTrap.Mask<bool>(false);
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            XElement node,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            XElement node,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            string path,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            string path,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            Stream stream,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            Stream stream,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAPlacedTrapInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            APlacedTrap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAPlacedTrapInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum APlacedTrap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        EncounterZone = 7,
        Ownership = 8,
        HeadTrackingWeight = 9,
        FavorCost = 10,
        Reflections = 11,
        LinkedReferences = 12,
        ActivateParents = 13,
        EnableParent = 14,
        Emittance = 15,
        MultiBoundReference = 16,
        IgnoredBySandbox = 17,
        LocationRefTypes = 18,
        LocationReference = 19,
        DistantLodData = 20,
        Scale = 21,
        Position = 22,
        Rotation = 23,
        DATADataTypeState = 24,
    }
    #endregion

    #region Registration
    public partial class APlacedTrap_Registration : ILoquiRegistration
    {
        public static readonly APlacedTrap_Registration Instance = new APlacedTrap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 294,
            version: 0);

        public const string GUID = "29f40f03-4046-4b2d-b061-b0c5c48d253b";

        public const ushort AdditionalFieldCount = 19;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(APlacedTrap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APlacedTrap.ErrorMask);

        public static readonly Type ClassType = typeof(APlacedTrap);

        public static readonly Type GetterType = typeof(IAPlacedTrapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPlacedTrap);

        public static readonly Type? InternalSetterType = typeof(IAPlacedTrapInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.APlacedTrap";

        public const string Name = "APlacedTrap";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)APlacedTrap_FieldIndex.VirtualMachineAdapter;
                case "ENCOUNTERZONE":
                    return (ushort)APlacedTrap_FieldIndex.EncounterZone;
                case "OWNERSHIP":
                    return (ushort)APlacedTrap_FieldIndex.Ownership;
                case "HEADTRACKINGWEIGHT":
                    return (ushort)APlacedTrap_FieldIndex.HeadTrackingWeight;
                case "FAVORCOST":
                    return (ushort)APlacedTrap_FieldIndex.FavorCost;
                case "REFLECTIONS":
                    return (ushort)APlacedTrap_FieldIndex.Reflections;
                case "LINKEDREFERENCES":
                    return (ushort)APlacedTrap_FieldIndex.LinkedReferences;
                case "ACTIVATEPARENTS":
                    return (ushort)APlacedTrap_FieldIndex.ActivateParents;
                case "ENABLEPARENT":
                    return (ushort)APlacedTrap_FieldIndex.EnableParent;
                case "EMITTANCE":
                    return (ushort)APlacedTrap_FieldIndex.Emittance;
                case "MULTIBOUNDREFERENCE":
                    return (ushort)APlacedTrap_FieldIndex.MultiBoundReference;
                case "IGNOREDBYSANDBOX":
                    return (ushort)APlacedTrap_FieldIndex.IgnoredBySandbox;
                case "LOCATIONREFTYPES":
                    return (ushort)APlacedTrap_FieldIndex.LocationRefTypes;
                case "LOCATIONREFERENCE":
                    return (ushort)APlacedTrap_FieldIndex.LocationReference;
                case "DISTANTLODDATA":
                    return (ushort)APlacedTrap_FieldIndex.DistantLodData;
                case "SCALE":
                    return (ushort)APlacedTrap_FieldIndex.Scale;
                case "POSITION":
                    return (ushort)APlacedTrap_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)APlacedTrap_FieldIndex.Rotation;
                case "DATADATATYPESTATE":
                    return (ushort)APlacedTrap_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.Reflections:
                case APlacedTrap_FieldIndex.LinkedReferences:
                case APlacedTrap_FieldIndex.LocationRefTypes:
                case APlacedTrap_FieldIndex.DistantLodData:
                    return true;
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                case APlacedTrap_FieldIndex.EncounterZone:
                case APlacedTrap_FieldIndex.Ownership:
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                case APlacedTrap_FieldIndex.FavorCost:
                case APlacedTrap_FieldIndex.ActivateParents:
                case APlacedTrap_FieldIndex.EnableParent:
                case APlacedTrap_FieldIndex.Emittance:
                case APlacedTrap_FieldIndex.MultiBoundReference:
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                case APlacedTrap_FieldIndex.LocationReference:
                case APlacedTrap_FieldIndex.Scale:
                case APlacedTrap_FieldIndex.Position:
                case APlacedTrap_FieldIndex.Rotation:
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                case APlacedTrap_FieldIndex.Ownership:
                case APlacedTrap_FieldIndex.Reflections:
                case APlacedTrap_FieldIndex.LinkedReferences:
                case APlacedTrap_FieldIndex.ActivateParents:
                case APlacedTrap_FieldIndex.EnableParent:
                    return true;
                case APlacedTrap_FieldIndex.EncounterZone:
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                case APlacedTrap_FieldIndex.FavorCost:
                case APlacedTrap_FieldIndex.Emittance:
                case APlacedTrap_FieldIndex.MultiBoundReference:
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                case APlacedTrap_FieldIndex.LocationRefTypes:
                case APlacedTrap_FieldIndex.LocationReference:
                case APlacedTrap_FieldIndex.DistantLodData:
                case APlacedTrap_FieldIndex.Scale:
                case APlacedTrap_FieldIndex.Position:
                case APlacedTrap_FieldIndex.Rotation:
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                case APlacedTrap_FieldIndex.EncounterZone:
                case APlacedTrap_FieldIndex.Ownership:
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                case APlacedTrap_FieldIndex.FavorCost:
                case APlacedTrap_FieldIndex.Reflections:
                case APlacedTrap_FieldIndex.LinkedReferences:
                case APlacedTrap_FieldIndex.ActivateParents:
                case APlacedTrap_FieldIndex.EnableParent:
                case APlacedTrap_FieldIndex.Emittance:
                case APlacedTrap_FieldIndex.MultiBoundReference:
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                case APlacedTrap_FieldIndex.LocationRefTypes:
                case APlacedTrap_FieldIndex.LocationReference:
                case APlacedTrap_FieldIndex.DistantLodData:
                case APlacedTrap_FieldIndex.Scale:
                case APlacedTrap_FieldIndex.Position:
                case APlacedTrap_FieldIndex.Rotation:
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case APlacedTrap_FieldIndex.EncounterZone:
                    return "EncounterZone";
                case APlacedTrap_FieldIndex.Ownership:
                    return "Ownership";
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return "HeadTrackingWeight";
                case APlacedTrap_FieldIndex.FavorCost:
                    return "FavorCost";
                case APlacedTrap_FieldIndex.Reflections:
                    return "Reflections";
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return "LinkedReferences";
                case APlacedTrap_FieldIndex.ActivateParents:
                    return "ActivateParents";
                case APlacedTrap_FieldIndex.EnableParent:
                    return "EnableParent";
                case APlacedTrap_FieldIndex.Emittance:
                    return "Emittance";
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return "MultiBoundReference";
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return "IgnoredBySandbox";
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return "LocationRefTypes";
                case APlacedTrap_FieldIndex.LocationReference:
                    return "LocationReference";
                case APlacedTrap_FieldIndex.DistantLodData:
                    return "DistantLodData";
                case APlacedTrap_FieldIndex.Scale:
                    return "Scale";
                case APlacedTrap_FieldIndex.Position:
                    return "Position";
                case APlacedTrap_FieldIndex.Rotation:
                    return "Rotation";
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                case APlacedTrap_FieldIndex.EncounterZone:
                case APlacedTrap_FieldIndex.Ownership:
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                case APlacedTrap_FieldIndex.FavorCost:
                case APlacedTrap_FieldIndex.Reflections:
                case APlacedTrap_FieldIndex.LinkedReferences:
                case APlacedTrap_FieldIndex.ActivateParents:
                case APlacedTrap_FieldIndex.EnableParent:
                case APlacedTrap_FieldIndex.Emittance:
                case APlacedTrap_FieldIndex.MultiBoundReference:
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                case APlacedTrap_FieldIndex.LocationRefTypes:
                case APlacedTrap_FieldIndex.LocationReference:
                case APlacedTrap_FieldIndex.DistantLodData:
                case APlacedTrap_FieldIndex.Scale:
                case APlacedTrap_FieldIndex.Position:
                case APlacedTrap_FieldIndex.Rotation:
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                case APlacedTrap_FieldIndex.EncounterZone:
                case APlacedTrap_FieldIndex.Ownership:
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                case APlacedTrap_FieldIndex.FavorCost:
                case APlacedTrap_FieldIndex.Reflections:
                case APlacedTrap_FieldIndex.LinkedReferences:
                case APlacedTrap_FieldIndex.ActivateParents:
                case APlacedTrap_FieldIndex.EnableParent:
                case APlacedTrap_FieldIndex.Emittance:
                case APlacedTrap_FieldIndex.MultiBoundReference:
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                case APlacedTrap_FieldIndex.LocationRefTypes:
                case APlacedTrap_FieldIndex.LocationReference:
                case APlacedTrap_FieldIndex.DistantLodData:
                case APlacedTrap_FieldIndex.Scale:
                case APlacedTrap_FieldIndex.Position:
                case APlacedTrap_FieldIndex.Rotation:
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
            switch (enu)
            {
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return typeof(FormLinkNullable<EncounterZone>);
                case APlacedTrap_FieldIndex.Ownership:
                    return typeof(Ownership);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return typeof(Single);
                case APlacedTrap_FieldIndex.FavorCost:
                    return typeof(Single);
                case APlacedTrap_FieldIndex.Reflections:
                    return typeof(ExtendedList<WaterReflection>);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return typeof(ExtendedList<LinkedReferences>);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return typeof(ActivateParents);
                case APlacedTrap_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case APlacedTrap_FieldIndex.Emittance:
                    return typeof(FormLinkNullable<IEmittance>);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return typeof(FormLinkNullable<PlacedObject>);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return typeof(MemorySlice<Byte>);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return typeof(ExtendedList<IFormLink<LocationReferenceType>>);
                case APlacedTrap_FieldIndex.LocationReference:
                    return typeof(FormLinkNullable<ILocationRecord>);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return typeof(ExtendedList<Single>);
                case APlacedTrap_FieldIndex.Scale:
                    return typeof(Single);
                case APlacedTrap_FieldIndex.Position:
                    return typeof(P3Float);
                case APlacedTrap_FieldIndex.Rotation:
                    return typeof(P3Float);
                case APlacedTrap_FieldIndex.DATADataTypeState:
                    return typeof(APlacedTrap.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(APlacedTrapXmlWriteTranslation);
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.VMAD,
                        RecordTypes.NAME,
                        RecordTypes.XEZN,
                        RecordTypes.XOWN,
                        RecordTypes.XRNK,
                        RecordTypes.XHTW,
                        RecordTypes.XFVC,
                        RecordTypes.XPWR,
                        RecordTypes.XLKR,
                        RecordTypes.XAPD,
                        RecordTypes.XESP,
                        RecordTypes.XEMI,
                        RecordTypes.XMBR,
                        RecordTypes.XIS2,
                        RecordTypes.XLRT,
                        RecordTypes.XLRL,
                        RecordTypes.XLOD,
                        RecordTypes.XSCL,
                        RecordTypes.DATA,
                        RecordTypes.PARW,
                        RecordTypes.PBEA,
                        RecordTypes.PFLA,
                        RecordTypes.PCON,
                        RecordTypes.PBAR,
                        RecordTypes.PGRE,
                        RecordTypes.PHZD,
                        RecordTypes.PMIS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(APlacedTrapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class APlacedTrapSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly APlacedTrapSetterCommon Instance = new APlacedTrapSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPlacedTrapInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.EncounterZone = FormLinkNullable<EncounterZone>.Null;
            item.Ownership = null;
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.Reflections.Clear();
            item.LinkedReferences.Clear();
            item.ActivateParents = null;
            item.EnableParent = null;
            item.Emittance = FormLinkNullable<IEmittance>.Null;
            item.MultiBoundReference = FormLinkNullable<PlacedObject>.Null;
            item.IgnoredBySandbox = default;
            item.LocationRefTypes = null;
            item.LocationReference = FormLinkNullable<ILocationRecord>.Null;
            item.DistantLodData = null;
            item.Scale = default;
            item.Position = default;
            item.Rotation = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAPlacedTrapInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IAPlacedTrapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    APlacedTrapXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (APlacedTrap)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (APlacedTrap)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class APlacedTrapCommon : SkyrimMajorRecordCommon
    {
        public new static readonly APlacedTrapCommon Instance = new APlacedTrapCommon();

        public APlacedTrap.Mask<bool> GetEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APlacedTrap.Mask<bool>(false);
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            APlacedTrap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EncounterZone = object.Equals(item.EncounterZone, rhs.EncounterZone);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.Reflections = item.Reflections.CollectionEqualsHelper(
                rhs.Reflections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Emittance = object.Equals(item.Emittance, rhs.Emittance);
            ret.MultiBoundReference = object.Equals(item.MultiBoundReference, rhs.MultiBoundReference);
            ret.IgnoredBySandbox = MemorySliceExt.Equal(item.IgnoredBySandbox, rhs.IgnoredBySandbox);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.LocationReference = object.Equals(item.LocationReference, rhs.LocationReference);
            ret.DistantLodData = item.DistantLodData.CollectionEqualsHelper(
                rhs.DistantLodData,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAPlacedTrapGetter item,
            FileGeneration fg,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"APlacedTrap =>");
            }
            else
            {
                fg.AppendLine($"{name} (APlacedTrap) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAPlacedTrapGetter item,
            FileGeneration fg,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.EncounterZone ?? true)
                && item.EncounterZone.TryGet(out var EncounterZoneItem))
            {
                fg.AppendItem(EncounterZoneItem, "EncounterZone");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership.TryGet(out var OwnershipItem))
            {
                OwnershipItem?.ToString(fg, "Ownership");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightItem))
            {
                fg.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost.TryGet(out var FavorCostItem))
            {
                fg.AppendItem(FavorCostItem, "FavorCost");
            }
            if (printMask?.Reflections?.Overall ?? true)
            {
                fg.AppendLine("Reflections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Reflections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                fg.AppendLine("LinkedReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ActivateParentsItem?.ToString(fg, "ActivateParents");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if ((printMask?.Emittance ?? true)
                && item.Emittance.TryGet(out var EmittanceItem))
            {
                fg.AppendItem(EmittanceItem, "Emittance");
            }
            if ((printMask?.MultiBoundReference ?? true)
                && item.MultiBoundReference.TryGet(out var MultiBoundReferenceItem))
            {
                fg.AppendItem(MultiBoundReferenceItem, "MultiBoundReference");
            }
            if ((printMask?.IgnoredBySandbox ?? true)
                && item.IgnoredBySandbox.TryGet(out var IgnoredBySandboxItem))
            {
                fg.AppendLine($"IgnoredBySandbox => {SpanExt.ToHexString(IgnoredBySandboxItem)}");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                fg.AppendLine("LocationRefTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.LocationReference ?? true)
                && item.LocationReference.TryGet(out var LocationReferenceItem))
            {
                fg.AppendItem(LocationReferenceItem, "LocationReference");
            }
            if ((printMask?.DistantLodData?.Overall ?? true)
                && item.DistantLodData.TryGet(out var DistantLodDataItem))
            {
                fg.AppendLine("DistantLodData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in DistantLodDataItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendItem(item.Rotation, "Rotation");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IAPlacedTrapGetter item,
            APlacedTrap.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.EncounterZone.HasValue && checkMask.EncounterZone.Value != (item.EncounterZone.FormKey != null)) return false;
            if (checkMask.Ownership?.Overall.HasValue ?? false && checkMask.Ownership.Overall.Value != (item.Ownership != null)) return false;
            if (checkMask.Ownership?.Specific != null && (item.Ownership == null || !item.Ownership.HasBeenSet(checkMask.Ownership.Specific))) return false;
            if (checkMask.HeadTrackingWeight.HasValue && checkMask.HeadTrackingWeight.Value != (item.HeadTrackingWeight != null)) return false;
            if (checkMask.FavorCost.HasValue && checkMask.FavorCost.Value != (item.FavorCost != null)) return false;
            if (checkMask.ActivateParents?.Overall.HasValue ?? false && checkMask.ActivateParents.Overall.Value != (item.ActivateParents != null)) return false;
            if (checkMask.ActivateParents?.Specific != null && (item.ActivateParents == null || !item.ActivateParents.HasBeenSet(checkMask.ActivateParents.Specific))) return false;
            if (checkMask.EnableParent?.Overall.HasValue ?? false && checkMask.EnableParent.Overall.Value != (item.EnableParent != null)) return false;
            if (checkMask.EnableParent?.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.Emittance.HasValue && checkMask.Emittance.Value != (item.Emittance.FormKey != null)) return false;
            if (checkMask.MultiBoundReference.HasValue && checkMask.MultiBoundReference.Value != (item.MultiBoundReference.FormKey != null)) return false;
            if (checkMask.IgnoredBySandbox.HasValue && checkMask.IgnoredBySandbox.Value != (item.IgnoredBySandbox != null)) return false;
            if (checkMask.LocationRefTypes?.Overall.HasValue ?? false && checkMask.LocationRefTypes!.Overall.Value != (item.LocationRefTypes != null)) return false;
            if (checkMask.LocationReference.HasValue && checkMask.LocationReference.Value != (item.LocationReference.FormKey != null)) return false;
            if (checkMask.DistantLodData?.Overall.HasValue ?? false && checkMask.DistantLodData!.Overall.Value != (item.DistantLodData != null)) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != (item.Scale != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAPlacedTrapGetter item,
            APlacedTrap.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.EncounterZone = (item.EncounterZone.FormKey != null);
            var itemOwnership = item.Ownership;
            mask.Ownership = new MaskItem<bool, Ownership.Mask<bool>?>(itemOwnership != null, itemOwnership?.GetHasBeenSetMask());
            mask.HeadTrackingWeight = (item.HeadTrackingWeight != null);
            mask.FavorCost = (item.FavorCost != null);
            var ReflectionsItem = item.Reflections;
            mask.Reflections = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WaterReflection.Mask<bool>?>>?>(true, ReflectionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WaterReflection.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var LinkedReferencesItem = item.LinkedReferences;
            mask.LinkedReferences = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LinkedReferences.Mask<bool>?>>?>(true, LinkedReferencesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, LinkedReferences.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemActivateParents = item.ActivateParents;
            mask.ActivateParents = new MaskItem<bool, ActivateParents.Mask<bool>?>(itemActivateParents != null, itemActivateParents?.GetHasBeenSetMask());
            var itemEnableParent = item.EnableParent;
            mask.EnableParent = new MaskItem<bool, EnableParent.Mask<bool>?>(itemEnableParent != null, itemEnableParent?.GetHasBeenSetMask());
            mask.Emittance = (item.Emittance.FormKey != null);
            mask.MultiBoundReference = (item.MultiBoundReference.FormKey != null);
            mask.IgnoredBySandbox = (item.IgnoredBySandbox != null);
            mask.LocationRefTypes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.LocationRefTypes != null), default);
            mask.LocationReference = (item.LocationReference.FormKey != null);
            mask.DistantLodData = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.DistantLodData != null), default);
            mask.Scale = (item.Scale != null);
            mask.Position = true;
            mask.Rotation = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static APlacedTrap_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new APlacedTrap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!object.Equals(lhs.Ownership, rhs.Ownership)) return false;
            if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            if (!lhs.Reflections.SequenceEqual(rhs.Reflections)) return false;
            if (!lhs.LinkedReferences.SequenceEqual(rhs.LinkedReferences)) return false;
            if (!object.Equals(lhs.ActivateParents, rhs.ActivateParents)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            if (!lhs.MultiBoundReference.Equals(rhs.MultiBoundReference)) return false;
            if (!MemorySliceExt.Equal(lhs.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
            if (!lhs.LocationRefTypes.SequenceEqual(rhs.LocationRefTypes)) return false;
            if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            if (!lhs.DistantLodData.SequenceEqual(rhs.DistantLodData)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter);
        }
        
        public virtual int GetHashCode(IAPlacedTrapGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.EncounterZone.TryGet(out var EncounterZoneitem))
            {
                hash.Add(EncounterZoneitem);
            }
            if (item.Ownership.TryGet(out var Ownershipitem))
            {
                hash.Add(Ownershipitem);
            }
            if (item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightitem))
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost.TryGet(out var FavorCostitem))
            {
                hash.Add(FavorCostitem);
            }
            hash.Add(item.Reflections);
            hash.Add(item.LinkedReferences);
            if (item.ActivateParents.TryGet(out var ActivateParentsitem))
            {
                hash.Add(ActivateParentsitem);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                hash.Add(EnableParentitem);
            }
            if (item.Emittance.TryGet(out var Emittanceitem))
            {
                hash.Add(Emittanceitem);
            }
            if (item.MultiBoundReference.TryGet(out var MultiBoundReferenceitem))
            {
                hash.Add(MultiBoundReferenceitem);
            }
            if (item.IgnoredBySandbox.TryGet(out var IgnoredBySandboxItem))
            {
                hash.Add(IgnoredBySandboxItem);
            }
            hash.Add(item.LocationRefTypes);
            if (item.LocationReference.TryGet(out var LocationReferenceitem))
            {
                hash.Add(LocationReferenceitem);
            }
            hash.Add(item.DistantLodData);
            if (item.Scale.TryGet(out var Scaleitem))
            {
                hash.Add(Scaleitem);
            }
            hash.Add(item.Position);
            hash.Add(item.Rotation);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return APlacedTrap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAPlacedTrapGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EncounterZone.FormKey.TryGet(out var EncounterZoneKey))
            {
                yield return EncounterZoneKey;
            }
            if (obj.Ownership.TryGet(out var OwnershipItems))
            {
                foreach (var item in OwnershipItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Reflections.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.ActivateParents.TryGet(out var ActivateParentsItems))
            {
                foreach (var item in ActivateParentsItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EnableParent.TryGet(out var EnableParentItems))
            {
                foreach (var item in EnableParentItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Emittance.FormKey.TryGet(out var EmittanceKey))
            {
                yield return EmittanceKey;
            }
            if (obj.MultiBoundReference.FormKey.TryGet(out var MultiBoundReferenceKey))
            {
                yield return MultiBoundReferenceKey;
            }
            if (obj.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                foreach (var item in LocationRefTypesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.LocationReference.FormKey.TryGet(out var LocationReferenceKey))
            {
                yield return LocationReferenceKey;
            }
            yield break;
        }
        
        public void RemapLinks(IAPlacedTrapGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(APlacedTrap obj, APlacedTrap rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class APlacedTrapSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly APlacedTrapSetterTranslationCommon Instance = new APlacedTrapSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public virtual void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = rhs.EncounterZone.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership.TryGet(out var rhsOwnership))
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Reflections) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Reflections);
                try
                {
                    item.Reflections.SetTo(
                        rhs.Reflections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents.TryGet(out var rhsActivateParents))
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Emittance) ?? true))
            {
                item.Emittance = rhs.Emittance.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.MultiBoundReference) ?? true))
            {
                item.MultiBoundReference = rhs.MultiBoundReference.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.IgnoredBySandbox) ?? true))
            {
                if(rhs.IgnoredBySandbox.TryGet(out var IgnoredBySandboxrhs))
                {
                    item.IgnoredBySandbox = IgnoredBySandboxrhs.ToArray();
                }
                else
                {
                    item.IgnoredBySandbox = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                            .Select(r => (IFormLink<LocationReferenceType>)new FormLink<LocationReferenceType>(r.FormKey))
                            .ToExtendedList<IFormLink<LocationReferenceType>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference = rhs.LocationReference.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DistantLodData) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.DistantLodData);
                try
                {
                    if ((rhs.DistantLodData != null))
                    {
                        item.DistantLodData = 
                            rhs.DistantLodData
                            .ToExtendedList<Single>();
                    }
                    else
                    {
                        item.DistantLodData = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class APlacedTrap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static APlacedTrap_Registration Registration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return APlacedTrapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APlacedTrapXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static APlacedTrapXmlWriteTranslation Instance = new APlacedTrapXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAPlacedTrapGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)APlacedTrap_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((item.EncounterZone.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EncounterZone) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EncounterZone),
                    item: item.EncounterZone.FormKey,
                    fieldIndex: (int)APlacedTrap_FieldIndex.EncounterZone,
                    errorMask: errorMask);
            }
            if ((item.Ownership != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Ownership) ?? true))
            {
                if (item.Ownership.TryGet(out var OwnershipItem))
                {
                    ((OwnershipXmlWriteTranslation)((IXmlItem)OwnershipItem).XmlWriteTranslator).Write(
                        item: OwnershipItem,
                        node: node,
                        name: nameof(item.Ownership),
                        fieldIndex: (int)APlacedTrap_FieldIndex.Ownership,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Ownership));
                }
            }
            if ((item.HeadTrackingWeight != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.HeadTrackingWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HeadTrackingWeight),
                    item: item.HeadTrackingWeight.Value,
                    fieldIndex: (int)APlacedTrap_FieldIndex.HeadTrackingWeight,
                    errorMask: errorMask);
            }
            if ((item.FavorCost != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FavorCost) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FavorCost),
                    item: item.FavorCost.Value,
                    fieldIndex: (int)APlacedTrap_FieldIndex.FavorCost,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Reflections) ?? true))
            {
                ListXmlTranslation<IWaterReflectionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Reflections),
                    item: item.Reflections,
                    fieldIndex: (int)APlacedTrap_FieldIndex.Reflections,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Reflections),
                    transl: (XElement subNode, IWaterReflectionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WaterReflectionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LinkedReferences) ?? true))
            {
                ListXmlTranslation<ILinkedReferencesGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.LinkedReferences),
                    item: item.LinkedReferences,
                    fieldIndex: (int)APlacedTrap_FieldIndex.LinkedReferences,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.LinkedReferences),
                    transl: (XElement subNode, ILinkedReferencesGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((LinkedReferencesXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.ActivateParents != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.ActivateParents) ?? true))
            {
                if (item.ActivateParents.TryGet(out var ActivateParentsItem))
                {
                    ((ActivateParentsXmlWriteTranslation)((IXmlItem)ActivateParentsItem).XmlWriteTranslator).Write(
                        item: ActivateParentsItem,
                        node: node,
                        name: nameof(item.ActivateParents),
                        fieldIndex: (int)APlacedTrap_FieldIndex.ActivateParents,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents));
                }
            }
            if ((item.EnableParent != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EnableParent) ?? true))
            {
                if (item.EnableParent.TryGet(out var EnableParentItem))
                {
                    ((EnableParentXmlWriteTranslation)((IXmlItem)EnableParentItem).XmlWriteTranslator).Write(
                        item: EnableParentItem,
                        node: node,
                        name: nameof(item.EnableParent),
                        fieldIndex: (int)APlacedTrap_FieldIndex.EnableParent,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent));
                }
            }
            if ((item.Emittance.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Emittance) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Emittance),
                    item: item.Emittance.FormKey,
                    fieldIndex: (int)APlacedTrap_FieldIndex.Emittance,
                    errorMask: errorMask);
            }
            if ((item.MultiBoundReference.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.MultiBoundReference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MultiBoundReference),
                    item: item.MultiBoundReference.FormKey,
                    fieldIndex: (int)APlacedTrap_FieldIndex.MultiBoundReference,
                    errorMask: errorMask);
            }
            if ((item.IgnoredBySandbox != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.IgnoredBySandbox) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IgnoredBySandbox),
                    item: item.IgnoredBySandbox.Value,
                    fieldIndex: (int)APlacedTrap_FieldIndex.IgnoredBySandbox,
                    errorMask: errorMask);
            }
            if ((item.LocationRefTypes != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationRefTypes) ?? true))
            {
                ListXmlTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.LocationRefTypes),
                    item: item.LocationRefTypes,
                    fieldIndex: (int)APlacedTrap_FieldIndex.LocationRefTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.LocationRefTypes),
                    transl: (XElement subNode, IFormLink<ILocationReferenceTypeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.LocationReference.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationReference) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LocationReference),
                    item: item.LocationReference.FormKey,
                    fieldIndex: (int)APlacedTrap_FieldIndex.LocationReference,
                    errorMask: errorMask);
            }
            if ((item.DistantLodData != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DistantLodData) ?? true))
            {
                ListXmlTranslation<Single>.Instance.Write(
                    node: node,
                    name: nameof(item.DistantLodData),
                    item: item.DistantLodData,
                    fieldIndex: (int)APlacedTrap_FieldIndex.DistantLodData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.DistantLodData),
                    transl: (XElement subNode, Single subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Scale != null)
                && (translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale.Value,
                    fieldIndex: (int)APlacedTrap_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Position) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Position),
                    item: item.Position,
                    fieldIndex: (int)APlacedTrap_FieldIndex.Position,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Rotation) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Rotation),
                    item: item.Rotation,
                    fieldIndex: (int)APlacedTrap_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<APlacedTrap.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)APlacedTrap_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.APlacedTrap");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.APlacedTrap");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class APlacedTrapXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static APlacedTrapXmlCreateTranslation Instance = new APlacedTrapXmlCreateTranslation();

        public static void FillPublicXml(
            IAPlacedTrapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    APlacedTrapXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAPlacedTrapInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EncounterZone":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.EncounterZone);
                    try
                    {
                        item.EncounterZone = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ownership":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Ownership);
                    try
                    {
                        item.Ownership = LoquiXmlTranslation<Ownership>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Ownership));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeadTrackingWeight":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.HeadTrackingWeight);
                    try
                    {
                        item.HeadTrackingWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FavorCost":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.FavorCost);
                    try
                    {
                        item.FavorCost = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Reflections":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Reflections);
                    try
                    {
                        if (ListXmlTranslation<WaterReflection>.Instance.Parse(
                            node: node,
                            enumer: out var ReflectionsItem,
                            transl: LoquiXmlTranslation<WaterReflection>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Reflections.SetTo(ReflectionsItem);
                        }
                        else
                        {
                            item.Reflections.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkedReferences":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LinkedReferences);
                    try
                    {
                        if (ListXmlTranslation<LinkedReferences>.Instance.Parse(
                            node: node,
                            enumer: out var LinkedReferencesItem,
                            transl: LoquiXmlTranslation<LinkedReferences>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LinkedReferences.SetTo(LinkedReferencesItem);
                        }
                        else
                        {
                            item.LinkedReferences.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActivateParents":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.ActivateParents);
                    try
                    {
                        item.ActivateParents = LoquiXmlTranslation<ActivateParents>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.EnableParent);
                    try
                    {
                        item.EnableParent = LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Emittance":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Emittance);
                    try
                    {
                        item.Emittance = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MultiBoundReference":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.MultiBoundReference);
                    try
                    {
                        item.MultiBoundReference = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IgnoredBySandbox":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.IgnoredBySandbox);
                    try
                    {
                        item.IgnoredBySandbox = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocationRefTypes":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LocationRefTypes);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<LocationReferenceType>>.Instance.Parse(
                            node: node,
                            enumer: out var LocationRefTypesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LocationRefTypes = LocationRefTypesItem.ToExtendedList();
                        }
                        else
                        {
                            item.LocationRefTypes = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocationReference":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LocationReference);
                    try
                    {
                        item.LocationReference = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLodData":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.DistantLodData);
                    try
                    {
                        if (ListXmlTranslation<Single>.Instance.Parse(
                            node: node,
                            enumer: out var DistantLodDataItem,
                            transl: FloatXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.DistantLodData = DistantLodDataItem.ToExtendedList();
                        }
                        else
                        {
                            item.DistantLodData = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Scale);
                    try
                    {
                        item.Scale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Position);
                    try
                    {
                        item.Position = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rotation":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Rotation);
                    try
                    {
                        item.Rotation = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)APlacedTrap_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<APlacedTrap.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class APlacedTrapXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAPlacedTrapGetter item,
            XElement node,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((APlacedTrapXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAPlacedTrapGetter item,
            string path,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAPlacedTrapGetter item,
            Stream stream,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APlacedTrapBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static APlacedTrapBinaryWriteTranslation Instance = new APlacedTrapBinaryWriteTranslation();

        static partial void WriteBinaryTrapFormCustom(
            MutagenWriter writer,
            IAPlacedTrapGetter item);

        public static void WriteBinaryTrapForm(
            MutagenWriter writer,
            IAPlacedTrapGetter item)
        {
            WriteBinaryTrapFormCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAPlacedTrapGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IAPlacedTrapGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            APlacedTrapBinaryWriteTranslation.WriteBinaryTrapForm(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            if (item.Ownership.TryGet(out var OwnershipItem))
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHTW));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XFVC));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWaterReflectionGetter>.Instance.Write(
                writer: writer,
                items: item.Reflections,
                transl: (MutagenWriter subWriter, IWaterReflectionGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WaterReflectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEMI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiBoundReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.IgnoredBySandbox,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XIS2));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLink<ILocationReferenceTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLRL));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.DistantLodData,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLOD),
                transl: FloatBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XSCL));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Position);
                Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Rotation);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class APlacedTrapBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static APlacedTrapBinaryCreateTranslation Instance = new APlacedTrapBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static void FillBinaryStructs(
            IAPlacedTrapInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                }
                case RecordTypeInts.NAME:
                {
                    APlacedTrapBinaryCreateTranslation.FillBinaryTrapFormCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.EncounterZone);
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    item.Ownership = Mutagen.Bethesda.Skyrim.Ownership.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Ownership);
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.HeadTrackingWeight);
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.FavorCost);
                }
                case RecordTypeInts.XPWR:
                {
                    item.Reflections.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WaterReflection>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XPWR,
                            recordTypeConverter: recordTypeConverter,
                            transl: WaterReflection.TryCreateFromBinary));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Reflections);
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XLKR,
                            recordTypeConverter: recordTypeConverter,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LinkedReferences);
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Skyrim.ActivateParents.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.ActivateParents);
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Skyrim.EnableParent.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.EnableParent);
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Emittance);
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiBoundReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.MultiBoundReference);
                }
                case RecordTypeInts.XIS2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IgnoredBySandbox = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.IgnoredBySandbox);
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<LocationReferenceType>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<LocationReferenceType>>();
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LocationRefTypes);
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LocationReference);
                }
                case RecordTypeInts.XLOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodData = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FloatBinaryTranslation.Instance.Parse)
                        .ToExtendedList<Single>();
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.DistantLodData);
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Scale);
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Position = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Rotation = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Rotation);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryTrapFormCustom(
            MutagenFrame frame,
            IAPlacedTrapInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class APlacedTrapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class APlacedTrapBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAPlacedTrapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static APlacedTrap_Registration Registration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAPlacedTrapGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => APlacedTrapCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => APlacedTrapCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => APlacedTrapXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((APlacedTrapXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public APlacedTrap.MajorFlag MajorFlags => (APlacedTrap.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region TrapForm
        partial void TrapFormCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public bool EncounterZone_IsSet => _EncounterZoneLocation.HasValue;
        public IFormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FavorCostLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        public IReadOnlyList<IWaterReflectionGetter> Reflections { get; private set; } = ListExt.Empty<WaterReflectionBinaryOverlay>();
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = ListExt.Empty<LinkedReferencesBinaryOverlay>();
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(new OverlayStream(_data.Slice(_EnableParentLocation!.Value.Min), _package), _package) : default;
        public bool EnableParent_IsSet => _EnableParentLocation.HasValue;
        #endregion
        #region Emittance
        private int? _EmittanceLocation;
        public bool Emittance_IsSet => _EmittanceLocation.HasValue;
        public IFormLinkNullable<IEmittanceGetter> Emittance => _EmittanceLocation.HasValue ? new FormLinkNullable<IEmittanceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EmittanceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEmittanceGetter>.Null;
        #endregion
        #region MultiBoundReference
        private int? _MultiBoundReferenceLocation;
        public bool MultiBoundReference_IsSet => _MultiBoundReferenceLocation.HasValue;
        public IFormLinkNullable<IPlacedObjectGetter> MultiBoundReference => _MultiBoundReferenceLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MultiBoundReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region IgnoredBySandbox
        private int? _IgnoredBySandboxLocation;
        public ReadOnlyMemorySlice<Byte>? IgnoredBySandbox => _IgnoredBySandboxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _IgnoredBySandboxLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region LocationReference
        private int? _LocationReferenceLocation;
        public bool LocationReference_IsSet => _LocationReferenceLocation.HasValue;
        public IFormLinkNullable<ILocationRecordGetter> LocationReference => _LocationReferenceLocation.HasValue ? new FormLinkNullable<ILocationRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _LocationReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationRecordGetter>.Null;
        #endregion
        public IReadOnlyList<Single>? DistantLodData { get; private set; }
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        private int? _DATALocation;
        public APlacedTrap.DATADataType DATADataTypeState { get; private set; }
        #region Position
        private int _PositionLocation => _DATALocation!.Value;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation.Read(_data.Slice(_PositionLocation, 12)) : default;
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation!.Value + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation.Read(_data.Slice(_RotationLocation, 12)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APlacedTrapBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override TryGet<int?> FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                }
                case RecordTypeInts.NAME:
                {
                    TrapFormCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.EncounterZone);
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Ownership);
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.HeadTrackingWeight);
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.FavorCost);
                }
                case RecordTypeInts.XPWR:
                {
                    this.Reflections = BinaryOverlayList<WaterReflectionBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WaterReflectionBinaryOverlay.WaterReflectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Reflections);
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList<LinkedReferencesBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LinkedReferences);
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.ActivateParents);
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.EnableParent);
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Emittance);
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiBoundReferenceLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.MultiBoundReference);
                }
                case RecordTypeInts.XIS2:
                {
                    _IgnoredBySandboxLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.IgnoredBySandbox);
                }
                case RecordTypeInts.XLRT:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.LocationRefTypes = BinaryOverlayList<IFormLink<ILocationReferenceTypeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ILocationReferenceTypeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LocationRefTypes);
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.LocationReference);
                }
                case RecordTypeInts.XLOD:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.DistantLodData = BinaryOverlayList<Single>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => SpanExt.GetFloat(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.DistantLodData);
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Scale);
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)APlacedTrap_FieldIndex.Rotation);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APlacedTrapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

