/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AddonNode :
        SkyrimMajorRecord,
        IAddonNodeInternal,
        ILoquiObjectSetter<AddonNode>,
        IEquatable<AddonNode>,
        IEqualsMask
    {
        #region Ctor
        protected AddonNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IAddonNodeGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAddonNodeGetter.Model => this.Model;
        #endregion
        #region NodeIndex
        public Int32 NodeIndex { get; set; } = default;
        #endregion
        #region Sound
        public FormLinkNullable<SoundDescriptor> Sound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundDescriptorGetter> IAddonNodeGetter.Sound => this.Sound;
        #endregion
        #region MasterParticleSystemCap
        public UInt16 MasterParticleSystemCap { get; set; } = default;
        #endregion
        #region AlwaysLoaded
        public Boolean AlwaysLoaded { get; set; } = default;
        #endregion
        #region DNAMDataTypeState
        public AddonNode.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AddonNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAddonNodeGetter rhs)) return false;
            return ((AddonNodeCommon)((IAddonNodeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AddonNode obj)
        {
            return ((AddonNodeCommon)((IAddonNodeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AddonNodeCommon)((IAddonNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AddonNodeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AddonNodeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new AddonNode CreateFromXml(
            XElement node,
            AddonNode.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AddonNode CreateFromXml(
            XElement node,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AddonNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AddonNode CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AddonNode();
            ((AddonNodeSetterCommon)((IAddonNodeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AddonNode CreateFromXml(
            string path,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AddonNode CreateFromXml(
            string path,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AddonNode CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AddonNode CreateFromXml(
            Stream stream,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AddonNode CreateFromXml(
            Stream stream,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AddonNode CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.NodeIndex = initialValue;
                this.Sound = initialValue;
                this.MasterParticleSystemCap = initialValue;
                this.AlwaysLoaded = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Model,
                TItem NodeIndex,
                TItem Sound,
                TItem MasterParticleSystemCap,
                TItem AlwaysLoaded,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.NodeIndex = NodeIndex;
                this.Sound = Sound;
                this.MasterParticleSystemCap = MasterParticleSystemCap;
                this.AlwaysLoaded = AlwaysLoaded;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem NodeIndex;
            public TItem Sound;
            public TItem MasterParticleSystemCap;
            public TItem AlwaysLoaded;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.NodeIndex, rhs.NodeIndex)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.MasterParticleSystemCap, rhs.MasterParticleSystemCap)) return false;
                if (!object.Equals(this.AlwaysLoaded, rhs.AlwaysLoaded)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.NodeIndex);
                hash.Add(this.Sound);
                hash.Add(this.MasterParticleSystemCap);
                hash.Add(this.AlwaysLoaded);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.NodeIndex)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.MasterParticleSystemCap)) return false;
                if (!eval(this.AlwaysLoaded)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.NodeIndex)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.MasterParticleSystemCap)) return true;
                if (eval(this.AlwaysLoaded)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AddonNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.NodeIndex = eval(this.NodeIndex);
                obj.Sound = eval(this.Sound);
                obj.MasterParticleSystemCap = eval(this.MasterParticleSystemCap);
                obj.AlwaysLoaded = eval(this.AlwaysLoaded);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AddonNode.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AddonNode.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AddonNode.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.NodeIndex ?? true)
                    {
                        fg.AppendItem(NodeIndex, "NodeIndex");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.MasterParticleSystemCap ?? true)
                    {
                        fg.AppendItem(MasterParticleSystemCap, "MasterParticleSystemCap");
                    }
                    if (printMask?.AlwaysLoaded ?? true)
                    {
                        fg.AppendItem(AlwaysLoaded, "AlwaysLoaded");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? NodeIndex;
            public Exception? Sound;
            public Exception? MasterParticleSystemCap;
            public Exception? AlwaysLoaded;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
                switch (enu)
                {
                    case AddonNode_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case AddonNode_FieldIndex.Model:
                        return Model;
                    case AddonNode_FieldIndex.NodeIndex:
                        return NodeIndex;
                    case AddonNode_FieldIndex.Sound:
                        return Sound;
                    case AddonNode_FieldIndex.MasterParticleSystemCap:
                        return MasterParticleSystemCap;
                    case AddonNode_FieldIndex.AlwaysLoaded:
                        return AlwaysLoaded;
                    case AddonNode_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
                switch (enu)
                {
                    case AddonNode_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case AddonNode_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AddonNode_FieldIndex.NodeIndex:
                        this.NodeIndex = ex;
                        break;
                    case AddonNode_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case AddonNode_FieldIndex.MasterParticleSystemCap:
                        this.MasterParticleSystemCap = ex;
                        break;
                    case AddonNode_FieldIndex.AlwaysLoaded:
                        this.AlwaysLoaded = ex;
                        break;
                    case AddonNode_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
                switch (enu)
                {
                    case AddonNode_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case AddonNode_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AddonNode_FieldIndex.NodeIndex:
                        this.NodeIndex = (Exception?)obj;
                        break;
                    case AddonNode_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case AddonNode_FieldIndex.MasterParticleSystemCap:
                        this.MasterParticleSystemCap = (Exception?)obj;
                        break;
                    case AddonNode_FieldIndex.AlwaysLoaded:
                        this.AlwaysLoaded = (Exception?)obj;
                        break;
                    case AddonNode_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (NodeIndex != null) return true;
                if (Sound != null) return true;
                if (MasterParticleSystemCap != null) return true;
                if (AlwaysLoaded != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                fg.AppendItem(NodeIndex, "NodeIndex");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(MasterParticleSystemCap, "MasterParticleSystemCap");
                fg.AppendItem(AlwaysLoaded, "AlwaysLoaded");
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.NodeIndex = this.NodeIndex.Combine(rhs.NodeIndex);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.MasterParticleSystemCap = this.MasterParticleSystemCap.Combine(rhs.MasterParticleSystemCap);
                ret.AlwaysLoaded = this.AlwaysLoaded.Combine(rhs.AlwaysLoaded);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool NodeIndex;
            public bool Sound;
            public bool MasterParticleSystemCap;
            public bool AlwaysLoaded;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.NodeIndex = defaultOn;
                this.Sound = defaultOn;
                this.MasterParticleSystemCap = defaultOn;
                this.AlwaysLoaded = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((NodeIndex, null));
                ret.Add((Sound, null));
                ret.Add((MasterParticleSystemCap, null));
                ret.Add((AlwaysLoaded, null));
                ret.Add((DNAMDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = AddonNode_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AddonNodeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => AddonNodeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AddonNodeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AddonNodeCommon.Instance.RemapLinks(this, mapping);
        public AddonNode(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AddonNode(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AddonNode(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AddonNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AddonNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new AddonNode CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static AddonNode CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AddonNode();
            ((AddonNodeSetterCommon)((IAddonNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAddonNodeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AddonNodeSetterCommon)((IAddonNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AddonNode GetNew()
        {
            return new AddonNode();
        }

    }
    #endregion

    #region Interface
    public partial interface IAddonNode :
        IAddonNodeGetter,
        ISkyrimMajorRecord,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<IAddonNodeInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new Int32 NodeIndex { get; set; }
        new FormLinkNullable<SoundDescriptor> Sound { get; set; }
        new UInt16 MasterParticleSystemCap { get; set; }
        new Boolean AlwaysLoaded { get; set; }
        new AddonNode.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IAddonNodeInternal :
        ISkyrimMajorRecordInternal,
        IAddonNode,
        IAddonNodeGetter
    {
    }

    public partial interface IAddonNodeGetter :
        ISkyrimMajorRecordGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<IAddonNodeGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => AddonNode_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        Int32 NodeIndex { get; }
        IFormLinkNullable<ISoundDescriptorGetter> Sound { get; }
        UInt16 MasterParticleSystemCap { get; }
        Boolean AlwaysLoaded { get; }
        AddonNode.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AddonNodeMixIn
    {
        public static void Clear(this IAddonNodeInternal item)
        {
            ((AddonNodeSetterCommon)((IAddonNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AddonNode.Mask<bool> GetEqualsMask(
            this IAddonNodeGetter item,
            IAddonNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAddonNodeGetter item,
            string? name = null,
            AddonNode.Mask<bool>? printMask = null)
        {
            return ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAddonNodeGetter item,
            FileGeneration fg,
            string? name = null,
            AddonNode.Mask<bool>? printMask = null)
        {
            ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAddonNodeGetter item,
            AddonNode.Mask<bool?> checkMask)
        {
            return ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AddonNode.Mask<bool> GetHasBeenSetMask(this IAddonNodeGetter item)
        {
            var ret = new AddonNode.Mask<bool>(false);
            ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAddonNodeGetter item,
            IAddonNodeGetter rhs)
        {
            return ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAddonNodeInternal lhs,
            IAddonNodeGetter rhs,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AddonNodeSetterTranslationCommon)((IAddonNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AddonNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAddonNodeInternal lhs,
            IAddonNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AddonNodeSetterTranslationCommon)((IAddonNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AddonNode DeepCopy(
            this IAddonNodeGetter item,
            AddonNode.TranslationMask? copyMask = null)
        {
            return ((AddonNodeSetterTranslationCommon)((IAddonNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AddonNode DeepCopy(
            this IAddonNodeGetter item,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? copyMask = null)
        {
            return ((AddonNodeSetterTranslationCommon)((IAddonNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AddonNode DeepCopy(
            this IAddonNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AddonNodeSetterTranslationCommon)((IAddonNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            XElement node,
            AddonNode.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            XElement node,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AddonNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AddonNodeSetterCommon)((IAddonNodeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            string path,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            string path,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            Stream stream,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            Stream stream,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAddonNodeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AddonNode.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAddonNodeInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAddonNodeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AddonNodeSetterCommon)((IAddonNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AddonNode_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Model = 7,
        NodeIndex = 8,
        Sound = 9,
        MasterParticleSystemCap = 10,
        AlwaysLoaded = 11,
        DNAMDataTypeState = 12,
    }
    #endregion

    #region Registration
    public partial class AddonNode_Registration : ILoquiRegistration
    {
        public static readonly AddonNode_Registration Instance = new AddonNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 433,
            version: 0);

        public const string GUID = "accc5d3b-3755-4b84-9898-244c0613d575";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(AddonNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AddonNode.ErrorMask);

        public static readonly Type ClassType = typeof(AddonNode);

        public static readonly Type GetterType = typeof(IAddonNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAddonNode);

        public static readonly Type? InternalSetterType = typeof(IAddonNodeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.AddonNode";

        public const string Name = "AddonNode";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)AddonNode_FieldIndex.ObjectBounds;
                case "MODEL":
                    return (ushort)AddonNode_FieldIndex.Model;
                case "NODEINDEX":
                    return (ushort)AddonNode_FieldIndex.NodeIndex;
                case "SOUND":
                    return (ushort)AddonNode_FieldIndex.Sound;
                case "MASTERPARTICLESYSTEMCAP":
                    return (ushort)AddonNode_FieldIndex.MasterParticleSystemCap;
                case "ALWAYSLOADED":
                    return (ushort)AddonNode_FieldIndex.AlwaysLoaded;
                case "DNAMDATATYPESTATE":
                    return (ushort)AddonNode_FieldIndex.DNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                case AddonNode_FieldIndex.Model:
                case AddonNode_FieldIndex.NodeIndex:
                case AddonNode_FieldIndex.Sound:
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                case AddonNode_FieldIndex.AlwaysLoaded:
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                case AddonNode_FieldIndex.Model:
                    return true;
                case AddonNode_FieldIndex.NodeIndex:
                case AddonNode_FieldIndex.Sound:
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                case AddonNode_FieldIndex.AlwaysLoaded:
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                case AddonNode_FieldIndex.Model:
                case AddonNode_FieldIndex.NodeIndex:
                case AddonNode_FieldIndex.Sound:
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                case AddonNode_FieldIndex.AlwaysLoaded:
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case AddonNode_FieldIndex.Model:
                    return "Model";
                case AddonNode_FieldIndex.NodeIndex:
                    return "NodeIndex";
                case AddonNode_FieldIndex.Sound:
                    return "Sound";
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                    return "MasterParticleSystemCap";
                case AddonNode_FieldIndex.AlwaysLoaded:
                    return "AlwaysLoaded";
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return "DNAMDataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                case AddonNode_FieldIndex.Model:
                case AddonNode_FieldIndex.NodeIndex:
                case AddonNode_FieldIndex.Sound:
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                case AddonNode_FieldIndex.AlwaysLoaded:
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                case AddonNode_FieldIndex.Model:
                case AddonNode_FieldIndex.NodeIndex:
                case AddonNode_FieldIndex.Sound:
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                case AddonNode_FieldIndex.AlwaysLoaded:
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AddonNode_FieldIndex enu = (AddonNode_FieldIndex)index;
            switch (enu)
            {
                case AddonNode_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case AddonNode_FieldIndex.Model:
                    return typeof(Model);
                case AddonNode_FieldIndex.NodeIndex:
                    return typeof(Int32);
                case AddonNode_FieldIndex.Sound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case AddonNode_FieldIndex.MasterParticleSystemCap:
                    return typeof(UInt16);
                case AddonNode_FieldIndex.AlwaysLoaded:
                    return typeof(Boolean);
                case AddonNode_FieldIndex.DNAMDataTypeState:
                    return typeof(AddonNode.DNAMDataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AddonNodeXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.ADDN;
        public static readonly Type BinaryWriteTranslation = typeof(AddonNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AddonNodeSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly AddonNodeSetterCommon Instance = new AddonNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAddonNodeInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Model = null;
            item.NodeIndex = default;
            item.Sound = FormLinkNullable<SoundDescriptor>.Null;
            item.MasterParticleSystemCap = default;
            item.AlwaysLoaded = default;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAddonNodeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAddonNodeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAddonNodeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IAddonNodeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AddonNodeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AddonNode)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AddonNode)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAddonNodeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IAddonNodeInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: AddonNodeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AddonNodeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AddonNode)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AddonNode)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class AddonNodeCommon : SkyrimMajorRecordCommon
    {
        public new static readonly AddonNodeCommon Instance = new AddonNodeCommon();

        public AddonNode.Mask<bool> GetEqualsMask(
            IAddonNodeGetter item,
            IAddonNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AddonNode.Mask<bool>(false);
            ((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAddonNodeGetter item,
            IAddonNodeGetter rhs,
            AddonNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NodeIndex = item.NodeIndex == rhs.NodeIndex;
            ret.Sound = object.Equals(item.Sound, rhs.Sound);
            ret.MasterParticleSystemCap = item.MasterParticleSystemCap == rhs.MasterParticleSystemCap;
            ret.AlwaysLoaded = item.AlwaysLoaded == rhs.AlwaysLoaded;
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAddonNodeGetter item,
            string? name = null,
            AddonNode.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAddonNodeGetter item,
            FileGeneration fg,
            string? name = null,
            AddonNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AddonNode =>");
            }
            else
            {
                fg.AppendLine($"{name} (AddonNode) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAddonNodeGetter item,
            FileGeneration fg,
            AddonNode.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.NodeIndex ?? true)
            {
                fg.AppendItem(item.NodeIndex, "NodeIndex");
            }
            if ((printMask?.Sound ?? true)
                && item.Sound.TryGet(out var SoundItem))
            {
                fg.AppendItem(SoundItem, "Sound");
            }
            if (printMask?.MasterParticleSystemCap ?? true)
            {
                fg.AppendItem(item.MasterParticleSystemCap, "MasterParticleSystemCap");
            }
            if (printMask?.AlwaysLoaded ?? true)
            {
                fg.AppendItem(item.AlwaysLoaded, "AlwaysLoaded");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IAddonNodeGetter item,
            AddonNode.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != (item.Sound.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAddonNodeGetter item,
            AddonNode.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.NodeIndex = true;
            mask.Sound = (item.Sound.FormKey != null);
            mask.MasterParticleSystemCap = true;
            mask.AlwaysLoaded = true;
            mask.DNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AddonNode_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AddonNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (AddonNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (AddonNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (AddonNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (AddonNode_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (AddonNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AddonNode_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AddonNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AddonNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AddonNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AddonNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAddonNodeGetter? lhs,
            IAddonNodeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.NodeIndex != rhs.NodeIndex) return false;
            if (!lhs.Sound.Equals(rhs.Sound)) return false;
            if (lhs.MasterParticleSystemCap != rhs.MasterParticleSystemCap) return false;
            if (lhs.AlwaysLoaded != rhs.AlwaysLoaded) return false;
            if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAddonNodeGetter?)lhs,
                rhs: rhs as IAddonNodeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAddonNodeGetter?)lhs,
                rhs: rhs as IAddonNodeGetter);
        }
        
        public virtual int GetHashCode(IAddonNodeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.NodeIndex);
            if (item.Sound.TryGet(out var Sounditem))
            {
                hash.Add(Sounditem);
            }
            hash.Add(item.MasterParticleSystemCap);
            hash.Add(item.AlwaysLoaded);
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAddonNodeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAddonNodeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AddonNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAddonNodeGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Sound.FormKey.TryGet(out var SoundKey))
            {
                yield return SoundKey;
            }
            yield break;
        }
        
        public void RemapLinks(IAddonNodeGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(AddonNode obj, AddonNode rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new AddonNode(getNextFormKey());
            ret.DeepCopyIn((AddonNode)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (AddonNode)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class AddonNodeSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly AddonNodeSetterTranslationCommon Instance = new AddonNodeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAddonNodeInternal item,
            IAddonNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IAddonNode item,
            IAddonNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)AddonNode_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AddonNode_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)AddonNode_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AddonNode_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.NodeIndex) ?? true))
            {
                item.NodeIndex = rhs.NodeIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.Sound) ?? true))
            {
                item.Sound = rhs.Sound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.MasterParticleSystemCap) ?? true))
            {
                item.MasterParticleSystemCap = rhs.MasterParticleSystemCap;
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.AlwaysLoaded) ?? true))
            {
                item.AlwaysLoaded = rhs.AlwaysLoaded;
            }
            if ((copyMask?.GetShouldTranslate((int)AddonNode_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAddonNodeInternal)item,
                rhs: (IAddonNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAddonNode)item,
                rhs: (IAddonNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAddonNodeInternal)item,
                rhs: (IAddonNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAddonNode)item,
                rhs: (IAddonNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public AddonNode DeepCopy(
            IAddonNodeGetter item,
            AddonNode.TranslationMask? copyMask = null)
        {
            AddonNode ret = (AddonNode)((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AddonNode DeepCopy(
            IAddonNodeGetter item,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? copyMask = null)
        {
            AddonNode ret = (AddonNode)((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AddonNode DeepCopy(
            IAddonNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AddonNode ret = (AddonNode)((AddonNodeCommon)((IAddonNodeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AddonNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AddonNode_Registration.Instance;
        public new static AddonNode_Registration Registration => AddonNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AddonNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AddonNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AddonNodeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AddonNodeXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AddonNodeXmlWriteTranslation Instance = new AddonNodeXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAddonNodeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)AddonNode_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AddonNode_FieldIndex.ObjectBounds));
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)AddonNode_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AddonNode_FieldIndex.Model));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.NodeIndex) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NodeIndex),
                    item: item.NodeIndex,
                    fieldIndex: (int)AddonNode_FieldIndex.NodeIndex,
                    errorMask: errorMask);
            }
            if ((item.Sound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound.FormKey,
                    fieldIndex: (int)AddonNode_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.MasterParticleSystemCap) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MasterParticleSystemCap),
                    item: item.MasterParticleSystemCap,
                    fieldIndex: (int)AddonNode_FieldIndex.MasterParticleSystemCap,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.AlwaysLoaded) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AlwaysLoaded),
                    item: item.AlwaysLoaded,
                    fieldIndex: (int)AddonNode_FieldIndex.AlwaysLoaded,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AddonNode_FieldIndex.DNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<AddonNode.DNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DNAMDataTypeState),
                    item: item.DNAMDataTypeState,
                    fieldIndex: (int)AddonNode_FieldIndex.DNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAddonNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.AddonNode");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.AddonNode");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AddonNodeXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static AddonNodeXmlCreateTranslation Instance = new AddonNodeXmlCreateTranslation();

        public static void FillPublicXml(
            IAddonNodeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AddonNodeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAddonNodeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AddonNode_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AddonNode_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NodeIndex":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.NodeIndex);
                    try
                    {
                        item.NodeIndex = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.Sound);
                    try
                    {
                        item.Sound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterParticleSystemCap":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.MasterParticleSystemCap);
                    try
                    {
                        item.MasterParticleSystemCap = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlwaysLoaded":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.AlwaysLoaded);
                    try
                    {
                        item.AlwaysLoaded = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DNAMDataTypeState":
                    errorMask?.PushIndex((int)AddonNode_FieldIndex.DNAMDataTypeState);
                    try
                    {
                        item.DNAMDataTypeState = EnumXmlTranslation<AddonNode.DNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class AddonNodeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAddonNodeGetter item,
            XElement node,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AddonNodeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AddonNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAddonNodeGetter item,
            string path,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAddonNodeGetter item,
            Stream stream,
            out AddonNode.ErrorMask errorMask,
            AddonNode.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AddonNodeBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AddonNodeBinaryWriteTranslation Instance = new AddonNodeBinaryWriteTranslation();

        static partial void WriteBinaryAlwaysLoadedCustom(
            MutagenWriter writer,
            IAddonNodeGetter item);

        public static void WriteBinaryAlwaysLoaded(
            MutagenWriter writer,
            IAddonNodeGetter item)
        {
            WriteBinaryAlwaysLoadedCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAddonNodeGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IAddonNodeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeIndex,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)))
            {
                writer.Write(item.MasterParticleSystemCap);
                AddonNodeBinaryWriteTranslation.WriteBinaryAlwaysLoaded(
                    writer: writer,
                    item: item);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAddonNodeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ADDN),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAddonNodeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AddonNodeBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static AddonNodeBinaryCreateTranslation Instance = new AddonNodeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ADDN;
        public static void FillBinaryStructs(
            IAddonNodeInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IAddonNodeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.ObjectBounds);
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.Model);
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NodeIndex = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.NodeIndex);
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.Sound);
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.MasterParticleSystemCap = dataFrame.ReadUInt16();
                    AddonNodeBinaryCreateTranslation.FillBinaryAlwaysLoadedCustom(
                        frame: dataFrame,
                        item: item);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.AlwaysLoaded);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryAlwaysLoadedCustom(
            MutagenFrame frame,
            IAddonNodeInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AddonNodeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AddonNodeBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAddonNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AddonNode_Registration.Instance;
        public new static AddonNode_Registration Registration => AddonNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AddonNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AddonNodeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAddonNodeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AddonNodeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => AddonNodeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AddonNodeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AddonNodeCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AddonNodeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AddonNodeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AddonNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AddonNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        #region NodeIndex
        private int? _NodeIndexLocation;
        public Int32 NodeIndex => _NodeIndexLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NodeIndexLocation.Value, _package.MetaData.Constants)) : default;
        #endregion
        #region Sound
        private int? _SoundLocation;
        public bool Sound_IsSet => _SoundLocation.HasValue;
        public IFormLinkNullable<ISoundDescriptorGetter> Sound => _SoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        private int? _DNAMLocation;
        public AddonNode.DNAMDataType DNAMDataTypeState { get; private set; }
        #region MasterParticleSystemCap
        private int _MasterParticleSystemCapLocation => _DNAMLocation!.Value;
        private bool _MasterParticleSystemCap_IsSet => _DNAMLocation.HasValue;
        public UInt16 MasterParticleSystemCap => _MasterParticleSystemCap_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_MasterParticleSystemCapLocation, 2)) : default;
        #endregion
        #region AlwaysLoaded
        private int _AlwaysLoadedLocation => _DNAMLocation!.Value + 0x2;
        public Boolean AlwaysLoaded => GetAlwaysLoadedCustom();
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AddonNodeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AddonNodeBinaryOverlay AddonNodeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new AddonNodeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static AddonNodeBinaryOverlay AddonNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AddonNodeFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.ObjectBounds);
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.Model);
                }
                case RecordTypeInts.DATA:
                {
                    _NodeIndexLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.NodeIndex);
                }
                case RecordTypeInts.SNAM:
                {
                    _SoundLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.Sound);
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)AddonNode_FieldIndex.AlwaysLoaded);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AddonNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

