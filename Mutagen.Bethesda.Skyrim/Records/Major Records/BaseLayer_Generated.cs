/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class BaseLayer :
        IBaseLayer,
        ILoquiObjectSetter<BaseLayer>,
        IEquatable<BaseLayer>
    {
        #region Ctor
        public BaseLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Header
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LayerHeader? _Header;
        public LayerHeader? Header
        {
            get => _Header;
            set => _Header = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILayerHeaderGetter? IBaseLayerGetter.Header => this.Header;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BaseLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IBaseLayerGetter rhs)) return false;
            return ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(BaseLayer? obj)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem Header)
            {
                this.Header = new MaskItem<TItem, LayerHeader.Mask<TItem>?>(Header, new LayerHeader.Mask<TItem>(Header));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, LayerHeader.Mask<TItem>?>? Header { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Header, rhs.Header)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Header);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (Header != null)
                {
                    if (!eval(this.Header.Overall)) return false;
                    if (this.Header.Specific != null && !this.Header.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (Header != null)
                {
                    if (eval(this.Header.Overall)) return true;
                    if (this.Header.Specific != null && this.Header.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BaseLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Header = this.Header == null ? null : new MaskItem<R, LayerHeader.Mask<R>?>(eval(this.Header.Overall), this.Header.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(BaseLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, BaseLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(BaseLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Header?.Overall ?? true)
                    {
                        Header?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, LayerHeader.ErrorMask?>? Header;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Header:
                        return Header;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Header:
                        this.Header = new MaskItem<Exception?, LayerHeader.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Header:
                        this.Header = (MaskItem<Exception?, LayerHeader.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Header != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                Header?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Header = this.Header.Combine(rhs.Header, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, LayerHeader.TranslationMask?> Header;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Header = new MaskItem<bool, LayerHeader.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Header?.Overall ?? true, Header?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => BaseLayerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => BaseLayerCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BaseLayerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BaseLayerCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static BaseLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BaseLayer();
            ((BaseLayerSetterCommon)((IBaseLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BaseLayer item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BaseLayer GetNew()
        {
            return new BaseLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface IBaseLayer :
        IBaseLayerGetter,
        ILoquiObjectSetter<IBaseLayer>,
        ILinkedFormKeyContainer
    {
        new LayerHeader? Header { get; set; }
    }

    public partial interface IBaseLayerGetter :
        ILoquiObject,
        ILoquiObject<IBaseLayerGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => BaseLayer_Registration.Instance;
        ILayerHeaderGetter? Header { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BaseLayerMixIn
    {
        public static void Clear(this IBaseLayer item)
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BaseLayer.Mask<bool> GetEqualsMask(
            this IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBaseLayerGetter item,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBaseLayerGetter item,
            FileGeneration fg,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBaseLayerGetter item,
            IBaseLayerGetter rhs)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IBaseLayer lhs,
            IBaseLayerGetter rhs)
        {
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IBaseLayer lhs,
            IBaseLayerGetter rhs,
            BaseLayer.TranslationMask? copyMask = null)
        {
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBaseLayer lhs,
            IBaseLayerGetter rhs,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = BaseLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBaseLayer lhs,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            BaseLayer.TranslationMask? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBaseLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum BaseLayer_FieldIndex
    {
        Header = 0,
    }
    #endregion

    #region Registration
    public partial class BaseLayer_Registration : ILoquiRegistration
    {
        public static readonly BaseLayer_Registration Instance = new BaseLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 346,
            version: 0);

        public const string GUID = "689f0717-0560-4275-a721-cc7c612062ae";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(BaseLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BaseLayer.ErrorMask);

        public static readonly Type ClassType = typeof(BaseLayer);

        public static readonly Type GetterType = typeof(IBaseLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBaseLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.BaseLayer";

        public const string Name = "BaseLayer";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "HEADER":
                    return (ushort)BaseLayer_FieldIndex.Header;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return "Header";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Header:
                    return typeof(LayerHeader);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.BTXT,
                        RecordTypes.ATXT
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(BaseLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BaseLayerSetterCommon
    {
        public static readonly BaseLayerSetterCommon Instance = new BaseLayerSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IBaseLayer item)
        {
            ClearPartial();
            item.Header = null;
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBaseLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: BaseLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: BaseLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class BaseLayerCommon
    {
        public static readonly BaseLayerCommon Instance = new BaseLayerCommon();

        public BaseLayer.Mask<bool> GetEqualsMask(
            IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BaseLayer.Mask<bool>(false);
            ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            BaseLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Header = EqualsMaskHelper.EqualsHelper(
                item.Header,
                rhs.Header,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IBaseLayerGetter item,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBaseLayerGetter item,
            FileGeneration fg,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BaseLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (BaseLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBaseLayerGetter item,
            FileGeneration fg,
            BaseLayer.Mask<bool>? printMask = null)
        {
            if ((printMask?.Header?.Overall ?? true)
                && item.Header.TryGet(out var HeaderItem))
            {
                HeaderItem?.ToString(fg, "Header");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBaseLayerGetter? lhs,
            IBaseLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Header, rhs.Header)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IBaseLayerGetter item)
        {
            var hash = new HashCode();
            if (item.Header.TryGet(out var Headeritem))
            {
                hash.Add(Headeritem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return BaseLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IBaseLayerGetter obj)
        {
            if (obj.Header.TryGet(out var HeaderItems))
            {
                foreach (var item in HeaderItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IBaseLayerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class BaseLayerSetterTranslationCommon
    {
        public static readonly BaseLayerSetterTranslationCommon Instance = new BaseLayerSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IBaseLayer item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Header) ?? true))
            {
                errorMask?.PushIndex((int)BaseLayer_FieldIndex.Header);
                try
                {
                    if(rhs.Header.TryGet(out var rhsHeader))
                    {
                        item.Header = rhsHeader.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BaseLayer_FieldIndex.Header));
                    }
                    else
                    {
                        item.Header = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            BaseLayer.TranslationMask? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class BaseLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => BaseLayerCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return BaseLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => BaseLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BaseLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BaseLayerBinaryWriteTranslation Instance = new BaseLayerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IBaseLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            if (item.Header.TryGet(out var HeaderItem))
            {
                ((LayerHeaderBinaryWriteTranslation)((IBinaryItem)HeaderItem).BinaryWriteTranslator).Write(
                    item: HeaderItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IBaseLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IBaseLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class BaseLayerBinaryCreateTranslation
    {
        public readonly static BaseLayerBinaryCreateTranslation Instance = new BaseLayerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBaseLayer item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IBaseLayer item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BTXT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.Header) return ParseResult.Stop;
                    item.Header = Mutagen.Bethesda.Skyrim.LayerHeader.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)BaseLayer_FieldIndex.Header;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class BaseLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBaseLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BaseLayerBinaryOverlay :
        BinaryOverlay,
        IBaseLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => BaseLayerCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => BaseLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBaseLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => BaseLayerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => BaseLayerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Header
        private RangeInt32? _HeaderLocation;
        public ILayerHeaderGetter? Header => _HeaderLocation.HasValue ? LayerHeaderBinaryOverlay.LayerHeaderFactory(new OverlayStream(_data.Slice(_HeaderLocation!.Value.Min), _package), _package) : default;
        public bool Header_IsSet => _HeaderLocation.HasValue;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BaseLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static BaseLayerBinaryOverlay BaseLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BaseLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static BaseLayerBinaryOverlay BaseLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return BaseLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BTXT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.Header) return ParseResult.Stop;
                    _HeaderLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)BaseLayer_FieldIndex.Header;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BaseLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

