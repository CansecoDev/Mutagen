/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CameraPath :
        SkyrimMajorRecord,
        ICameraPathInternal,
        ILoquiObjectSetter<CameraPath>,
        IEquatable<ICameraPathGetter>
    {
        #region Ctor
        protected CameraPath()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ICameraPathGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region RelatedPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ICameraPathGetter>> _RelatedPaths = new ExtendedList<IFormLink<ICameraPathGetter>>();
        public ExtendedList<IFormLink<ICameraPathGetter>> RelatedPaths
        {
            get => this._RelatedPaths;
            protected set => this._RelatedPaths = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ICameraPathGetter>> ICameraPathGetter.RelatedPaths => _RelatedPaths;
        #endregion

        #endregion
        #region Zoom
        public CameraPath.ZoomType Zoom { get; set; } = default;
        #endregion
        #region ZoomMustHaveCameraShots
        public Boolean ZoomMustHaveCameraShots { get; set; } = default;
        #endregion
        #region Shots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ICameraShotGetter>> _Shots = new ExtendedList<IFormLink<ICameraShotGetter>>();
        public ExtendedList<IFormLink<ICameraShotGetter>> Shots
        {
            get => this._Shots;
            protected set => this._Shots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ICameraShotGetter>> ICameraPathGetter.Shots => _Shots;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CameraPathMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICameraPathGetter rhs)) return false;
            return ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICameraPathGetter? obj)
        {
            return ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.RelatedPaths = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Zoom = initialValue;
                this.ZoomMustHaveCameraShots = initialValue;
                this.Shots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Conditions,
                TItem RelatedPaths,
                TItem Zoom,
                TItem ZoomMustHaveCameraShots,
                TItem Shots)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.RelatedPaths = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RelatedPaths, Enumerable.Empty<(int Index, TItem Value)>());
                this.Zoom = Zoom;
                this.ZoomMustHaveCameraShots = ZoomMustHaveCameraShots;
                this.Shots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Shots, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RelatedPaths;
            public TItem Zoom;
            public TItem ZoomMustHaveCameraShots;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Shots;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.RelatedPaths, rhs.RelatedPaths)) return false;
                if (!object.Equals(this.Zoom, rhs.Zoom)) return false;
                if (!object.Equals(this.ZoomMustHaveCameraShots, rhs.ZoomMustHaveCameraShots)) return false;
                if (!object.Equals(this.Shots, rhs.Shots)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Conditions);
                hash.Add(this.RelatedPaths);
                hash.Add(this.Zoom);
                hash.Add(this.ZoomMustHaveCameraShots);
                hash.Add(this.Shots);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RelatedPaths != null)
                {
                    if (!eval(this.RelatedPaths.Overall)) return false;
                    if (this.RelatedPaths.Specific != null)
                    {
                        foreach (var item in this.RelatedPaths.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Zoom)) return false;
                if (!eval(this.ZoomMustHaveCameraShots)) return false;
                if (this.Shots != null)
                {
                    if (!eval(this.Shots.Overall)) return false;
                    if (this.Shots.Specific != null)
                    {
                        foreach (var item in this.Shots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RelatedPaths != null)
                {
                    if (eval(this.RelatedPaths.Overall)) return true;
                    if (this.RelatedPaths.Specific != null)
                    {
                        foreach (var item in this.RelatedPaths.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Zoom)) return true;
                if (eval(this.ZoomMustHaveCameraShots)) return true;
                if (this.Shots != null)
                {
                    if (eval(this.Shots.Overall)) return true;
                    if (this.Shots.Specific != null)
                    {
                        foreach (var item in this.Shots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CameraPath.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RelatedPaths != null)
                {
                    obj.RelatedPaths = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RelatedPaths.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RelatedPaths.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RelatedPaths.Specific = l;
                        foreach (var item in RelatedPaths.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Zoom = eval(this.Zoom);
                obj.ZoomMustHaveCameraShots = eval(this.ZoomMustHaveCameraShots);
                if (Shots != null)
                {
                    obj.Shots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Shots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Shots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Shots.Specific = l;
                        foreach (var item in Shots.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CameraPath.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CameraPath.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CameraPath.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.RelatedPaths?.Overall ?? true)
                        && RelatedPaths.TryGet(out var RelatedPathsItem))
                    {
                        fg.AppendLine("RelatedPaths =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelatedPathsItem.Overall);
                            if (RelatedPathsItem.Specific != null)
                            {
                                foreach (var subItem in RelatedPathsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Zoom ?? true)
                    {
                        fg.AppendItem(Zoom, "Zoom");
                    }
                    if (printMask?.ZoomMustHaveCameraShots ?? true)
                    {
                        fg.AppendItem(ZoomMustHaveCameraShots, "ZoomMustHaveCameraShots");
                    }
                    if ((printMask?.Shots?.Overall ?? true)
                        && Shots.TryGet(out var ShotsItem))
                    {
                        fg.AppendLine("Shots =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ShotsItem.Overall);
                            if (ShotsItem.Specific != null)
                            {
                                foreach (var subItem in ShotsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RelatedPaths;
            public Exception? Zoom;
            public Exception? ZoomMustHaveCameraShots;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Shots;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CameraPath_FieldIndex enu = (CameraPath_FieldIndex)index;
                switch (enu)
                {
                    case CameraPath_FieldIndex.Conditions:
                        return Conditions;
                    case CameraPath_FieldIndex.RelatedPaths:
                        return RelatedPaths;
                    case CameraPath_FieldIndex.Zoom:
                        return Zoom;
                    case CameraPath_FieldIndex.ZoomMustHaveCameraShots:
                        return ZoomMustHaveCameraShots;
                    case CameraPath_FieldIndex.Shots:
                        return Shots;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CameraPath_FieldIndex enu = (CameraPath_FieldIndex)index;
                switch (enu)
                {
                    case CameraPath_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case CameraPath_FieldIndex.RelatedPaths:
                        this.RelatedPaths = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case CameraPath_FieldIndex.Zoom:
                        this.Zoom = ex;
                        break;
                    case CameraPath_FieldIndex.ZoomMustHaveCameraShots:
                        this.ZoomMustHaveCameraShots = ex;
                        break;
                    case CameraPath_FieldIndex.Shots:
                        this.Shots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CameraPath_FieldIndex enu = (CameraPath_FieldIndex)index;
                switch (enu)
                {
                    case CameraPath_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case CameraPath_FieldIndex.RelatedPaths:
                        this.RelatedPaths = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case CameraPath_FieldIndex.Zoom:
                        this.Zoom = (Exception?)obj;
                        break;
                    case CameraPath_FieldIndex.ZoomMustHaveCameraShots:
                        this.ZoomMustHaveCameraShots = (Exception?)obj;
                        break;
                    case CameraPath_FieldIndex.Shots:
                        this.Shots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Conditions != null) return true;
                if (RelatedPaths != null) return true;
                if (Zoom != null) return true;
                if (ZoomMustHaveCameraShots != null) return true;
                if (Shots != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RelatedPaths.TryGet(out var RelatedPathsItem))
                {
                    fg.AppendLine("RelatedPaths =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelatedPathsItem.Overall);
                        if (RelatedPathsItem.Specific != null)
                        {
                            foreach (var subItem in RelatedPathsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Zoom, "Zoom");
                fg.AppendItem(ZoomMustHaveCameraShots, "ZoomMustHaveCameraShots");
                if (Shots.TryGet(out var ShotsItem))
                {
                    fg.AppendLine("Shots =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ShotsItem.Overall);
                        if (ShotsItem.Specific != null)
                        {
                            foreach (var subItem in ShotsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.RelatedPaths = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RelatedPaths?.Overall, rhs.RelatedPaths?.Overall), ExceptionExt.Combine(this.RelatedPaths?.Specific, rhs.RelatedPaths?.Specific));
                ret.Zoom = this.Zoom.Combine(rhs.Zoom);
                ret.ZoomMustHaveCameraShots = this.ZoomMustHaveCameraShots.Combine(rhs.ZoomMustHaveCameraShots);
                ret.Shots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Shots?.Overall, rhs.Shots?.Overall), ExceptionExt.Combine(this.Shots?.Specific, rhs.Shots?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Condition.TranslationMask? Conditions;
            public bool RelatedPaths;
            public bool Zoom;
            public bool ZoomMustHaveCameraShots;
            public bool Shots;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.RelatedPaths = defaultOn;
                this.Zoom = defaultOn;
                this.ZoomMustHaveCameraShots = defaultOn;
                this.Shots = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((RelatedPaths, null));
                ret.Add((Zoom, null));
                ret.Add((ZoomMustHaveCameraShots, null));
                ret.Add((Shots, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CameraPath_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CameraPathCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => CameraPathCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CameraPathCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CameraPathCommon.Instance.RemapLinks(this, mapping);
        public CameraPath(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public CameraPath(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public CameraPath(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CameraPathBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraPathBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static CameraPath CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CameraPath();
            ((CameraPathSetterCommon)((ICameraPathGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CameraPath item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CameraPathSetterCommon)((ICameraPathGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CameraPath GetNew()
        {
            return new CameraPath();
        }

    }
    #endregion

    #region Interface
    public partial interface ICameraPath :
        ICameraPathGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ICameraPathInternal>,
        ILinkedFormKeyContainer
    {
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<IFormLink<ICameraPathGetter>> RelatedPaths { get; }
        new CameraPath.ZoomType Zoom { get; set; }
        new Boolean ZoomMustHaveCameraShots { get; set; }
        new ExtendedList<IFormLink<ICameraShotGetter>> Shots { get; }
    }

    public partial interface ICameraPathInternal :
        ISkyrimMajorRecordInternal,
        ICameraPath,
        ICameraPathGetter
    {
    }

    public partial interface ICameraPathGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ICameraPathGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => CameraPath_Registration.Instance;
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IFormLink<ICameraPathGetter>> RelatedPaths { get; }
        CameraPath.ZoomType Zoom { get; }
        Boolean ZoomMustHaveCameraShots { get; }
        IReadOnlyList<IFormLink<ICameraShotGetter>> Shots { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CameraPathMixIn
    {
        public static void Clear(this ICameraPathInternal item)
        {
            ((CameraPathSetterCommon)((ICameraPathGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CameraPath.Mask<bool> GetEqualsMask(
            this ICameraPathGetter item,
            ICameraPathGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICameraPathGetter item,
            string? name = null,
            CameraPath.Mask<bool>? printMask = null)
        {
            return ((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICameraPathGetter item,
            FileGeneration fg,
            string? name = null,
            CameraPath.Mask<bool>? printMask = null)
        {
            ((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICameraPathGetter item,
            ICameraPathGetter rhs)
        {
            return ((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICameraPathInternal lhs,
            ICameraPathGetter rhs,
            out CameraPath.ErrorMask errorMask,
            CameraPath.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CameraPathSetterTranslationCommon)((ICameraPathGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CameraPath.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICameraPathInternal lhs,
            ICameraPathGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CameraPathSetterTranslationCommon)((ICameraPathGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CameraPath DeepCopy(
            this ICameraPathGetter item,
            CameraPath.TranslationMask? copyMask = null)
        {
            return ((CameraPathSetterTranslationCommon)((ICameraPathGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CameraPath DeepCopy(
            this ICameraPathGetter item,
            out CameraPath.ErrorMask errorMask,
            CameraPath.TranslationMask? copyMask = null)
        {
            return ((CameraPathSetterTranslationCommon)((ICameraPathGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CameraPath DeepCopy(
            this ICameraPathGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CameraPathSetterTranslationCommon)((ICameraPathGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICameraPathInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraPathSetterCommon)((ICameraPathGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CameraPath_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Conditions = 6,
        RelatedPaths = 7,
        Zoom = 8,
        ZoomMustHaveCameraShots = 9,
        Shots = 10,
    }
    #endregion

    #region Registration
    public partial class CameraPath_Registration : ILoquiRegistration
    {
        public static readonly CameraPath_Registration Instance = new CameraPath_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 438,
            version: 0);

        public const string GUID = "181b38f0-80c5-4352-98e0-16b822f6ad83";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(CameraPath.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CameraPath.ErrorMask);

        public static readonly Type ClassType = typeof(CameraPath);

        public static readonly Type GetterType = typeof(ICameraPathGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICameraPath);

        public static readonly Type? InternalSetterType = typeof(ICameraPathInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.CameraPath";

        public const string Name = "CameraPath";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CPTH;
        public static readonly Type BinaryWriteTranslation = typeof(CameraPathBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CameraPathSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly CameraPathSetterCommon Instance = new CameraPathSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICameraPathInternal item)
        {
            ClearPartial();
            item.Conditions.Clear();
            item.RelatedPaths.Clear();
            item.Zoom = default;
            item.ZoomMustHaveCameraShots = default;
            item.Shots.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ICameraPathInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICameraPathInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICameraPathInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICameraPathInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CameraPathBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CameraPathBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CameraPath)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CameraPath)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CameraPathCommon : SkyrimMajorRecordCommon
    {
        public new static readonly CameraPathCommon Instance = new CameraPathCommon();

        public CameraPath.Mask<bool> GetEqualsMask(
            ICameraPathGetter item,
            ICameraPathGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CameraPath.Mask<bool>(false);
            ((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICameraPathGetter item,
            ICameraPathGetter rhs,
            CameraPath.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RelatedPaths = item.RelatedPaths.CollectionEqualsHelper(
                rhs.RelatedPaths,
                (l, r) => object.Equals(l, r),
                include);
            ret.Zoom = item.Zoom == rhs.Zoom;
            ret.ZoomMustHaveCameraShots = item.ZoomMustHaveCameraShots == rhs.ZoomMustHaveCameraShots;
            ret.Shots = item.Shots.CollectionEqualsHelper(
                rhs.Shots,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICameraPathGetter item,
            string? name = null,
            CameraPath.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICameraPathGetter item,
            FileGeneration fg,
            string? name = null,
            CameraPath.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CameraPath =>");
            }
            else
            {
                fg.AppendLine($"{name} (CameraPath) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICameraPathGetter item,
            FileGeneration fg,
            CameraPath.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.RelatedPaths?.Overall ?? true)
            {
                fg.AppendLine("RelatedPaths =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RelatedPaths)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Zoom ?? true)
            {
                fg.AppendItem(item.Zoom, "Zoom");
            }
            if (printMask?.ZoomMustHaveCameraShots ?? true)
            {
                fg.AppendItem(item.ZoomMustHaveCameraShots, "ZoomMustHaveCameraShots");
            }
            if (printMask?.Shots?.Overall ?? true)
            {
                fg.AppendLine("Shots =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Shots)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static CameraPath_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CameraPath_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (CameraPath_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (CameraPath_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (CameraPath_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (CameraPath_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (CameraPath_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CameraPath_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CameraPath_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CameraPath_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CameraPath_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CameraPath_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICameraPathGetter? lhs,
            ICameraPathGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!lhs.RelatedPaths.SequenceEqualNullable(rhs.RelatedPaths)) return false;
            if (lhs.Zoom != rhs.Zoom) return false;
            if (lhs.ZoomMustHaveCameraShots != rhs.ZoomMustHaveCameraShots) return false;
            if (!lhs.Shots.SequenceEqualNullable(rhs.Shots)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICameraPathGetter?)lhs,
                rhs: rhs as ICameraPathGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICameraPathGetter?)lhs,
                rhs: rhs as ICameraPathGetter);
        }
        
        public virtual int GetHashCode(ICameraPathGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Conditions);
            hash.Add(item.RelatedPaths);
            hash.Add(item.Zoom);
            hash.Add(item.ZoomMustHaveCameraShots);
            hash.Add(item.Shots);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ICameraPathGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICameraPathGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CameraPath.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICameraPathGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkedFormKeyContainerGetter> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.RelatedPaths.Select(f => f.FormKey))
            {
                yield return item;
            }
            foreach (var item in obj.Shots.Select(f => f.FormKey))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(ICameraPathGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(CameraPath obj, CameraPath rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new CameraPath(getNextFormKey());
            ret.DeepCopyIn((CameraPath)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (CameraPath)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class CameraPathSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly CameraPathSetterTranslationCommon Instance = new CameraPathSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICameraPathInternal item,
            ICameraPathGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICameraPath item,
            ICameraPathGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CameraPath_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)CameraPath_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CameraPath_FieldIndex.RelatedPaths) ?? true))
            {
                errorMask?.PushIndex((int)CameraPath_FieldIndex.RelatedPaths);
                try
                {
                    item.RelatedPaths.SetTo(
                        rhs.RelatedPaths
                        .Select(r => (IFormLink<ICameraPathGetter>)new FormLink<ICameraPathGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CameraPath_FieldIndex.Zoom) ?? true))
            {
                item.Zoom = rhs.Zoom;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraPath_FieldIndex.ZoomMustHaveCameraShots) ?? true))
            {
                item.ZoomMustHaveCameraShots = rhs.ZoomMustHaveCameraShots;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraPath_FieldIndex.Shots) ?? true))
            {
                errorMask?.PushIndex((int)CameraPath_FieldIndex.Shots);
                try
                {
                    item.Shots.SetTo(
                        rhs.Shots
                        .Select(r => (IFormLink<ICameraShotGetter>)new FormLink<ICameraShotGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraPathInternal)item,
                rhs: (ICameraPathGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraPath)item,
                rhs: (ICameraPathGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraPathInternal)item,
                rhs: (ICameraPathGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraPath)item,
                rhs: (ICameraPathGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CameraPath DeepCopy(
            ICameraPathGetter item,
            CameraPath.TranslationMask? copyMask = null)
        {
            CameraPath ret = (CameraPath)((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).GetNew();
            ((CameraPathSetterTranslationCommon)((ICameraPathGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CameraPath DeepCopy(
            ICameraPathGetter item,
            out CameraPath.ErrorMask errorMask,
            CameraPath.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CameraPath ret = (CameraPath)((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).GetNew();
            ((CameraPathSetterTranslationCommon)((ICameraPathGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CameraPath.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CameraPath DeepCopy(
            ICameraPathGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CameraPath ret = (CameraPath)((CameraPathCommon)((ICameraPathGetter)item).CommonInstance()!).GetNew();
            ((CameraPathSetterTranslationCommon)((ICameraPathGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CameraPath
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraPath_Registration.Instance;
        public new static CameraPath_Registration Registration => CameraPath_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CameraPathCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CameraPathSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CameraPathSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CameraPathBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CameraPathBinaryWriteTranslation Instance = new CameraPathBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            ICameraPathGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            ICameraPathGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryZoomCustom(
            MutagenWriter writer,
            ICameraPathGetter item);

        public static void WriteBinaryZoom(
            MutagenWriter writer,
            ICameraPathGetter item)
        {
            WriteBinaryZoomCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            ICameraPathGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICameraPathGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            CameraPathBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ICameraPathGetter>>.Instance.Write(
                writer: writer,
                items: item.RelatedPaths,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                transl: (MutagenWriter subWriter, IFormLink<ICameraPathGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            CameraPathBinaryWriteTranslation.WriteBinaryZoom(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ICameraShotGetter>>.Instance.Write(
                writer: writer,
                items: item.Shots,
                transl: (MutagenWriter subWriter, IFormLink<ICameraShotGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
                });
        }

        public void Write(
            MutagenWriter writer,
            ICameraPathGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CPTH),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraPathGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraPathGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraPathGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CameraPathBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static CameraPathBinaryCreateTranslation Instance = new CameraPathBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CPTH;
        public static void FillBinaryStructs(
            ICameraPathInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICameraPathInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    CameraPathBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)CameraPath_FieldIndex.Conditions;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RelatedPaths.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ICameraPathGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)CameraPath_FieldIndex.RelatedPaths;
                }
                case RecordTypeInts.DATA:
                {
                    CameraPathBinaryCreateTranslation.FillBinaryZoomCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)CameraPath_FieldIndex.Zoom;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Shots.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ICameraShotGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)CameraPath_FieldIndex.Shots;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            ICameraPathInternal item);

        static partial void FillBinaryZoomCustom(
            MutagenFrame frame,
            ICameraPathInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CameraPathBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CameraPathBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ICameraPathGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraPath_Registration.Instance;
        public new static CameraPath_Registration Registration => CameraPath_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CameraPathCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CameraPathSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CameraPathCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => CameraPathCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CameraPathBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraPathBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IReadOnlyList<IFormLink<ICameraPathGetter>> RelatedPaths { get; private set; } = ListExt.Empty<IFormLink<ICameraPathGetter>>();
        #region Zoom
        partial void ZoomCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public CameraPath.ZoomType Zoom => GetZoomCustom();
        #endregion
        public IReadOnlyList<IFormLink<ICameraShotGetter>> Shots { get; private set; } = ListExt.Empty<IFormLink<ICameraShotGetter>>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CameraPathBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CameraPathBinaryOverlay CameraPathFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CameraPathBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CameraPathBinaryOverlay CameraPathFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CameraPathFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)CameraPath_FieldIndex.Conditions;
                }
                case RecordTypeInts.ANAM:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.RelatedPaths = BinaryOverlayList.FactoryByStartIndex<IFormLink<ICameraPathGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ICameraPathGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)CameraPath_FieldIndex.RelatedPaths;
                }
                case RecordTypeInts.DATA:
                {
                    ZoomCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)CameraPath_FieldIndex.Zoom;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Shots = BinaryOverlayList.FactoryByArray<IFormLink<ICameraShotGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ICameraShotGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)CameraPath_FieldIndex.Shots;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CameraPathMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICameraPathGetter rhs)) return false;
            return ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICameraPathGetter? obj)
        {
            return ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CameraPathCommon)((ICameraPathGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

