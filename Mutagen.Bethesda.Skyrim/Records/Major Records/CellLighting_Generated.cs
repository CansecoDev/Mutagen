/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CellLighting :
        ICellLighting,
        ILoquiObjectSetter<CellLighting>,
        IEquatable<CellLighting>,
        IEqualsMask
    {
        #region Ctor
        public CellLighting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CellLighting.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region AmbientColor
        public Color AmbientColor { get; set; } = default;
        #endregion
        #region DirectionalColor
        public Color DirectionalColor { get; set; } = default;
        #endregion
        #region FogNearColor
        public Color FogNearColor { get; set; } = default;
        #endregion
        #region FogNear
        public Single FogNear { get; set; } = default;
        #endregion
        #region FogFar
        public Single FogFar { get; set; } = default;
        #endregion
        #region DirectionalRotationXY
        public Int32 DirectionalRotationXY { get; set; } = default;
        #endregion
        #region DirectionalRotationZ
        public Int32 DirectionalRotationZ { get; set; } = default;
        #endregion
        #region DirectionalFade
        public Single DirectionalFade { get; set; } = default;
        #endregion
        #region FogClipDistance
        public Single FogClipDistance { get; set; } = default;
        #endregion
        #region FogPower
        public Single FogPower { get; set; } = default;
        #endregion
        #region AmbientDirectionalXPlus
        public Color AmbientDirectionalXPlus { get; set; } = default;
        #endregion
        #region AmbientDirectionalXMinus
        public Color AmbientDirectionalXMinus { get; set; } = default;
        #endregion
        #region AmbientDirectionalYPlus
        public Color AmbientDirectionalYPlus { get; set; } = default;
        #endregion
        #region AmbientDirectionalYMinus
        public Color AmbientDirectionalYMinus { get; set; } = default;
        #endregion
        #region AmbientDirectionalZPlus
        public Color AmbientDirectionalZPlus { get; set; } = default;
        #endregion
        #region AmbientDirectionalZMinus
        public Color AmbientDirectionalZMinus { get; set; } = default;
        #endregion
        #region AmbientSpecular
        public Color AmbientSpecular { get; set; } = default;
        #endregion
        #region AmbientScale
        public Single AmbientScale { get; set; } = default;
        #endregion
        #region FogFarColor
        public Color FogFarColor { get; set; } = default;
        #endregion
        #region FogMax
        public Single FogMax { get; set; } = default;
        #endregion
        #region LightFadeBegin
        public Single LightFadeBegin { get; set; } = default;
        #endregion
        #region LightFadeEnd
        public Single LightFadeEnd { get; set; } = default;
        #endregion
        #region Inherits
        public CellLighting.Inherit Inherits { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellLightingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellLightingGetter rhs)) return false;
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CellLighting? obj)
        {
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CellLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CellLighting CreateFromXml(
            XElement node,
            CellLighting.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CellLighting CreateFromXml(
            XElement node,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CellLighting CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CellLighting();
            ((CellLightingSetterCommon)((ICellLightingGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CellLighting CreateFromXml(
            string path,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            string path,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CellLighting CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.AmbientColor = initialValue;
                this.DirectionalColor = initialValue;
                this.FogNearColor = initialValue;
                this.FogNear = initialValue;
                this.FogFar = initialValue;
                this.DirectionalRotationXY = initialValue;
                this.DirectionalRotationZ = initialValue;
                this.DirectionalFade = initialValue;
                this.FogClipDistance = initialValue;
                this.FogPower = initialValue;
                this.AmbientDirectionalXPlus = initialValue;
                this.AmbientDirectionalXMinus = initialValue;
                this.AmbientDirectionalYPlus = initialValue;
                this.AmbientDirectionalYMinus = initialValue;
                this.AmbientDirectionalZPlus = initialValue;
                this.AmbientDirectionalZMinus = initialValue;
                this.AmbientSpecular = initialValue;
                this.AmbientScale = initialValue;
                this.FogFarColor = initialValue;
                this.FogMax = initialValue;
                this.LightFadeBegin = initialValue;
                this.LightFadeEnd = initialValue;
                this.Inherits = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem AmbientColor,
                TItem DirectionalColor,
                TItem FogNearColor,
                TItem FogNear,
                TItem FogFar,
                TItem DirectionalRotationXY,
                TItem DirectionalRotationZ,
                TItem DirectionalFade,
                TItem FogClipDistance,
                TItem FogPower,
                TItem AmbientDirectionalXPlus,
                TItem AmbientDirectionalXMinus,
                TItem AmbientDirectionalYPlus,
                TItem AmbientDirectionalYMinus,
                TItem AmbientDirectionalZPlus,
                TItem AmbientDirectionalZMinus,
                TItem AmbientSpecular,
                TItem AmbientScale,
                TItem FogFarColor,
                TItem FogMax,
                TItem LightFadeBegin,
                TItem LightFadeEnd,
                TItem Inherits)
            {
                this.Versioning = Versioning;
                this.AmbientColor = AmbientColor;
                this.DirectionalColor = DirectionalColor;
                this.FogNearColor = FogNearColor;
                this.FogNear = FogNear;
                this.FogFar = FogFar;
                this.DirectionalRotationXY = DirectionalRotationXY;
                this.DirectionalRotationZ = DirectionalRotationZ;
                this.DirectionalFade = DirectionalFade;
                this.FogClipDistance = FogClipDistance;
                this.FogPower = FogPower;
                this.AmbientDirectionalXPlus = AmbientDirectionalXPlus;
                this.AmbientDirectionalXMinus = AmbientDirectionalXMinus;
                this.AmbientDirectionalYPlus = AmbientDirectionalYPlus;
                this.AmbientDirectionalYMinus = AmbientDirectionalYMinus;
                this.AmbientDirectionalZPlus = AmbientDirectionalZPlus;
                this.AmbientDirectionalZMinus = AmbientDirectionalZMinus;
                this.AmbientSpecular = AmbientSpecular;
                this.AmbientScale = AmbientScale;
                this.FogFarColor = FogFarColor;
                this.FogMax = FogMax;
                this.LightFadeBegin = LightFadeBegin;
                this.LightFadeEnd = LightFadeEnd;
                this.Inherits = Inherits;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem AmbientColor;
            public TItem DirectionalColor;
            public TItem FogNearColor;
            public TItem FogNear;
            public TItem FogFar;
            public TItem DirectionalRotationXY;
            public TItem DirectionalRotationZ;
            public TItem DirectionalFade;
            public TItem FogClipDistance;
            public TItem FogPower;
            public TItem AmbientDirectionalXPlus;
            public TItem AmbientDirectionalXMinus;
            public TItem AmbientDirectionalYPlus;
            public TItem AmbientDirectionalYMinus;
            public TItem AmbientDirectionalZPlus;
            public TItem AmbientDirectionalZMinus;
            public TItem AmbientSpecular;
            public TItem AmbientScale;
            public TItem FogFarColor;
            public TItem FogMax;
            public TItem LightFadeBegin;
            public TItem LightFadeEnd;
            public TItem Inherits;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
                if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
                if (!object.Equals(this.FogNearColor, rhs.FogNearColor)) return false;
                if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
                if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
                if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
                if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
                if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
                if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
                if (!object.Equals(this.FogPower, rhs.FogPower)) return false;
                if (!object.Equals(this.AmbientDirectionalXPlus, rhs.AmbientDirectionalXPlus)) return false;
                if (!object.Equals(this.AmbientDirectionalXMinus, rhs.AmbientDirectionalXMinus)) return false;
                if (!object.Equals(this.AmbientDirectionalYPlus, rhs.AmbientDirectionalYPlus)) return false;
                if (!object.Equals(this.AmbientDirectionalYMinus, rhs.AmbientDirectionalYMinus)) return false;
                if (!object.Equals(this.AmbientDirectionalZPlus, rhs.AmbientDirectionalZPlus)) return false;
                if (!object.Equals(this.AmbientDirectionalZMinus, rhs.AmbientDirectionalZMinus)) return false;
                if (!object.Equals(this.AmbientSpecular, rhs.AmbientSpecular)) return false;
                if (!object.Equals(this.AmbientScale, rhs.AmbientScale)) return false;
                if (!object.Equals(this.FogFarColor, rhs.FogFarColor)) return false;
                if (!object.Equals(this.FogMax, rhs.FogMax)) return false;
                if (!object.Equals(this.LightFadeBegin, rhs.LightFadeBegin)) return false;
                if (!object.Equals(this.LightFadeEnd, rhs.LightFadeEnd)) return false;
                if (!object.Equals(this.Inherits, rhs.Inherits)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.AmbientColor);
                hash.Add(this.DirectionalColor);
                hash.Add(this.FogNearColor);
                hash.Add(this.FogNear);
                hash.Add(this.FogFar);
                hash.Add(this.DirectionalRotationXY);
                hash.Add(this.DirectionalRotationZ);
                hash.Add(this.DirectionalFade);
                hash.Add(this.FogClipDistance);
                hash.Add(this.FogPower);
                hash.Add(this.AmbientDirectionalXPlus);
                hash.Add(this.AmbientDirectionalXMinus);
                hash.Add(this.AmbientDirectionalYPlus);
                hash.Add(this.AmbientDirectionalYMinus);
                hash.Add(this.AmbientDirectionalZPlus);
                hash.Add(this.AmbientDirectionalZMinus);
                hash.Add(this.AmbientSpecular);
                hash.Add(this.AmbientScale);
                hash.Add(this.FogFarColor);
                hash.Add(this.FogMax);
                hash.Add(this.LightFadeBegin);
                hash.Add(this.LightFadeEnd);
                hash.Add(this.Inherits);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.AmbientColor)) return false;
                if (!eval(this.DirectionalColor)) return false;
                if (!eval(this.FogNearColor)) return false;
                if (!eval(this.FogNear)) return false;
                if (!eval(this.FogFar)) return false;
                if (!eval(this.DirectionalRotationXY)) return false;
                if (!eval(this.DirectionalRotationZ)) return false;
                if (!eval(this.DirectionalFade)) return false;
                if (!eval(this.FogClipDistance)) return false;
                if (!eval(this.FogPower)) return false;
                if (!eval(this.AmbientDirectionalXPlus)) return false;
                if (!eval(this.AmbientDirectionalXMinus)) return false;
                if (!eval(this.AmbientDirectionalYPlus)) return false;
                if (!eval(this.AmbientDirectionalYMinus)) return false;
                if (!eval(this.AmbientDirectionalZPlus)) return false;
                if (!eval(this.AmbientDirectionalZMinus)) return false;
                if (!eval(this.AmbientSpecular)) return false;
                if (!eval(this.AmbientScale)) return false;
                if (!eval(this.FogFarColor)) return false;
                if (!eval(this.FogMax)) return false;
                if (!eval(this.LightFadeBegin)) return false;
                if (!eval(this.LightFadeEnd)) return false;
                if (!eval(this.Inherits)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.AmbientColor)) return true;
                if (eval(this.DirectionalColor)) return true;
                if (eval(this.FogNearColor)) return true;
                if (eval(this.FogNear)) return true;
                if (eval(this.FogFar)) return true;
                if (eval(this.DirectionalRotationXY)) return true;
                if (eval(this.DirectionalRotationZ)) return true;
                if (eval(this.DirectionalFade)) return true;
                if (eval(this.FogClipDistance)) return true;
                if (eval(this.FogPower)) return true;
                if (eval(this.AmbientDirectionalXPlus)) return true;
                if (eval(this.AmbientDirectionalXMinus)) return true;
                if (eval(this.AmbientDirectionalYPlus)) return true;
                if (eval(this.AmbientDirectionalYMinus)) return true;
                if (eval(this.AmbientDirectionalZPlus)) return true;
                if (eval(this.AmbientDirectionalZMinus)) return true;
                if (eval(this.AmbientSpecular)) return true;
                if (eval(this.AmbientScale)) return true;
                if (eval(this.FogFarColor)) return true;
                if (eval(this.FogMax)) return true;
                if (eval(this.LightFadeBegin)) return true;
                if (eval(this.LightFadeEnd)) return true;
                if (eval(this.Inherits)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CellLighting.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.AmbientColor = eval(this.AmbientColor);
                obj.DirectionalColor = eval(this.DirectionalColor);
                obj.FogNearColor = eval(this.FogNearColor);
                obj.FogNear = eval(this.FogNear);
                obj.FogFar = eval(this.FogFar);
                obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
                obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
                obj.DirectionalFade = eval(this.DirectionalFade);
                obj.FogClipDistance = eval(this.FogClipDistance);
                obj.FogPower = eval(this.FogPower);
                obj.AmbientDirectionalXPlus = eval(this.AmbientDirectionalXPlus);
                obj.AmbientDirectionalXMinus = eval(this.AmbientDirectionalXMinus);
                obj.AmbientDirectionalYPlus = eval(this.AmbientDirectionalYPlus);
                obj.AmbientDirectionalYMinus = eval(this.AmbientDirectionalYMinus);
                obj.AmbientDirectionalZPlus = eval(this.AmbientDirectionalZPlus);
                obj.AmbientDirectionalZMinus = eval(this.AmbientDirectionalZMinus);
                obj.AmbientSpecular = eval(this.AmbientSpecular);
                obj.AmbientScale = eval(this.AmbientScale);
                obj.FogFarColor = eval(this.FogFarColor);
                obj.FogMax = eval(this.FogMax);
                obj.LightFadeBegin = eval(this.LightFadeBegin);
                obj.LightFadeEnd = eval(this.LightFadeEnd);
                obj.Inherits = eval(this.Inherits);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CellLighting.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CellLighting.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CellLighting.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.AmbientColor ?? true)
                    {
                        fg.AppendItem(AmbientColor, "AmbientColor");
                    }
                    if (printMask?.DirectionalColor ?? true)
                    {
                        fg.AppendItem(DirectionalColor, "DirectionalColor");
                    }
                    if (printMask?.FogNearColor ?? true)
                    {
                        fg.AppendItem(FogNearColor, "FogNearColor");
                    }
                    if (printMask?.FogNear ?? true)
                    {
                        fg.AppendItem(FogNear, "FogNear");
                    }
                    if (printMask?.FogFar ?? true)
                    {
                        fg.AppendItem(FogFar, "FogFar");
                    }
                    if (printMask?.DirectionalRotationXY ?? true)
                    {
                        fg.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                    }
                    if (printMask?.DirectionalRotationZ ?? true)
                    {
                        fg.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                    }
                    if (printMask?.DirectionalFade ?? true)
                    {
                        fg.AppendItem(DirectionalFade, "DirectionalFade");
                    }
                    if (printMask?.FogClipDistance ?? true)
                    {
                        fg.AppendItem(FogClipDistance, "FogClipDistance");
                    }
                    if (printMask?.FogPower ?? true)
                    {
                        fg.AppendItem(FogPower, "FogPower");
                    }
                    if (printMask?.AmbientDirectionalXPlus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalXPlus, "AmbientDirectionalXPlus");
                    }
                    if (printMask?.AmbientDirectionalXMinus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalXMinus, "AmbientDirectionalXMinus");
                    }
                    if (printMask?.AmbientDirectionalYPlus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalYPlus, "AmbientDirectionalYPlus");
                    }
                    if (printMask?.AmbientDirectionalYMinus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalYMinus, "AmbientDirectionalYMinus");
                    }
                    if (printMask?.AmbientDirectionalZPlus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalZPlus, "AmbientDirectionalZPlus");
                    }
                    if (printMask?.AmbientDirectionalZMinus ?? true)
                    {
                        fg.AppendItem(AmbientDirectionalZMinus, "AmbientDirectionalZMinus");
                    }
                    if (printMask?.AmbientSpecular ?? true)
                    {
                        fg.AppendItem(AmbientSpecular, "AmbientSpecular");
                    }
                    if (printMask?.AmbientScale ?? true)
                    {
                        fg.AppendItem(AmbientScale, "AmbientScale");
                    }
                    if (printMask?.FogFarColor ?? true)
                    {
                        fg.AppendItem(FogFarColor, "FogFarColor");
                    }
                    if (printMask?.FogMax ?? true)
                    {
                        fg.AppendItem(FogMax, "FogMax");
                    }
                    if (printMask?.LightFadeBegin ?? true)
                    {
                        fg.AppendItem(LightFadeBegin, "LightFadeBegin");
                    }
                    if (printMask?.LightFadeEnd ?? true)
                    {
                        fg.AppendItem(LightFadeEnd, "LightFadeEnd");
                    }
                    if (printMask?.Inherits ?? true)
                    {
                        fg.AppendItem(Inherits, "Inherits");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? AmbientColor;
            public Exception? DirectionalColor;
            public Exception? FogNearColor;
            public Exception? FogNear;
            public Exception? FogFar;
            public Exception? DirectionalRotationXY;
            public Exception? DirectionalRotationZ;
            public Exception? DirectionalFade;
            public Exception? FogClipDistance;
            public Exception? FogPower;
            public Exception? AmbientDirectionalXPlus;
            public Exception? AmbientDirectionalXMinus;
            public Exception? AmbientDirectionalYPlus;
            public Exception? AmbientDirectionalYMinus;
            public Exception? AmbientDirectionalZPlus;
            public Exception? AmbientDirectionalZMinus;
            public Exception? AmbientSpecular;
            public Exception? AmbientScale;
            public Exception? FogFarColor;
            public Exception? FogMax;
            public Exception? LightFadeBegin;
            public Exception? LightFadeEnd;
            public Exception? Inherits;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.Versioning:
                        return Versioning;
                    case CellLighting_FieldIndex.AmbientColor:
                        return AmbientColor;
                    case CellLighting_FieldIndex.DirectionalColor:
                        return DirectionalColor;
                    case CellLighting_FieldIndex.FogNearColor:
                        return FogNearColor;
                    case CellLighting_FieldIndex.FogNear:
                        return FogNear;
                    case CellLighting_FieldIndex.FogFar:
                        return FogFar;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        return DirectionalRotationXY;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        return DirectionalRotationZ;
                    case CellLighting_FieldIndex.DirectionalFade:
                        return DirectionalFade;
                    case CellLighting_FieldIndex.FogClipDistance:
                        return FogClipDistance;
                    case CellLighting_FieldIndex.FogPower:
                        return FogPower;
                    case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                        return AmbientDirectionalXPlus;
                    case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                        return AmbientDirectionalXMinus;
                    case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                        return AmbientDirectionalYPlus;
                    case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                        return AmbientDirectionalYMinus;
                    case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                        return AmbientDirectionalZPlus;
                    case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                        return AmbientDirectionalZMinus;
                    case CellLighting_FieldIndex.AmbientSpecular:
                        return AmbientSpecular;
                    case CellLighting_FieldIndex.AmbientScale:
                        return AmbientScale;
                    case CellLighting_FieldIndex.FogFarColor:
                        return FogFarColor;
                    case CellLighting_FieldIndex.FogMax:
                        return FogMax;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        return LightFadeBegin;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        return LightFadeEnd;
                    case CellLighting_FieldIndex.Inherits:
                        return Inherits;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientColor:
                        this.AmbientColor = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalColor:
                        this.DirectionalColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogNearColor:
                        this.FogNearColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogNear:
                        this.FogNear = ex;
                        break;
                    case CellLighting_FieldIndex.FogFar:
                        this.FogFar = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalFade:
                        this.DirectionalFade = ex;
                        break;
                    case CellLighting_FieldIndex.FogClipDistance:
                        this.FogClipDistance = ex;
                        break;
                    case CellLighting_FieldIndex.FogPower:
                        this.FogPower = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                        this.AmbientDirectionalXPlus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                        this.AmbientDirectionalXMinus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                        this.AmbientDirectionalYPlus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                        this.AmbientDirectionalYMinus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                        this.AmbientDirectionalZPlus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                        this.AmbientDirectionalZMinus = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientSpecular:
                        this.AmbientSpecular = ex;
                        break;
                    case CellLighting_FieldIndex.AmbientScale:
                        this.AmbientScale = ex;
                        break;
                    case CellLighting_FieldIndex.FogFarColor:
                        this.FogFarColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogMax:
                        this.FogMax = ex;
                        break;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        this.LightFadeBegin = ex;
                        break;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        this.LightFadeEnd = ex;
                        break;
                    case CellLighting_FieldIndex.Inherits:
                        this.Inherits = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientColor:
                        this.AmbientColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalColor:
                        this.DirectionalColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogNearColor:
                        this.FogNearColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogNear:
                        this.FogNear = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogFar:
                        this.FogFar = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalFade:
                        this.DirectionalFade = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogClipDistance:
                        this.FogClipDistance = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogPower:
                        this.FogPower = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                        this.AmbientDirectionalXPlus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                        this.AmbientDirectionalXMinus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                        this.AmbientDirectionalYPlus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                        this.AmbientDirectionalYMinus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                        this.AmbientDirectionalZPlus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                        this.AmbientDirectionalZMinus = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientSpecular:
                        this.AmbientSpecular = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.AmbientScale:
                        this.AmbientScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogFarColor:
                        this.FogFarColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogMax:
                        this.FogMax = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        this.LightFadeBegin = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        this.LightFadeEnd = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.Inherits:
                        this.Inherits = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (AmbientColor != null) return true;
                if (DirectionalColor != null) return true;
                if (FogNearColor != null) return true;
                if (FogNear != null) return true;
                if (FogFar != null) return true;
                if (DirectionalRotationXY != null) return true;
                if (DirectionalRotationZ != null) return true;
                if (DirectionalFade != null) return true;
                if (FogClipDistance != null) return true;
                if (FogPower != null) return true;
                if (AmbientDirectionalXPlus != null) return true;
                if (AmbientDirectionalXMinus != null) return true;
                if (AmbientDirectionalYPlus != null) return true;
                if (AmbientDirectionalYMinus != null) return true;
                if (AmbientDirectionalZPlus != null) return true;
                if (AmbientDirectionalZMinus != null) return true;
                if (AmbientSpecular != null) return true;
                if (AmbientScale != null) return true;
                if (FogFarColor != null) return true;
                if (FogMax != null) return true;
                if (LightFadeBegin != null) return true;
                if (LightFadeEnd != null) return true;
                if (Inherits != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(AmbientColor, "AmbientColor");
                fg.AppendItem(DirectionalColor, "DirectionalColor");
                fg.AppendItem(FogNearColor, "FogNearColor");
                fg.AppendItem(FogNear, "FogNear");
                fg.AppendItem(FogFar, "FogFar");
                fg.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                fg.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                fg.AppendItem(DirectionalFade, "DirectionalFade");
                fg.AppendItem(FogClipDistance, "FogClipDistance");
                fg.AppendItem(FogPower, "FogPower");
                fg.AppendItem(AmbientDirectionalXPlus, "AmbientDirectionalXPlus");
                fg.AppendItem(AmbientDirectionalXMinus, "AmbientDirectionalXMinus");
                fg.AppendItem(AmbientDirectionalYPlus, "AmbientDirectionalYPlus");
                fg.AppendItem(AmbientDirectionalYMinus, "AmbientDirectionalYMinus");
                fg.AppendItem(AmbientDirectionalZPlus, "AmbientDirectionalZPlus");
                fg.AppendItem(AmbientDirectionalZMinus, "AmbientDirectionalZMinus");
                fg.AppendItem(AmbientSpecular, "AmbientSpecular");
                fg.AppendItem(AmbientScale, "AmbientScale");
                fg.AppendItem(FogFarColor, "FogFarColor");
                fg.AppendItem(FogMax, "FogMax");
                fg.AppendItem(LightFadeBegin, "LightFadeBegin");
                fg.AppendItem(LightFadeEnd, "LightFadeEnd");
                fg.AppendItem(Inherits, "Inherits");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
                ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
                ret.FogNearColor = this.FogNearColor.Combine(rhs.FogNearColor);
                ret.FogNear = this.FogNear.Combine(rhs.FogNear);
                ret.FogFar = this.FogFar.Combine(rhs.FogFar);
                ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
                ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
                ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
                ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
                ret.FogPower = this.FogPower.Combine(rhs.FogPower);
                ret.AmbientDirectionalXPlus = this.AmbientDirectionalXPlus.Combine(rhs.AmbientDirectionalXPlus);
                ret.AmbientDirectionalXMinus = this.AmbientDirectionalXMinus.Combine(rhs.AmbientDirectionalXMinus);
                ret.AmbientDirectionalYPlus = this.AmbientDirectionalYPlus.Combine(rhs.AmbientDirectionalYPlus);
                ret.AmbientDirectionalYMinus = this.AmbientDirectionalYMinus.Combine(rhs.AmbientDirectionalYMinus);
                ret.AmbientDirectionalZPlus = this.AmbientDirectionalZPlus.Combine(rhs.AmbientDirectionalZPlus);
                ret.AmbientDirectionalZMinus = this.AmbientDirectionalZMinus.Combine(rhs.AmbientDirectionalZMinus);
                ret.AmbientSpecular = this.AmbientSpecular.Combine(rhs.AmbientSpecular);
                ret.AmbientScale = this.AmbientScale.Combine(rhs.AmbientScale);
                ret.FogFarColor = this.FogFarColor.Combine(rhs.FogFarColor);
                ret.FogMax = this.FogMax.Combine(rhs.FogMax);
                ret.LightFadeBegin = this.LightFadeBegin.Combine(rhs.LightFadeBegin);
                ret.LightFadeEnd = this.LightFadeEnd.Combine(rhs.LightFadeEnd);
                ret.Inherits = this.Inherits.Combine(rhs.Inherits);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool AmbientColor;
            public bool DirectionalColor;
            public bool FogNearColor;
            public bool FogNear;
            public bool FogFar;
            public bool DirectionalRotationXY;
            public bool DirectionalRotationZ;
            public bool DirectionalFade;
            public bool FogClipDistance;
            public bool FogPower;
            public bool AmbientDirectionalXPlus;
            public bool AmbientDirectionalXMinus;
            public bool AmbientDirectionalYPlus;
            public bool AmbientDirectionalYMinus;
            public bool AmbientDirectionalZPlus;
            public bool AmbientDirectionalZMinus;
            public bool AmbientSpecular;
            public bool AmbientScale;
            public bool FogFarColor;
            public bool FogMax;
            public bool LightFadeBegin;
            public bool LightFadeEnd;
            public bool Inherits;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.AmbientColor = defaultOn;
                this.DirectionalColor = defaultOn;
                this.FogNearColor = defaultOn;
                this.FogNear = defaultOn;
                this.FogFar = defaultOn;
                this.DirectionalRotationXY = defaultOn;
                this.DirectionalRotationZ = defaultOn;
                this.DirectionalFade = defaultOn;
                this.FogClipDistance = defaultOn;
                this.FogPower = defaultOn;
                this.AmbientDirectionalXPlus = defaultOn;
                this.AmbientDirectionalXMinus = defaultOn;
                this.AmbientDirectionalYPlus = defaultOn;
                this.AmbientDirectionalYMinus = defaultOn;
                this.AmbientDirectionalZPlus = defaultOn;
                this.AmbientDirectionalZMinus = defaultOn;
                this.AmbientSpecular = defaultOn;
                this.AmbientScale = defaultOn;
                this.FogFarColor = defaultOn;
                this.FogMax = defaultOn;
                this.LightFadeBegin = defaultOn;
                this.LightFadeEnd = defaultOn;
                this.Inherits = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((AmbientColor, null));
                ret.Add((DirectionalColor, null));
                ret.Add((FogNearColor, null));
                ret.Add((FogNear, null));
                ret.Add((FogFar, null));
                ret.Add((DirectionalRotationXY, null));
                ret.Add((DirectionalRotationZ, null));
                ret.Add((DirectionalFade, null));
                ret.Add((FogClipDistance, null));
                ret.Add((FogPower, null));
                ret.Add((AmbientDirectionalXPlus, null));
                ret.Add((AmbientDirectionalXMinus, null));
                ret.Add((AmbientDirectionalYPlus, null));
                ret.Add((AmbientDirectionalYMinus, null));
                ret.Add((AmbientDirectionalZPlus, null));
                ret.Add((AmbientDirectionalZMinus, null));
                ret.Add((AmbientSpecular, null));
                ret.Add((AmbientScale, null));
                ret.Add((FogFarColor, null));
                ret.Add((FogMax, null));
                ret.Add((LightFadeBegin, null));
                ret.Add((LightFadeEnd, null));
                ret.Add((Inherits, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CellLighting_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static CellLighting CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static CellLighting CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CellLighting();
            ((CellLightingSetterCommon)((ICellLightingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CellLighting item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellLightingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CellLighting GetNew()
        {
            return new CellLighting();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellLighting :
        ICellLightingGetter,
        IAmbientColorsCommon,
        ILoquiObjectSetter<ICellLighting>
    {
        new CellLighting.VersioningBreaks Versioning { get; set; }
        new Color AmbientColor { get; set; }
        new Color DirectionalColor { get; set; }
        new Color FogNearColor { get; set; }
        new Single FogNear { get; set; }
        new Single FogFar { get; set; }
        new Int32 DirectionalRotationXY { get; set; }
        new Int32 DirectionalRotationZ { get; set; }
        new Single DirectionalFade { get; set; }
        new Single FogClipDistance { get; set; }
        new Single FogPower { get; set; }
        new Color AmbientDirectionalXPlus { get; set; }
        new Color AmbientDirectionalXMinus { get; set; }
        new Color AmbientDirectionalYPlus { get; set; }
        new Color AmbientDirectionalYMinus { get; set; }
        new Color AmbientDirectionalZPlus { get; set; }
        new Color AmbientDirectionalZMinus { get; set; }
        new Color AmbientSpecular { get; set; }
        new Single AmbientScale { get; set; }
        new Color FogFarColor { get; set; }
        new Single FogMax { get; set; }
        new Single LightFadeBegin { get; set; }
        new Single LightFadeEnd { get; set; }
        new CellLighting.Inherit Inherits { get; set; }
    }

    public partial interface ICellLightingGetter :
        ILoquiObject,
        IAmbientColorsCommonGetter,
        ILoquiObject<ICellLightingGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CellLighting_Registration.Instance;
        CellLighting.VersioningBreaks Versioning { get; }
        Color AmbientColor { get; }
        Color DirectionalColor { get; }
        Color FogNearColor { get; }
        Single FogNear { get; }
        Single FogFar { get; }
        Int32 DirectionalRotationXY { get; }
        Int32 DirectionalRotationZ { get; }
        Single DirectionalFade { get; }
        Single FogClipDistance { get; }
        Single FogPower { get; }
        Color AmbientDirectionalXPlus { get; }
        Color AmbientDirectionalXMinus { get; }
        Color AmbientDirectionalYPlus { get; }
        Color AmbientDirectionalYMinus { get; }
        Color AmbientDirectionalZPlus { get; }
        Color AmbientDirectionalZMinus { get; }
        Color AmbientSpecular { get; }
        Single AmbientScale { get; }
        Color FogFarColor { get; }
        Single FogMax { get; }
        Single LightFadeBegin { get; }
        Single LightFadeEnd { get; }
        CellLighting.Inherit Inherits { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellLightingMixIn
    {
        public static void Clear(this ICellLighting item)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CellLighting.Mask<bool> GetEqualsMask(
            this ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellLightingGetter item,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellLightingGetter item,
            FileGeneration fg,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICellLightingGetter item,
            CellLighting.Mask<bool?> checkMask)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CellLighting.Mask<bool> GetHasBeenSetMask(this ICellLightingGetter item)
        {
            var ret = new CellLighting.Mask<bool>(false);
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICellLightingGetter item,
            ICellLightingGetter rhs)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            CellLighting.TranslationMask? copyMask = null)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            CellLighting.TranslationMask? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            CellLighting.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            string path,
            ErrorMaskBuilder? errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICellLighting item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CellLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICellLighting item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICellLighting item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CellLighting_FieldIndex
    {
        Versioning = 0,
        AmbientColor = 1,
        DirectionalColor = 2,
        FogNearColor = 3,
        FogNear = 4,
        FogFar = 5,
        DirectionalRotationXY = 6,
        DirectionalRotationZ = 7,
        DirectionalFade = 8,
        FogClipDistance = 9,
        FogPower = 10,
        AmbientDirectionalXPlus = 11,
        AmbientDirectionalXMinus = 12,
        AmbientDirectionalYPlus = 13,
        AmbientDirectionalYMinus = 14,
        AmbientDirectionalZPlus = 15,
        AmbientDirectionalZMinus = 16,
        AmbientSpecular = 17,
        AmbientScale = 18,
        FogFarColor = 19,
        FogMax = 20,
        LightFadeBegin = 21,
        LightFadeEnd = 22,
        Inherits = 23,
    }
    #endregion

    #region Registration
    public partial class CellLighting_Registration : ILoquiRegistration
    {
        public static readonly CellLighting_Registration Instance = new CellLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 284,
            version: 0);

        public const string GUID = "ee8cc403-808a-41cb-81c4-e94fd1fca22d";

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(CellLighting.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellLighting.ErrorMask);

        public static readonly Type ClassType = typeof(CellLighting);

        public static readonly Type GetterType = typeof(ICellLightingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellLighting);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CellLighting";

        public const string Name = "CellLighting";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)CellLighting_FieldIndex.Versioning;
                case "AMBIENTCOLOR":
                    return (ushort)CellLighting_FieldIndex.AmbientColor;
                case "DIRECTIONALCOLOR":
                    return (ushort)CellLighting_FieldIndex.DirectionalColor;
                case "FOGNEARCOLOR":
                    return (ushort)CellLighting_FieldIndex.FogNearColor;
                case "FOGNEAR":
                    return (ushort)CellLighting_FieldIndex.FogNear;
                case "FOGFAR":
                    return (ushort)CellLighting_FieldIndex.FogFar;
                case "DIRECTIONALROTATIONXY":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationXY;
                case "DIRECTIONALROTATIONZ":
                    return (ushort)CellLighting_FieldIndex.DirectionalRotationZ;
                case "DIRECTIONALFADE":
                    return (ushort)CellLighting_FieldIndex.DirectionalFade;
                case "FOGCLIPDISTANCE":
                    return (ushort)CellLighting_FieldIndex.FogClipDistance;
                case "FOGPOWER":
                    return (ushort)CellLighting_FieldIndex.FogPower;
                case "AMBIENTDIRECTIONALXPLUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalXPlus;
                case "AMBIENTDIRECTIONALXMINUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalXMinus;
                case "AMBIENTDIRECTIONALYPLUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalYPlus;
                case "AMBIENTDIRECTIONALYMINUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalYMinus;
                case "AMBIENTDIRECTIONALZPLUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalZPlus;
                case "AMBIENTDIRECTIONALZMINUS":
                    return (ushort)CellLighting_FieldIndex.AmbientDirectionalZMinus;
                case "AMBIENTSPECULAR":
                    return (ushort)CellLighting_FieldIndex.AmbientSpecular;
                case "AMBIENTSCALE":
                    return (ushort)CellLighting_FieldIndex.AmbientScale;
                case "FOGFARCOLOR":
                    return (ushort)CellLighting_FieldIndex.FogFarColor;
                case "FOGMAX":
                    return (ushort)CellLighting_FieldIndex.FogMax;
                case "LIGHTFADEBEGIN":
                    return (ushort)CellLighting_FieldIndex.LightFadeBegin;
                case "LIGHTFADEEND":
                    return (ushort)CellLighting_FieldIndex.LightFadeEnd;
                case "INHERITS":
                    return (ushort)CellLighting_FieldIndex.Inherits;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogNearColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                case CellLighting_FieldIndex.FogPower:
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                case CellLighting_FieldIndex.AmbientSpecular:
                case CellLighting_FieldIndex.AmbientScale:
                case CellLighting_FieldIndex.FogFarColor:
                case CellLighting_FieldIndex.FogMax:
                case CellLighting_FieldIndex.LightFadeBegin:
                case CellLighting_FieldIndex.LightFadeEnd:
                case CellLighting_FieldIndex.Inherits:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogNearColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                case CellLighting_FieldIndex.FogPower:
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                case CellLighting_FieldIndex.AmbientSpecular:
                case CellLighting_FieldIndex.AmbientScale:
                case CellLighting_FieldIndex.FogFarColor:
                case CellLighting_FieldIndex.FogMax:
                case CellLighting_FieldIndex.LightFadeBegin:
                case CellLighting_FieldIndex.LightFadeEnd:
                case CellLighting_FieldIndex.Inherits:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogNearColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                case CellLighting_FieldIndex.FogPower:
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                case CellLighting_FieldIndex.AmbientSpecular:
                case CellLighting_FieldIndex.AmbientScale:
                case CellLighting_FieldIndex.FogFarColor:
                case CellLighting_FieldIndex.FogMax:
                case CellLighting_FieldIndex.LightFadeBegin:
                case CellLighting_FieldIndex.LightFadeEnd:
                case CellLighting_FieldIndex.Inherits:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                    return "Versioning";
                case CellLighting_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case CellLighting_FieldIndex.DirectionalColor:
                    return "DirectionalColor";
                case CellLighting_FieldIndex.FogNearColor:
                    return "FogNearColor";
                case CellLighting_FieldIndex.FogNear:
                    return "FogNear";
                case CellLighting_FieldIndex.FogFar:
                    return "FogFar";
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return "DirectionalRotationXY";
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return "DirectionalRotationZ";
                case CellLighting_FieldIndex.DirectionalFade:
                    return "DirectionalFade";
                case CellLighting_FieldIndex.FogClipDistance:
                    return "FogClipDistance";
                case CellLighting_FieldIndex.FogPower:
                    return "FogPower";
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                    return "AmbientDirectionalXPlus";
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                    return "AmbientDirectionalXMinus";
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                    return "AmbientDirectionalYPlus";
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                    return "AmbientDirectionalYMinus";
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                    return "AmbientDirectionalZPlus";
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                    return "AmbientDirectionalZMinus";
                case CellLighting_FieldIndex.AmbientSpecular:
                    return "AmbientSpecular";
                case CellLighting_FieldIndex.AmbientScale:
                    return "AmbientScale";
                case CellLighting_FieldIndex.FogFarColor:
                    return "FogFarColor";
                case CellLighting_FieldIndex.FogMax:
                    return "FogMax";
                case CellLighting_FieldIndex.LightFadeBegin:
                    return "LightFadeBegin";
                case CellLighting_FieldIndex.LightFadeEnd:
                    return "LightFadeEnd";
                case CellLighting_FieldIndex.Inherits:
                    return "Inherits";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogNearColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                case CellLighting_FieldIndex.FogPower:
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                case CellLighting_FieldIndex.AmbientSpecular:
                case CellLighting_FieldIndex.AmbientScale:
                case CellLighting_FieldIndex.FogFarColor:
                case CellLighting_FieldIndex.FogMax:
                case CellLighting_FieldIndex.LightFadeBegin:
                case CellLighting_FieldIndex.LightFadeEnd:
                case CellLighting_FieldIndex.Inherits:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                case CellLighting_FieldIndex.AmbientColor:
                case CellLighting_FieldIndex.DirectionalColor:
                case CellLighting_FieldIndex.FogNearColor:
                case CellLighting_FieldIndex.FogNear:
                case CellLighting_FieldIndex.FogFar:
                case CellLighting_FieldIndex.DirectionalRotationXY:
                case CellLighting_FieldIndex.DirectionalRotationZ:
                case CellLighting_FieldIndex.DirectionalFade:
                case CellLighting_FieldIndex.FogClipDistance:
                case CellLighting_FieldIndex.FogPower:
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                case CellLighting_FieldIndex.AmbientSpecular:
                case CellLighting_FieldIndex.AmbientScale:
                case CellLighting_FieldIndex.FogFarColor:
                case CellLighting_FieldIndex.FogMax:
                case CellLighting_FieldIndex.LightFadeBegin:
                case CellLighting_FieldIndex.LightFadeEnd:
                case CellLighting_FieldIndex.Inherits:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
            switch (enu)
            {
                case CellLighting_FieldIndex.Versioning:
                    return typeof(CellLighting.VersioningBreaks);
                case CellLighting_FieldIndex.AmbientColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.DirectionalColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogNearColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogNear:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogFar:
                    return typeof(Single);
                case CellLighting_FieldIndex.DirectionalRotationXY:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalRotationZ:
                    return typeof(Int32);
                case CellLighting_FieldIndex.DirectionalFade:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogClipDistance:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogPower:
                    return typeof(Single);
                case CellLighting_FieldIndex.AmbientDirectionalXPlus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientDirectionalXMinus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientDirectionalYPlus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientDirectionalYMinus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientDirectionalZPlus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientDirectionalZMinus:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientSpecular:
                    return typeof(Color);
                case CellLighting_FieldIndex.AmbientScale:
                    return typeof(Single);
                case CellLighting_FieldIndex.FogFarColor:
                    return typeof(Color);
                case CellLighting_FieldIndex.FogMax:
                    return typeof(Single);
                case CellLighting_FieldIndex.LightFadeBegin:
                    return typeof(Single);
                case CellLighting_FieldIndex.LightFadeEnd:
                    return typeof(Single);
                case CellLighting_FieldIndex.Inherits:
                    return typeof(CellLighting.Inherit);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CellLightingXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.XCLL;
        public static readonly Type BinaryWriteTranslation = typeof(CellLightingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CellLightingSetterCommon
    {
        public static readonly CellLightingSetterCommon Instance = new CellLightingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellLighting item)
        {
            ClearPartial();
            item.Versioning = default;
            item.AmbientColor = default;
            item.DirectionalColor = default;
            item.FogNearColor = default;
            item.FogNear = default;
            item.FogFar = default;
            item.DirectionalRotationXY = default;
            item.DirectionalRotationZ = default;
            item.DirectionalFade = default;
            item.FogClipDistance = default;
            item.FogPower = default;
            item.AmbientDirectionalXPlus = default;
            item.AmbientDirectionalXMinus = default;
            item.AmbientDirectionalYPlus = default;
            item.AmbientDirectionalYMinus = default;
            item.AmbientDirectionalZPlus = default;
            item.AmbientDirectionalZMinus = default;
            item.AmbientSpecular = default;
            item.AmbientScale = default;
            item.FogFarColor = default;
            item.FogMax = default;
            item.LightFadeBegin = default;
            item.LightFadeEnd = default;
            item.Inherits = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ICellLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellLighting item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.XCLL)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CellLightingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CellLightingCommon
    {
        public static readonly CellLightingCommon Instance = new CellLightingCommon();

        public CellLighting.Mask<bool> GetEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellLighting.Mask<bool>(false);
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.AmbientColor = item.AmbientColor.ColorOnlyEquals(rhs.AmbientColor);
            ret.DirectionalColor = item.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor);
            ret.FogNearColor = item.FogNearColor.ColorOnlyEquals(rhs.FogNearColor);
            ret.FogNear = item.FogNear.EqualsWithin(rhs.FogNear);
            ret.FogFar = item.FogFar.EqualsWithin(rhs.FogFar);
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade.EqualsWithin(rhs.DirectionalFade);
            ret.FogClipDistance = item.FogClipDistance.EqualsWithin(rhs.FogClipDistance);
            ret.FogPower = item.FogPower.EqualsWithin(rhs.FogPower);
            ret.AmbientDirectionalXPlus = item.AmbientDirectionalXPlus.ColorOnlyEquals(rhs.AmbientDirectionalXPlus);
            ret.AmbientDirectionalXMinus = item.AmbientDirectionalXMinus.ColorOnlyEquals(rhs.AmbientDirectionalXMinus);
            ret.AmbientDirectionalYPlus = item.AmbientDirectionalYPlus.ColorOnlyEquals(rhs.AmbientDirectionalYPlus);
            ret.AmbientDirectionalYMinus = item.AmbientDirectionalYMinus.ColorOnlyEquals(rhs.AmbientDirectionalYMinus);
            ret.AmbientDirectionalZPlus = item.AmbientDirectionalZPlus.ColorOnlyEquals(rhs.AmbientDirectionalZPlus);
            ret.AmbientDirectionalZMinus = item.AmbientDirectionalZMinus.ColorOnlyEquals(rhs.AmbientDirectionalZMinus);
            ret.AmbientSpecular = item.AmbientSpecular.ColorOnlyEquals(rhs.AmbientSpecular);
            ret.AmbientScale = item.AmbientScale.EqualsWithin(rhs.AmbientScale);
            ret.FogFarColor = item.FogFarColor.ColorOnlyEquals(rhs.FogFarColor);
            ret.FogMax = item.FogMax.EqualsWithin(rhs.FogMax);
            ret.LightFadeBegin = item.LightFadeBegin.EqualsWithin(rhs.LightFadeBegin);
            ret.LightFadeEnd = item.LightFadeEnd.EqualsWithin(rhs.LightFadeEnd);
            ret.Inherits = item.Inherits == rhs.Inherits;
        }
        
        public string ToString(
            ICellLightingGetter item,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellLightingGetter item,
            FileGeneration fg,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CellLighting =>");
            }
            else
            {
                fg.AppendLine($"{name} (CellLighting) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellLightingGetter item,
            FileGeneration fg,
            CellLighting.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.AmbientColor ?? true)
            {
                fg.AppendItem(item.AmbientColor, "AmbientColor");
            }
            if (printMask?.DirectionalColor ?? true)
            {
                fg.AppendItem(item.DirectionalColor, "DirectionalColor");
            }
            if (printMask?.FogNearColor ?? true)
            {
                fg.AppendItem(item.FogNearColor, "FogNearColor");
            }
            if (printMask?.FogNear ?? true)
            {
                fg.AppendItem(item.FogNear, "FogNear");
            }
            if (printMask?.FogFar ?? true)
            {
                fg.AppendItem(item.FogFar, "FogFar");
            }
            if (printMask?.DirectionalRotationXY ?? true)
            {
                fg.AppendItem(item.DirectionalRotationXY, "DirectionalRotationXY");
            }
            if (printMask?.DirectionalRotationZ ?? true)
            {
                fg.AppendItem(item.DirectionalRotationZ, "DirectionalRotationZ");
            }
            if (printMask?.DirectionalFade ?? true)
            {
                fg.AppendItem(item.DirectionalFade, "DirectionalFade");
            }
            if (printMask?.FogClipDistance ?? true)
            {
                fg.AppendItem(item.FogClipDistance, "FogClipDistance");
            }
            if (printMask?.FogPower ?? true)
            {
                fg.AppendItem(item.FogPower, "FogPower");
            }
            if (printMask?.AmbientDirectionalXPlus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalXPlus, "AmbientDirectionalXPlus");
            }
            if (printMask?.AmbientDirectionalXMinus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalXMinus, "AmbientDirectionalXMinus");
            }
            if (printMask?.AmbientDirectionalYPlus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalYPlus, "AmbientDirectionalYPlus");
            }
            if (printMask?.AmbientDirectionalYMinus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalYMinus, "AmbientDirectionalYMinus");
            }
            if (printMask?.AmbientDirectionalZPlus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalZPlus, "AmbientDirectionalZPlus");
            }
            if (printMask?.AmbientDirectionalZMinus ?? true)
            {
                fg.AppendItem(item.AmbientDirectionalZMinus, "AmbientDirectionalZMinus");
            }
            if (printMask?.AmbientSpecular ?? true)
            {
                fg.AppendItem(item.AmbientSpecular, "AmbientSpecular");
            }
            if (printMask?.AmbientScale ?? true)
            {
                fg.AppendItem(item.AmbientScale, "AmbientScale");
            }
            if (printMask?.FogFarColor ?? true)
            {
                fg.AppendItem(item.FogFarColor, "FogFarColor");
            }
            if (printMask?.FogMax ?? true)
            {
                fg.AppendItem(item.FogMax, "FogMax");
            }
            if (printMask?.LightFadeBegin ?? true)
            {
                fg.AppendItem(item.LightFadeBegin, "LightFadeBegin");
            }
            if (printMask?.LightFadeEnd ?? true)
            {
                fg.AppendItem(item.LightFadeEnd, "LightFadeEnd");
            }
            if (printMask?.Inherits ?? true)
            {
                fg.AppendItem(item.Inherits, "Inherits");
            }
        }
        
        public bool HasBeenSet(
            ICellLightingGetter item,
            CellLighting.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICellLightingGetter item,
            CellLighting.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.AmbientColor = true;
            mask.DirectionalColor = true;
            mask.FogNearColor = true;
            mask.FogNear = true;
            mask.FogFar = true;
            mask.DirectionalRotationXY = true;
            mask.DirectionalRotationZ = true;
            mask.DirectionalFade = true;
            mask.FogClipDistance = true;
            mask.FogPower = true;
            mask.AmbientDirectionalXPlus = true;
            mask.AmbientDirectionalXMinus = true;
            mask.AmbientDirectionalYPlus = true;
            mask.AmbientDirectionalYMinus = true;
            mask.AmbientDirectionalZPlus = true;
            mask.AmbientDirectionalZMinus = true;
            mask.AmbientSpecular = true;
            mask.AmbientScale = true;
            mask.FogFarColor = true;
            mask.FogMax = true;
            mask.LightFadeBegin = true;
            mask.LightFadeEnd = true;
            mask.Inherits = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellLightingGetter? lhs,
            ICellLightingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.AmbientColor.ColorOnlyEquals(rhs.AmbientColor)) return false;
            if (!lhs.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor)) return false;
            if (!lhs.FogNearColor.ColorOnlyEquals(rhs.FogNearColor)) return false;
            if (!lhs.FogNear.EqualsWithin(rhs.FogNear)) return false;
            if (!lhs.FogFar.EqualsWithin(rhs.FogFar)) return false;
            if (lhs.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            if (lhs.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            if (!lhs.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            if (!lhs.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            if (!lhs.FogPower.EqualsWithin(rhs.FogPower)) return false;
            if (!lhs.AmbientDirectionalXPlus.ColorOnlyEquals(rhs.AmbientDirectionalXPlus)) return false;
            if (!lhs.AmbientDirectionalXMinus.ColorOnlyEquals(rhs.AmbientDirectionalXMinus)) return false;
            if (!lhs.AmbientDirectionalYPlus.ColorOnlyEquals(rhs.AmbientDirectionalYPlus)) return false;
            if (!lhs.AmbientDirectionalYMinus.ColorOnlyEquals(rhs.AmbientDirectionalYMinus)) return false;
            if (!lhs.AmbientDirectionalZPlus.ColorOnlyEquals(rhs.AmbientDirectionalZPlus)) return false;
            if (!lhs.AmbientDirectionalZMinus.ColorOnlyEquals(rhs.AmbientDirectionalZMinus)) return false;
            if (!lhs.AmbientSpecular.ColorOnlyEquals(rhs.AmbientSpecular)) return false;
            if (!lhs.AmbientScale.EqualsWithin(rhs.AmbientScale)) return false;
            if (!lhs.FogFarColor.ColorOnlyEquals(rhs.FogFarColor)) return false;
            if (!lhs.FogMax.EqualsWithin(rhs.FogMax)) return false;
            if (!lhs.LightFadeBegin.EqualsWithin(rhs.LightFadeBegin)) return false;
            if (!lhs.LightFadeEnd.EqualsWithin(rhs.LightFadeEnd)) return false;
            if (lhs.Inherits != rhs.Inherits) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICellLightingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.AmbientColor);
            hash.Add(item.DirectionalColor);
            hash.Add(item.FogNearColor);
            hash.Add(item.FogNear);
            hash.Add(item.FogFar);
            hash.Add(item.DirectionalRotationXY);
            hash.Add(item.DirectionalRotationZ);
            hash.Add(item.DirectionalFade);
            hash.Add(item.FogClipDistance);
            hash.Add(item.FogPower);
            hash.Add(item.AmbientDirectionalXPlus);
            hash.Add(item.AmbientDirectionalXMinus);
            hash.Add(item.AmbientDirectionalYPlus);
            hash.Add(item.AmbientDirectionalYMinus);
            hash.Add(item.AmbientDirectionalZPlus);
            hash.Add(item.AmbientDirectionalZMinus);
            hash.Add(item.AmbientSpecular);
            hash.Add(item.AmbientScale);
            hash.Add(item.FogFarColor);
            hash.Add(item.FogMax);
            hash.Add(item.LightFadeBegin);
            hash.Add(item.LightFadeEnd);
            hash.Add(item.Inherits);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CellLighting.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICellLightingGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ICellLightingGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class CellLightingSetterTranslationCommon
    {
        public static readonly CellLightingSetterTranslationCommon Instance = new CellLightingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICellLighting item,
            ICellLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                item.AmbientColor = rhs.AmbientColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                item.DirectionalColor = rhs.DirectionalColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearColor) ?? true))
            {
                item.FogNearColor = rhs.FogNearColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                item.FogNear = rhs.FogNear;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                item.FogFar = rhs.FogFar;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                item.DirectionalRotationXY = rhs.DirectionalRotationXY;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                item.DirectionalRotationZ = rhs.DirectionalRotationZ;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                item.DirectionalFade = rhs.DirectionalFade;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                item.FogClipDistance = rhs.FogClipDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogPower) ?? true))
            {
                item.FogPower = rhs.FogPower;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalXPlus) ?? true))
            {
                item.AmbientDirectionalXPlus = rhs.AmbientDirectionalXPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalXMinus) ?? true))
            {
                item.AmbientDirectionalXMinus = rhs.AmbientDirectionalXMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalYPlus) ?? true))
            {
                item.AmbientDirectionalYPlus = rhs.AmbientDirectionalYPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalYMinus) ?? true))
            {
                item.AmbientDirectionalYMinus = rhs.AmbientDirectionalYMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalZPlus) ?? true))
            {
                item.AmbientDirectionalZPlus = rhs.AmbientDirectionalZPlus;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalZMinus) ?? true))
            {
                item.AmbientDirectionalZMinus = rhs.AmbientDirectionalZMinus;
            }
            if (rhs.Versioning.HasFlag(CellLighting.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientSpecular) ?? true))
            {
                item.AmbientSpecular = rhs.AmbientSpecular;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientScale) ?? true))
            {
                item.AmbientScale = rhs.AmbientScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarColor) ?? true))
            {
                item.FogFarColor = rhs.FogFarColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogMax) ?? true))
            {
                item.FogMax = rhs.FogMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeBegin) ?? true))
            {
                item.LightFadeBegin = rhs.LightFadeBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeEnd) ?? true))
            {
                item.LightFadeEnd = rhs.LightFadeEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Inherits) ?? true))
            {
                item.Inherits = rhs.Inherits;
            }
        }
        
        #endregion
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            CellLighting.TranslationMask? copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CellLighting
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CellLightingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CellLightingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CellLightingXmlWriteTranslation Instance = new CellLightingXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<CellLighting.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)CellLighting_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientColor),
                    item: item.AmbientColor,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalColor),
                    item: item.DirectionalColor,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogNearColor),
                    item: item.FogNearColor,
                    fieldIndex: (int)CellLighting_FieldIndex.FogNearColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogNear),
                    item: item.FogNear,
                    fieldIndex: (int)CellLighting_FieldIndex.FogNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogFar),
                    item: item.FogFar,
                    fieldIndex: (int)CellLighting_FieldIndex.FogFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationXY),
                    item: item.DirectionalRotationXY,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationXY,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalRotationZ),
                    item: item.DirectionalRotationZ,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalRotationZ,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DirectionalFade),
                    item: item.DirectionalFade,
                    fieldIndex: (int)CellLighting_FieldIndex.DirectionalFade,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogClipDistance),
                    item: item.FogClipDistance,
                    fieldIndex: (int)CellLighting_FieldIndex.FogClipDistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogPower) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogPower),
                    item: item.FogPower,
                    fieldIndex: (int)CellLighting_FieldIndex.FogPower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalXPlus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalXPlus),
                    item: item.AmbientDirectionalXPlus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalXPlus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalXMinus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalXMinus),
                    item: item.AmbientDirectionalXMinus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalXMinus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalYPlus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalYPlus),
                    item: item.AmbientDirectionalYPlus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalYPlus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalYMinus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalYMinus),
                    item: item.AmbientDirectionalYMinus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalYMinus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalZPlus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalZPlus),
                    item: item.AmbientDirectionalZPlus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalZPlus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientDirectionalZMinus) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientDirectionalZMinus),
                    item: item.AmbientDirectionalZMinus,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientDirectionalZMinus,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientSpecular) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientSpecular),
                    item: item.AmbientSpecular,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientSpecular,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AmbientScale),
                    item: item.AmbientScale,
                    fieldIndex: (int)CellLighting_FieldIndex.AmbientScale,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogFarColor),
                    item: item.FogFarColor,
                    fieldIndex: (int)CellLighting_FieldIndex.FogFarColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogMax),
                    item: item.FogMax,
                    fieldIndex: (int)CellLighting_FieldIndex.FogMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeBegin) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LightFadeBegin),
                    item: item.LightFadeBegin,
                    fieldIndex: (int)CellLighting_FieldIndex.LightFadeBegin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeEnd) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LightFadeEnd),
                    item: item.LightFadeEnd,
                    fieldIndex: (int)CellLighting_FieldIndex.LightFadeEnd,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Inherits) ?? true))
            {
                EnumXmlTranslation<CellLighting.Inherit>.Instance.Write(
                    node: node,
                    name: nameof(item.Inherits),
                    item: item.Inherits,
                    fieldIndex: (int)CellLighting_FieldIndex.Inherits,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.CellLighting");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.CellLighting");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICellLightingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ICellLightingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CellLightingXmlCreateTranslation
    {
        public readonly static CellLightingXmlCreateTranslation Instance = new CellLightingXmlCreateTranslation();

        public static void FillPublicXml(
            ICellLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CellLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICellLighting item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<CellLighting.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientColor":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientColor);
                    try
                    {
                        item.AmbientColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalColor":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalColor);
                    try
                    {
                        item.DirectionalColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNearColor":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogNearColor);
                    try
                    {
                        item.FogNearColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNear":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogNear);
                    try
                    {
                        item.FogNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogFar":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogFar);
                    try
                    {
                        item.FogFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationXY":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationXY);
                    try
                    {
                        item.DirectionalRotationXY = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalRotationZ":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalRotationZ);
                    try
                    {
                        item.DirectionalRotationZ = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalFade":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.DirectionalFade);
                    try
                    {
                        item.DirectionalFade = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogClipDistance":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogClipDistance);
                    try
                    {
                        item.FogClipDistance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogPower":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogPower);
                    try
                    {
                        item.FogPower = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalXPlus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalXPlus);
                    try
                    {
                        item.AmbientDirectionalXPlus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalXMinus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalXMinus);
                    try
                    {
                        item.AmbientDirectionalXMinus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalYPlus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalYPlus);
                    try
                    {
                        item.AmbientDirectionalYPlus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalYMinus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalYMinus);
                    try
                    {
                        item.AmbientDirectionalYMinus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalZPlus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalZPlus);
                    try
                    {
                        item.AmbientDirectionalZPlus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientDirectionalZMinus":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientDirectionalZMinus);
                    try
                    {
                        item.AmbientDirectionalZMinus = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientSpecular":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientSpecular);
                    try
                    {
                        item.AmbientSpecular = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientScale":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.AmbientScale);
                    try
                    {
                        item.AmbientScale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogFarColor":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogFarColor);
                    try
                    {
                        item.FogFarColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogMax":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.FogMax);
                    try
                    {
                        item.FogMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightFadeBegin":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.LightFadeBegin);
                    try
                    {
                        item.LightFadeBegin = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightFadeEnd":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.LightFadeEnd);
                    try
                    {
                        item.LightFadeEnd = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Inherits":
                    errorMask?.PushIndex((int)CellLighting_FieldIndex.Inherits);
                    try
                    {
                        item.Inherits = EnumXmlTranslation<CellLighting.Inherit>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class CellLightingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            XElement node,
            string? name = null,
            CellLighting.TranslationMask? translationMask = null)
        {
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICellLightingGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CellLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CellLightingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CellLightingBinaryWriteTranslation Instance = new CellLightingBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICellLightingGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientColor);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalColor);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNearColor);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNear);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogFar);
            writer.Write(item.DirectionalRotationXY);
            writer.Write(item.DirectionalRotationZ);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalFade);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogClipDistance);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogPower);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalXPlus);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalXMinus);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalYPlus);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalYMinus);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalZPlus);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientDirectionalZMinus);
            if (!item.Versioning.HasFlag(CellLighting.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmbientSpecular);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmbientScale);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogFarColor);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogMax);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightFadeBegin);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightFadeEnd);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CellLighting.Inherit>.Instance.Write(
                    writer,
                    item.Inherits,
                    length: 4);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICellLightingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.XCLL),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellLightingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellLightingBinaryCreateTranslation
    {
        public readonly static CellLightingBinaryCreateTranslation Instance = new CellLightingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICellLighting item,
            MutagenFrame frame)
        {
            item.AmbientColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogNearColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.DirectionalRotationXY = frame.ReadInt32();
            item.DirectionalRotationZ = frame.ReadInt32();
            item.DirectionalFade = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogClipDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogPower = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.AmbientDirectionalXPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientDirectionalXMinus = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientDirectionalYPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientDirectionalYMinus = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientDirectionalZPlus = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientDirectionalZMinus = frame.ReadColor(ColorBinaryType.Alpha);
            if (frame.Complete)
            {
                item.Versioning |= CellLighting.VersioningBreaks.Break0;
                return;
            }
            item.AmbientSpecular = frame.ReadColor(ColorBinaryType.Alpha);
            item.AmbientScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FogFarColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LightFadeBegin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LightFadeEnd = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Inherits = EnumBinaryTranslation<CellLighting.Inherit>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CellLightingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellLightingGetter item,
            MutagenWriter writer)
        {
            ((CellLightingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CellLightingBinaryOverlay :
        BinaryOverlay,
        ICellLightingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static CellLighting_Registration Registration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICellLightingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICellLightingGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CellLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CellLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public CellLighting.VersioningBreaks Versioning { get; private set; }
        public Color AmbientColor => _data.Slice(0x0, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalColor => _data.Slice(0x4, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color FogNearColor => _data.Slice(0x8, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single FogNear => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public Single FogFar => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        public Int32 DirectionalRotationXY => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x14, 0x4));
        public Int32 DirectionalRotationZ => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x18, 0x4));
        public Single DirectionalFade => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        public Single FogClipDistance => SpanExt.GetFloat(_data.Slice(0x20, 0x4));
        public Single FogPower => SpanExt.GetFloat(_data.Slice(0x24, 0x4));
        public Color AmbientDirectionalXPlus => _data.Slice(0x28, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientDirectionalXMinus => _data.Slice(0x2C, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientDirectionalYPlus => _data.Slice(0x30, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientDirectionalYMinus => _data.Slice(0x34, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientDirectionalZPlus => _data.Slice(0x38, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientDirectionalZMinus => _data.Slice(0x3C, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color AmbientSpecular => _data.Slice(0x40, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single AmbientScale => SpanExt.GetFloat(_data.Slice(0x44, 0x4));
        public Color FogFarColor => _data.Slice(0x48, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single FogMax => SpanExt.GetFloat(_data.Slice(0x4C, 0x4));
        public Single LightFadeBegin => SpanExt.GetFloat(_data.Slice(0x50, 0x4));
        public Single LightFadeEnd => SpanExt.GetFloat(_data.Slice(0x54, 0x4));
        public CellLighting.Inherit Inherits => (CellLighting.Inherit)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x58, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellLightingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellLightingBinaryOverlay CellLightingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CellLightingBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x40)
            {
                ret.Versioning |= CellLighting.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CellLightingBinaryOverlay CellLightingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CellLightingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellLightingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

