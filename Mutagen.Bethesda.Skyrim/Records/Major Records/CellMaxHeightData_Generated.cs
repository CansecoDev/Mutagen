/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CellMaxHeightData :
        ICellMaxHeightData,
        IEquatable<ICellMaxHeightDataGetter>,
        ILoquiObjectSetter<CellMaxHeightData>
    {
        #region Ctor
        public CellMaxHeightData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Offset
        public Single Offset { get; set; } = default;
        #endregion
        #region HeightMap
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<Byte> _HeightMap = new Array2d<Byte>(32, 32);
        public IArray2d<Byte> HeightMap
        {
            get => this._HeightMap;
            init => this._HeightMap = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<Byte> ICellMaxHeightDataGetter.HeightMap => _HeightMap;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMaxHeightDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICellMaxHeightDataGetter rhs) return false;
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICellMaxHeightDataGetter? obj)
        {
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Offset = initialValue;
                this.HeightMap = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
            }

            public Mask(
                TItem Offset,
                TItem HeightMap)
            {
                this.Offset = Offset;
                this.HeightMap = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(HeightMap, Enumerable.Empty<(P2Int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Offset;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? HeightMap;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Offset, rhs.Offset)) return false;
                if (!object.Equals(this.HeightMap, rhs.HeightMap)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Offset);
                hash.Add(this.HeightMap);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Offset)) return false;
                if (this.HeightMap != null)
                {
                    if (!eval(this.HeightMap.Overall)) return false;
                    if (this.HeightMap.Specific != null)
                    {
                        foreach (var item in this.HeightMap.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Offset)) return true;
                if (this.HeightMap != null)
                {
                    if (eval(this.HeightMap.Overall)) return true;
                    if (this.HeightMap.Specific != null)
                    {
                        foreach (var item in this.HeightMap.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CellMaxHeightData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Offset = eval(this.Offset);
                if (HeightMap != null)
                {
                    obj.HeightMap = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.HeightMap.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (HeightMap.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.HeightMap.Specific = l;
                        foreach (var item in HeightMap.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CellMaxHeightData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CellMaxHeightData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CellMaxHeightData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Offset ?? true)
                    {
                        fg.AppendItem(Offset, "Offset");
                    }
                    if ((printMask?.HeightMap?.Overall ?? true)
                        && HeightMap is {} HeightMapItem)
                    {
                        fg.AppendLine("HeightMap =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HeightMapItem.Overall);
                            if (HeightMapItem.Specific != null)
                            {
                                foreach (var subItem in HeightMapItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Offset;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? HeightMap;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CellMaxHeightData_FieldIndex enu = (CellMaxHeightData_FieldIndex)index;
                switch (enu)
                {
                    case CellMaxHeightData_FieldIndex.Offset:
                        return Offset;
                    case CellMaxHeightData_FieldIndex.HeightMap:
                        return HeightMap;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CellMaxHeightData_FieldIndex enu = (CellMaxHeightData_FieldIndex)index;
                switch (enu)
                {
                    case CellMaxHeightData_FieldIndex.Offset:
                        this.Offset = ex;
                        break;
                    case CellMaxHeightData_FieldIndex.HeightMap:
                        this.HeightMap = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CellMaxHeightData_FieldIndex enu = (CellMaxHeightData_FieldIndex)index;
                switch (enu)
                {
                    case CellMaxHeightData_FieldIndex.Offset:
                        this.Offset = (Exception?)obj;
                        break;
                    case CellMaxHeightData_FieldIndex.HeightMap:
                        this.HeightMap = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Offset != null) return true;
                if (HeightMap != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Offset, "Offset");
                if (HeightMap is {} HeightMapItem)
                {
                    fg.AppendLine("HeightMap =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HeightMapItem.Overall);
                        if (HeightMapItem.Specific != null)
                        {
                            foreach (var subItem in HeightMapItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Offset = this.Offset.Combine(rhs.Offset);
                ret.HeightMap = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ExceptionExt.Combine(this.HeightMap?.Overall, rhs.HeightMap?.Overall), ExceptionExt.Combine(this.HeightMap?.Specific, rhs.HeightMap?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Offset;
            public bool HeightMap;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Offset = defaultOn;
                this.HeightMap = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Offset, null));
                ret.Add((HeightMap, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CellMaxHeightData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellMaxHeightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CellMaxHeightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CellMaxHeightData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            var ret = new CellMaxHeightData();
            ((CellMaxHeightDataSetterCommon)((ICellMaxHeightDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CellMaxHeightData item,
            TypedParseParams? translationParams = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CellMaxHeightDataSetterCommon)((ICellMaxHeightDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CellMaxHeightData GetNew()
        {
            return new CellMaxHeightData();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellMaxHeightData :
        ICellMaxHeightDataGetter,
        ILoquiObjectSetter<ICellMaxHeightData>
    {
        new Single Offset { get; set; }
        new IArray2d<Byte> HeightMap { get; }
    }

    public partial interface ICellMaxHeightDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICellMaxHeightDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CellMaxHeightData_Registration.Instance;
        Single Offset { get; }
        IReadOnlyArray2d<Byte> HeightMap { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellMaxHeightDataMixIn
    {
        public static void Clear(this ICellMaxHeightData item)
        {
            ((CellMaxHeightDataSetterCommon)((ICellMaxHeightDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CellMaxHeightData.Mask<bool> GetEqualsMask(
            this ICellMaxHeightDataGetter item,
            ICellMaxHeightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellMaxHeightDataGetter item,
            string? name = null,
            CellMaxHeightData.Mask<bool>? printMask = null)
        {
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellMaxHeightDataGetter item,
            FileGeneration fg,
            string? name = null,
            CellMaxHeightData.Mask<bool>? printMask = null)
        {
            ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellMaxHeightDataGetter item,
            ICellMaxHeightDataGetter rhs,
            CellMaxHeightData.TranslationMask? equalsMask = null)
        {
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICellMaxHeightData lhs,
            ICellMaxHeightDataGetter rhs)
        {
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellMaxHeightData lhs,
            ICellMaxHeightDataGetter rhs,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellMaxHeightData lhs,
            ICellMaxHeightDataGetter rhs,
            out CellMaxHeightData.ErrorMask errorMask,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CellMaxHeightData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellMaxHeightData lhs,
            ICellMaxHeightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CellMaxHeightData DeepCopy(
            this ICellMaxHeightDataGetter item,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            return ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellMaxHeightData DeepCopy(
            this ICellMaxHeightDataGetter item,
            out CellMaxHeightData.ErrorMask errorMask,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            return ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellMaxHeightData DeepCopy(
            this ICellMaxHeightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellMaxHeightData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            ((CellMaxHeightDataSetterCommon)((ICellMaxHeightDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CellMaxHeightData_FieldIndex
    {
        Offset = 0,
        HeightMap = 1,
    }
    #endregion

    #region Registration
    public partial class CellMaxHeightData_Registration : ILoquiRegistration
    {
        public static readonly CellMaxHeightData_Registration Instance = new CellMaxHeightData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 481,
            version: 0);

        public const string GUID = "1805172c-baaf-4ee9-9bc6-d850a5e68bdf";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(CellMaxHeightData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellMaxHeightData.ErrorMask);

        public static readonly Type ClassType = typeof(CellMaxHeightData);

        public static readonly Type GetterType = typeof(ICellMaxHeightDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellMaxHeightData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CellMaxHeightData";

        public const string Name = "CellMaxHeightData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MHDT;
        public static readonly Type BinaryWriteTranslation = typeof(CellMaxHeightDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CellMaxHeightDataSetterCommon
    {
        public static readonly CellMaxHeightDataSetterCommon Instance = new CellMaxHeightDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellMaxHeightData item)
        {
            ClearPartial();
            item.Offset = default;
            item.HeightMap.SetAllTo(default);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellMaxHeightData item,
            MutagenFrame frame,
            TypedParseParams? translationParams = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.MHDT),
                translationParams?.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CellMaxHeightDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CellMaxHeightDataCommon
    {
        public static readonly CellMaxHeightDataCommon Instance = new CellMaxHeightDataCommon();

        public CellMaxHeightData.Mask<bool> GetEqualsMask(
            ICellMaxHeightDataGetter item,
            ICellMaxHeightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellMaxHeightData.Mask<bool>(false);
            ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellMaxHeightDataGetter item,
            ICellMaxHeightDataGetter rhs,
            CellMaxHeightData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Offset = item.Offset.EqualsWithin(rhs.Offset);
            ret.HeightMap = item.HeightMap.Array2dEqualsHelper(
                rhs.HeightMap,
                (l, r) => l == r,
                include);
        }
        
        public string ToString(
            ICellMaxHeightDataGetter item,
            string? name = null,
            CellMaxHeightData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellMaxHeightDataGetter item,
            FileGeneration fg,
            string? name = null,
            CellMaxHeightData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CellMaxHeightData =>");
            }
            else
            {
                fg.AppendLine($"{name} (CellMaxHeightData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellMaxHeightDataGetter item,
            FileGeneration fg,
            CellMaxHeightData.Mask<bool>? printMask = null)
        {
            if (printMask?.Offset ?? true)
            {
                fg.AppendItem(item.Offset, "Offset");
            }
            if (printMask?.HeightMap?.Overall ?? true)
            {
                fg.AppendLine("HeightMap =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.HeightMap)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellMaxHeightDataGetter? lhs,
            ICellMaxHeightDataGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((crystal?.GetShouldTranslate((int)CellMaxHeightData_FieldIndex.Offset) ?? true))
            {
                if (!lhs.Offset.EqualsWithin(rhs.Offset)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CellMaxHeightData_FieldIndex.HeightMap) ?? true))
            {
                if (!lhs.HeightMap.SequenceEqualNullable(rhs.HeightMap)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICellMaxHeightDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Offset);
            hash.Add(item.HeightMap);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CellMaxHeightData.GetNew();
        }
        
    }
    public partial class CellMaxHeightDataSetterTranslationCommon
    {
        public static readonly CellMaxHeightDataSetterTranslationCommon Instance = new CellMaxHeightDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellMaxHeightData item,
            ICellMaxHeightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CellMaxHeightData_FieldIndex.Offset) ?? true))
            {
                item.Offset = rhs.Offset;
            }
            if ((copyMask?.GetShouldTranslate((int)CellMaxHeightData_FieldIndex.HeightMap) ?? true))
            {
                errorMask?.PushIndex((int)CellMaxHeightData_FieldIndex.HeightMap);
                try
                {
                    item.HeightMap.SetTo(rhs.HeightMap);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public CellMaxHeightData DeepCopy(
            ICellMaxHeightDataGetter item,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            CellMaxHeightData ret = (CellMaxHeightData)((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).GetNew();
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CellMaxHeightData DeepCopy(
            ICellMaxHeightDataGetter item,
            out CellMaxHeightData.ErrorMask errorMask,
            CellMaxHeightData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellMaxHeightData ret = (CellMaxHeightData)((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).GetNew();
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CellMaxHeightData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CellMaxHeightData DeepCopy(
            ICellMaxHeightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CellMaxHeightData ret = (CellMaxHeightData)((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)item).CommonInstance()!).GetNew();
            ((CellMaxHeightDataSetterTranslationCommon)((ICellMaxHeightDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CellMaxHeightData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellMaxHeightData_Registration.Instance;
        public static CellMaxHeightData_Registration StaticRegistration => CellMaxHeightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellMaxHeightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CellMaxHeightDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellMaxHeightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellMaxHeightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellMaxHeightDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICellMaxHeightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CellMaxHeightDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CellMaxHeightDataBinaryWriteTranslation Instance = new CellMaxHeightDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICellMaxHeightDataGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Offset);
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.HeightMap,
                transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            ICellMaxHeightDataGetter item,
            TypedWriteParams? translationParams = null)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.MHDT),
                overflowRecord: translationParams?.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams? translationParams = null)
        {
            Write(
                item: (ICellMaxHeightDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    public partial class CellMaxHeightDataBinaryCreateTranslation
    {
        public readonly static CellMaxHeightDataBinaryCreateTranslation Instance = new CellMaxHeightDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICellMaxHeightData item,
            MutagenFrame frame)
        {
            item.Offset = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HeightMap.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<Byte>.Instance.Parse(
                    reader: frame,
                    size: new P2Int(32, 32),
                    transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CellMaxHeightDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellMaxHeightDataGetter item,
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CellMaxHeightDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CellMaxHeightDataBinaryOverlay :
        PluginBinaryOverlay,
        ICellMaxHeightDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellMaxHeightData_Registration.Instance;
        public static CellMaxHeightData_Registration StaticRegistration => CellMaxHeightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellMaxHeightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellMaxHeightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellMaxHeightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICellMaxHeightDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICellMaxHeightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellMaxHeightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams? translationParams = null)
        {
            ((CellMaxHeightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Offset => _data.Slice(0x0, 0x4).Float();
        #region HeightMap
        public IReadOnlyArray2d<Byte> HeightMap => BinaryOverlayArray2d.Factory<Byte>(
            mem: _data.Slice(4),
            package: _package,
            itemLength: 1,
            size: new P2Int(32, 32),
            getter: (s, p) => s[0]);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellMaxHeightDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellMaxHeightDataBinaryOverlay CellMaxHeightDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            var ret = new CellMaxHeightDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants, parseParams),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x404 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CellMaxHeightDataBinaryOverlay CellMaxHeightDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams? parseParams = null)
        {
            return CellMaxHeightDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                parseParams: parseParams);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMaxHeightDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICellMaxHeightDataGetter rhs) return false;
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICellMaxHeightDataGetter? obj)
        {
            return ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

