/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Class :
        SkyrimMajorRecord,
        IClassInternal,
        ILoquiObjectSetter<Class>,
        IEquatable<Class>,
        IEqualsMask
    {
        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString Name { get; set; } = string.Empty;
        #endregion
        #region Description
        public String Description { get; set; } = string.Empty;
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Icon => this.Icon;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Teaches
        public Skill? Teaches { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IClassGetter.Teaches => this.Teaches;
        #endregion
        #region MaxTrainingLevel
        public Byte MaxTrainingLevel { get; set; } = default;
        #endregion
        #region SkillWeights
        private readonly Dictionary<Skill, Byte> _SkillWeights = new Dictionary<Skill, Byte>();
        public IDictionary<Skill, Byte> SkillWeights => _SkillWeights;
        #region Interface Members
        IDictionary<Skill, Byte> IClass.SkillWeights => _SkillWeights;
        IReadOnlyDictionary<Skill, Byte> IClassGetter.SkillWeights => _SkillWeights;
        #endregion

        #endregion
        #region BleedoutDefault
        public Single BleedoutDefault { get; set; } = default;
        #endregion
        #region VoicePoints
        public UInt32 VoicePoints { get; set; } = default;
        #endregion
        #region StatWeights
        private readonly Dictionary<BasicStat, Byte> _StatWeights = new Dictionary<BasicStat, Byte>();
        public IDictionary<BasicStat, Byte> StatWeights => _StatWeights;
        #region Interface Members
        IDictionary<BasicStat, Byte> IClass.StatWeights => _StatWeights;
        IReadOnlyDictionary<BasicStat, Byte> IClassGetter.StatWeights => _StatWeights;
        #endregion

        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public Class.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClassGetter rhs)) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Class? obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Class CreateFromXml(
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Class CreateFromXml(
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Class CreateFromXml(
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Class CreateFromXml(
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Unknown = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(initialValue, null);
                this.BleedoutDefault = initialValue;
                this.VoicePoints = initialValue;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(initialValue, null);
                this.Unknown2 = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Description,
                TItem Icon,
                TItem Unknown,
                TItem Teaches,
                TItem MaxTrainingLevel,
                TItem SkillWeights,
                TItem BleedoutDefault,
                TItem VoicePoints,
                TItem StatWeights,
                TItem Unknown2,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.Unknown = Unknown;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(SkillWeights, null);
                this.BleedoutDefault = BleedoutDefault;
                this.VoicePoints = VoicePoints;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(StatWeights, null);
                this.Unknown2 = Unknown2;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Icon;
            public TItem Unknown;
            public TItem Teaches;
            public TItem MaxTrainingLevel;
            public MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>? SkillWeights;
            public TItem BleedoutDefault;
            public TItem VoicePoints;
            public MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>? StatWeights;
            public TItem Unknown2;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.SkillWeights, rhs.SkillWeights)) return false;
                if (!object.Equals(this.BleedoutDefault, rhs.BleedoutDefault)) return false;
                if (!object.Equals(this.VoicePoints, rhs.VoicePoints)) return false;
                if (!object.Equals(this.StatWeights, rhs.StatWeights)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Icon);
                hash.Add(this.Unknown);
                hash.Add(this.Teaches);
                hash.Add(this.MaxTrainingLevel);
                hash.Add(this.SkillWeights);
                hash.Add(this.BleedoutDefault);
                hash.Add(this.VoicePoints);
                hash.Add(this.StatWeights);
                hash.Add(this.Unknown2);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (this.SkillWeights != null)
                {
                    if (!eval(this.SkillWeights.Overall)) return false;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BleedoutDefault)) return false;
                if (!eval(this.VoicePoints)) return false;
                if (this.StatWeights != null)
                {
                    if (!eval(this.StatWeights.Overall)) return false;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaxTrainingLevel)) return true;
                if (this.SkillWeights != null)
                {
                    if (eval(this.SkillWeights.Overall)) return true;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.BleedoutDefault)) return true;
                if (eval(this.VoicePoints)) return true;
                if (this.StatWeights != null)
                {
                    if (eval(this.StatWeights.Overall)) return true;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.Unknown2)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Class.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Unknown = eval(this.Unknown);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                if (SkillWeights != null)
                {
                    obj.SkillWeights = new MaskItem<R, IEnumerable<KeyValuePair<Skill, R>>?>(eval(this.SkillWeights.Overall), default);
                    if (SkillWeights.Specific != null)
                    {
                        List<KeyValuePair<Skill, R>> l = new List<KeyValuePair<Skill, R>>();
                        obj.SkillWeights.Specific = l;
                        foreach (var item in SkillWeights.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.BleedoutDefault = eval(this.BleedoutDefault);
                obj.VoicePoints = eval(this.VoicePoints);
                if (StatWeights != null)
                {
                    obj.StatWeights = new MaskItem<R, IEnumerable<KeyValuePair<BasicStat, R>>?>(eval(this.StatWeights.Overall), default);
                    if (StatWeights.Specific != null)
                    {
                        List<KeyValuePair<BasicStat, R>> l = new List<KeyValuePair<BasicStat, R>>();
                        obj.StatWeights.Specific = l;
                        foreach (var item in StatWeights.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.Unknown2 = eval(this.Unknown2);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Class.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Class.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Class.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                    }
                    if (printMask?.SkillWeights?.Overall ?? true)
                    {
                        fg.AppendLine("SkillWeights =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (SkillWeights != null)
                            {
                                if (SkillWeights.Overall != null)
                                {
                                    fg.AppendLine(SkillWeights.Overall.ToString());
                                }
                                if (SkillWeights.Specific != null)
                                {
                                    foreach (var subItem in SkillWeights.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BleedoutDefault ?? true)
                    {
                        fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                    }
                    if (printMask?.VoicePoints ?? true)
                    {
                        fg.AppendItem(VoicePoints, "VoicePoints");
                    }
                    if (printMask?.StatWeights?.Overall ?? true)
                    {
                        fg.AppendLine("StatWeights =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (StatWeights != null)
                            {
                                if (StatWeights.Overall != null)
                                {
                                    fg.AppendLine(StatWeights.Overall.ToString());
                                }
                                if (StatWeights.Specific != null)
                                {
                                    foreach (var subItem in StatWeights.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public Exception? Unknown;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>? SkillWeights;
            public Exception? BleedoutDefault;
            public Exception? VoicePoints;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>? StatWeights;
            public Exception? Unknown2;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        return Name;
                    case Class_FieldIndex.Description:
                        return Description;
                    case Class_FieldIndex.Icon:
                        return Icon;
                    case Class_FieldIndex.Unknown:
                        return Unknown;
                    case Class_FieldIndex.Teaches:
                        return Teaches;
                    case Class_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case Class_FieldIndex.SkillWeights:
                        return SkillWeights;
                    case Class_FieldIndex.BleedoutDefault:
                        return BleedoutDefault;
                    case Class_FieldIndex.VoicePoints:
                        return VoicePoints;
                    case Class_FieldIndex.StatWeights:
                        return StatWeights;
                    case Class_FieldIndex.Unknown2:
                        return Unknown2;
                    case Class_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case Class_FieldIndex.SkillWeights:
                        this.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ex, null);
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = ex;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = ex;
                        break;
                    case Class_FieldIndex.StatWeights:
                        this.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(ex, null);
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception?)obj;
                        break;
                    case Class_FieldIndex.SkillWeights:
                        this.SkillWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>)obj;
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = (Exception?)obj;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = (Exception?)obj;
                        break;
                    case Class_FieldIndex.StatWeights:
                        this.StatWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>)obj;
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Unknown != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (SkillWeights != null) return true;
                if (BleedoutDefault != null) return true;
                if (VoicePoints != null) return true;
                if (StatWeights != null) return true;
                if (Unknown2 != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Icon, "Icon");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Teaches, "Teaches");
                fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                fg.AppendLine("SkillWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (SkillWeights != null)
                    {
                        if (SkillWeights.Overall != null)
                        {
                            fg.AppendLine(SkillWeights.Overall.ToString());
                        }
                        if (SkillWeights.Specific != null)
                        {
                            foreach (var subItem in SkillWeights.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                fg.AppendItem(VoicePoints, "VoicePoints");
                fg.AppendLine("StatWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (StatWeights != null)
                    {
                        if (StatWeights.Overall != null)
                        {
                            fg.AppendLine(StatWeights.Overall.ToString());
                        }
                        if (StatWeights.Specific != null)
                        {
                            foreach (var subItem in StatWeights.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ExceptionExt.Combine(this.SkillWeights?.Overall, rhs.SkillWeights?.Overall), ExceptionExt.Combine(this.SkillWeights?.Specific, rhs.SkillWeights?.Specific));
                ret.BleedoutDefault = this.BleedoutDefault.Combine(rhs.BleedoutDefault);
                ret.VoicePoints = this.VoicePoints.Combine(rhs.VoicePoints);
                ret.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(ExceptionExt.Combine(this.StatWeights?.Overall, rhs.StatWeights?.Overall), ExceptionExt.Combine(this.StatWeights?.Specific, rhs.StatWeights?.Specific));
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public bool Unknown;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool SkillWeights;
            public bool BleedoutDefault;
            public bool VoicePoints;
            public bool StatWeights;
            public bool Unknown2;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.Unknown = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.SkillWeights = defaultOn;
                this.BleedoutDefault = defaultOn;
                this.VoicePoints = defaultOn;
                this.StatWeights = defaultOn;
                this.Unknown2 = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Unknown, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((SkillWeights, null));
                ret.Add((BleedoutDefault, null));
                ret.Add((VoicePoints, null));
                ret.Add((StatWeights, null));
                ret.Add((Unknown2, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Class_Registration.TriggeringRecordType;
        public Class(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Class(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Class(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Class CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Class CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Class item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassSetterCommon)((IClassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Class GetNew()
        {
            return new Class();
        }

    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassGetter,
        ISkyrimMajorRecord,
        ITranslatedNamedRequired,
        ILoquiObjectSetter<IClassInternal>
    {
        new TranslatedString Name { get; set; }
        new String Description { get; set; }
        new String? Icon { get; set; }
        new Int32 Unknown { get; set; }
        new Skill? Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new IDictionary<Skill, Byte> SkillWeights { get; }
        new Single BleedoutDefault { get; set; }
        new UInt32 VoicePoints { get; set; }
        new IDictionary<BasicStat, Byte> StatWeights { get; }
        new Byte Unknown2 { get; set; }
        new Class.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IClassInternal :
        ISkyrimMajorRecordInternal,
        IClass,
        IClassGetter
    {
        new IDictionary<Skill, Byte> SkillWeights { get; }
        new IDictionary<BasicStat, Byte> StatWeights { get; }
    }

    public partial interface IClassGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedRequiredGetter,
        ILoquiObject<IClassGetter>,
        IXmlItem,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Class_Registration.Instance;
        TranslatedString Name { get; }
        String Description { get; }
        String? Icon { get; }
        Int32 Unknown { get; }
        Skill? Teaches { get; }
        Byte MaxTrainingLevel { get; }
        IReadOnlyDictionary<Skill, Byte> SkillWeights { get; }
        Single BleedoutDefault { get; }
        UInt32 VoicePoints { get; }
        IReadOnlyDictionary<BasicStat, Byte> StatWeights { get; }
        Byte Unknown2 { get; }
        Class.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Class.Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Class.Mask<bool> GetHasBeenSetMask(this IClassGetter item)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassGetter item,
            IClassGetter rhs)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Description = 7,
        Icon = 8,
        Unknown = 9,
        Teaches = 10,
        MaxTrainingLevel = 11,
        SkillWeights = 12,
        BleedoutDefault = 13,
        VoicePoints = 14,
        StatWeights = 15,
        Unknown2 = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "faa1b071-96bf-43c3-be87-10d98e0b6cd8";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Class.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class.ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type? InternalSetterType = typeof(IClassInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "UNKNOWN":
                    return (ushort)Class_FieldIndex.Unknown;
                case "TEACHES":
                    return (ushort)Class_FieldIndex.Teaches;
                case "MAXTRAININGLEVEL":
                    return (ushort)Class_FieldIndex.MaxTrainingLevel;
                case "SKILLWEIGHTS":
                    return (ushort)Class_FieldIndex.SkillWeights;
                case "BLEEDOUTDEFAULT":
                    return (ushort)Class_FieldIndex.BleedoutDefault;
                case "VOICEPOINTS":
                    return (ushort)Class_FieldIndex.VoicePoints;
                case "STATWEIGHTS":
                    return (ushort)Class_FieldIndex.StatWeights;
                case "UNKNOWN2":
                    return (ushort)Class_FieldIndex.Unknown2;
                case "DATADATATYPESTATE":
                    return (ushort)Class_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.SkillWeights:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.StatWeights:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.SkillWeights:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.StatWeights:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.SkillWeights:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.StatWeights:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.Unknown:
                    return "Unknown";
                case Class_FieldIndex.Teaches:
                    return "Teaches";
                case Class_FieldIndex.MaxTrainingLevel:
                    return "MaxTrainingLevel";
                case Class_FieldIndex.SkillWeights:
                    return "SkillWeights";
                case Class_FieldIndex.BleedoutDefault:
                    return "BleedoutDefault";
                case Class_FieldIndex.VoicePoints:
                    return "VoicePoints";
                case Class_FieldIndex.StatWeights:
                    return "StatWeights";
                case Class_FieldIndex.Unknown2:
                    return "Unknown2";
                case Class_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.SkillWeights:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.StatWeights:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Unknown:
                case Class_FieldIndex.Teaches:
                case Class_FieldIndex.MaxTrainingLevel:
                case Class_FieldIndex.SkillWeights:
                case Class_FieldIndex.BleedoutDefault:
                case Class_FieldIndex.VoicePoints:
                case Class_FieldIndex.StatWeights:
                case Class_FieldIndex.Unknown2:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(TranslatedString);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.Unknown:
                    return typeof(Int32);
                case Class_FieldIndex.Teaches:
                    return typeof(Skill);
                case Class_FieldIndex.MaxTrainingLevel:
                    return typeof(Byte);
                case Class_FieldIndex.SkillWeights:
                    return typeof(Dictionary<Skill, Byte>);
                case Class_FieldIndex.BleedoutDefault:
                    return typeof(Single);
                case Class_FieldIndex.VoicePoints:
                    return typeof(UInt32);
                case Class_FieldIndex.StatWeights:
                    return typeof(Dictionary<BasicStat, Byte>);
                case Class_FieldIndex.Unknown2:
                    return typeof(Byte);
                case Class_FieldIndex.DATADataTypeState:
                    return typeof(Class.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.CLAS;
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ClassSetterCommon Instance = new ClassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name.Clear();
            item.Description = string.Empty;
            item.Icon = default;
            item.Unknown = default;
            item.Teaches = default;
            item.MaxTrainingLevel = default;
            item.SkillWeights.Clear();
            item.BleedoutDefault = default;
            item.VoicePoints = default;
            item.StatWeights.Clear();
            item.Unknown2 = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Class)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Class)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IClassInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ClassBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ClassCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ClassCommon Instance = new ClassCommon();

        public Class.Mask<bool> GetEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            ret.SkillWeights = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.SkillWeights,
                rhs: rhs.SkillWeights,
                include: include);
            ret.BleedoutDefault = item.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault);
            ret.VoicePoints = item.VoicePoints == rhs.VoicePoints;
            ret.StatWeights = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.StatWeights,
                rhs: rhs.StatWeights,
                include: include);
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Class =>");
            }
            else
            {
                fg.AppendLine($"{name} (Class) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassGetter item,
            FileGeneration fg,
            Class.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                fg.AppendItem(item.Name, "Name");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.Teaches ?? true)
                && item.Teaches.TryGet(out var TeachesItem))
            {
                fg.AppendItem(TeachesItem, "Teaches");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                fg.AppendItem(item.MaxTrainingLevel, "MaxTrainingLevel");
            }
            if (printMask?.SkillWeights?.Overall ?? true)
            {
                fg.AppendLine("SkillWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SkillWeights)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BleedoutDefault ?? true)
            {
                fg.AppendItem(item.BleedoutDefault, "BleedoutDefault");
            }
            if (printMask?.VoicePoints ?? true)
            {
                fg.AppendItem(item.VoicePoints, "VoicePoints");
            }
            if (printMask?.StatWeights?.Overall ?? true)
            {
                fg.AppendLine("StatWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.StatWeights)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Teaches.HasValue && checkMask.Teaches.Value != (item.Teaches != null)) return false;
            if (checkMask.SkillWeights?.Overall.HasValue ?? false) return false;
            if (checkMask.StatWeights?.Overall.HasValue ?? false) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IClassGetter item,
            Class.Mask<bool> mask)
        {
            mask.Name = true;
            mask.Description = true;
            mask.Icon = (item.Icon != null);
            mask.Unknown = true;
            mask.Teaches = (item.Teaches != null);
            mask.MaxTrainingLevel = true;
            mask.SkillWeights = new MaskItem<bool, IEnumerable<KeyValuePair<Skill, bool>>?>(item.SkillWeights != null, null);
            mask.BleedoutDefault = true;
            mask.VoicePoints = true;
            mask.StatWeights = new MaskItem<bool, IEnumerable<KeyValuePair<BasicStat, bool>>?>(item.StatWeights != null, null);
            mask.Unknown2 = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Class_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassGetter? lhs,
            IClassGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            if (!lhs.SkillWeights.SequenceEqual(rhs.SkillWeights)) return false;
            if (!lhs.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault)) return false;
            if (lhs.VoicePoints != rhs.VoicePoints) return false;
            if (!lhs.StatWeights.SequenceEqual(rhs.StatWeights)) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public virtual int GetHashCode(IClassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.Description);
            if (item.Icon.TryGet(out var Iconitem))
            {
                hash.Add(Iconitem);
            }
            hash.Add(item.Unknown);
            if (item.Teaches.TryGet(out var Teachesitem))
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.MaxTrainingLevel);
            hash.Add(item.SkillWeights);
            hash.Add(item.BleedoutDefault);
            hash.Add(item.VoicePoints);
            hash.Add(item.StatWeights);
            hash.Add(item.Unknown2);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Class.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IClassGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IClassGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Class obj, Class rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Class(getNextFormKey());
            ret.DeepCopyIn((Class)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Class)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ClassSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ClassSetterTranslationCommon Instance = new ClassSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassInternal item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SkillWeights) ?? true))
            {
                item.SkillWeights.SetTo(rhs.SkillWeights);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
            {
                item.BleedoutDefault = rhs.BleedoutDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
            {
                item.VoicePoints = rhs.VoicePoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.StatWeights) ?? true))
            {
                item.StatWeights.SetTo(rhs.StatWeights);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Class DeepCopy(
            IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Class
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClassXmlWriteTranslation Instance = new ClassXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Class_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Teaches != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: node,
                    name: nameof(item.Teaches),
                    item: item.Teaches,
                    fieldIndex: (int)Class_FieldIndex.Teaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxTrainingLevel),
                    item: item.MaxTrainingLevel,
                    fieldIndex: (int)Class_FieldIndex.MaxTrainingLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SkillWeights) ?? true))
            {
                DictXmlTranslation<Skill, Byte>.Instance.Write(
                    node: node,
                    name: nameof(item.SkillWeights),
                    items: item.SkillWeights,
                    fieldIndex: (int)Class_FieldIndex.SkillWeights,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, Skill subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        EnumXmlTranslation<Skill>.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, Byte subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        ByteXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Value",
                            item: subItem,
                            errorMask: dictSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BleedoutDefault),
                    item: item.BleedoutDefault,
                    fieldIndex: (int)Class_FieldIndex.BleedoutDefault,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VoicePoints),
                    item: item.VoicePoints,
                    fieldIndex: (int)Class_FieldIndex.VoicePoints,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.StatWeights) ?? true))
            {
                DictXmlTranslation<BasicStat, Byte>.Instance.Write(
                    node: node,
                    name: nameof(item.StatWeights),
                    items: item.StatWeights,
                    fieldIndex: (int)Class_FieldIndex.StatWeights,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, BasicStat subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        EnumXmlTranslation<BasicStat>.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, Byte subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        ByteXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Value",
                            item: subItem,
                            errorMask: dictSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)Class_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Class.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Class_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Class");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClassXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ClassXmlCreateTranslation Instance = new ClassXmlCreateTranslation();

        public static void FillPublicXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Class_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Class_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Class_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    errorMask?.PushIndex((int)Class_FieldIndex.Teaches);
                    try
                    {
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxTrainingLevel":
                    errorMask?.PushIndex((int)Class_FieldIndex.MaxTrainingLevel);
                    try
                    {
                        item.MaxTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillWeights":
                    DictXmlTranslation<Skill, Byte>.Instance.ParseInto(
                        node: node,
                        item: item.SkillWeights,
                        fieldIndex: (int)Class_FieldIndex.SkillWeights,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: EnumXmlTranslation<Skill>.Instance.Parse,
                        valTransl: ByteXmlTranslation.Instance.Parse);
                    break;
                case "BleedoutDefault":
                    errorMask?.PushIndex((int)Class_FieldIndex.BleedoutDefault);
                    try
                    {
                        item.BleedoutDefault = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoicePoints":
                    errorMask?.PushIndex((int)Class_FieldIndex.VoicePoints);
                    try
                    {
                        item.VoicePoints = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StatWeights":
                    DictXmlTranslation<BasicStat, Byte>.Instance.ParseInto(
                        node: node,
                        item: item.StatWeights,
                        fieldIndex: (int)Class_FieldIndex.StatWeights,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: EnumXmlTranslation<BasicStat>.Instance.Parse,
                        valTransl: ByteXmlTranslation.Instance.Parse);
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)Class_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Class_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Class.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ClassXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassGetter item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassGetter item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassGetter item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClassBinaryWriteTranslation Instance = new ClassBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClassGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IClassGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Unknown);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                    writer,
                    ((int?)item.Teaches) ?? -1,
                    length: 1);
                writer.Write(item.MaxTrainingLevel);
                Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                    writer: writer,
                    items: item.SkillWeights,
                    transl: ByteBinaryTranslation.Instance.Write);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BleedoutDefault);
                writer.Write(item.VoicePoints);
                Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                    writer: writer,
                    items: item.StatWeights,
                    transl: ByteBinaryTranslation.Instance.Write);
                writer.Write(item.Unknown2);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CLAS),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLAS;
        public static void FillBinaryStructs(
            IClassInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IClassInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Unknown = dataFrame.ReadInt32();
                    item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.MaxTrainingLevel = dataFrame.ReadUInt8();
                    Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
                        frame: frame,
                        item: item.SkillWeights,
                        transl: ByteBinaryTranslation.Instance.Parse);
                    item.BleedoutDefault = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.VoicePoints = dataFrame.ReadUInt32();
                    Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
                        frame: frame,
                        item: item.StatWeights,
                        transl: ByteBinaryTranslation.Instance.Parse);
                    item.Unknown2 = dataFrame.ReadUInt8();
                    return (int)Class_FieldIndex.Unknown2;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IClassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public TranslatedString Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : string.Empty;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        private int? _DATALocation;
        public Class.DATADataType DATADataTypeState { get; private set; }
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_UnknownLocation, 4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _DATALocation!.Value + 0x4;
        private bool _Teaches_IsSet => _DATALocation.HasValue;
        public Skill? Teaches
        {
            get
            {
                var val = (Skill)_data.Span.Slice(_TeachesLocation, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        #region MaxTrainingLevel
        private int _MaxTrainingLevelLocation => _DATALocation!.Value + 0x5;
        private bool _MaxTrainingLevel_IsSet => _DATALocation.HasValue;
        public Byte MaxTrainingLevel => _MaxTrainingLevel_IsSet ? _data.Span[_MaxTrainingLevelLocation] : default;
        #endregion
        #region SkillWeights
        private int _SkillWeightsLocation => _DATALocation!.Value + 0x6;
        private bool _SkillWeights_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<Skill, Byte> SkillWeights => DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
            new MutagenFrame(new MutagenMemoryReadStream(_data.Slice(_SkillWeightsLocation), _package.MetaData)),
            new Dictionary<Skill, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        #region BleedoutDefault
        private int _BleedoutDefaultLocation => _DATALocation!.Value + 0x18;
        private bool _BleedoutDefault_IsSet => _DATALocation.HasValue;
        public Single BleedoutDefault => _BleedoutDefault_IsSet ? SpanExt.GetFloat(_data.Slice(_BleedoutDefaultLocation, 4)) : default;
        #endregion
        #region VoicePoints
        private int _VoicePointsLocation => _DATALocation!.Value + 0x1C;
        private bool _VoicePoints_IsSet => _DATALocation.HasValue;
        public UInt32 VoicePoints => _VoicePoints_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_VoicePointsLocation, 4)) : default;
        #endregion
        #region StatWeights
        private int _StatWeightsLocation => _DATALocation!.Value + 0x20;
        private bool _StatWeights_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<BasicStat, Byte> StatWeights => DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
            new MutagenFrame(new MutagenMemoryReadStream(_data.Slice(_StatWeightsLocation), _package.MetaData)),
            new Dictionary<BasicStat, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value + 0x23;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public Byte Unknown2 => _Unknown2_IsSet ? _data.Span[_Unknown2Location] : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClassBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ClassBinaryOverlay ClassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ClassBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ClassBinaryOverlay ClassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ClassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Class_FieldIndex.Unknown2;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

