/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CollisionLayer :
        SkyrimMajorRecord,
        ICollisionLayerInternal,
        ILoquiObjectSetter<CollisionLayer>,
        IEquatable<CollisionLayer>,
        IEqualsMask
    {
        #region Ctor
        protected CollisionLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        #endregion
        #region Index
        public UInt32 Index { get; set; } = default;
        #endregion
        #region DebugColor
        public Color DebugColor { get; set; } = default;
        #endregion
        #region Flags
        public CollisionLayer.Flag Flags { get; set; } = default;
        #endregion
        #region Name
        public String Name { get; set; } = string.Empty;
        #endregion
        #region CollidesWith
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<CollisionLayer>>? _CollidesWith;
        public IExtendedList<IFormLink<CollisionLayer>>? CollidesWith
        {
            get => this._CollidesWith;
            set => this._CollidesWith = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ICollisionLayerGetter>>? ICollisionLayerGetter.CollidesWith => _CollidesWith;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CollisionLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICollisionLayerGetter rhs)) return false;
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CollisionLayer? obj)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CollisionLayerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CollisionLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new CollisionLayer CreateFromXml(
            XElement node,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CollisionLayer CreateFromXml(
            XElement node,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static CollisionLayer CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CollisionLayer();
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CollisionLayer CreateFromXml(
            string path,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CollisionLayer CreateFromXml(
            string path,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CollisionLayer CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CollisionLayer CreateFromXml(
            Stream stream,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CollisionLayer CreateFromXml(
            Stream stream,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CollisionLayer CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Description = initialValue;
                this.Index = initialValue;
                this.DebugColor = initialValue;
                this.Flags = initialValue;
                this.Name = initialValue;
                this.CollidesWith = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Description,
                TItem Index,
                TItem DebugColor,
                TItem Flags,
                TItem Name,
                TItem CollidesWith)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Description = Description;
                this.Index = Index;
                this.DebugColor = DebugColor;
                this.Flags = Flags;
                this.Name = Name;
                this.CollidesWith = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CollidesWith, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Description;
            public TItem Index;
            public TItem DebugColor;
            public TItem Flags;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CollidesWith;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.DebugColor, rhs.DebugColor)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.CollidesWith, rhs.CollidesWith)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Description);
                hash.Add(this.Index);
                hash.Add(this.DebugColor);
                hash.Add(this.Flags);
                hash.Add(this.Name);
                hash.Add(this.CollidesWith);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.DebugColor)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Name)) return false;
                if (this.CollidesWith != null)
                {
                    if (!eval(this.CollidesWith.Overall)) return false;
                    if (this.CollidesWith.Specific != null)
                    {
                        foreach (var item in this.CollidesWith.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.DebugColor)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Name)) return true;
                if (this.CollidesWith != null)
                {
                    if (eval(this.CollidesWith.Overall)) return true;
                    if (this.CollidesWith.Specific != null)
                    {
                        foreach (var item in this.CollidesWith.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CollisionLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Description = eval(this.Description);
                obj.Index = eval(this.Index);
                obj.DebugColor = eval(this.DebugColor);
                obj.Flags = eval(this.Flags);
                obj.Name = eval(this.Name);
                if (CollidesWith != null)
                {
                    obj.CollidesWith = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CollidesWith.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CollidesWith.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CollidesWith.Specific = l;
                        foreach (var item in CollidesWith.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CollisionLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CollisionLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CollisionLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.DebugColor ?? true)
                    {
                        fg.AppendItem(DebugColor, "DebugColor");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.CollidesWith?.Overall ?? true)
                        && CollidesWith.TryGet(out var CollidesWithItem))
                    {
                        fg.AppendLine("CollidesWith =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CollidesWithItem.Overall);
                            if (CollidesWithItem.Specific != null)
                            {
                                foreach (var subItem in CollidesWithItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Description;
            public Exception? Index;
            public Exception? DebugColor;
            public Exception? Flags;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CollidesWith;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        return Description;
                    case CollisionLayer_FieldIndex.Index:
                        return Index;
                    case CollisionLayer_FieldIndex.DebugColor:
                        return DebugColor;
                    case CollisionLayer_FieldIndex.Flags:
                        return Flags;
                    case CollisionLayer_FieldIndex.Name:
                        return Name;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        return CollidesWith;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case CollisionLayer_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case CollisionLayer_FieldIndex.DebugColor:
                        this.DebugColor = ex;
                        break;
                    case CollisionLayer_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CollisionLayer_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        this.CollidesWith = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.DebugColor:
                        this.DebugColor = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        this.CollidesWith = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Description != null) return true;
                if (Index != null) return true;
                if (DebugColor != null) return true;
                if (Flags != null) return true;
                if (Name != null) return true;
                if (CollidesWith != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Index, "Index");
                fg.AppendItem(DebugColor, "DebugColor");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Name, "Name");
                if (CollidesWith.TryGet(out var CollidesWithItem))
                {
                    fg.AppendLine("CollidesWith =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CollidesWithItem.Overall);
                        if (CollidesWithItem.Specific != null)
                        {
                            foreach (var subItem in CollidesWithItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.DebugColor = this.DebugColor.Combine(rhs.DebugColor);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.CollidesWith = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CollidesWith?.Overall, rhs.CollidesWith?.Overall), ExceptionExt.Combine(this.CollidesWith?.Specific, rhs.CollidesWith?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Description;
            public bool Index;
            public bool DebugColor;
            public bool Flags;
            public bool Name;
            public bool CollidesWith;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Description = defaultOn;
                this.Index = defaultOn;
                this.DebugColor = defaultOn;
                this.Flags = defaultOn;
                this.Name = defaultOn;
                this.CollidesWith = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Description, null));
                ret.Add((Index, null));
                ret.Add((DebugColor, null));
                ret.Add((Flags, null));
                ret.Add((Name, null));
                ret.Add((CollidesWith, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CollisionLayer_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CollisionLayerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CollisionLayerCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollisionLayerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollisionLayerCommon.Instance.RemapLinks(this, mapping);
        public CollisionLayer(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public CollisionLayer(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public CollisionLayer(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CollisionLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CollisionLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new CollisionLayer CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static CollisionLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CollisionLayer();
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CollisionLayer item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICollisionLayerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CollisionLayer GetNew()
        {
            return new CollisionLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface ICollisionLayer :
        ICollisionLayerGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ICollisionLayerInternal>
    {
        new TranslatedString Description { get; set; }
        new UInt32 Index { get; set; }
        new Color DebugColor { get; set; }
        new CollisionLayer.Flag Flags { get; set; }
        new String Name { get; set; }
        new IExtendedList<IFormLink<CollisionLayer>>? CollidesWith { get; set; }
    }

    public partial interface ICollisionLayerInternal :
        ISkyrimMajorRecordInternal,
        ICollisionLayer,
        ICollisionLayerGetter
    {
    }

    public partial interface ICollisionLayerGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ICollisionLayerGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => CollisionLayer_Registration.Instance;
        TranslatedString Description { get; }
        UInt32 Index { get; }
        Color DebugColor { get; }
        CollisionLayer.Flag Flags { get; }
        String Name { get; }
        IReadOnlyList<IFormLink<ICollisionLayerGetter>>? CollidesWith { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CollisionLayerMixIn
    {
        public static void Clear(this ICollisionLayerInternal item)
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CollisionLayer.Mask<bool> GetEqualsMask(
            this ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICollisionLayerGetter item,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICollisionLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICollisionLayerGetter item,
            CollisionLayer.Mask<bool?> checkMask)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CollisionLayer.Mask<bool> GetHasBeenSetMask(this ICollisionLayerGetter item)
        {
            var ret = new CollisionLayer.Mask<bool>(false);
            ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICollisionLayerGetter item,
            ICollisionLayerGetter rhs)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICollisionLayerInternal lhs,
            ICollisionLayerGetter rhs,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICollisionLayerInternal lhs,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            XElement node,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            XElement node,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            string path,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            string path,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            Stream stream,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            Stream stream,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICollisionLayerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CollisionLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICollisionLayerInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICollisionLayerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CollisionLayer_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Description = 6,
        Index = 7,
        DebugColor = 8,
        Flags = 9,
        Name = 10,
        CollidesWith = 11,
    }
    #endregion

    #region Registration
    public partial class CollisionLayer_Registration : ILoquiRegistration
    {
        public static readonly CollisionLayer_Registration Instance = new CollisionLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 238,
            version: 0);

        public const string GUID = "20096909-ee8d-4c38-9022-999ed7e75418";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(CollisionLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CollisionLayer.ErrorMask);

        public static readonly Type ClassType = typeof(CollisionLayer);

        public static readonly Type GetterType = typeof(ICollisionLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICollisionLayer);

        public static readonly Type? InternalSetterType = typeof(ICollisionLayerInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.CollisionLayer";

        public const string Name = "CollisionLayer";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)CollisionLayer_FieldIndex.Description;
                case "INDEX":
                    return (ushort)CollisionLayer_FieldIndex.Index;
                case "DEBUGCOLOR":
                    return (ushort)CollisionLayer_FieldIndex.DebugColor;
                case "FLAGS":
                    return (ushort)CollisionLayer_FieldIndex.Flags;
                case "NAME":
                    return (ushort)CollisionLayer_FieldIndex.Name;
                case "COLLIDESWITH":
                    return (ushort)CollisionLayer_FieldIndex.CollidesWith;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.CollidesWith:
                    return true;
                case CollisionLayer_FieldIndex.Description:
                case CollisionLayer_FieldIndex.Index:
                case CollisionLayer_FieldIndex.DebugColor:
                case CollisionLayer_FieldIndex.Flags:
                case CollisionLayer_FieldIndex.Name:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                case CollisionLayer_FieldIndex.Index:
                case CollisionLayer_FieldIndex.DebugColor:
                case CollisionLayer_FieldIndex.Flags:
                case CollisionLayer_FieldIndex.Name:
                case CollisionLayer_FieldIndex.CollidesWith:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                case CollisionLayer_FieldIndex.Index:
                case CollisionLayer_FieldIndex.DebugColor:
                case CollisionLayer_FieldIndex.Flags:
                case CollisionLayer_FieldIndex.Name:
                case CollisionLayer_FieldIndex.CollidesWith:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                    return "Description";
                case CollisionLayer_FieldIndex.Index:
                    return "Index";
                case CollisionLayer_FieldIndex.DebugColor:
                    return "DebugColor";
                case CollisionLayer_FieldIndex.Flags:
                    return "Flags";
                case CollisionLayer_FieldIndex.Name:
                    return "Name";
                case CollisionLayer_FieldIndex.CollidesWith:
                    return "CollidesWith";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                case CollisionLayer_FieldIndex.Index:
                case CollisionLayer_FieldIndex.DebugColor:
                case CollisionLayer_FieldIndex.Flags:
                case CollisionLayer_FieldIndex.Name:
                case CollisionLayer_FieldIndex.CollidesWith:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                case CollisionLayer_FieldIndex.Index:
                case CollisionLayer_FieldIndex.DebugColor:
                case CollisionLayer_FieldIndex.Flags:
                case CollisionLayer_FieldIndex.Name:
                case CollisionLayer_FieldIndex.CollidesWith:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
            switch (enu)
            {
                case CollisionLayer_FieldIndex.Description:
                    return typeof(TranslatedString);
                case CollisionLayer_FieldIndex.Index:
                    return typeof(UInt32);
                case CollisionLayer_FieldIndex.DebugColor:
                    return typeof(Color);
                case CollisionLayer_FieldIndex.Flags:
                    return typeof(CollisionLayer.Flag);
                case CollisionLayer_FieldIndex.Name:
                    return typeof(String);
                case CollisionLayer_FieldIndex.CollidesWith:
                    return typeof(IExtendedList<IFormLink<CollisionLayer>>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CollisionLayerXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.COLL;
        public static readonly Type BinaryWriteTranslation = typeof(CollisionLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CollisionLayerSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly CollisionLayerSetterCommon Instance = new CollisionLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICollisionLayerInternal item)
        {
            ClearPartial();
            item.Description.Clear();
            item.Index = default;
            item.DebugColor = default;
            item.Flags = default;
            item.Name = string.Empty;
            item.CollidesWith = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ICollisionLayerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICollisionLayerInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICollisionLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ICollisionLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CollisionLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (CollisionLayer)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (CollisionLayer)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICollisionLayerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICollisionLayerInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CollisionLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CollisionLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CollisionLayer)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CollisionLayer)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CollisionLayerCommon : SkyrimMajorRecordCommon
    {
        public new static readonly CollisionLayerCommon Instance = new CollisionLayerCommon();

        public CollisionLayer.Mask<bool> GetEqualsMask(
            ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CollisionLayer.Mask<bool>(false);
            ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            CollisionLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Index = item.Index == rhs.Index;
            ret.DebugColor = item.DebugColor.ColorOnlyEquals(rhs.DebugColor);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.CollidesWith = item.CollidesWith.CollectionEqualsHelper(
                rhs.CollidesWith,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICollisionLayerGetter item,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICollisionLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CollisionLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (CollisionLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICollisionLayerGetter item,
            FileGeneration fg,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if (printMask?.Index ?? true)
            {
                fg.AppendItem(item.Index, "Index");
            }
            if (printMask?.DebugColor ?? true)
            {
                fg.AppendItem(item.DebugColor, "DebugColor");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Name ?? true)
            {
                fg.AppendItem(item.Name, "Name");
            }
            if ((printMask?.CollidesWith?.Overall ?? true)
                && item.CollidesWith.TryGet(out var CollidesWithItem))
            {
                fg.AppendLine("CollidesWith =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in CollidesWithItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ICollisionLayerGetter item,
            CollisionLayer.Mask<bool?> checkMask)
        {
            if (checkMask.CollidesWith?.Overall.HasValue ?? false && checkMask.CollidesWith!.Overall.Value != (item.CollidesWith != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICollisionLayerGetter item,
            CollisionLayer.Mask<bool> mask)
        {
            mask.Description = true;
            mask.Index = true;
            mask.DebugColor = true;
            mask.Flags = true;
            mask.Name = true;
            mask.CollidesWith = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.CollidesWith != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static CollisionLayer_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CollisionLayer_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (CollisionLayer_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (CollisionLayer_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (CollisionLayer_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (CollisionLayer_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (CollisionLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CollisionLayer_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CollisionLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICollisionLayerGetter? lhs,
            ICollisionLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!lhs.DebugColor.ColorOnlyEquals(rhs.DebugColor)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.CollidesWith.SequenceEqual(rhs.CollidesWith)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICollisionLayerGetter?)lhs,
                rhs: rhs as ICollisionLayerGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICollisionLayerGetter?)lhs,
                rhs: rhs as ICollisionLayerGetter);
        }
        
        public virtual int GetHashCode(ICollisionLayerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Description);
            hash.Add(item.Index);
            hash.Add(item.DebugColor);
            hash.Add(item.Flags);
            hash.Add(item.Name);
            hash.Add(item.CollidesWith);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ICollisionLayerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICollisionLayerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CollisionLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICollisionLayerGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.CollidesWith.TryGet(out var CollidesWithItem))
            {
                foreach (var item in CollidesWithItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(ICollisionLayerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(CollisionLayer obj, CollisionLayer rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new CollisionLayer(getNextFormKey());
            ret.DeepCopyIn((CollisionLayer)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (CollisionLayer)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class CollisionLayerSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly CollisionLayerSetterTranslationCommon Instance = new CollisionLayerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICollisionLayerInternal item,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICollisionLayer item,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.DebugColor) ?? true))
            {
                item.DebugColor = rhs.DebugColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.CollidesWith) ?? true))
            {
                errorMask?.PushIndex((int)CollisionLayer_FieldIndex.CollidesWith);
                try
                {
                    if ((rhs.CollidesWith != null))
                    {
                        item.CollidesWith = 
                            rhs.CollidesWith
                            .Select(r => (IFormLink<CollisionLayer>)new FormLink<CollisionLayer>(r.FormKey))
                            .ToExtendedList<IFormLink<CollisionLayer>>();
                    }
                    else
                    {
                        item.CollidesWith = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICollisionLayerInternal)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICollisionLayer)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICollisionLayerInternal)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICollisionLayer)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CollisionLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollisionLayer_Registration.Instance;
        public new static CollisionLayer_Registration Registration => CollisionLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CollisionLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CollisionLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CollisionLayerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CollisionLayerXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CollisionLayerXmlWriteTranslation Instance = new CollisionLayerXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICollisionLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Description) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)CollisionLayer_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Index) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index,
                    fieldIndex: (int)CollisionLayer_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.DebugColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DebugColor),
                    item: item.DebugColor,
                    fieldIndex: (int)CollisionLayer_FieldIndex.DebugColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<CollisionLayer.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)CollisionLayer_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)CollisionLayer_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.CollidesWith != null)
                && (translationMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.CollidesWith) ?? true))
            {
                ListXmlTranslation<IFormLink<ICollisionLayerGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.CollidesWith),
                    item: item.CollidesWith,
                    fieldIndex: (int)CollisionLayer_FieldIndex.CollidesWith,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)CollisionLayer_FieldIndex.CollidesWith),
                    transl: (XElement subNode, IFormLink<ICollisionLayerGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ICollisionLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.CollisionLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.CollisionLayer");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CollisionLayerXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static CollisionLayerXmlCreateTranslation Instance = new CollisionLayerXmlCreateTranslation();

        public static void FillPublicXml(
            ICollisionLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CollisionLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICollisionLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Description":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Index":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.Index);
                    try
                    {
                        item.Index = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DebugColor":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.DebugColor);
                    try
                    {
                        item.DebugColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<CollisionLayer.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CollidesWith":
                    errorMask?.PushIndex((int)CollisionLayer_FieldIndex.CollidesWith);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<CollisionLayer>>.Instance.Parse(
                            node: node,
                            enumer: out var CollidesWithItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.CollidesWith = CollidesWithItem.ToExtendedList();
                        }
                        else
                        {
                            item.CollidesWith = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class CollisionLayerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICollisionLayerGetter item,
            XElement node,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CollisionLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICollisionLayerGetter item,
            string path,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICollisionLayerGetter item,
            Stream stream,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CollisionLayerBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CollisionLayerBinaryWriteTranslation Instance = new CollisionLayerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ICollisionLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DebugColor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<CollisionLayer.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.GNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ICollisionLayerGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.CollidesWith,
                counterType: RecordTypes.INTV,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM),
                writeCounterIfNull: true,
                transl: (MutagenWriter subWriter, IFormLink<ICollisionLayerGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICollisionLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.COLL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CollisionLayerBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static CollisionLayerBinaryCreateTranslation Instance = new CollisionLayerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.COLL;
        public static void FillBinaryStructs(
            ICollisionLayerInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICollisionLayerInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)CollisionLayer_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)CollisionLayer_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DebugColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)CollisionLayer_FieldIndex.DebugColor;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<CollisionLayer.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)CollisionLayer_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)CollisionLayer_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                case RecordTypeInts.INTV:
                {
                    item.CollidesWith = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<CollisionLayer>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.INTV),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedListIfAny<IFormLink<CollisionLayer>>();
                    return (int)CollisionLayer_FieldIndex.CollidesWith;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CollisionLayerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CollisionLayerBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ICollisionLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollisionLayer_Registration.Instance;
        public new static CollisionLayer_Registration Registration => CollisionLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CollisionLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CollisionLayerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICollisionLayerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CollisionLayerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CollisionLayerCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollisionLayerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollisionLayerCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CollisionLayerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CollisionLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CollisionLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CollisionLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Description
        private int? _DescriptionLocation;
        public TranslatedString Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : string.Empty;
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt32 Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default;
        #endregion
        #region DebugColor
        private int? _DebugColorLocation;
        public Color DebugColor => _DebugColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DebugColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public CollisionLayer.Flag Flags => _FlagsLocation.HasValue ? (CollisionLayer.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(CollisionLayer.Flag);
        #endregion
        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        public IReadOnlyList<IFormLink<ICollisionLayerGetter>>? CollidesWith { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CollisionLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CollisionLayerBinaryOverlay CollisionLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CollisionLayerBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CollisionLayerBinaryOverlay CollisionLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CollisionLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    _DebugColorLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.DebugColor;
                }
                case RecordTypeInts.GNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                case RecordTypeInts.INTV:
                {
                    this.CollidesWith = BinaryOverlayList<IFormLink<ICollisionLayerGetter>>.FactoryByCountNullIfZero(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.INTV,
                        subrecordType: RecordTypes.CNAM,
                        getter: (s, p) => new FormLink<ICollisionLayerGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)CollisionLayer_FieldIndex.CollidesWith;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CollisionLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

