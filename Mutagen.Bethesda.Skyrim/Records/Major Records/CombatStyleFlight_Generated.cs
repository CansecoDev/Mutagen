/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CombatStyleFlight :
        ICombatStyleFlight,
        ILoquiObjectSetter<CombatStyleFlight>,
        IEquatable<CombatStyleFlight>,
        IEqualsMask
    {
        #region Ctor
        public CombatStyleFlight()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CombatStyleFlight.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region HoverChance
        public Single HoverChance { get; set; } = default;
        #endregion
        #region DiveBombChance
        public Single DiveBombChance { get; set; } = default;
        #endregion
        #region GroundAttackChance
        public Single GroundAttackChance { get; set; } = default;
        #endregion
        #region HoverTime
        public Single HoverTime { get; set; } = default;
        #endregion
        #region GroundAttackTime
        public Single GroundAttackTime { get; set; } = default;
        #endregion
        #region PerchAttackChance
        public Single PerchAttackChance { get; set; } = default;
        #endregion
        #region PerchAttackTime
        public Single PerchAttackTime { get; set; } = default;
        #endregion
        #region FlyingAttackChance
        public Single FlyingAttackChance { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleFlightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleFlightGetter rhs)) return false;
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CombatStyleFlight? obj)
        {
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CombatStyleFlightXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CombatStyleFlightXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CombatStyleFlight CreateFromXml(
            XElement node,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CombatStyleFlight CreateFromXml(
            XElement node,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyleFlight.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CombatStyleFlight CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CombatStyleFlight();
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CombatStyleFlight CreateFromXml(
            string path,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyleFlight CreateFromXml(
            string path,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyleFlight CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CombatStyleFlight CreateFromXml(
            Stream stream,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CombatStyleFlight CreateFromXml(
            Stream stream,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CombatStyleFlight CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.HoverChance = initialValue;
                this.DiveBombChance = initialValue;
                this.GroundAttackChance = initialValue;
                this.HoverTime = initialValue;
                this.GroundAttackTime = initialValue;
                this.PerchAttackChance = initialValue;
                this.PerchAttackTime = initialValue;
                this.FlyingAttackChance = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem HoverChance,
                TItem DiveBombChance,
                TItem GroundAttackChance,
                TItem HoverTime,
                TItem GroundAttackTime,
                TItem PerchAttackChance,
                TItem PerchAttackTime,
                TItem FlyingAttackChance)
            {
                this.Versioning = Versioning;
                this.HoverChance = HoverChance;
                this.DiveBombChance = DiveBombChance;
                this.GroundAttackChance = GroundAttackChance;
                this.HoverTime = HoverTime;
                this.GroundAttackTime = GroundAttackTime;
                this.PerchAttackChance = PerchAttackChance;
                this.PerchAttackTime = PerchAttackTime;
                this.FlyingAttackChance = FlyingAttackChance;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem HoverChance;
            public TItem DiveBombChance;
            public TItem GroundAttackChance;
            public TItem HoverTime;
            public TItem GroundAttackTime;
            public TItem PerchAttackChance;
            public TItem PerchAttackTime;
            public TItem FlyingAttackChance;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.HoverChance, rhs.HoverChance)) return false;
                if (!object.Equals(this.DiveBombChance, rhs.DiveBombChance)) return false;
                if (!object.Equals(this.GroundAttackChance, rhs.GroundAttackChance)) return false;
                if (!object.Equals(this.HoverTime, rhs.HoverTime)) return false;
                if (!object.Equals(this.GroundAttackTime, rhs.GroundAttackTime)) return false;
                if (!object.Equals(this.PerchAttackChance, rhs.PerchAttackChance)) return false;
                if (!object.Equals(this.PerchAttackTime, rhs.PerchAttackTime)) return false;
                if (!object.Equals(this.FlyingAttackChance, rhs.FlyingAttackChance)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.HoverChance);
                hash.Add(this.DiveBombChance);
                hash.Add(this.GroundAttackChance);
                hash.Add(this.HoverTime);
                hash.Add(this.GroundAttackTime);
                hash.Add(this.PerchAttackChance);
                hash.Add(this.PerchAttackTime);
                hash.Add(this.FlyingAttackChance);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.HoverChance)) return false;
                if (!eval(this.DiveBombChance)) return false;
                if (!eval(this.GroundAttackChance)) return false;
                if (!eval(this.HoverTime)) return false;
                if (!eval(this.GroundAttackTime)) return false;
                if (!eval(this.PerchAttackChance)) return false;
                if (!eval(this.PerchAttackTime)) return false;
                if (!eval(this.FlyingAttackChance)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.HoverChance)) return true;
                if (eval(this.DiveBombChance)) return true;
                if (eval(this.GroundAttackChance)) return true;
                if (eval(this.HoverTime)) return true;
                if (eval(this.GroundAttackTime)) return true;
                if (eval(this.PerchAttackChance)) return true;
                if (eval(this.PerchAttackTime)) return true;
                if (eval(this.FlyingAttackChance)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleFlight.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.HoverChance = eval(this.HoverChance);
                obj.DiveBombChance = eval(this.DiveBombChance);
                obj.GroundAttackChance = eval(this.GroundAttackChance);
                obj.HoverTime = eval(this.HoverTime);
                obj.GroundAttackTime = eval(this.GroundAttackTime);
                obj.PerchAttackChance = eval(this.PerchAttackChance);
                obj.PerchAttackTime = eval(this.PerchAttackTime);
                obj.FlyingAttackChance = eval(this.FlyingAttackChance);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CombatStyleFlight.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CombatStyleFlight.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CombatStyleFlight.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.HoverChance ?? true)
                    {
                        fg.AppendItem(HoverChance, "HoverChance");
                    }
                    if (printMask?.DiveBombChance ?? true)
                    {
                        fg.AppendItem(DiveBombChance, "DiveBombChance");
                    }
                    if (printMask?.GroundAttackChance ?? true)
                    {
                        fg.AppendItem(GroundAttackChance, "GroundAttackChance");
                    }
                    if (printMask?.HoverTime ?? true)
                    {
                        fg.AppendItem(HoverTime, "HoverTime");
                    }
                    if (printMask?.GroundAttackTime ?? true)
                    {
                        fg.AppendItem(GroundAttackTime, "GroundAttackTime");
                    }
                    if (printMask?.PerchAttackChance ?? true)
                    {
                        fg.AppendItem(PerchAttackChance, "PerchAttackChance");
                    }
                    if (printMask?.PerchAttackTime ?? true)
                    {
                        fg.AppendItem(PerchAttackTime, "PerchAttackTime");
                    }
                    if (printMask?.FlyingAttackChance ?? true)
                    {
                        fg.AppendItem(FlyingAttackChance, "FlyingAttackChance");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? HoverChance;
            public Exception? DiveBombChance;
            public Exception? GroundAttackChance;
            public Exception? HoverTime;
            public Exception? GroundAttackTime;
            public Exception? PerchAttackChance;
            public Exception? PerchAttackTime;
            public Exception? FlyingAttackChance;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleFlight_FieldIndex.Versioning:
                        return Versioning;
                    case CombatStyleFlight_FieldIndex.HoverChance:
                        return HoverChance;
                    case CombatStyleFlight_FieldIndex.DiveBombChance:
                        return DiveBombChance;
                    case CombatStyleFlight_FieldIndex.GroundAttackChance:
                        return GroundAttackChance;
                    case CombatStyleFlight_FieldIndex.HoverTime:
                        return HoverTime;
                    case CombatStyleFlight_FieldIndex.GroundAttackTime:
                        return GroundAttackTime;
                    case CombatStyleFlight_FieldIndex.PerchAttackChance:
                        return PerchAttackChance;
                    case CombatStyleFlight_FieldIndex.PerchAttackTime:
                        return PerchAttackTime;
                    case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                        return FlyingAttackChance;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleFlight_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.HoverChance:
                        this.HoverChance = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.DiveBombChance:
                        this.DiveBombChance = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.GroundAttackChance:
                        this.GroundAttackChance = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.HoverTime:
                        this.HoverTime = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.GroundAttackTime:
                        this.GroundAttackTime = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.PerchAttackChance:
                        this.PerchAttackChance = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.PerchAttackTime:
                        this.PerchAttackTime = ex;
                        break;
                    case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                        this.FlyingAttackChance = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleFlight_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.HoverChance:
                        this.HoverChance = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.DiveBombChance:
                        this.DiveBombChance = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.GroundAttackChance:
                        this.GroundAttackChance = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.HoverTime:
                        this.HoverTime = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.GroundAttackTime:
                        this.GroundAttackTime = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.PerchAttackChance:
                        this.PerchAttackChance = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.PerchAttackTime:
                        this.PerchAttackTime = (Exception?)obj;
                        break;
                    case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                        this.FlyingAttackChance = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (HoverChance != null) return true;
                if (DiveBombChance != null) return true;
                if (GroundAttackChance != null) return true;
                if (HoverTime != null) return true;
                if (GroundAttackTime != null) return true;
                if (PerchAttackChance != null) return true;
                if (PerchAttackTime != null) return true;
                if (FlyingAttackChance != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(HoverChance, "HoverChance");
                fg.AppendItem(DiveBombChance, "DiveBombChance");
                fg.AppendItem(GroundAttackChance, "GroundAttackChance");
                fg.AppendItem(HoverTime, "HoverTime");
                fg.AppendItem(GroundAttackTime, "GroundAttackTime");
                fg.AppendItem(PerchAttackChance, "PerchAttackChance");
                fg.AppendItem(PerchAttackTime, "PerchAttackTime");
                fg.AppendItem(FlyingAttackChance, "FlyingAttackChance");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.HoverChance = this.HoverChance.Combine(rhs.HoverChance);
                ret.DiveBombChance = this.DiveBombChance.Combine(rhs.DiveBombChance);
                ret.GroundAttackChance = this.GroundAttackChance.Combine(rhs.GroundAttackChance);
                ret.HoverTime = this.HoverTime.Combine(rhs.HoverTime);
                ret.GroundAttackTime = this.GroundAttackTime.Combine(rhs.GroundAttackTime);
                ret.PerchAttackChance = this.PerchAttackChance.Combine(rhs.PerchAttackChance);
                ret.PerchAttackTime = this.PerchAttackTime.Combine(rhs.PerchAttackTime);
                ret.FlyingAttackChance = this.FlyingAttackChance.Combine(rhs.FlyingAttackChance);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool HoverChance;
            public bool DiveBombChance;
            public bool GroundAttackChance;
            public bool HoverTime;
            public bool GroundAttackTime;
            public bool PerchAttackChance;
            public bool PerchAttackTime;
            public bool FlyingAttackChance;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.HoverChance = defaultOn;
                this.DiveBombChance = defaultOn;
                this.GroundAttackChance = defaultOn;
                this.HoverTime = defaultOn;
                this.GroundAttackTime = defaultOn;
                this.PerchAttackChance = defaultOn;
                this.PerchAttackTime = defaultOn;
                this.FlyingAttackChance = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((HoverChance, null));
                ret.Add((DiveBombChance, null));
                ret.Add((GroundAttackChance, null));
                ret.Add((HoverTime, null));
                ret.Add((GroundAttackTime, null));
                ret.Add((PerchAttackChance, null));
                ret.Add((PerchAttackTime, null));
                ret.Add((FlyingAttackChance, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyleFlight_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2,
            Break2 = 4,
            Break3 = 8
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleFlightBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleFlightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static CombatStyleFlight CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static CombatStyleFlight CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleFlight();
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleFlight item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICombatStyleFlightGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleFlight GetNew()
        {
            return new CombatStyleFlight();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleFlight :
        ICombatStyleFlightGetter,
        ILoquiObjectSetter<ICombatStyleFlight>
    {
        new CombatStyleFlight.VersioningBreaks Versioning { get; set; }
        new Single HoverChance { get; set; }
        new Single DiveBombChance { get; set; }
        new Single GroundAttackChance { get; set; }
        new Single HoverTime { get; set; }
        new Single GroundAttackTime { get; set; }
        new Single PerchAttackChance { get; set; }
        new Single PerchAttackTime { get; set; }
        new Single FlyingAttackChance { get; set; }
    }

    public partial interface ICombatStyleFlightGetter :
        ILoquiObject,
        ILoquiObject<ICombatStyleFlightGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CombatStyleFlight_Registration.Instance;
        CombatStyleFlight.VersioningBreaks Versioning { get; }
        Single HoverChance { get; }
        Single DiveBombChance { get; }
        Single GroundAttackChance { get; }
        Single HoverTime { get; }
        Single GroundAttackTime { get; }
        Single PerchAttackChance { get; }
        Single PerchAttackTime { get; }
        Single FlyingAttackChance { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleFlightMixIn
    {
        public static void Clear(this ICombatStyleFlight item)
        {
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleFlight.Mask<bool> GetEqualsMask(
            this ICombatStyleFlightGetter item,
            ICombatStyleFlightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleFlightGetter item,
            string? name = null,
            CombatStyleFlight.Mask<bool>? printMask = null)
        {
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleFlightGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleFlight.Mask<bool>? printMask = null)
        {
            ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICombatStyleFlightGetter item,
            CombatStyleFlight.Mask<bool?> checkMask)
        {
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CombatStyleFlight.Mask<bool> GetHasBeenSetMask(this ICombatStyleFlightGetter item)
        {
            var ret = new CombatStyleFlight.Mask<bool>(false);
            ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICombatStyleFlightGetter item,
            ICombatStyleFlightGetter rhs)
        {
            return ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICombatStyleFlight lhs,
            ICombatStyleFlightGetter rhs)
        {
            ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICombatStyleFlight lhs,
            ICombatStyleFlightGetter rhs,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleFlight lhs,
            ICombatStyleFlightGetter rhs,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CombatStyleFlight.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleFlight lhs,
            ICombatStyleFlightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CombatStyleFlight DeepCopy(
            this ICombatStyleFlightGetter item,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            return ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleFlight DeepCopy(
            this ICombatStyleFlightGetter item,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            return ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleFlight DeepCopy(
            this ICombatStyleFlightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleFlightSetterTranslationCommon)((ICombatStyleFlightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            XElement node,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            XElement node,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyleFlight.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            string path,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            string path,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            string path,
            ErrorMaskBuilder? errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            Stream stream,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            Stream stream,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICombatStyleFlight item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICombatStyleFlight item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICombatStyleFlight item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleFlightSetterCommon)((ICombatStyleFlightGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CombatStyleFlight_FieldIndex
    {
        Versioning = 0,
        HoverChance = 1,
        DiveBombChance = 2,
        GroundAttackChance = 3,
        HoverTime = 4,
        GroundAttackTime = 5,
        PerchAttackChance = 6,
        PerchAttackTime = 7,
        FlyingAttackChance = 8,
    }
    #endregion

    #region Registration
    public partial class CombatStyleFlight_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleFlight_Registration Instance = new CombatStyleFlight_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 398,
            version: 0);

        public const string GUID = "ae37ae46-1989-470b-879e-9ea5fb1b6bf7";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CombatStyleFlight.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleFlight.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleFlight);

        public static readonly Type GetterType = typeof(ICombatStyleFlightGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleFlight);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CombatStyleFlight";

        public const string Name = "CombatStyleFlight";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)CombatStyleFlight_FieldIndex.Versioning;
                case "HOVERCHANCE":
                    return (ushort)CombatStyleFlight_FieldIndex.HoverChance;
                case "DIVEBOMBCHANCE":
                    return (ushort)CombatStyleFlight_FieldIndex.DiveBombChance;
                case "GROUNDATTACKCHANCE":
                    return (ushort)CombatStyleFlight_FieldIndex.GroundAttackChance;
                case "HOVERTIME":
                    return (ushort)CombatStyleFlight_FieldIndex.HoverTime;
                case "GROUNDATTACKTIME":
                    return (ushort)CombatStyleFlight_FieldIndex.GroundAttackTime;
                case "PERCHATTACKCHANCE":
                    return (ushort)CombatStyleFlight_FieldIndex.PerchAttackChance;
                case "PERCHATTACKTIME":
                    return (ushort)CombatStyleFlight_FieldIndex.PerchAttackTime;
                case "FLYINGATTACKCHANCE":
                    return (ushort)CombatStyleFlight_FieldIndex.FlyingAttackChance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                case CombatStyleFlight_FieldIndex.HoverChance:
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                case CombatStyleFlight_FieldIndex.HoverTime:
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                case CombatStyleFlight_FieldIndex.HoverChance:
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                case CombatStyleFlight_FieldIndex.HoverTime:
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                case CombatStyleFlight_FieldIndex.HoverChance:
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                case CombatStyleFlight_FieldIndex.HoverTime:
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                    return "Versioning";
                case CombatStyleFlight_FieldIndex.HoverChance:
                    return "HoverChance";
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                    return "DiveBombChance";
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                    return "GroundAttackChance";
                case CombatStyleFlight_FieldIndex.HoverTime:
                    return "HoverTime";
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                    return "GroundAttackTime";
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                    return "PerchAttackChance";
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                    return "PerchAttackTime";
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return "FlyingAttackChance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                case CombatStyleFlight_FieldIndex.HoverChance:
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                case CombatStyleFlight_FieldIndex.HoverTime:
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                case CombatStyleFlight_FieldIndex.HoverChance:
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                case CombatStyleFlight_FieldIndex.HoverTime:
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CombatStyleFlight_FieldIndex enu = (CombatStyleFlight_FieldIndex)index;
            switch (enu)
            {
                case CombatStyleFlight_FieldIndex.Versioning:
                    return typeof(CombatStyleFlight.VersioningBreaks);
                case CombatStyleFlight_FieldIndex.HoverChance:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.DiveBombChance:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.GroundAttackChance:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.HoverTime:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.GroundAttackTime:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.PerchAttackChance:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.PerchAttackTime:
                    return typeof(Single);
                case CombatStyleFlight_FieldIndex.FlyingAttackChance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CombatStyleFlightXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.CSFL;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleFlightBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleFlightSetterCommon
    {
        public static readonly CombatStyleFlightSetterCommon Instance = new CombatStyleFlightSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleFlight item)
        {
            ClearPartial();
            item.Versioning = default;
            item.HoverChance = default;
            item.DiveBombChance = default;
            item.GroundAttackChance = default;
            item.HoverTime = default;
            item.GroundAttackTime = default;
            item.PerchAttackChance = default;
            item.PerchAttackTime = default;
            item.FlyingAttackChance = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ICombatStyleFlight item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CombatStyleFlightXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleFlight item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.CSFL)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CombatStyleFlightBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CombatStyleFlightCommon
    {
        public static readonly CombatStyleFlightCommon Instance = new CombatStyleFlightCommon();

        public CombatStyleFlight.Mask<bool> GetEqualsMask(
            ICombatStyleFlightGetter item,
            ICombatStyleFlightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleFlight.Mask<bool>(false);
            ((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleFlightGetter item,
            ICombatStyleFlightGetter rhs,
            CombatStyleFlight.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.HoverChance = item.HoverChance.EqualsWithin(rhs.HoverChance);
            ret.DiveBombChance = item.DiveBombChance.EqualsWithin(rhs.DiveBombChance);
            ret.GroundAttackChance = item.GroundAttackChance.EqualsWithin(rhs.GroundAttackChance);
            ret.HoverTime = item.HoverTime.EqualsWithin(rhs.HoverTime);
            ret.GroundAttackTime = item.GroundAttackTime.EqualsWithin(rhs.GroundAttackTime);
            ret.PerchAttackChance = item.PerchAttackChance.EqualsWithin(rhs.PerchAttackChance);
            ret.PerchAttackTime = item.PerchAttackTime.EqualsWithin(rhs.PerchAttackTime);
            ret.FlyingAttackChance = item.FlyingAttackChance.EqualsWithin(rhs.FlyingAttackChance);
        }
        
        public string ToString(
            ICombatStyleFlightGetter item,
            string? name = null,
            CombatStyleFlight.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleFlightGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleFlight.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyleFlight =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyleFlight) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleFlightGetter item,
            FileGeneration fg,
            CombatStyleFlight.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.HoverChance ?? true)
            {
                fg.AppendItem(item.HoverChance, "HoverChance");
            }
            if (printMask?.DiveBombChance ?? true)
            {
                fg.AppendItem(item.DiveBombChance, "DiveBombChance");
            }
            if (printMask?.GroundAttackChance ?? true)
            {
                fg.AppendItem(item.GroundAttackChance, "GroundAttackChance");
            }
            if (printMask?.HoverTime ?? true)
            {
                fg.AppendItem(item.HoverTime, "HoverTime");
            }
            if (printMask?.GroundAttackTime ?? true)
            {
                fg.AppendItem(item.GroundAttackTime, "GroundAttackTime");
            }
            if (printMask?.PerchAttackChance ?? true)
            {
                fg.AppendItem(item.PerchAttackChance, "PerchAttackChance");
            }
            if (printMask?.PerchAttackTime ?? true)
            {
                fg.AppendItem(item.PerchAttackTime, "PerchAttackTime");
            }
            if (printMask?.FlyingAttackChance ?? true)
            {
                fg.AppendItem(item.FlyingAttackChance, "FlyingAttackChance");
            }
        }
        
        public bool HasBeenSet(
            ICombatStyleFlightGetter item,
            CombatStyleFlight.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICombatStyleFlightGetter item,
            CombatStyleFlight.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.HoverChance = true;
            mask.DiveBombChance = true;
            mask.GroundAttackChance = true;
            mask.HoverTime = true;
            mask.GroundAttackTime = true;
            mask.PerchAttackChance = true;
            mask.PerchAttackTime = true;
            mask.FlyingAttackChance = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleFlightGetter? lhs,
            ICombatStyleFlightGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.HoverChance.EqualsWithin(rhs.HoverChance)) return false;
            if (!lhs.DiveBombChance.EqualsWithin(rhs.DiveBombChance)) return false;
            if (!lhs.GroundAttackChance.EqualsWithin(rhs.GroundAttackChance)) return false;
            if (!lhs.HoverTime.EqualsWithin(rhs.HoverTime)) return false;
            if (!lhs.GroundAttackTime.EqualsWithin(rhs.GroundAttackTime)) return false;
            if (!lhs.PerchAttackChance.EqualsWithin(rhs.PerchAttackChance)) return false;
            if (!lhs.PerchAttackTime.EqualsWithin(rhs.PerchAttackTime)) return false;
            if (!lhs.FlyingAttackChance.EqualsWithin(rhs.FlyingAttackChance)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleFlightGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.HoverChance);
            hash.Add(item.DiveBombChance);
            hash.Add(item.GroundAttackChance);
            hash.Add(item.HoverTime);
            hash.Add(item.GroundAttackTime);
            hash.Add(item.PerchAttackChance);
            hash.Add(item.PerchAttackTime);
            hash.Add(item.FlyingAttackChance);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleFlight.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICombatStyleFlightGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ICombatStyleFlightGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class CombatStyleFlightSetterTranslationCommon
    {
        public static readonly CombatStyleFlightSetterTranslationCommon Instance = new CombatStyleFlightSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICombatStyleFlight item,
            ICombatStyleFlightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.HoverChance) ?? true))
            {
                item.HoverChance = rhs.HoverChance;
            }
            if (rhs.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.DiveBombChance) ?? true))
            {
                item.DiveBombChance = rhs.DiveBombChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.GroundAttackChance) ?? true))
            {
                item.GroundAttackChance = rhs.GroundAttackChance;
            }
            if (rhs.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.HoverTime) ?? true))
            {
                item.HoverTime = rhs.HoverTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.GroundAttackTime) ?? true))
            {
                item.GroundAttackTime = rhs.GroundAttackTime;
            }
            if (rhs.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break2)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.PerchAttackChance) ?? true))
            {
                item.PerchAttackChance = rhs.PerchAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.PerchAttackTime) ?? true))
            {
                item.PerchAttackTime = rhs.PerchAttackTime;
            }
            if (rhs.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break3)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.FlyingAttackChance) ?? true))
            {
                item.FlyingAttackChance = rhs.FlyingAttackChance;
            }
        }
        
        #endregion
        
        public CombatStyleFlight DeepCopy(
            ICombatStyleFlightGetter item,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            CombatStyleFlight ret = (CombatStyleFlight)((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CombatStyleFlight DeepCopy(
            ICombatStyleFlightGetter item,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? copyMask = null)
        {
            CombatStyleFlight ret = (CombatStyleFlight)((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CombatStyleFlight DeepCopy(
            ICombatStyleFlightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleFlight ret = (CombatStyleFlight)((CombatStyleFlightCommon)((ICombatStyleFlightGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CombatStyleFlight
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleFlight_Registration.Instance;
        public static CombatStyleFlight_Registration Registration => CombatStyleFlight_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleFlightCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleFlightSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleFlightSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleFlightGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleFlightGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleFlightGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CombatStyleFlightXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CombatStyleFlightXmlWriteTranslation Instance = new CombatStyleFlightXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICombatStyleFlightGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<CombatStyleFlight.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.HoverChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HoverChance),
                    item: item.HoverChance,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.HoverChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.DiveBombChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DiveBombChance),
                    item: item.DiveBombChance,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.DiveBombChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.GroundAttackChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GroundAttackChance),
                    item: item.GroundAttackChance,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.GroundAttackChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.HoverTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HoverTime),
                    item: item.HoverTime,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.HoverTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.GroundAttackTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GroundAttackTime),
                    item: item.GroundAttackTime,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.GroundAttackTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.PerchAttackChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PerchAttackChance),
                    item: item.PerchAttackChance,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.PerchAttackChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.PerchAttackTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PerchAttackTime),
                    item: item.PerchAttackTime,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.PerchAttackTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CombatStyleFlight_FieldIndex.FlyingAttackChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FlyingAttackChance),
                    item: item.FlyingAttackChance,
                    fieldIndex: (int)CombatStyleFlight_FieldIndex.FlyingAttackChance,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICombatStyleFlightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.CombatStyleFlight");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.CombatStyleFlight");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICombatStyleFlightGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICombatStyleFlightGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ICombatStyleFlightGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CombatStyleFlightXmlCreateTranslation
    {
        public readonly static CombatStyleFlightXmlCreateTranslation Instance = new CombatStyleFlightXmlCreateTranslation();

        public static void FillPublicXml(
            ICombatStyleFlight item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CombatStyleFlightXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICombatStyleFlight item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<CombatStyleFlight.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoverChance":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.HoverChance);
                    try
                    {
                        item.HoverChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DiveBombChance":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.DiveBombChance);
                    try
                    {
                        item.DiveBombChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroundAttackChance":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.GroundAttackChance);
                    try
                    {
                        item.GroundAttackChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HoverTime":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.HoverTime);
                    try
                    {
                        item.HoverTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroundAttackTime":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.GroundAttackTime);
                    try
                    {
                        item.GroundAttackTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PerchAttackChance":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.PerchAttackChance);
                    try
                    {
                        item.PerchAttackChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PerchAttackTime":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.PerchAttackTime);
                    try
                    {
                        item.PerchAttackTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FlyingAttackChance":
                    errorMask?.PushIndex((int)CombatStyleFlight_FieldIndex.FlyingAttackChance);
                    try
                    {
                        item.FlyingAttackChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class CombatStyleFlightXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            XElement node,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleFlightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CombatStyleFlight.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            string path,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            Stream stream,
            out CombatStyleFlight.ErrorMask errorMask,
            CombatStyleFlight.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((CombatStyleFlightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            XElement node,
            string? name = null,
            CombatStyleFlight.TranslationMask? translationMask = null)
        {
            ((CombatStyleFlightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CombatStyleFlightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICombatStyleFlightGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CombatStyleFlightXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CombatStyleFlightBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CombatStyleFlightBinaryWriteTranslation Instance = new CombatStyleFlightBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICombatStyleFlightGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HoverChance);
            if (!item.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DiveBombChance);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GroundAttackChance);
                if (!item.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break1))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HoverTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.GroundAttackTime);
                    if (!item.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break2))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.PerchAttackChance);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.PerchAttackTime);
                        if (!item.Versioning.HasFlag(CombatStyleFlight.VersioningBreaks.Break3))
                        {
                            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                                writer: writer,
                                item: item.FlyingAttackChance);
                        }
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleFlightGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CSFL),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleFlightGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CombatStyleFlightBinaryCreateTranslation
    {
        public readonly static CombatStyleFlightBinaryCreateTranslation Instance = new CombatStyleFlightBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleFlight item,
            MutagenFrame frame)
        {
            item.HoverChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleFlight.VersioningBreaks.Break0;
                return;
            }
            item.DiveBombChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.GroundAttackChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleFlight.VersioningBreaks.Break1;
                return;
            }
            item.HoverTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.GroundAttackTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleFlight.VersioningBreaks.Break2;
                return;
            }
            item.PerchAttackChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.PerchAttackTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleFlight.VersioningBreaks.Break3;
                return;
            }
            item.FlyingAttackChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CombatStyleFlightBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleFlightGetter item,
            MutagenWriter writer)
        {
            ((CombatStyleFlightBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CombatStyleFlightBinaryOverlay :
        BinaryOverlay,
        ICombatStyleFlightGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleFlight_Registration.Instance;
        public static CombatStyleFlight_Registration Registration => CombatStyleFlight_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleFlightCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleFlightSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleFlightGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleFlightGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleFlightGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICombatStyleFlightGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CombatStyleFlightXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CombatStyleFlightXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleFlightBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleFlightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public CombatStyleFlight.VersioningBreaks Versioning { get; private set; }
        public Single HoverChance => SpanExt.GetFloat(_data.Slice(0x0, 0x4));
        public Single DiveBombChance => SpanExt.GetFloat(_data.Slice(0x4, 0x4));
        public Single GroundAttackChance => SpanExt.GetFloat(_data.Slice(0x8, 0x4));
        public Single HoverTime => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public Single GroundAttackTime => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        public Single PerchAttackChance => SpanExt.GetFloat(_data.Slice(0x14, 0x4));
        public Single PerchAttackTime => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public Single FlyingAttackChance => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleFlightBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CombatStyleFlightBinaryOverlay CombatStyleFlightFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleFlightBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x4)
            {
                ret.Versioning |= CombatStyleFlight.VersioningBreaks.Break0;
            }
            if (ret._data.Length <= 0xC)
            {
                ret.Versioning |= CombatStyleFlight.VersioningBreaks.Break1;
            }
            if (ret._data.Length <= 0x14)
            {
                ret.Versioning |= CombatStyleFlight.VersioningBreaks.Break2;
            }
            if (ret._data.Length <= 0x1C)
            {
                ret.Versioning |= CombatStyleFlight.VersioningBreaks.Break3;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CombatStyleFlightBinaryOverlay CombatStyleFlightFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CombatStyleFlightFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleFlightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

