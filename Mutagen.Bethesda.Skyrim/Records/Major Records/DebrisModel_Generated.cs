/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DebrisModel :
        IDebrisModel,
        ILoquiObjectSetter<DebrisModel>,
        IEquatable<DebrisModel>,
        IEqualsMask
    {
        #region Ctor
        public DebrisModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Percentage
        public Byte Percentage { get; set; } = default;
        #endregion
        #region ModelFilename
        public String ModelFilename { get; set; } = string.Empty;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DebrisModel.Flag _Flags;
        public DebrisModel.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Flags = value;
            }
        }
        #endregion
        #region TextureFileHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFileHashes;
        public MemorySlice<Byte>? TextureFileHashes
        {
            get => this._TextureFileHashes;
            set => this._TextureFileHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDebrisModelGetter.TextureFileHashes => this.TextureFileHashes;
        #endregion
        #region DATADataTypeState
        public DebrisModel.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DebrisModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDebrisModelGetter rhs)) return false;
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DebrisModel? obj)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => DebrisModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DebrisModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static DebrisModel CreateFromXml(
            XElement node,
            DebrisModel.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DebrisModel CreateFromXml(
            XElement node,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DebrisModel CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DebrisModel();
            ((DebrisModelSetterCommon)((IDebrisModelGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DebrisModel CreateFromXml(
            string path,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DebrisModel CreateFromXml(
            string path,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DebrisModel CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DebrisModel CreateFromXml(
            Stream stream,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DebrisModel CreateFromXml(
            Stream stream,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DebrisModel CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Percentage = initialValue;
                this.ModelFilename = initialValue;
                this.Flags = initialValue;
                this.TextureFileHashes = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem Percentage,
                TItem ModelFilename,
                TItem Flags,
                TItem TextureFileHashes,
                TItem DATADataTypeState)
            {
                this.Percentage = Percentage;
                this.ModelFilename = ModelFilename;
                this.Flags = Flags;
                this.TextureFileHashes = TextureFileHashes;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Percentage;
            public TItem ModelFilename;
            public TItem Flags;
            public TItem TextureFileHashes;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Percentage, rhs.Percentage)) return false;
                if (!object.Equals(this.ModelFilename, rhs.ModelFilename)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.TextureFileHashes, rhs.TextureFileHashes)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Percentage);
                hash.Add(this.ModelFilename);
                hash.Add(this.Flags);
                hash.Add(this.TextureFileHashes);
                hash.Add(this.DATADataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Percentage)) return false;
                if (!eval(this.ModelFilename)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.TextureFileHashes)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Percentage)) return true;
                if (eval(this.ModelFilename)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.TextureFileHashes)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DebrisModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Percentage = eval(this.Percentage);
                obj.ModelFilename = eval(this.ModelFilename);
                obj.Flags = eval(this.Flags);
                obj.TextureFileHashes = eval(this.TextureFileHashes);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DebrisModel.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DebrisModel.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DebrisModel.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Percentage ?? true)
                    {
                        fg.AppendItem(Percentage, "Percentage");
                    }
                    if (printMask?.ModelFilename ?? true)
                    {
                        fg.AppendItem(ModelFilename, "ModelFilename");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.TextureFileHashes ?? true)
                    {
                        fg.AppendItem(TextureFileHashes, "TextureFileHashes");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Percentage;
            public Exception? ModelFilename;
            public Exception? Flags;
            public Exception? TextureFileHashes;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        return Percentage;
                    case DebrisModel_FieldIndex.ModelFilename:
                        return ModelFilename;
                    case DebrisModel_FieldIndex.Flags:
                        return Flags;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        return TextureFileHashes;
                    case DebrisModel_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        this.Percentage = ex;
                        break;
                    case DebrisModel_FieldIndex.ModelFilename:
                        this.ModelFilename = ex;
                        break;
                    case DebrisModel_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = ex;
                        break;
                    case DebrisModel_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        this.Percentage = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.ModelFilename:
                        this.ModelFilename = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Percentage != null) return true;
                if (ModelFilename != null) return true;
                if (Flags != null) return true;
                if (TextureFileHashes != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Percentage, "Percentage");
                fg.AppendItem(ModelFilename, "ModelFilename");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(TextureFileHashes, "TextureFileHashes");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Percentage = this.Percentage.Combine(rhs.Percentage);
                ret.ModelFilename = this.ModelFilename.Combine(rhs.ModelFilename);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.TextureFileHashes = this.TextureFileHashes.Combine(rhs.TextureFileHashes);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Percentage;
            public bool ModelFilename;
            public bool Flags;
            public bool TextureFileHashes;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Percentage = defaultOn;
                this.ModelFilename = defaultOn;
                this.Flags = defaultOn;
                this.TextureFileHashes = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Percentage, null));
                ret.Add((ModelFilename, null));
                ret.Add((Flags, null));
                ret.Add((TextureFileHashes, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = DebrisModel_Registration.TriggeringRecordType;
        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DebrisModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DebrisModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static DebrisModel CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static DebrisModel CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DebrisModel();
            ((DebrisModelSetterCommon)((IDebrisModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DebrisModel item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDebrisModelGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DebrisModel GetNew()
        {
            return new DebrisModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IDebrisModel :
        IDebrisModelGetter,
        ILoquiObjectSetter<IDebrisModel>
    {
        new Byte Percentage { get; set; }
        new String ModelFilename { get; set; }
        new DebrisModel.Flag Flags { get; set; }
        new MemorySlice<Byte>? TextureFileHashes { get; set; }
        new DebrisModel.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IDebrisModelGetter :
        ILoquiObject,
        ILoquiObject<IDebrisModelGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => DebrisModel_Registration.Instance;
        Byte Percentage { get; }
        String ModelFilename { get; }
        DebrisModel.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte>? TextureFileHashes { get; }
        DebrisModel.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DebrisModelMixIn
    {
        public static void Clear(this IDebrisModel item)
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DebrisModel.Mask<bool> GetEqualsMask(
            this IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDebrisModelGetter item,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDebrisModelGetter item,
            FileGeneration fg,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDebrisModelGetter item,
            DebrisModel.Mask<bool?> checkMask)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DebrisModel.Mask<bool> GetHasBeenSetMask(this IDebrisModelGetter item)
        {
            var ret = new DebrisModel.Mask<bool>(false);
            ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDebrisModelGetter item,
            IDebrisModelGetter rhs)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            DebrisModel.TranslationMask? copyMask = null)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            DebrisModel.TranslationMask? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDebrisModel item,
            XElement node,
            DebrisModel.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDebrisModel item,
            XElement node,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            string path,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            string path,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            string path,
            ErrorMaskBuilder? errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            Stream stream,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            Stream stream,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDebrisModel item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DebrisModel.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDebrisModel item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDebrisModel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum DebrisModel_FieldIndex
    {
        Percentage = 0,
        ModelFilename = 1,
        Flags = 2,
        TextureFileHashes = 3,
        DATADataTypeState = 4,
    }
    #endregion

    #region Registration
    public partial class DebrisModel_Registration : ILoquiRegistration
    {
        public static readonly DebrisModel_Registration Instance = new DebrisModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 404,
            version: 0);

        public const string GUID = "efe281d8-06f2-4ae1-940f-05501d82853c";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(DebrisModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DebrisModel.ErrorMask);

        public static readonly Type ClassType = typeof(DebrisModel);

        public static readonly Type GetterType = typeof(IDebrisModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDebrisModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.DebrisModel";

        public const string Name = "DebrisModel";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "PERCENTAGE":
                    return (ushort)DebrisModel_FieldIndex.Percentage;
                case "MODELFILENAME":
                    return (ushort)DebrisModel_FieldIndex.ModelFilename;
                case "FLAGS":
                    return (ushort)DebrisModel_FieldIndex.Flags;
                case "TEXTUREFILEHASHES":
                    return (ushort)DebrisModel_FieldIndex.TextureFileHashes;
                case "DATADATATYPESTATE":
                    return (ushort)DebrisModel_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                case DebrisModel_FieldIndex.ModelFilename:
                case DebrisModel_FieldIndex.Flags:
                case DebrisModel_FieldIndex.TextureFileHashes:
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                case DebrisModel_FieldIndex.ModelFilename:
                case DebrisModel_FieldIndex.Flags:
                case DebrisModel_FieldIndex.TextureFileHashes:
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                case DebrisModel_FieldIndex.ModelFilename:
                case DebrisModel_FieldIndex.Flags:
                case DebrisModel_FieldIndex.TextureFileHashes:
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                    return "Percentage";
                case DebrisModel_FieldIndex.ModelFilename:
                    return "ModelFilename";
                case DebrisModel_FieldIndex.Flags:
                    return "Flags";
                case DebrisModel_FieldIndex.TextureFileHashes:
                    return "TextureFileHashes";
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                case DebrisModel_FieldIndex.ModelFilename:
                case DebrisModel_FieldIndex.Flags:
                case DebrisModel_FieldIndex.TextureFileHashes:
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                case DebrisModel_FieldIndex.ModelFilename:
                case DebrisModel_FieldIndex.Flags:
                case DebrisModel_FieldIndex.TextureFileHashes:
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
            switch (enu)
            {
                case DebrisModel_FieldIndex.Percentage:
                    return typeof(Byte);
                case DebrisModel_FieldIndex.ModelFilename:
                    return typeof(String);
                case DebrisModel_FieldIndex.Flags:
                    return typeof(DebrisModel.Flag);
                case DebrisModel_FieldIndex.TextureFileHashes:
                    return typeof(MemorySlice<Byte>);
                case DebrisModel_FieldIndex.DATADataTypeState:
                    return typeof(DebrisModel.DATADataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DebrisModelXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static readonly Type BinaryWriteTranslation = typeof(DebrisModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DebrisModelSetterCommon
    {
        public static readonly DebrisModelSetterCommon Instance = new DebrisModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDebrisModel item)
        {
            ClearPartial();
            item.Percentage = default;
            item.ModelFilename = string.Empty;
            item.Flags = default;
            item.TextureFileHashes = default;
            item.DATADataTypeState = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IDebrisModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= DebrisModel.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    DebrisModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDebrisModel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DebrisModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DebrisModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class DebrisModelCommon
    {
        public static readonly DebrisModelCommon Instance = new DebrisModelCommon();

        public DebrisModel.Mask<bool> GetEqualsMask(
            IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DebrisModel.Mask<bool>(false);
            ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            DebrisModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Percentage = item.Percentage == rhs.Percentage;
            ret.ModelFilename = string.Equals(item.ModelFilename, rhs.ModelFilename);
            ret.Flags = item.Flags == rhs.Flags;
            ret.TextureFileHashes = MemorySliceExt.Equal(item.TextureFileHashes, rhs.TextureFileHashes);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
        }
        
        public string ToString(
            IDebrisModelGetter item,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDebrisModelGetter item,
            FileGeneration fg,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DebrisModel =>");
            }
            else
            {
                fg.AppendLine($"{name} (DebrisModel) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDebrisModelGetter item,
            FileGeneration fg,
            DebrisModel.Mask<bool>? printMask = null)
        {
            if (printMask?.Percentage ?? true)
            {
                fg.AppendItem(item.Percentage, "Percentage");
            }
            if (printMask?.ModelFilename ?? true)
            {
                fg.AppendItem(item.ModelFilename, "ModelFilename");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.TextureFileHashes ?? true)
                && item.TextureFileHashes.TryGet(out var TextureFileHashesItem))
            {
                fg.AppendLine($"TextureFileHashes => {SpanExt.ToHexString(TextureFileHashesItem)}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IDebrisModelGetter item,
            DebrisModel.Mask<bool?> checkMask)
        {
            if (checkMask.TextureFileHashes.HasValue && checkMask.TextureFileHashes.Value != (item.TextureFileHashes != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IDebrisModelGetter item,
            DebrisModel.Mask<bool> mask)
        {
            mask.Percentage = true;
            mask.ModelFilename = true;
            mask.Flags = true;
            mask.TextureFileHashes = (item.TextureFileHashes != null);
            mask.DATADataTypeState = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDebrisModelGetter? lhs,
            IDebrisModelGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Percentage != rhs.Percentage) return false;
            if (!string.Equals(lhs.ModelFilename, rhs.ModelFilename)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemorySliceExt.Equal(lhs.TextureFileHashes, rhs.TextureFileHashes)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDebrisModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Percentage);
            hash.Add(item.ModelFilename);
            hash.Add(item.Flags);
            if (item.TextureFileHashes.TryGet(out var TextureFileHashesItem))
            {
                hash.Add(TextureFileHashesItem);
            }
            hash.Add(item.DATADataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DebrisModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDebrisModelGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IDebrisModelGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class DebrisModelSetterTranslationCommon
    {
        public static readonly DebrisModelSetterTranslationCommon Instance = new DebrisModelSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDebrisModel item,
            IDebrisModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Percentage) ?? true))
            {
                item.Percentage = rhs.Percentage;
            }
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.ModelFilename) ?? true))
            {
                item.ModelFilename = rhs.ModelFilename;
            }
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.TextureFileHashes) ?? true))
            {
                if(rhs.TextureFileHashes.TryGet(out var TextureFileHashesrhs))
                {
                    item.TextureFileHashes = TextureFileHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFileHashes = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        #endregion
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            DebrisModel.TranslationMask? copyMask = null)
        {
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DebrisModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DebrisModel_Registration.Instance;
        public static DebrisModel_Registration Registration => DebrisModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DebrisModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DebrisModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DebrisModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DebrisModelXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DebrisModelXmlWriteTranslation Instance = new DebrisModelXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDebrisModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Percentage) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Percentage),
                    item: item.Percentage,
                    fieldIndex: (int)DebrisModel_FieldIndex.Percentage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.ModelFilename) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ModelFilename),
                    item: item.ModelFilename,
                    fieldIndex: (int)DebrisModel_FieldIndex.ModelFilename,
                    errorMask: errorMask);
            }
            if (!item.DATADataTypeState.HasFlag(DebrisModel.DATADataType.Break0))
            {
                if ((translationMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<DebrisModel.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)DebrisModel_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            else
            {
                node.Add(new XElement("HasDATADataType"));
            }
            if ((item.TextureFileHashes != null)
                && (translationMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.TextureFileHashes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureFileHashes),
                    item: item.TextureFileHashes.Value,
                    fieldIndex: (int)DebrisModel_FieldIndex.TextureFileHashes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<DebrisModel.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)DebrisModel_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.DebrisModel");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.DebrisModel");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDebrisModelGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IDebrisModelGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DebrisModelXmlCreateTranslation
    {
        public readonly static DebrisModelXmlCreateTranslation Instance = new DebrisModelXmlCreateTranslation();

        public static void FillPublicXml(
            IDebrisModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DebrisModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDebrisModel item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Percentage":
                    errorMask?.PushIndex((int)DebrisModel_FieldIndex.Percentage);
                    try
                    {
                        item.Percentage = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ModelFilename":
                    errorMask?.PushIndex((int)DebrisModel_FieldIndex.ModelFilename);
                    try
                    {
                        item.ModelFilename = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)DebrisModel_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<DebrisModel.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~DebrisModel.DATADataType.Break0;
                    break;
                case "TextureFileHashes":
                    errorMask?.PushIndex((int)DebrisModel_FieldIndex.TextureFileHashes);
                    try
                    {
                        item.TextureFileHashes = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)DebrisModel_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<DebrisModel.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class DebrisModelXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDebrisModelGetter item,
            XElement node,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DebrisModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            string path,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            Stream stream,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((DebrisModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            XElement node,
            string? name = null,
            DebrisModel.TranslationMask? translationMask = null)
        {
            ((DebrisModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DebrisModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDebrisModelGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DebrisModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DebrisModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DebrisModelBinaryWriteTranslation Instance = new DebrisModelBinaryWriteTranslation();

        public static void WriteEmbedded(
            IDebrisModelGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IDebrisModelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Percentage);
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ModelFilename,
                    binaryType: StringBinaryType.NullTerminate);
                if (!item.DATADataTypeState.HasFlag(DebrisModel.DATADataType.Break0))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<DebrisModel.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                }
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureFileHashes,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MODT));
        }

        public void Write(
            MutagenWriter writer,
            IDebrisModelGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDebrisModelGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DebrisModelBinaryCreateTranslation
    {
        public readonly static DebrisModelBinaryCreateTranslation Instance = new DebrisModelBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDebrisModel item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IDebrisModel item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DebrisModel_FieldIndex.Flags) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Percentage = dataFrame.ReadUInt8();
                    item.ModelFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: false);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= DebrisModel.DATADataType.Break0;
                        return (int)DebrisModel_FieldIndex.ModelFilename;
                    }
                    item.Flags = EnumBinaryTranslation<DebrisModel.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    return (int)DebrisModel_FieldIndex.Flags;
                }
                case RecordTypeInts.MODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFileHashes = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DebrisModel_FieldIndex.TextureFileHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DebrisModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDebrisModelGetter item,
            MutagenWriter writer)
        {
            ((DebrisModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DebrisModelBinaryOverlay :
        BinaryOverlay,
        IDebrisModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DebrisModel_Registration.Instance;
        public static DebrisModel_Registration Registration => DebrisModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DebrisModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DebrisModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDebrisModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDebrisModelGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => DebrisModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DebrisModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DebrisModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DebrisModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        private int? _DATALocation;
        public DebrisModel.DATADataType DATADataTypeState { get; private set; }
        #region Percentage
        private int _PercentageLocation => _DATALocation!.Value;
        private bool _Percentage_IsSet => _DATALocation.HasValue;
        public Byte Percentage => _Percentage_IsSet ? _data.Span[_PercentageLocation] : default;
        #endregion
        #region ModelFilename
        public String ModelFilename { get; private set; } = string.Empty;
        protected int ModelFilenameEndingPos;
        #endregion
        #region Flags
        private int _FlagsLocation => ModelFilenameEndingPos;
        private bool _Flags_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(DebrisModel.DATADataType.Break0);
        public DebrisModel.Flag Flags => _Flags_IsSet ? (DebrisModel.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region TextureFileHashes
        private int? _TextureFileHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFileHashes => _TextureFileHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _TextureFileHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DebrisModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DebrisModelBinaryOverlay DebrisModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DebrisModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.ModelFilename = BinaryStringUtility.ParseUnknownLengthString(ret._data.Slice(ret._DATALocation!.Value + 0x1));
            ret.ModelFilenameEndingPos = ret._DATALocation!.Value + 0x1 + ret.ModelFilename.Length + 1;
            return ret;
        }

        public static DebrisModelBinaryOverlay DebrisModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DebrisModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DebrisModel_FieldIndex.Flags) return ParseResult.Stop;
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= ModelFilenameEndingPos)
                    {
                        this.DATADataTypeState |= DebrisModel.DATADataType.Break0;
                    }
                    return (int)DebrisModel_FieldIndex.Flags;
                }
                case RecordTypeInts.MODT:
                {
                    _TextureFileHashesLocation = (stream.Position - offset);
                    return (int)DebrisModel_FieldIndex.TextureFileHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DebrisModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

