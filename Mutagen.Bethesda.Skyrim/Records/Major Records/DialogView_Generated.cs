/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DialogView :
        SkyrimMajorRecord,
        IDialogViewInternal,
        ILoquiObjectSetter<DialogView>,
        IEquatable<IDialogViewGetter>
    {
        #region Ctor
        protected DialogView()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quest
        public FormLink<Quest> Quest { get; set; } = new FormLink<Quest>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLink<IQuestGetter> IDialogViewGetter.Quest => this.Quest.ToGetter<Quest, IQuestGetter>();
        #endregion
        #region Branches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<DialogBranch>> _Branches = new ExtendedList<IFormLink<DialogBranch>>();
        public IExtendedList<IFormLink<DialogBranch>> Branches
        {
            get => this._Branches;
            protected set => this._Branches = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogBranchGetter>> IDialogViewGetter.Branches => _Branches;
        #endregion

        #endregion
        #region TNAMs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SliceList<byte> _TNAMs = new SliceList<byte>();
        public SliceList<byte> TNAMs
        {
            get => this._TNAMs;
            protected set => this._TNAMs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> IDialogViewGetter.TNAMs => _TNAMs;
        #endregion

        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogViewGetter.ENAM => this.ENAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogViewGetter.DNAM => this.DNAM;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogViewMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogViewGetter rhs)) return false;
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogViewGetter? obj)
        {
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Quest = initialValue;
                this.Branches = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.TNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ENAM = initialValue;
                this.DNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Quest,
                TItem Branches,
                TItem TNAMs,
                TItem ENAM,
                TItem DNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Quest = Quest;
                this.Branches = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Branches, Enumerable.Empty<(int Index, TItem Value)>());
                this.TNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TNAMs, Enumerable.Empty<(int Index, TItem Value)>());
                this.ENAM = ENAM;
                this.DNAM = DNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Quest;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Branches;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TNAMs;
            public TItem ENAM;
            public TItem DNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.Branches, rhs.Branches)) return false;
                if (!object.Equals(this.TNAMs, rhs.TNAMs)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Quest);
                hash.Add(this.Branches);
                hash.Add(this.TNAMs);
                hash.Add(this.ENAM);
                hash.Add(this.DNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Quest)) return false;
                if (this.Branches != null)
                {
                    if (!eval(this.Branches.Overall)) return false;
                    if (this.Branches.Specific != null)
                    {
                        foreach (var item in this.Branches.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TNAMs != null)
                {
                    if (!eval(this.TNAMs.Overall)) return false;
                    if (this.TNAMs.Specific != null)
                    {
                        foreach (var item in this.TNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ENAM)) return false;
                if (!eval(this.DNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Quest)) return true;
                if (this.Branches != null)
                {
                    if (eval(this.Branches.Overall)) return true;
                    if (this.Branches.Specific != null)
                    {
                        foreach (var item in this.Branches.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TNAMs != null)
                {
                    if (eval(this.TNAMs.Overall)) return true;
                    if (this.TNAMs.Specific != null)
                    {
                        foreach (var item in this.TNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ENAM)) return true;
                if (eval(this.DNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogView.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Quest = eval(this.Quest);
                if (Branches != null)
                {
                    obj.Branches = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Branches.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Branches.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Branches.Specific = l;
                        foreach (var item in Branches.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (TNAMs != null)
                {
                    obj.TNAMs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TNAMs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TNAMs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TNAMs.Specific = l;
                        foreach (var item in TNAMs.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ENAM = eval(this.ENAM);
                obj.DNAM = eval(this.DNAM);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogView.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogView.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogView.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if ((printMask?.Branches?.Overall ?? true)
                        && Branches.TryGet(out var BranchesItem))
                    {
                        fg.AppendLine("Branches =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(BranchesItem.Overall);
                            if (BranchesItem.Specific != null)
                            {
                                foreach (var subItem in BranchesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.TNAMs?.Overall ?? true)
                        && TNAMs.TryGet(out var TNAMsItem))
                    {
                        fg.AppendLine("TNAMs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TNAMsItem.Overall);
                            if (TNAMsItem.Specific != null)
                            {
                                foreach (var subItem in TNAMsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        fg.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        fg.AppendItem(DNAM, "DNAM");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Quest;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Branches;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TNAMs;
            public Exception? ENAM;
            public Exception? DNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        return Quest;
                    case DialogView_FieldIndex.Branches:
                        return Branches;
                    case DialogView_FieldIndex.TNAMs:
                        return TNAMs;
                    case DialogView_FieldIndex.ENAM:
                        return ENAM;
                    case DialogView_FieldIndex.DNAM:
                        return DNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogView_FieldIndex.Branches:
                        this.Branches = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogView_FieldIndex.TNAMs:
                        this.TNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogView_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case DialogView_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogView_FieldIndex.Branches:
                        this.Branches = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogView_FieldIndex.TNAMs:
                        this.TNAMs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogView_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case DialogView_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Quest != null) return true;
                if (Branches != null) return true;
                if (TNAMs != null) return true;
                if (ENAM != null) return true;
                if (DNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Quest, "Quest");
                if (Branches.TryGet(out var BranchesItem))
                {
                    fg.AppendLine("Branches =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(BranchesItem.Overall);
                        if (BranchesItem.Specific != null)
                        {
                            foreach (var subItem in BranchesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (TNAMs.TryGet(out var TNAMsItem))
                {
                    fg.AppendLine("TNAMs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TNAMsItem.Overall);
                        if (TNAMsItem.Specific != null)
                        {
                            foreach (var subItem in TNAMsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ENAM, "ENAM");
                fg.AppendItem(DNAM, "DNAM");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.Branches = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Branches?.Overall, rhs.Branches?.Overall), ExceptionExt.Combine(this.Branches?.Specific, rhs.Branches?.Specific));
                ret.TNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.TNAMs?.Overall, rhs.TNAMs?.Overall), ExceptionExt.Combine(this.TNAMs?.Specific, rhs.TNAMs?.Specific));
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Quest;
            public bool Branches;
            public bool TNAMs;
            public bool ENAM;
            public bool DNAM;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Quest = defaultOn;
                this.Branches = defaultOn;
                this.TNAMs = defaultOn;
                this.ENAM = defaultOn;
                this.DNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Quest, null));
                ret.Add((Branches, null));
                ret.Add((TNAMs, null));
                ret.Add((ENAM, null));
                ret.Add((DNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogView_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogViewCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => DialogViewCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogViewCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogViewCommon.Instance.RemapLinks(this, mapping);
        public DialogView(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogView(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public DialogView(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogViewBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static DialogView CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogView();
            ((DialogViewSetterCommon)((IDialogViewGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogView item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogView GetNew()
        {
            return new DialogView();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogView :
        IDialogViewGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IDialogViewInternal>,
        ILinkedFormKeyContainer
    {
        new FormLink<Quest> Quest { get; set; }
        new IExtendedList<IFormLink<DialogBranch>> Branches { get; }
        new SliceList<byte> TNAMs { get; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
    }

    public partial interface IDialogViewInternal :
        ISkyrimMajorRecordInternal,
        IDialogView,
        IDialogViewGetter
    {
    }

    public partial interface IDialogViewGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IDialogViewGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => DialogView_Registration.Instance;
        FormLink<IQuestGetter> Quest { get; }
        IReadOnlyList<IFormLink<IDialogBranchGetter>> Branches { get; }
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> TNAMs { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogViewMixIn
    {
        public static void Clear(this IDialogViewInternal item)
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogView.Mask<bool> GetEqualsMask(
            this IDialogViewGetter item,
            IDialogViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogViewGetter item,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogViewGetter item,
            FileGeneration fg,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogViewGetter item,
            IDialogViewGetter rhs)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogViewInternal lhs,
            IDialogViewGetter rhs,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogView.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogViewInternal lhs,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            DialogView.TranslationMask? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogViewInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum DialogView_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Quest = 6,
        Branches = 7,
        TNAMs = 8,
        ENAM = 9,
        DNAM = 10,
    }
    #endregion

    #region Registration
    public partial class DialogView_Registration : ILoquiRegistration
    {
        public static readonly DialogView_Registration Instance = new DialogView_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 459,
            version: 0);

        public const string GUID = "db6b7dfe-8462-4e7a-be19-c4e855422b07";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(DialogView.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogView.ErrorMask);

        public static readonly Type ClassType = typeof(DialogView);

        public static readonly Type GetterType = typeof(IDialogViewGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogView);

        public static readonly Type? InternalSetterType = typeof(IDialogViewInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.DialogView";

        public const string Name = "DialogView";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "QUEST":
                    return (ushort)DialogView_FieldIndex.Quest;
                case "BRANCHES":
                    return (ushort)DialogView_FieldIndex.Branches;
                case "TNAMS":
                    return (ushort)DialogView_FieldIndex.TNAMs;
                case "ENAM":
                    return (ushort)DialogView_FieldIndex.ENAM;
                case "DNAM":
                    return (ushort)DialogView_FieldIndex.DNAM;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Branches:
                case DialogView_FieldIndex.TNAMs:
                    return true;
                case DialogView_FieldIndex.Quest:
                case DialogView_FieldIndex.ENAM:
                case DialogView_FieldIndex.DNAM:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                case DialogView_FieldIndex.Branches:
                case DialogView_FieldIndex.TNAMs:
                case DialogView_FieldIndex.ENAM:
                case DialogView_FieldIndex.DNAM:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                case DialogView_FieldIndex.Branches:
                case DialogView_FieldIndex.TNAMs:
                case DialogView_FieldIndex.ENAM:
                case DialogView_FieldIndex.DNAM:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                    return "Quest";
                case DialogView_FieldIndex.Branches:
                    return "Branches";
                case DialogView_FieldIndex.TNAMs:
                    return "TNAMs";
                case DialogView_FieldIndex.ENAM:
                    return "ENAM";
                case DialogView_FieldIndex.DNAM:
                    return "DNAM";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                case DialogView_FieldIndex.Branches:
                case DialogView_FieldIndex.TNAMs:
                case DialogView_FieldIndex.ENAM:
                case DialogView_FieldIndex.DNAM:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                case DialogView_FieldIndex.Branches:
                case DialogView_FieldIndex.TNAMs:
                case DialogView_FieldIndex.ENAM:
                case DialogView_FieldIndex.DNAM:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
            switch (enu)
            {
                case DialogView_FieldIndex.Quest:
                    return typeof(FormLink<Quest>);
                case DialogView_FieldIndex.Branches:
                    return typeof(IExtendedList<IFormLink<DialogBranch>>);
                case DialogView_FieldIndex.TNAMs:
                    return typeof(SliceList<byte>);
                case DialogView_FieldIndex.ENAM:
                    return typeof(MemorySlice<Byte>);
                case DialogView_FieldIndex.DNAM:
                    return typeof(MemorySlice<Byte>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.DLVW;
        public static readonly Type BinaryWriteTranslation = typeof(DialogViewBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogViewSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly DialogViewSetterCommon Instance = new DialogViewSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogViewInternal item)
        {
            ClearPartial();
            item.Quest = FormLink<Quest>.Null;
            item.Branches.Clear();
            item.TNAMs.Clear();
            item.ENAM = default;
            item.DNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IDialogViewInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogViewInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogViewInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogViewInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogViewBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogViewBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogView)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogView)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogViewCommon : SkyrimMajorRecordCommon
    {
        public new static readonly DialogViewCommon Instance = new DialogViewCommon();

        public DialogView.Mask<bool> GetEqualsMask(
            IDialogViewGetter item,
            IDialogViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogView.Mask<bool>(false);
            ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogViewGetter item,
            IDialogViewGetter rhs,
            DialogView.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Quest = object.Equals(item.Quest, rhs.Quest);
            ret.Branches = item.Branches.CollectionEqualsHelper(
                rhs.Branches,
                (l, r) => object.Equals(l, r),
                include);
            ret.TNAMs = item.TNAMs.CollectionEqualsHelper(
                rhs.TNAMs,
                (l, r) => MemoryExtensions.SequenceEqual(l.Span, r.Span),
                include);
            ret.ENAM = MemorySliceExt.Equal(item.ENAM, rhs.ENAM);
            ret.DNAM = MemorySliceExt.Equal(item.DNAM, rhs.DNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogViewGetter item,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogViewGetter item,
            FileGeneration fg,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogView =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogView) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogViewGetter item,
            FileGeneration fg,
            DialogView.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Quest ?? true)
            {
                fg.AppendItem(item.Quest.FormKey, "Quest");
            }
            if (printMask?.Branches?.Overall ?? true)
            {
                fg.AppendLine("Branches =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Branches)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TNAMs?.Overall ?? true)
            {
                fg.AppendLine("TNAMs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TNAMs)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {SpanExt.ToHexString(subItem)}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM.TryGet(out var ENAMItem))
            {
                fg.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM.TryGet(out var DNAMItem))
            {
                fg.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
        }
        
        public static DialogView_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogView_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (DialogView_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (DialogView_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (DialogView_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (DialogView_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (DialogView_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogView_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogView_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogViewGetter? lhs,
            IDialogViewGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs)) return false;
            if (!lhs.Quest.Equals(rhs.Quest)) return false;
            if (!lhs.Branches.SequenceEqualNullable(rhs.Branches)) return false;
            if (!lhs.TNAMs.SequenceEqualNullable(rhs.TNAMs)) return false;
            if (!MemorySliceExt.Equal(lhs.ENAM, rhs.ENAM)) return false;
            if (!MemorySliceExt.Equal(lhs.DNAM, rhs.DNAM)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogViewGetter?)lhs,
                rhs: rhs as IDialogViewGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogViewGetter?)lhs,
                rhs: rhs as IDialogViewGetter);
        }
        
        public virtual int GetHashCode(IDialogViewGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Quest);
            hash.Add(item.Branches);
            hash.Add(item.TNAMs);
            if (item.ENAM.TryGet(out var ENAMItem))
            {
                hash.Add(ENAMItem);
            }
            if (item.DNAM.TryGet(out var DNAMItem))
            {
                hash.Add(DNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogViewGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogViewGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogView.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDialogViewGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield return obj.Quest.FormKey;
            foreach (var item in obj.Branches.Select(f => f.FormKey))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IDialogViewGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(DialogView obj, DialogView rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new DialogView(getNextFormKey());
            ret.DeepCopyIn((DialogView)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogView)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DialogViewSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogViewSetterTranslationCommon Instance = new DialogViewSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogViewInternal item,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogView item,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.Quest) ?? true))
            {
                item.Quest = new FormLink<Quest>(rhs.Quest.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.Branches) ?? true))
            {
                errorMask?.PushIndex((int)DialogView_FieldIndex.Branches);
                try
                {
                    item.Branches.SetTo(
                        rhs.Branches
                        .Select(r => (IFormLink<DialogBranch>)new FormLink<DialogBranch>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.TNAMs) ?? true))
            {
                errorMask?.PushIndex((int)DialogView_FieldIndex.TNAMs);
                try
                {
                    item.TNAMs.SetTo(
                        rhs.TNAMs
                            .Select(b => new MemorySlice<byte>(b.ToArray())));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM.TryGet(out var ENAMrhs))
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM.TryGet(out var DNAMrhs))
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogViewInternal)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogView)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogViewInternal)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogView)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            DialogView.TranslationMask? copyMask = null)
        {
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogView.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogView
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogView_Registration.Instance;
        public new static DialogView_Registration Registration => DialogView_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogViewCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogViewSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogViewSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogViewBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogViewBinaryWriteTranslation Instance = new DialogViewBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDialogViewGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Quest,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.QNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogBranchGetter>>.Instance.Write(
                writer: writer,
                items: item.Branches,
                transl: (MutagenWriter subWriter, IFormLink<IDialogBranchGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ReadOnlyMemorySlice<Byte>>.Instance.WritePerItem(
                writer: writer,
                items: item.TNAMs,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                transl: ByteArrayBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogViewGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DLVW),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogViewBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogViewBinaryCreateTranslation Instance = new DialogViewBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DLVW;
        public static void FillBinaryStructs(
            IDialogViewInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogViewInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogView_FieldIndex.Quest;
                }
                case RecordTypeInts.BNAM:
                {
                    item.Branches.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<DialogBranch>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogView_FieldIndex.Branches;
                }
                case RecordTypeInts.TNAM:
                {
                    item.TNAMs.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MemorySlice<Byte>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                            transl: ByteArrayBinaryTranslation.Instance.Parse));
                    return (int)DialogView_FieldIndex.TNAMs;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogView_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogView_FieldIndex.DNAM;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DialogViewBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogViewBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IDialogViewGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogView_Registration.Instance;
        public new static DialogView_Registration Registration => DialogView_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogViewCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogViewSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogViewCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => DialogViewCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogViewBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Quest
        private int? _QuestLocation;
        public FormLink<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLink<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLink<IQuestGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLink<IDialogBranchGetter>> Branches { get; private set; } = ListExt.Empty<IFormLink<IDialogBranchGetter>>();
        public IReadOnlyList<ReadOnlyMemorySlice<Byte>> TNAMs { get; private set; } = ListExt.Empty<ReadOnlyMemorySlice<Byte>>();
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogViewBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogViewBinaryOverlay DialogViewFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new DialogViewBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogViewBinaryOverlay DialogViewFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogViewFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.Quest;
                }
                case RecordTypeInts.BNAM:
                {
                    this.Branches = BinaryOverlayList.FactoryByArray<IFormLink<IDialogBranchGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogBranchGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)DialogView_FieldIndex.Branches;
                }
                case RecordTypeInts.TNAM:
                {
                    this.TNAMs = BinaryOverlayList.FactoryByArray<ReadOnlyMemorySlice<Byte>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => p.MetaData.Constants.SubrecordFrame(s).Content,
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: false,
                            recordTypeConverter: recordTypeConverter));
                    return (int)DialogView_FieldIndex.TNAMs;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.DNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogViewMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogViewGetter rhs)) return false;
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogViewGetter? obj)
        {
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

