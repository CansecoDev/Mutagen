/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class EncounterZone :
        SkyrimMajorRecord,
        IEncounterZoneInternal,
        ILoquiObjectSetter<EncounterZone>,
        IEquatable<EncounterZone>,
        IEqualsMask
    {
        #region Ctor
        protected EncounterZone()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Owner
        public FormLink<IOwner> Owner { get; set; } = new FormLink<IOwner>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IOwnerGetter> IEncounterZoneGetter.Owner => this.Owner;
        #endregion
        #region Location
        public FormLink<Location> Location { get; set; } = new FormLink<Location>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ILocationGetter> IEncounterZoneGetter.Location => this.Location;
        #endregion
        #region Rank
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SByte _Rank;
        public SByte Rank
        {
            get => this._Rank;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Rank = value;
            }
        }
        #endregion
        #region MinLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SByte _MinLevel;
        public SByte MinLevel
        {
            get => this._MinLevel;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._MinLevel = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EncounterZone.Flag _Flags;
        public EncounterZone.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Flags = value;
            }
        }
        #endregion
        #region MaxLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SByte _MaxLevel;
        public SByte MaxLevel
        {
            get => this._MaxLevel;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._MaxLevel = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public EncounterZone.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EncounterZoneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEncounterZoneGetter rhs)) return false;
            return ((EncounterZoneCommon)((IEncounterZoneGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(EncounterZone? obj)
        {
            return ((EncounterZoneCommon)((IEncounterZoneGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EncounterZoneCommon)((IEncounterZoneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EncounterZoneXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EncounterZoneXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new EncounterZone CreateFromXml(
            XElement node,
            EncounterZone.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static EncounterZone CreateFromXml(
            XElement node,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EncounterZone.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static EncounterZone CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new EncounterZone();
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static EncounterZone CreateFromXml(
            string path,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EncounterZone CreateFromXml(
            string path,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EncounterZone CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static EncounterZone CreateFromXml(
            Stream stream,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EncounterZone CreateFromXml(
            Stream stream,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EncounterZone CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Owner = initialValue;
                this.Location = initialValue;
                this.Rank = initialValue;
                this.MinLevel = initialValue;
                this.Flags = initialValue;
                this.MaxLevel = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Owner,
                TItem Location,
                TItem Rank,
                TItem MinLevel,
                TItem Flags,
                TItem MaxLevel,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Owner = Owner;
                this.Location = Location;
                this.Rank = Rank;
                this.MinLevel = MinLevel;
                this.Flags = Flags;
                this.MaxLevel = MaxLevel;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Owner;
            public TItem Location;
            public TItem Rank;
            public TItem MinLevel;
            public TItem Flags;
            public TItem MaxLevel;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Rank, rhs.Rank)) return false;
                if (!object.Equals(this.MinLevel, rhs.MinLevel)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaxLevel, rhs.MaxLevel)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Owner);
                hash.Add(this.Location);
                hash.Add(this.Rank);
                hash.Add(this.MinLevel);
                hash.Add(this.Flags);
                hash.Add(this.MaxLevel);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.Location)) return false;
                if (!eval(this.Rank)) return false;
                if (!eval(this.MinLevel)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MaxLevel)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.Location)) return true;
                if (eval(this.Rank)) return true;
                if (eval(this.MinLevel)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MaxLevel)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EncounterZone.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Owner = eval(this.Owner);
                obj.Location = eval(this.Location);
                obj.Rank = eval(this.Rank);
                obj.MinLevel = eval(this.MinLevel);
                obj.Flags = eval(this.Flags);
                obj.MaxLevel = eval(this.MaxLevel);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(EncounterZone.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, EncounterZone.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(EncounterZone.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Owner ?? true)
                    {
                        fg.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.Location ?? true)
                    {
                        fg.AppendItem(Location, "Location");
                    }
                    if (printMask?.Rank ?? true)
                    {
                        fg.AppendItem(Rank, "Rank");
                    }
                    if (printMask?.MinLevel ?? true)
                    {
                        fg.AppendItem(MinLevel, "MinLevel");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaxLevel ?? true)
                    {
                        fg.AppendItem(MaxLevel, "MaxLevel");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Owner;
            public Exception? Location;
            public Exception? Rank;
            public Exception? MinLevel;
            public Exception? Flags;
            public Exception? MaxLevel;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
                switch (enu)
                {
                    case EncounterZone_FieldIndex.Owner:
                        return Owner;
                    case EncounterZone_FieldIndex.Location:
                        return Location;
                    case EncounterZone_FieldIndex.Rank:
                        return Rank;
                    case EncounterZone_FieldIndex.MinLevel:
                        return MinLevel;
                    case EncounterZone_FieldIndex.Flags:
                        return Flags;
                    case EncounterZone_FieldIndex.MaxLevel:
                        return MaxLevel;
                    case EncounterZone_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
                switch (enu)
                {
                    case EncounterZone_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case EncounterZone_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case EncounterZone_FieldIndex.Rank:
                        this.Rank = ex;
                        break;
                    case EncounterZone_FieldIndex.MinLevel:
                        this.MinLevel = ex;
                        break;
                    case EncounterZone_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EncounterZone_FieldIndex.MaxLevel:
                        this.MaxLevel = ex;
                        break;
                    case EncounterZone_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
                switch (enu)
                {
                    case EncounterZone_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.Rank:
                        this.Rank = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.MinLevel:
                        this.MinLevel = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.MaxLevel:
                        this.MaxLevel = (Exception?)obj;
                        break;
                    case EncounterZone_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Owner != null) return true;
                if (Location != null) return true;
                if (Rank != null) return true;
                if (MinLevel != null) return true;
                if (Flags != null) return true;
                if (MaxLevel != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Owner, "Owner");
                fg.AppendItem(Location, "Location");
                fg.AppendItem(Rank, "Rank");
                fg.AppendItem(MinLevel, "MinLevel");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MaxLevel, "MaxLevel");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Rank = this.Rank.Combine(rhs.Rank);
                ret.MinLevel = this.MinLevel.Combine(rhs.MinLevel);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaxLevel = this.MaxLevel.Combine(rhs.MaxLevel);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Owner;
            public bool Location;
            public bool Rank;
            public bool MinLevel;
            public bool Flags;
            public bool MaxLevel;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Owner = defaultOn;
                this.Location = defaultOn;
                this.Rank = defaultOn;
                this.MinLevel = defaultOn;
                this.Flags = defaultOn;
                this.MaxLevel = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Owner, null));
                ret.Add((Location, null));
                ret.Add((Rank, null));
                ret.Add((MinLevel, null));
                ret.Add((Flags, null));
                ret.Add((MaxLevel, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = EncounterZone_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => EncounterZoneCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => EncounterZoneCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EncounterZoneCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EncounterZoneCommon.Instance.RemapLinks(this, mapping);
        public EncounterZone(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public EncounterZone(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public EncounterZone(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EncounterZoneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EncounterZoneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new EncounterZone CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static EncounterZone CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EncounterZone();
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EncounterZone item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEncounterZoneGetter)rhs, include);

        void IClearable.Clear()
        {
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new EncounterZone GetNew()
        {
            return new EncounterZone();
        }

    }
    #endregion

    #region Interface
    public partial interface IEncounterZone :
        IEncounterZoneGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IEncounterZoneInternal>
    {
        new FormLink<IOwner> Owner { get; set; }
        new FormLink<Location> Location { get; set; }
        new SByte Rank { get; set; }
        new SByte MinLevel { get; set; }
        new EncounterZone.Flag Flags { get; set; }
        new SByte MaxLevel { get; set; }
        new EncounterZone.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IEncounterZoneInternal :
        ISkyrimMajorRecordInternal,
        IEncounterZone,
        IEncounterZoneGetter
    {
    }

    public partial interface IEncounterZoneGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IEncounterZoneGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => EncounterZone_Registration.Instance;
        IFormLink<IOwnerGetter> Owner { get; }
        IFormLink<ILocationGetter> Location { get; }
        SByte Rank { get; }
        SByte MinLevel { get; }
        EncounterZone.Flag Flags { get; }
        SByte MaxLevel { get; }
        EncounterZone.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EncounterZoneMixIn
    {
        public static void Clear(this IEncounterZoneInternal item)
        {
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EncounterZone.Mask<bool> GetEqualsMask(
            this IEncounterZoneGetter item,
            IEncounterZoneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEncounterZoneGetter item,
            string? name = null,
            EncounterZone.Mask<bool>? printMask = null)
        {
            return ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEncounterZoneGetter item,
            FileGeneration fg,
            string? name = null,
            EncounterZone.Mask<bool>? printMask = null)
        {
            ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEncounterZoneGetter item,
            EncounterZone.Mask<bool?> checkMask)
        {
            return ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static EncounterZone.Mask<bool> GetHasBeenSetMask(this IEncounterZoneGetter item)
        {
            var ret = new EncounterZone.Mask<bool>(false);
            ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEncounterZoneGetter item,
            IEncounterZoneGetter rhs)
        {
            return ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEncounterZoneInternal lhs,
            IEncounterZoneGetter rhs,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EncounterZoneSetterTranslationCommon)((IEncounterZoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = EncounterZone.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEncounterZoneInternal lhs,
            IEncounterZoneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EncounterZoneSetterTranslationCommon)((IEncounterZoneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static EncounterZone DeepCopy(
            this IEncounterZoneGetter item,
            EncounterZone.TranslationMask? copyMask = null)
        {
            return ((EncounterZoneSetterTranslationCommon)((IEncounterZoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EncounterZone DeepCopy(
            this IEncounterZoneGetter item,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? copyMask = null)
        {
            return ((EncounterZoneSetterTranslationCommon)((IEncounterZoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EncounterZone DeepCopy(
            this IEncounterZoneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EncounterZoneSetterTranslationCommon)((IEncounterZoneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            XElement node,
            EncounterZone.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            XElement node,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EncounterZone.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            string path,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            string path,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            Stream stream,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            Stream stream,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEncounterZoneInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EncounterZone.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IEncounterZoneInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IEncounterZoneInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EncounterZoneSetterCommon)((IEncounterZoneGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum EncounterZone_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Owner = 6,
        Location = 7,
        Rank = 8,
        MinLevel = 9,
        Flags = 10,
        MaxLevel = 11,
        DATADataTypeState = 12,
    }
    #endregion

    #region Registration
    public partial class EncounterZone_Registration : ILoquiRegistration
    {
        public static readonly EncounterZone_Registration Instance = new EncounterZone_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 289,
            version: 0);

        public const string GUID = "d3b68196-d8aa-4fe4-b9c0-10a7b96c98ea";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(EncounterZone.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EncounterZone.ErrorMask);

        public static readonly Type ClassType = typeof(EncounterZone);

        public static readonly Type GetterType = typeof(IEncounterZoneGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEncounterZone);

        public static readonly Type? InternalSetterType = typeof(IEncounterZoneInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.EncounterZone";

        public const string Name = "EncounterZone";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OWNER":
                    return (ushort)EncounterZone_FieldIndex.Owner;
                case "LOCATION":
                    return (ushort)EncounterZone_FieldIndex.Location;
                case "RANK":
                    return (ushort)EncounterZone_FieldIndex.Rank;
                case "MINLEVEL":
                    return (ushort)EncounterZone_FieldIndex.MinLevel;
                case "FLAGS":
                    return (ushort)EncounterZone_FieldIndex.Flags;
                case "MAXLEVEL":
                    return (ushort)EncounterZone_FieldIndex.MaxLevel;
                case "DATADATATYPESTATE":
                    return (ushort)EncounterZone_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                case EncounterZone_FieldIndex.Location:
                case EncounterZone_FieldIndex.Rank:
                case EncounterZone_FieldIndex.MinLevel:
                case EncounterZone_FieldIndex.Flags:
                case EncounterZone_FieldIndex.MaxLevel:
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                case EncounterZone_FieldIndex.Location:
                case EncounterZone_FieldIndex.Rank:
                case EncounterZone_FieldIndex.MinLevel:
                case EncounterZone_FieldIndex.Flags:
                case EncounterZone_FieldIndex.MaxLevel:
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                case EncounterZone_FieldIndex.Location:
                case EncounterZone_FieldIndex.Rank:
                case EncounterZone_FieldIndex.MinLevel:
                case EncounterZone_FieldIndex.Flags:
                case EncounterZone_FieldIndex.MaxLevel:
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                    return "Owner";
                case EncounterZone_FieldIndex.Location:
                    return "Location";
                case EncounterZone_FieldIndex.Rank:
                    return "Rank";
                case EncounterZone_FieldIndex.MinLevel:
                    return "MinLevel";
                case EncounterZone_FieldIndex.Flags:
                    return "Flags";
                case EncounterZone_FieldIndex.MaxLevel:
                    return "MaxLevel";
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                case EncounterZone_FieldIndex.Location:
                case EncounterZone_FieldIndex.Rank:
                case EncounterZone_FieldIndex.MinLevel:
                case EncounterZone_FieldIndex.Flags:
                case EncounterZone_FieldIndex.MaxLevel:
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                case EncounterZone_FieldIndex.Location:
                case EncounterZone_FieldIndex.Rank:
                case EncounterZone_FieldIndex.MinLevel:
                case EncounterZone_FieldIndex.Flags:
                case EncounterZone_FieldIndex.MaxLevel:
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            EncounterZone_FieldIndex enu = (EncounterZone_FieldIndex)index;
            switch (enu)
            {
                case EncounterZone_FieldIndex.Owner:
                    return typeof(FormLink<IOwner>);
                case EncounterZone_FieldIndex.Location:
                    return typeof(FormLink<Location>);
                case EncounterZone_FieldIndex.Rank:
                    return typeof(SByte);
                case EncounterZone_FieldIndex.MinLevel:
                    return typeof(SByte);
                case EncounterZone_FieldIndex.Flags:
                    return typeof(EncounterZone.Flag);
                case EncounterZone_FieldIndex.MaxLevel:
                    return typeof(SByte);
                case EncounterZone_FieldIndex.DATADataTypeState:
                    return typeof(EncounterZone.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EncounterZoneXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.ECZN;
        public static readonly Type BinaryWriteTranslation = typeof(EncounterZoneBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EncounterZoneSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly EncounterZoneSetterCommon Instance = new EncounterZoneSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEncounterZoneInternal item)
        {
            ClearPartial();
            item.Owner = FormLink<IOwner>.Null;
            item.Location = FormLink<Location>.Null;
            item.Rank = default;
            item.MinLevel = default;
            item.Flags = default;
            item.MaxLevel = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IEncounterZoneInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEncounterZoneInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IEncounterZoneInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IEncounterZoneInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= EncounterZone.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    EncounterZoneXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (EncounterZone)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (EncounterZone)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEncounterZoneInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IEncounterZoneInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: EncounterZoneBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: EncounterZoneBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (EncounterZone)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (EncounterZone)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class EncounterZoneCommon : SkyrimMajorRecordCommon
    {
        public new static readonly EncounterZoneCommon Instance = new EncounterZoneCommon();

        public EncounterZone.Mask<bool> GetEqualsMask(
            IEncounterZoneGetter item,
            IEncounterZoneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EncounterZone.Mask<bool>(false);
            ((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEncounterZoneGetter item,
            IEncounterZoneGetter rhs,
            EncounterZone.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Owner = object.Equals(item.Owner, rhs.Owner);
            ret.Location = object.Equals(item.Location, rhs.Location);
            ret.Rank = item.Rank == rhs.Rank;
            ret.MinLevel = item.MinLevel == rhs.MinLevel;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaxLevel = item.MaxLevel == rhs.MaxLevel;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IEncounterZoneGetter item,
            string? name = null,
            EncounterZone.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEncounterZoneGetter item,
            FileGeneration fg,
            string? name = null,
            EncounterZone.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"EncounterZone =>");
            }
            else
            {
                fg.AppendLine($"{name} (EncounterZone) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEncounterZoneGetter item,
            FileGeneration fg,
            EncounterZone.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Owner ?? true)
            {
                fg.AppendItem(item.Owner, "Owner");
            }
            if (printMask?.Location ?? true)
            {
                fg.AppendItem(item.Location, "Location");
            }
            if (printMask?.Rank ?? true)
            {
                fg.AppendItem(item.Rank, "Rank");
            }
            if (printMask?.MinLevel ?? true)
            {
                fg.AppendItem(item.MinLevel, "MinLevel");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.MaxLevel ?? true)
            {
                fg.AppendItem(item.MaxLevel, "MaxLevel");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IEncounterZoneGetter item,
            EncounterZone.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IEncounterZoneGetter item,
            EncounterZone.Mask<bool> mask)
        {
            mask.Owner = true;
            mask.Location = true;
            mask.Rank = true;
            mask.MinLevel = true;
            mask.Flags = true;
            mask.MaxLevel = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static EncounterZone_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EncounterZone_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (EncounterZone_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (EncounterZone_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (EncounterZone_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (EncounterZone_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (EncounterZone_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new EncounterZone_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EncounterZone_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (EncounterZone_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (EncounterZone_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EncounterZone_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEncounterZoneGetter? lhs,
            IEncounterZoneGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Owner.Equals(rhs.Owner)) return false;
            if (!lhs.Location.Equals(rhs.Location)) return false;
            if (lhs.Rank != rhs.Rank) return false;
            if (lhs.MinLevel != rhs.MinLevel) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.MaxLevel != rhs.MaxLevel) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEncounterZoneGetter?)lhs,
                rhs: rhs as IEncounterZoneGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEncounterZoneGetter?)lhs,
                rhs: rhs as IEncounterZoneGetter);
        }
        
        public virtual int GetHashCode(IEncounterZoneGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Owner);
            hash.Add(item.Location);
            hash.Add(item.Rank);
            hash.Add(item.MinLevel);
            hash.Add(item.Flags);
            hash.Add(item.MaxLevel);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IEncounterZoneGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEncounterZoneGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return EncounterZone.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IEncounterZoneGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield return obj.Owner.FormKey;
            yield return obj.Location.FormKey;
            yield break;
        }
        
        public void RemapLinks(IEncounterZoneGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(EncounterZone obj, EncounterZone rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new EncounterZone(getNextFormKey());
            ret.DeepCopyIn((EncounterZone)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (EncounterZone)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class EncounterZoneSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly EncounterZoneSetterTranslationCommon Instance = new EncounterZoneSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IEncounterZoneInternal item,
            IEncounterZoneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IEncounterZone item,
            IEncounterZoneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Owner) ?? true))
            {
                item.Owner = rhs.Owner.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Location) ?? true))
            {
                item.Location = rhs.Location.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Rank) ?? true))
            {
                item.Rank = rhs.Rank;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.MinLevel) ?? true))
            {
                item.MinLevel = rhs.MinLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.MaxLevel) ?? true))
            {
                item.MaxLevel = rhs.MaxLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEncounterZoneInternal)item,
                rhs: (IEncounterZoneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEncounterZone)item,
                rhs: (IEncounterZoneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEncounterZoneInternal)item,
                rhs: (IEncounterZoneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEncounterZone)item,
                rhs: (IEncounterZoneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public EncounterZone DeepCopy(
            IEncounterZoneGetter item,
            EncounterZone.TranslationMask? copyMask = null)
        {
            EncounterZone ret = (EncounterZone)((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public EncounterZone DeepCopy(
            IEncounterZoneGetter item,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? copyMask = null)
        {
            EncounterZone ret = (EncounterZone)((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public EncounterZone DeepCopy(
            IEncounterZoneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EncounterZone ret = (EncounterZone)((EncounterZoneCommon)((IEncounterZoneGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class EncounterZone
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EncounterZone_Registration.Instance;
        public new static EncounterZone_Registration Registration => EncounterZone_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EncounterZoneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EncounterZoneSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EncounterZoneSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class EncounterZoneXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static EncounterZoneXmlWriteTranslation Instance = new EncounterZoneXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEncounterZoneGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner.FormKey,
                    fieldIndex: (int)EncounterZone_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Location) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Location),
                    item: item.Location.FormKey,
                    fieldIndex: (int)EncounterZone_FieldIndex.Location,
                    errorMask: errorMask);
            }
            if (!item.DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0))
            {
                if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Rank) ?? true))
                {
                    Int8XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Rank),
                        item: item.Rank,
                        fieldIndex: (int)EncounterZone_FieldIndex.Rank,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.MinLevel) ?? true))
                {
                    Int8XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinLevel),
                        item: item.MinLevel,
                        fieldIndex: (int)EncounterZone_FieldIndex.MinLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EncounterZone.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)EncounterZone_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.MaxLevel) ?? true))
                {
                    Int8XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaxLevel),
                        item: item.MaxLevel,
                        fieldIndex: (int)EncounterZone_FieldIndex.MaxLevel,
                        errorMask: errorMask);
                }
            }
            else
            {
                node.Add(new XElement("HasDATADataType"));
            }
            if ((translationMask?.GetShouldTranslate((int)EncounterZone_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<EncounterZone.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)EncounterZone_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEncounterZoneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.EncounterZone");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.EncounterZone");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class EncounterZoneXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static EncounterZoneXmlCreateTranslation Instance = new EncounterZoneXmlCreateTranslation();

        public static void FillPublicXml(
            IEncounterZoneInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EncounterZoneXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEncounterZoneInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Owner":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.Owner);
                    try
                    {
                        item.Owner = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Location":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.Location);
                    try
                    {
                        item.Location = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rank":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.Rank);
                    try
                    {
                        item.Rank = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~EncounterZone.DATADataType.Break0;
                    break;
                case "MinLevel":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.MinLevel);
                    try
                    {
                        item.MinLevel = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<EncounterZone.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxLevel":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.MaxLevel);
                    try
                    {
                        item.MaxLevel = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)EncounterZone_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<EncounterZone.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class EncounterZoneXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEncounterZoneGetter item,
            XElement node,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((EncounterZoneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EncounterZone.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEncounterZoneGetter item,
            string path,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEncounterZoneGetter item,
            Stream stream,
            out EncounterZone.ErrorMask errorMask,
            EncounterZone.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class EncounterZoneBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static EncounterZoneBinaryWriteTranslation Instance = new EncounterZoneBinaryWriteTranslation();

        public static void WriteEmbedded(
            IEncounterZoneGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IEncounterZoneGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Owner);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Location);
                if (!item.DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0))
                {
                    writer.Write(item.Rank);
                    writer.Write(item.MinLevel);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EncounterZone.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    writer.Write(item.MaxLevel);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IEncounterZoneGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ECZN),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEncounterZoneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EncounterZoneBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static EncounterZoneBinaryCreateTranslation Instance = new EncounterZoneBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ECZN;
        public static void FillBinaryStructs(
            IEncounterZoneInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IEncounterZoneInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Owner = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Location = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EncounterZone.DATADataType.Break0;
                        return (int)EncounterZone_FieldIndex.Location;
                    }
                    item.Rank = dataFrame.ReadInt8();
                    item.MinLevel = dataFrame.ReadInt8();
                    item.Flags = EnumBinaryTranslation<EncounterZone.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.MaxLevel = dataFrame.ReadInt8();
                    return (int)EncounterZone_FieldIndex.MaxLevel;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class EncounterZoneBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class EncounterZoneBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IEncounterZoneGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EncounterZone_Registration.Instance;
        public new static EncounterZone_Registration Registration => EncounterZone_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EncounterZoneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EncounterZoneSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEncounterZoneGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => EncounterZoneCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => EncounterZoneCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EncounterZoneCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EncounterZoneCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EncounterZoneXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EncounterZoneXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EncounterZoneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EncounterZoneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        private int? _DATALocation;
        public EncounterZone.DATADataType DATADataTypeState { get; private set; }
        #region Owner
        private int _OwnerLocation => _DATALocation!.Value;
        private bool _Owner_IsSet => _DATALocation.HasValue;
        public IFormLink<IOwnerGetter> Owner => _Owner_IsSet ? new FormLink<IOwnerGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_OwnerLocation, 0x4)))) : FormLink<IOwnerGetter>.Null;
        #endregion
        #region Location
        private int _LocationLocation => _DATALocation!.Value + 0x4;
        private bool _Location_IsSet => _DATALocation.HasValue;
        public IFormLink<ILocationGetter> Location => _Location_IsSet ? new FormLink<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LocationLocation, 0x4)))) : FormLink<ILocationGetter>.Null;
        #endregion
        #region Rank
        private int _RankLocation => _DATALocation!.Value + 0x8;
        private bool _Rank_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0);
        public SByte Rank => _Rank_IsSet ? (sbyte)_data.Slice(_RankLocation, 1)[0] : default;
        #endregion
        #region MinLevel
        private int _MinLevelLocation => _DATALocation!.Value + 0x9;
        private bool _MinLevel_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0);
        public SByte MinLevel => _MinLevel_IsSet ? (sbyte)_data.Slice(_MinLevelLocation, 1)[0] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xA;
        private bool _Flags_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0);
        public EncounterZone.Flag Flags => _Flags_IsSet ? (EncounterZone.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region MaxLevel
        private int _MaxLevelLocation => _DATALocation!.Value + 0xB;
        private bool _MaxLevel_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EncounterZone.DATADataType.Break0);
        public SByte MaxLevel => _MaxLevel_IsSet ? (sbyte)_data.Slice(_MaxLevelLocation, 1)[0] : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EncounterZoneBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static EncounterZoneBinaryOverlay EncounterZoneFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new EncounterZoneBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static EncounterZoneBinaryOverlay EncounterZoneFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return EncounterZoneFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x8)
                    {
                        this.DATADataTypeState |= EncounterZone.DATADataType.Break0;
                    }
                    return (int)EncounterZone_FieldIndex.MaxLevel;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EncounterZoneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

