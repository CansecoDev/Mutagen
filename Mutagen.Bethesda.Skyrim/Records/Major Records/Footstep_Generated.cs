/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Footstep :
        SkyrimMajorRecord,
        IFootstepInternal,
        ILoquiObjectSetter<Footstep>,
        IEquatable<Footstep>,
        IEqualsMask
    {
        #region Ctor
        protected Footstep()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ImpactDataSet
        public FormLink<ImpactDataSet> ImpactDataSet { get; set; } = new FormLink<ImpactDataSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IImpactDataSetGetter> IFootstepGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region Tag
        public String Tag { get; set; } = string.Empty;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FootstepMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFootstepGetter rhs)) return false;
            return ((FootstepCommon)((IFootstepGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Footstep? obj)
        {
            return ((FootstepCommon)((IFootstepGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FootstepCommon)((IFootstepGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FootstepXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FootstepXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Footstep CreateFromXml(
            XElement node,
            Footstep.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Footstep CreateFromXml(
            XElement node,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Footstep.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Footstep CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Footstep();
            ((FootstepSetterCommon)((IFootstepGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Footstep CreateFromXml(
            string path,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Footstep CreateFromXml(
            string path,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Footstep CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Footstep CreateFromXml(
            Stream stream,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Footstep CreateFromXml(
            Stream stream,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Footstep CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ImpactDataSet = initialValue;
                this.Tag = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ImpactDataSet,
                TItem Tag)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ImpactDataSet = ImpactDataSet;
                this.Tag = Tag;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ImpactDataSet;
            public TItem Tag;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.Tag, rhs.Tag)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ImpactDataSet);
                hash.Add(this.Tag);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.Tag)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.Tag)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Footstep.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.Tag = eval(this.Tag);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Footstep.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Footstep.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Footstep.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.Tag ?? true)
                    {
                        fg.AppendItem(Tag, "Tag");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ImpactDataSet;
            public Exception? Tag;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
                switch (enu)
                {
                    case Footstep_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Footstep_FieldIndex.Tag:
                        return Tag;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
                switch (enu)
                {
                    case Footstep_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Footstep_FieldIndex.Tag:
                        this.Tag = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
                switch (enu)
                {
                    case Footstep_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Footstep_FieldIndex.Tag:
                        this.Tag = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ImpactDataSet != null) return true;
                if (Tag != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(Tag, "Tag");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.Tag = this.Tag.Combine(rhs.Tag);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ImpactDataSet;
            public bool Tag;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ImpactDataSet = defaultOn;
                this.Tag = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ImpactDataSet, null));
                ret.Add((Tag, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Footstep_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FootstepCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FootstepCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepCommon.Instance.RemapLinks(this, mapping);
        public Footstep(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Footstep(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Footstep(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Footstep CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Footstep CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Footstep();
            ((FootstepSetterCommon)((IFootstepGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Footstep item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFootstepGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FootstepSetterCommon)((IFootstepGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Footstep GetNew()
        {
            return new Footstep();
        }

    }
    #endregion

    #region Interface
    public partial interface IFootstep :
        IFootstepGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IFootstepInternal>
    {
        new FormLink<ImpactDataSet> ImpactDataSet { get; set; }
        new String Tag { get; set; }
    }

    public partial interface IFootstepInternal :
        ISkyrimMajorRecordInternal,
        IFootstep,
        IFootstepGetter
    {
    }

    public partial interface IFootstepGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IFootstepGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Footstep_Registration.Instance;
        IFormLink<IImpactDataSetGetter> ImpactDataSet { get; }
        String Tag { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FootstepMixIn
    {
        public static void Clear(this IFootstepInternal item)
        {
            ((FootstepSetterCommon)((IFootstepGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Footstep.Mask<bool> GetEqualsMask(
            this IFootstepGetter item,
            IFootstepGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFootstepGetter item,
            string? name = null,
            Footstep.Mask<bool>? printMask = null)
        {
            return ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFootstepGetter item,
            FileGeneration fg,
            string? name = null,
            Footstep.Mask<bool>? printMask = null)
        {
            ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFootstepGetter item,
            Footstep.Mask<bool?> checkMask)
        {
            return ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Footstep.Mask<bool> GetHasBeenSetMask(this IFootstepGetter item)
        {
            var ret = new Footstep.Mask<bool>(false);
            ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFootstepGetter item,
            IFootstepGetter rhs)
        {
            return ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFootstepInternal lhs,
            IFootstepGetter rhs,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FootstepSetterTranslationCommon)((IFootstepGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Footstep.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFootstepInternal lhs,
            IFootstepGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FootstepSetterTranslationCommon)((IFootstepGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Footstep DeepCopy(
            this IFootstepGetter item,
            Footstep.TranslationMask? copyMask = null)
        {
            return ((FootstepSetterTranslationCommon)((IFootstepGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Footstep DeepCopy(
            this IFootstepGetter item,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? copyMask = null)
        {
            return ((FootstepSetterTranslationCommon)((IFootstepGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Footstep DeepCopy(
            this IFootstepGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FootstepSetterTranslationCommon)((IFootstepGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFootstepInternal item,
            XElement node,
            Footstep.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFootstepInternal item,
            XElement node,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Footstep.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FootstepSetterCommon)((IFootstepGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            string path,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            string path,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            Stream stream,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            Stream stream,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFootstepInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Footstep.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFootstepInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFootstepInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepSetterCommon)((IFootstepGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Footstep_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ImpactDataSet = 6,
        Tag = 7,
    }
    #endregion

    #region Registration
    public partial class Footstep_Registration : ILoquiRegistration
    {
        public static readonly Footstep_Registration Instance = new Footstep_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 452,
            version: 0);

        public const string GUID = "ad347b2a-f924-4d81-8edd-98f3a9035ee2";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Footstep.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Footstep.ErrorMask);

        public static readonly Type ClassType = typeof(Footstep);

        public static readonly Type GetterType = typeof(IFootstepGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFootstep);

        public static readonly Type? InternalSetterType = typeof(IFootstepInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Footstep";

        public const string Name = "Footstep";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "IMPACTDATASET":
                    return (ushort)Footstep_FieldIndex.ImpactDataSet;
                case "TAG":
                    return (ushort)Footstep_FieldIndex.Tag;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                case Footstep_FieldIndex.Tag:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                case Footstep_FieldIndex.Tag:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                case Footstep_FieldIndex.Tag:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                    return "ImpactDataSet";
                case Footstep_FieldIndex.Tag:
                    return "Tag";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                case Footstep_FieldIndex.Tag:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                case Footstep_FieldIndex.Tag:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Footstep_FieldIndex enu = (Footstep_FieldIndex)index;
            switch (enu)
            {
                case Footstep_FieldIndex.ImpactDataSet:
                    return typeof(FormLink<ImpactDataSet>);
                case Footstep_FieldIndex.Tag:
                    return typeof(String);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FootstepXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.FSTP;
        public static readonly Type BinaryWriteTranslation = typeof(FootstepBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FootstepSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FootstepSetterCommon Instance = new FootstepSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFootstepInternal item)
        {
            ClearPartial();
            item.ImpactDataSet = FormLink<ImpactDataSet>.Null;
            item.Tag = string.Empty;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFootstepInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFootstepInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFootstepInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IFootstepInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FootstepXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Footstep)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Footstep)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFootstepInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IFootstepInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FootstepBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FootstepBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Footstep)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Footstep)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FootstepCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FootstepCommon Instance = new FootstepCommon();

        public Footstep.Mask<bool> GetEqualsMask(
            IFootstepGetter item,
            IFootstepGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Footstep.Mask<bool>(false);
            ((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFootstepGetter item,
            IFootstepGetter rhs,
            Footstep.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ImpactDataSet = object.Equals(item.ImpactDataSet, rhs.ImpactDataSet);
            ret.Tag = string.Equals(item.Tag, rhs.Tag);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFootstepGetter item,
            string? name = null,
            Footstep.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFootstepGetter item,
            FileGeneration fg,
            string? name = null,
            Footstep.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Footstep =>");
            }
            else
            {
                fg.AppendLine($"{name} (Footstep) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFootstepGetter item,
            FileGeneration fg,
            Footstep.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ImpactDataSet ?? true)
            {
                fg.AppendItem(item.ImpactDataSet, "ImpactDataSet");
            }
            if (printMask?.Tag ?? true)
            {
                fg.AppendItem(item.Tag, "Tag");
            }
        }
        
        public bool HasBeenSet(
            IFootstepGetter item,
            Footstep.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFootstepGetter item,
            Footstep.Mask<bool> mask)
        {
            mask.ImpactDataSet = true;
            mask.Tag = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Footstep_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Footstep_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Footstep_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Footstep_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Footstep_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Footstep_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Footstep_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Footstep_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Footstep_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Footstep_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Footstep_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Footstep_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFootstepGetter? lhs,
            IFootstepGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            if (!string.Equals(lhs.Tag, rhs.Tag)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFootstepGetter?)lhs,
                rhs: rhs as IFootstepGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFootstepGetter?)lhs,
                rhs: rhs as IFootstepGetter);
        }
        
        public virtual int GetHashCode(IFootstepGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ImpactDataSet);
            hash.Add(item.Tag);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Footstep.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IFootstepGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield return obj.ImpactDataSet.FormKey;
            yield break;
        }
        
        public void RemapLinks(IFootstepGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Footstep obj, Footstep rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Footstep(getNextFormKey());
            ret.DeepCopyIn((Footstep)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Footstep)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FootstepSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FootstepSetterTranslationCommon Instance = new FootstepSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFootstepInternal item,
            IFootstepGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IFootstep item,
            IFootstepGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Footstep_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet = rhs.ImpactDataSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Footstep_FieldIndex.Tag) ?? true))
            {
                item.Tag = rhs.Tag;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFootstepInternal)item,
                rhs: (IFootstepGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFootstep)item,
                rhs: (IFootstepGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFootstepInternal)item,
                rhs: (IFootstepGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFootstep)item,
                rhs: (IFootstepGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Footstep DeepCopy(
            IFootstepGetter item,
            Footstep.TranslationMask? copyMask = null)
        {
            Footstep ret = (Footstep)((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Footstep DeepCopy(
            IFootstepGetter item,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? copyMask = null)
        {
            Footstep ret = (Footstep)((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Footstep DeepCopy(
            IFootstepGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Footstep ret = (Footstep)((FootstepCommon)((IFootstepGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Footstep
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Footstep_Registration.Instance;
        public new static Footstep_Registration Registration => Footstep_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FootstepSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FootstepXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FootstepXmlWriteTranslation Instance = new FootstepXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFootstepGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Footstep_FieldIndex.ImpactDataSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ImpactDataSet),
                    item: item.ImpactDataSet.FormKey,
                    fieldIndex: (int)Footstep_FieldIndex.ImpactDataSet,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Footstep_FieldIndex.Tag) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Tag),
                    item: item.Tag,
                    fieldIndex: (int)Footstep_FieldIndex.Tag,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFootstepGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Footstep");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Footstep");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFootstepGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFootstepGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFootstepGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FootstepXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static FootstepXmlCreateTranslation Instance = new FootstepXmlCreateTranslation();

        public static void FillPublicXml(
            IFootstepInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FootstepXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFootstepInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ImpactDataSet":
                    errorMask?.PushIndex((int)Footstep_FieldIndex.ImpactDataSet);
                    try
                    {
                        item.ImpactDataSet = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Tag":
                    errorMask?.PushIndex((int)Footstep_FieldIndex.Tag);
                    try
                    {
                        item.Tag = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FootstepXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFootstepGetter item,
            XElement node,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FootstepXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Footstep.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFootstepGetter item,
            string path,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFootstepGetter item,
            Stream stream,
            out Footstep.ErrorMask errorMask,
            Footstep.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FootstepBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FootstepBinaryWriteTranslation Instance = new FootstepBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IFootstepGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ImpactDataSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Tag,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IFootstepGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.FSTP),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FootstepBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static FootstepBinaryCreateTranslation Instance = new FootstepBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FSTP;
        public static void FillBinaryStructs(
            IFootstepInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFootstepInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Footstep_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Tag = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Footstep_FieldIndex.Tag;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FootstepBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FootstepBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFootstepGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Footstep_Registration.Instance;
        public new static Footstep_Registration Registration => Footstep_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFootstepGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FootstepCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FootstepCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FootstepXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FootstepXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ImpactDataSet
        private int? _ImpactDataSetLocation;
        public bool ImpactDataSet_IsSet => _ImpactDataSetLocation.HasValue;
        public IFormLink<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSetLocation.HasValue ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ImpactDataSetLocation.Value, _package.MetaData.Constants)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region Tag
        private int? _TagLocation;
        public String Tag => _TagLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _TagLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FootstepBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FootstepBinaryOverlay FootstepFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new FootstepBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FootstepBinaryOverlay FootstepFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FootstepFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _ImpactDataSetLocation = (stream.Position - offset);
                    return (int)Footstep_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.ANAM:
                {
                    _TagLocation = (stream.Position - offset);
                    return (int)Footstep_FieldIndex.Tag;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FootstepMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

