/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public abstract partial class GameSetting :
        SkyrimMajorRecord,
        IGameSettingInternal,
        ILoquiObjectSetter<GameSetting>,
        IEquatable<GameSetting>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameSetting_Registration.Instance;
        public new static GameSetting_Registration Registration => GameSetting_Registration.Instance;
        protected override object CommonInstance => GameSettingCommon.Instance;

        #region Ctor
        protected GameSetting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGameSettingInternalGetter)rhs, include);
        #region To String

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GameSettingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IGameSettingInternalGetter rhs)) return false;
            return ((GameSettingCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(GameSetting obj)
        {
            return ((GameSettingCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((GameSettingCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected override object XmlWriteTranslator => GameSettingXmlWriteTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static GameSetting CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            GameSetting_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GameSetting CreateFromXml(
            XElement node,
            out GameSetting_ErrorMask errorMask,
            bool doMasks = true,
            GameSetting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = GameSetting_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static GameSetting CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            GameSetting ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown GameSetting subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static GameSetting CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            GameSetting_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GameSetting CreateFromXml(
            string path,
            out GameSetting_ErrorMask errorMask,
            GameSetting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GameSetting CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            GameSetting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GameSetting CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            GameSetting_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GameSetting CreateFromXml(
            Stream stream,
            out GameSetting_ErrorMask errorMask,
            GameSetting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GameSetting CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            GameSetting_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            GameSetting item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecord.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = GameSetting_Registration.TRIGGERING_RECORD_TYPE;
        public GameSetting(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public GameSetting(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        protected override object BinaryWriteTranslator => GameSettingBinaryWriteTranslation.Instance;
        #endregion

        public GameSetting Copy(
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null)
        {
            return GameSetting.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static GameSetting Copy(
            GameSetting item,
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null)
        {
            GameSetting ret = (GameSetting)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static GameSetting Copy_ToLoqui(
            GameSetting item,
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null)
        {
            GameSetting ret = (GameSetting)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            GameSetting rhs,
            GameSetting_CopyMask copyMask,
            GameSetting def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            GameSetting rhs,
            out GameSetting_ErrorMask errorMask,
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GameSettingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = GameSetting_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            GameSetting rhs,
            ErrorMaskBuilder errorMask,
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null)
        {
            GameSettingCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            GameSettingCommon.Instance.Clear(this);
        }

        protected new static void CopyInInternal_GameSetting(GameSetting obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out GameSetting_FieldIndex enu))
            {
                CopyInInternal_SkyrimMajorRecord(obj, pair);
            }
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IGameSetting :
        IGameSettingInternalGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IGameSettingInternal>
    {
        void CopyFieldsFrom(
            GameSetting rhs,
            ErrorMaskBuilder errorMask = null,
            GameSetting_CopyMask copyMask = null,
            GameSetting def = null);
    }

    public partial interface IGameSettingInternal :
        ISkyrimMajorRecordInternal,
        IGameSetting,
        IGameSettingInternalGetter
    {
    }

    public partial interface IGameSettingGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IGameSettingInternalGetter>,
        IXmlItem,
        IBinaryItem
    {

    }

    public partial interface IGameSettingInternalGetter :
        ISkyrimMajorRecordInternalGetter,
        IGameSettingGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class GameSettingMixIn
    {
        public static void Clear(this IGameSettingInternal item)
        {
            ((GameSettingCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static GameSetting_Mask<bool> GetEqualsMask(
            this IGameSettingInternalGetter item,
            IGameSettingInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameSettingCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGameSettingInternalGetter item,
            string name = null,
            GameSetting_Mask<bool> printMask = null)
        {
            return ((GameSettingCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGameSettingInternalGetter item,
            FileGeneration fg,
            string name = null,
            GameSetting_Mask<bool> printMask = null)
        {
            ((GameSettingCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGameSettingInternalGetter item,
            GameSetting_Mask<bool?> checkMask)
        {
            return ((GameSettingCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GameSetting_Mask<bool> GetHasBeenSetMask(this IGameSettingInternalGetter item)
        {
            var ret = new GameSetting_Mask<bool>();
            ((GameSettingCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGameSettingInternalGetter item,
            IGameSettingInternalGetter rhs)
        {
            return ((GameSettingCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GameSetting_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
    }
    #endregion

    #region Registration
    public class GameSetting_Registration : ILoquiRegistration
    {
        public static readonly GameSetting_Registration Instance = new GameSetting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "f850894f-494c-4527-8a48-1209ae13f043";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(GameSetting_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameSetting_ErrorMask);

        public static readonly Type ClassType = typeof(GameSetting);

        public static readonly Type GetterType = typeof(IGameSettingGetter);

        public static readonly Type InternalGetterType = typeof(IGameSettingInternalGetter);

        public static readonly Type SetterType = typeof(IGameSetting);

        public static readonly Type InternalSetterType = typeof(IGameSettingInternal);

        public static readonly Type CommonType = typeof(GameSettingCommon);

        public const string FullName = "Mutagen.Bethesda.Skyrim.GameSetting";

        public const string Name = "GameSetting";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GameSettingXmlWriteTranslation);
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GMST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(GameSettingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GameSettingCommon : SkyrimMajorRecordCommon
    {
        public static readonly GameSettingCommon Instance = new GameSettingCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            GameSetting item,
            GameSetting rhs,
            GameSetting def,
            ErrorMaskBuilder errorMask,
            GameSetting_CopyMask copyMask)
        {
            SkyrimMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IGameSettingInternal item)
        {
            ClearPartial();
            base.Clear(item);
        }

        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IGameSettingInternal)item);
        }

        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGameSettingInternal)item);
        }

        public GameSetting_Mask<bool> GetEqualsMask(
            IGameSettingInternalGetter item,
            IGameSettingInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameSetting_Mask<bool>();
            ((GameSettingCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IGameSettingInternalGetter item,
            IGameSettingInternalGetter rhs,
            GameSetting_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            base.FillEqualsMask(item, rhs, ret, include);
        }

        public string ToString(
            IGameSettingInternalGetter item,
            string name = null,
            GameSetting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IGameSettingInternalGetter item,
            FileGeneration fg,
            string name = null,
            GameSetting_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GameSetting =>");
            }
            else
            {
                fg.AppendLine($"{name} (GameSetting) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IGameSettingInternalGetter item,
            FileGeneration fg,
            GameSetting_Mask<bool> printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
        }

        public bool HasBeenSet(
            IGameSettingInternalGetter item,
            GameSetting_Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public void FillHasBeenSetMask(
            IGameSettingInternalGetter item,
            GameSetting_Mask<bool> mask)
        {
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }

        public static GameSetting_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (GameSetting_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (GameSetting_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static GameSetting_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameSetting_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GameSetting_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (GameSetting_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GameSetting_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Equals and Hash
        public virtual bool Equals(
            IGameSettingInternalGetter lhs,
            IGameSettingInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }

        public override bool Equals(
            ISkyrimMajorRecordInternalGetter lhs,
            ISkyrimMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IGameSettingInternalGetter)lhs,
                rhs: rhs as IGameSettingInternalGetter);
        }

        public override bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            return Equals(
                lhs: (IGameSettingInternalGetter)lhs,
                rhs: rhs as IGameSettingInternalGetter);
        }

        public virtual int GetHashCode(IGameSettingInternalGetter item)
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        public override int GetHashCode(ISkyrimMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IGameSettingInternalGetter)item);
        }

        public override int GetHashCode(IMajorRecordInternalGetter item)
        {
            return GetHashCode(item: (IGameSettingInternalGetter)item);
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(GameSetting obj, GameSetting rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            throw new NotImplementedException();
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class GameSettingXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static GameSettingXmlWriteTranslation Instance = new GameSettingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGameSettingInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            IGameSettingInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GameSetting");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GameSetting");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class GameSettingXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static GameSettingXmlCreateTranslation Instance = new GameSettingXmlCreateTranslation();

        public static void FillPublicXml(
            IGameSettingInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GameSettingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGameSettingInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class GameSettingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGameSettingInternalGetter item,
            XElement node,
            out GameSetting_ErrorMask errorMask,
            bool doMasks = true,
            GameSetting_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GameSettingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GameSetting_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGameSettingInternalGetter item,
            string path,
            out GameSetting_ErrorMask errorMask,
            GameSetting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGameSettingInternalGetter item,
            Stream stream,
            out GameSetting_ErrorMask errorMask,
            GameSetting_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class GameSetting_Mask<T> : SkyrimMajorRecord_Mask<T>, IMask<T>, IEquatable<GameSetting_Mask<T>>
    {
        #region Ctors
        public GameSetting_Mask()
        {
        }

        public GameSetting_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GameSetting_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GameSetting_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new GameSetting_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GameSetting_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GameSetting_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GameSetting_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GameSetting_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GameSetting_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GameSetting_ErrorMask : SkyrimMajorRecord_ErrorMask, IErrorMask<GameSetting_ErrorMask>
    {
        #region IErrorMask
        public override object GetNthMask(int index)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            GameSetting_FieldIndex enu = (GameSetting_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("GameSetting_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public GameSetting_ErrorMask Combine(GameSetting_ErrorMask rhs)
        {
            var ret = new GameSetting_ErrorMask();
            return ret;
        }
        public static GameSetting_ErrorMask Combine(GameSetting_ErrorMask lhs, GameSetting_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static GameSetting_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new GameSetting_ErrorMask();
        }
        #endregion

    }
    public class GameSetting_CopyMask : SkyrimMajorRecord_CopyMask
    {
        public GameSetting_CopyMask()
        {
        }

        public GameSetting_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
        }

    }

    public class GameSetting_TranslationMask : SkyrimMajorRecord_TranslationMask
    {
        #region Ctors
        public GameSetting_TranslationMask()
            : base()
        {
        }

        public GameSetting_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
        }

        #endregion

    }
    #endregion

    #region Binary Translation
    public partial class GameSettingBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static GameSettingBinaryWriteTranslation Instance = new GameSettingBinaryWriteTranslation();

        public virtual void Write(
            MutagenWriter writer,
            IGameSettingInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: GameSetting_Registration.GMST_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGameSettingInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class GameSettingBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static GameSettingBinaryCreateTranslation Instance = new GameSettingBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class GameSettingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGameSettingInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out GameSetting_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GameSettingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = GameSetting_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    public partial class GameSettingBinaryWrapper :
        SkyrimMajorRecordBinaryWrapper,
        IGameSettingInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameSetting_Registration.Instance;
        public new static GameSetting_Registration Registration => GameSetting_Registration.Instance;
        protected override object CommonInstance => GameSettingCommon.Instance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGameSettingInternalGetter)rhs, include);

        protected override object XmlWriteTranslator => GameSettingXmlWriteTranslation.Instance;
        protected override object BinaryWriteTranslator => GameSettingBinaryWriteTranslation.Instance;

        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected GameSettingBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

    }

    #endregion

    #endregion

}
