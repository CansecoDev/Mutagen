/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class GlobalInt :
        Global,
        IGlobalInt,
        IGlobalIntInternal,
        ILoquiObject<GlobalInt>,
        ILoquiObjectSetter,
        IEquatable<GlobalInt>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GlobalInt_Registration.Instance;
        public new static GlobalInt_Registration Registration => GlobalInt_Registration.Instance;

        #region Ctor
        protected GlobalInt()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        public bool Data_IsSet
        {
            get => _hasBeenSetTracker[(int)GlobalInt_FieldIndex.Data];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)GlobalInt_FieldIndex.Data, nameof(Data_IsSet));
        }
        bool IGlobalIntGetter.Data_IsSet => Data_IsSet;
        private Int32 _Data;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 Data
        {
            get => this._Data;
            set => Data_Set(value);
        }
        Int32 IGlobalIntGetter.Data => this.Data;
        public void Data_Set(
            Int32 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Data, value, _hasBeenSetTracker, markSet, (int)GlobalInt_FieldIndex.Data, nameof(Data), nameof(Data_IsSet));
        }
        public void Data_Unset()
        {
            this.Data_Set(default(Int32), false);
        }
        #endregion

        IMask<bool> IEqualsMask<GlobalInt>.GetEqualsMask(GlobalInt rhs, EqualsMaskHelper.Include include) => GlobalIntCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IGlobalIntGetter>.GetEqualsMask(IGlobalIntGetter rhs, EqualsMaskHelper.Include include) => GlobalIntCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            GlobalInt_Mask<bool> printMask = null)
        {
            return GlobalIntCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GlobalIntCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new GlobalInt_Mask<bool> GetHasBeenSetMask()
        {
            return GlobalIntCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is GlobalInt rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GlobalInt rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Data_IsSet != rhs.Data_IsSet) return false;
            if (Data_IsSet)
            {
                if (this.Data != rhs.Data) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Data_IsSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlTranslator XmlTranslator => GlobalIntXmlTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static GlobalInt Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            GlobalInt_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GlobalInt Create_Xml(
            XElement node,
            out GlobalInt_ErrorMask errorMask,
            bool doMasks = true,
            GlobalInt_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = GlobalInt_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static GlobalInt Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new GlobalInt() : null;
                    break;
                default:
                    break;
            }
            var ret = new GlobalInt();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    GlobalIntXmlTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static GlobalInt Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            GlobalInt_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GlobalInt Create_Xml(
            string path,
            out GlobalInt_ErrorMask errorMask,
            GlobalInt_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GlobalInt Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            GlobalInt_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GlobalInt Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            GlobalInt_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static GlobalInt Create_Xml(
            Stream stream,
            out GlobalInt_ErrorMask errorMask,
            GlobalInt_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GlobalInt Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            GlobalInt_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            GlobalInt item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    Global.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((GlobalInt_FieldIndex)index)
            {
                case GlobalInt_FieldIndex.Data:
                    return _hasBeenSetTracker[index];
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = GlobalInt_Registration.TRIGGERING_RECORD_TYPE;
        public GlobalInt(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public GlobalInt(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        partial void PostDuplicate(GlobalInt obj, GlobalInt rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public override IMajorRecordCommon Duplicate(Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            var ret = new GlobalInt(getNextFormKey());
            ret.CopyFieldsFrom(this);
            duplicatedRecords?.Add((ret, this.FormKey));
            PostDuplicate(ret, this, getNextFormKey, duplicatedRecords);
            return ret;
        }

        #endregion

        #region Binary Translation
        protected override IBinaryTranslator BinaryTranslator => GlobalIntBinaryTranslation.Instance;
        #region Binary Create
        [DebuggerStepThrough]
        public static GlobalInt Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static GlobalInt Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out GlobalInt_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = GlobalInt_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static GlobalInt Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            return UtilityTranslation.MajorRecordParse<GlobalInt>(
                record: new GlobalInt(),
                frame: frame,
                errorMask: errorMask,
                recType: GlobalInt_Registration.GLOB_HEADER,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
        }

        #endregion

        protected static void Fill_Binary_Structs(
            GlobalInt item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            Global.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            GlobalInt item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x56544C46: // FLTV
                {
                    GlobalIntBinaryTranslation.FillBinary_Data_Custom_Public(
                        frame: frame.SpawnWithLength(Mutagen.Bethesda.Constants.SUBRECORD_LENGTH + contentLength),
                        item: item,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    return TryGet<int?>.Succeed((int)GlobalInt_FieldIndex.Data);
                }
                default:
                    return Global.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
            }
        }

        #endregion

        public GlobalInt Copy(
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null)
        {
            return GlobalInt.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static GlobalInt Copy(
            IGlobalInt item,
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null)
        {
            GlobalInt ret;
            if (item.GetType().Equals(typeof(GlobalInt)))
            {
                ret = new GlobalInt();
            }
            else
            {
                ret = (GlobalInt)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static GlobalInt Copy_ToLoqui(
            IGlobalIntGetter item,
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null)
        {
            GlobalInt ret;
            if (item.GetType().Equals(typeof(GlobalInt)))
            {
                ret = new GlobalInt() as GlobalInt;
            }
            else
            {
                ret = (GlobalInt)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IGlobalIntGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IGlobalIntGetter rhs,
            GlobalInt_CopyMask copyMask,
            IGlobalIntGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IGlobalIntGetter rhs,
            out GlobalInt_ErrorMask errorMask,
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GlobalIntCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = GlobalInt_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IGlobalIntGetter rhs,
            ErrorMaskBuilder errorMask,
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null)
        {
            GlobalIntCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    this.Data = (Int32)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            GlobalIntCommon.Clear(this);
        }


        public new static GlobalInt Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new GlobalInt();
            foreach (var pair in fields)
            {
                CopyInInternal_GlobalInt(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_GlobalInt(GlobalInt obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out GlobalInt_FieldIndex enu))
            {
                CopyInInternal_Global(obj, pair);
            }
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    obj.Data = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IGlobalInt :
        IGlobalIntGetter,
        IGlobal,
        ILoquiClass<IGlobalInt, IGlobalIntGetter>,
        ILoquiClass<GlobalInt, IGlobalIntGetter>
    {
        new Int32 Data { get; set; }
        new bool Data_IsSet { get; set; }
        void Data_Set(Int32 item, bool hasBeenSet = true);
        void Data_Unset();

        void CopyFieldsFrom(
            IGlobalIntGetter rhs,
            ErrorMaskBuilder errorMask = null,
            GlobalInt_CopyMask copyMask = null,
            IGlobalIntGetter def = null);
    }

    public partial interface IGlobalIntInternal :
        IGlobalInternal,
        IGlobalInt,
        IGlobalIntInternalGetter
    {
    }

    public partial interface IGlobalIntGetter :
        IGlobalGetter,
        IXmlItem,
        IBinaryItem
    {
        #region Data
        Int32 Data { get; }
        bool Data_IsSet { get; }

        #endregion

    }

    public partial interface IGlobalIntInternalGetter :
        IGlobalInternalGetter,
        IGlobalIntGetter
    {

    }

    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GlobalInt_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        Data = 5,
    }
    #endregion

    #region Registration
    public class GlobalInt_Registration : ILoquiRegistration
    {
        public static readonly GlobalInt_Registration Instance = new GlobalInt_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 13,
            version: 0);

        public const string GUID = "fcf8c0ba-4933-42bc-8499-168c84bb2f4e";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(GlobalInt_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GlobalInt_ErrorMask);

        public static readonly Type ClassType = typeof(GlobalInt);

        public static readonly Type GetterType = typeof(IGlobalIntGetter);

        public static readonly Type InternalGetterType = typeof(IGlobalIntInternalGetter);

        public static readonly Type SetterType = typeof(IGlobalInt);

        public static readonly Type InternalSetterType = typeof(IGlobalIntInternal);

        public static readonly Type CommonType = typeof(GlobalIntCommon);

        public const string FullName = "Mutagen.Bethesda.Skyrim.GlobalInt";

        public const string Name = "GlobalInt";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)GlobalInt_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return false;
                default:
                    return Global_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return false;
                default:
                    return Global_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return false;
                default:
                    return Global_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return "Data";
                default:
                    return Global_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return false;
                default:
                    return Global_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return false;
                default:
                    return Global_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return typeof(Int32);
                default:
                    return Global_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(GlobalIntXmlTranslation);
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType FLTV_HEADER = new RecordType("FLTV");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GLOB_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryTranslation = typeof(GlobalIntBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class GlobalIntCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IGlobalInt item,
            IGlobalIntGetter rhs,
            IGlobalIntGetter def,
            ErrorMaskBuilder errorMask,
            GlobalInt_CopyMask copyMask)
        {
            GlobalCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.Data ?? true)
            {
                errorMask?.PushIndex((int)GlobalInt_FieldIndex.Data);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Data,
                        rhsHasBeenSet: rhs.Data_IsSet,
                        defItem: def?.Data ?? default(Int32),
                        defHasBeenSet: def?.Data_IsSet ?? false,
                        outRhsItem: out var rhsDataItem,
                        outDefItem: out var defDataItem))
                    {
                        item.Data = rhsDataItem;
                    }
                    else
                    {
                        item.Data_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IGlobalInt item)
        {
            item.Data_Unset();
        }

        public static GlobalInt_Mask<bool> GetEqualsMask(
            this IGlobalIntGetter item,
            IGlobalIntGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GlobalInt_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IGlobalIntGetter item,
            IGlobalIntGetter rhs,
            GlobalInt_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = item.Data_IsSet == rhs.Data_IsSet && item.Data == rhs.Data;
            GlobalCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IGlobalIntGetter item,
            string name = null,
            GlobalInt_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGlobalIntGetter item,
            FileGeneration fg,
            string name = null,
            GlobalInt_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(GlobalInt)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(GlobalInt)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {item.Data}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGlobalIntGetter item,
            GlobalInt_Mask<bool?> checkMask)
        {
            if (checkMask.Data.HasValue && checkMask.Data.Value != item.Data_IsSet) return false;
            return true;
        }

        public static GlobalInt_Mask<bool> GetHasBeenSetMask(IGlobalIntGetter item)
        {
            var ret = new GlobalInt_Mask<bool>();
            ret.Data = item.Data_IsSet;
            return ret;
        }

        public static GlobalInt_FieldIndex? ConvertFieldIndex(Global_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static GlobalInt_FieldIndex ConvertFieldIndex(Global_FieldIndex index)
        {
            switch (index)
            {
                case Global_FieldIndex.MajorRecordFlagsRaw:
                    return (GlobalInt_FieldIndex)((int)index);
                case Global_FieldIndex.FormKey:
                    return (GlobalInt_FieldIndex)((int)index);
                case Global_FieldIndex.Version:
                    return (GlobalInt_FieldIndex)((int)index);
                case Global_FieldIndex.EditorID:
                    return (GlobalInt_FieldIndex)((int)index);
                case Global_FieldIndex.SkyrimMajorRecordFlags:
                    return (GlobalInt_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static GlobalInt_FieldIndex? ConvertFieldIndex(SkyrimMajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static GlobalInt_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GlobalInt_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (GlobalInt_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (GlobalInt_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (GlobalInt_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (GlobalInt_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        public static GlobalInt_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static GlobalInt_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GlobalInt_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GlobalInt_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (GlobalInt_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GlobalInt_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class GlobalIntXmlTranslation :
        GlobalXmlTranslation,
        IXmlTranslator
    {
        public new readonly static GlobalIntXmlTranslation Instance = new GlobalIntXmlTranslation();

        public static void WriteToNode_Xml(
            IGlobalIntInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            GlobalXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.Data_IsSet
                && (translationMask?.GetShouldTranslate((int)GlobalInt_FieldIndex.Data) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Data),
                    item: item.Data,
                    fieldIndex: (int)GlobalInt_FieldIndex.Data,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            IGlobalIntInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GlobalIntXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            IGlobalIntInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Data":
                    try
                    {
                        errorMask?.PushIndex((int)GlobalInt_FieldIndex.Data);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 DataParse,
                            errorMask: errorMask))
                        {
                            item.Data = DataParse;
                        }
                        else
                        {
                            item.Data = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    GlobalXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        public void Write(
            XElement node,
            IGlobalIntInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GlobalInt");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GlobalInt");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IGlobalInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    #region Xml Write Mixins
    public static class GlobalIntXmlTranslationMixIn
    {
        public static void Write_Xml(
            this IGlobalIntInternalGetter item,
            XElement node,
            out GlobalInt_ErrorMask errorMask,
            bool doMasks = true,
            GlobalInt_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GlobalIntXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GlobalInt_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this IGlobalIntInternalGetter item,
            string path,
            out GlobalInt_ErrorMask errorMask,
            GlobalInt_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this IGlobalIntInternalGetter item,
            Stream stream,
            out GlobalInt_ErrorMask errorMask,
            GlobalInt_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class GlobalInt_Mask<T> : Global_Mask<T>, IMask<T>, IEquatable<GlobalInt_Mask<T>>
    {
        #region Ctors
        public GlobalInt_Mask()
        {
        }

        public GlobalInt_Mask(T initialValue)
        {
            this.Data = initialValue;
        }
        #endregion

        #region Members
        public T Data;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GlobalInt_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GlobalInt_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Data)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new GlobalInt_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GlobalInt_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GlobalInt_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Data = eval(this.Data);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GlobalInt_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GlobalInt_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GlobalInt_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {Data}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GlobalInt_ErrorMask : Global_ErrorMask, IErrorMask<GlobalInt_ErrorMask>
    {
        #region Members
        public Exception Data;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    return Data;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    this.Data = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            GlobalInt_FieldIndex enu = (GlobalInt_FieldIndex)index;
            switch (enu)
            {
                case GlobalInt_FieldIndex.Data:
                    this.Data = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("GlobalInt_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Data => {Data}");
        }
        #endregion

        #region Combine
        public GlobalInt_ErrorMask Combine(GlobalInt_ErrorMask rhs)
        {
            var ret = new GlobalInt_ErrorMask();
            ret.Data = this.Data.Combine(rhs.Data);
            return ret;
        }
        public static GlobalInt_ErrorMask Combine(GlobalInt_ErrorMask lhs, GlobalInt_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static GlobalInt_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new GlobalInt_ErrorMask();
        }
        #endregion

    }
    public class GlobalInt_CopyMask : Global_CopyMask
    {
        public GlobalInt_CopyMask()
        {
        }

        public GlobalInt_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Data = defaultOn;
        }

        #region Members
        public bool Data;
        #endregion

    }

    public class GlobalInt_TranslationMask : Global_TranslationMask
    {
        #region Members
        public bool Data;
        #endregion

        #region Ctors
        public GlobalInt_TranslationMask()
            : base()
        {
        }

        public GlobalInt_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.Data = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((Data, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class GlobalIntBinaryTranslation :
        GlobalBinaryTranslation,
        IBinaryTranslator
    {
        public new readonly static GlobalIntBinaryTranslation Instance = new GlobalIntBinaryTranslation();

        static partial void FillBinary_Data_Custom(
            MutagenFrame frame,
            GlobalInt item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void FillBinary_Data_Custom_Public(
            MutagenFrame frame,
            GlobalInt item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_Data_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        static partial void WriteBinary_Data_Custom(
            MutagenWriter writer,
            IGlobalIntInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_Data(
            MutagenWriter writer,
            IGlobalIntInternalGetter item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_Data_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public static void Write_RecordTypes(
            IGlobalIntInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            GlobalBinaryTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
            GlobalIntBinaryTranslation.WriteBinary_Data(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            IGlobalIntInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: GlobalInt_Registration.GLOB_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IGlobalInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IGlobalIntInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class GlobalIntBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this IGlobalIntInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out GlobalInt_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((GlobalIntBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = GlobalInt_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
