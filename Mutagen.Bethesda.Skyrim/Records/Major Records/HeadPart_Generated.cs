/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class HeadPart :
        SkyrimMajorRecord,
        IHeadPartInternal,
        ILoquiObjectSetter<HeadPart>,
        IEquatable<HeadPart>
    {
        #region Ctor
        protected HeadPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IHeadPartGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHeadPartGetter.Model => this.Model;
        #endregion
        #region Flags
        public HeadPart.Flag Flags { get; set; } = default;
        #endregion
        #region Type
        public HeadPart.TypeEnum? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        HeadPart.TypeEnum? IHeadPartGetter.Type => this.Type;
        #endregion
        #region ExtraParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<HeadPart>> _ExtraParts = new ExtendedList<IFormLink<HeadPart>>();
        public IExtendedList<IFormLink<HeadPart>> ExtraParts
        {
            get => this._ExtraParts;
            protected set => this._ExtraParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IHeadPartGetter>> IHeadPartGetter.ExtraParts => _ExtraParts;
        #endregion

        #endregion
        #region Parts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<Part> _Parts = new ExtendedList<Part>();
        public IExtendedList<Part> Parts
        {
            get => this._Parts;
            protected set => this._Parts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPartGetter> IHeadPartGetter.Parts => _Parts;
        #endregion

        #endregion
        #region TextureSet
        public FormLinkNullable<TextureSet> TextureSet { get; set; } = new FormLinkNullable<TextureSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<ITextureSetGetter> IHeadPartGetter.TextureSet => this.TextureSet.ToGetter<TextureSet, ITextureSetGetter>();
        #endregion
        #region Color
        public FormLinkNullable<ColorRecord> Color { get; set; } = new FormLinkNullable<ColorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IColorRecordGetter> IHeadPartGetter.Color => this.Color.ToGetter<ColorRecord, IColorRecordGetter>();
        #endregion
        #region ValidRaces
        public FormLinkNullable<FormList> ValidRaces { get; set; } = new FormLinkNullable<FormList>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<IFormListGetter> IHeadPartGetter.ValidRaces => this.ValidRaces.ToGetter<FormList, IFormListGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadPartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadPartGetter rhs)) return false;
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(HeadPart? obj)
        {
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Parts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Part.Mask<TItem>?>>());
                this.TextureSet = initialValue;
                this.Color = initialValue;
                this.ValidRaces = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Model,
                TItem Flags,
                TItem Type,
                TItem ExtraParts,
                TItem Parts,
                TItem TextureSet,
                TItem Color,
                TItem ValidRaces)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Flags = Flags;
                this.Type = Type;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ExtraParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.Parts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>(Parts, Enumerable.Empty<MaskItemIndexed<TItem, Part.Mask<TItem>?>>());
                this.TextureSet = TextureSet;
                this.Color = Color;
                this.ValidRaces = ValidRaces;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Flags;
            public TItem Type;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ExtraParts;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>? Parts;
            public TItem TextureSet;
            public TItem Color;
            public TItem ValidRaces;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ExtraParts, rhs.ExtraParts)) return false;
                if (!object.Equals(this.Parts, rhs.Parts)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.ValidRaces, rhs.ValidRaces)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ExtraParts);
                hash.Add(this.Parts);
                hash.Add(this.TextureSet);
                hash.Add(this.Color);
                hash.Add(this.ValidRaces);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (this.ExtraParts != null)
                {
                    if (!eval(this.ExtraParts.Overall)) return false;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Parts != null)
                {
                    if (!eval(this.Parts.Overall)) return false;
                    if (this.Parts.Specific != null)
                    {
                        foreach (var item in this.Parts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.ValidRaces)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (this.ExtraParts != null)
                {
                    if (eval(this.ExtraParts.Overall)) return true;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Parts != null)
                {
                    if (eval(this.Parts.Overall)) return true;
                    if (this.Parts.Specific != null)
                    {
                        foreach (var item in this.Parts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.TextureSet)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.ValidRaces)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                if (ExtraParts != null)
                {
                    obj.ExtraParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ExtraParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ExtraParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ExtraParts.Specific = l;
                        foreach (var item in ExtraParts.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Parts != null)
                {
                    obj.Parts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Part.Mask<R>?>>?>(eval(this.Parts.Overall), Enumerable.Empty<MaskItemIndexed<R, Part.Mask<R>?>>());
                    if (Parts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Part.Mask<R>?>>();
                        obj.Parts.Specific = l;
                        foreach (var item in Parts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Part.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Part.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TextureSet = eval(this.TextureSet);
                obj.Color = eval(this.Color);
                obj.ValidRaces = eval(this.ValidRaces);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HeadPart.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HeadPart.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HeadPart.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if ((printMask?.ExtraParts?.Overall ?? true)
                        && ExtraParts.TryGet(out var ExtraPartsItem))
                    {
                        fg.AppendLine("ExtraParts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ExtraPartsItem.Overall);
                            if (ExtraPartsItem.Specific != null)
                            {
                                foreach (var subItem in ExtraPartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Parts?.Overall ?? true)
                        && Parts.TryGet(out var PartsItem))
                    {
                        fg.AppendLine("Parts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PartsItem.Overall);
                            if (PartsItem.Specific != null)
                            {
                                foreach (var subItem in PartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TextureSet ?? true)
                    {
                        fg.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.ValidRaces ?? true)
                    {
                        fg.AppendItem(ValidRaces, "ValidRaces");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Flags;
            public Exception? Type;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ExtraParts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>? Parts;
            public Exception? TextureSet;
            public Exception? Color;
            public Exception? ValidRaces;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        return Name;
                    case HeadPart_FieldIndex.Model:
                        return Model;
                    case HeadPart_FieldIndex.Flags:
                        return Flags;
                    case HeadPart_FieldIndex.Type:
                        return Type;
                    case HeadPart_FieldIndex.ExtraParts:
                        return ExtraParts;
                    case HeadPart_FieldIndex.Parts:
                        return Parts;
                    case HeadPart_FieldIndex.TextureSet:
                        return TextureSet;
                    case HeadPart_FieldIndex.Color:
                        return Color;
                    case HeadPart_FieldIndex.ValidRaces:
                        return ValidRaces;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Parts:
                        this.Parts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case HeadPart_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadPart_FieldIndex.Parts:
                        this.Parts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>)obj;
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ExtraParts != null) return true;
                if (Parts != null) return true;
                if (TextureSet != null) return true;
                if (Color != null) return true;
                if (ValidRaces != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                if (ExtraParts.TryGet(out var ExtraPartsItem))
                {
                    fg.AppendLine("ExtraParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ExtraPartsItem.Overall);
                        if (ExtraPartsItem.Specific != null)
                        {
                            foreach (var subItem in ExtraPartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Parts.TryGet(out var PartsItem))
                {
                    fg.AppendLine("Parts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PartsItem.Overall);
                        if (PartsItem.Specific != null)
                        {
                            foreach (var subItem in PartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(TextureSet, "TextureSet");
                fg.AppendItem(Color, "Color");
                fg.AppendItem(ValidRaces, "ValidRaces");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ExtraParts?.Overall, rhs.ExtraParts?.Overall), ExceptionExt.Combine(this.ExtraParts?.Specific, rhs.ExtraParts?.Specific));
                ret.Parts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>(ExceptionExt.Combine(this.Parts?.Overall, rhs.Parts?.Overall), ExceptionExt.Combine(this.Parts?.Specific, rhs.Parts?.Specific));
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.ValidRaces = this.ValidRaces.Combine(rhs.ValidRaces);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Flags;
            public bool Type;
            public bool ExtraParts;
            public MaskItem<bool, Part.TranslationMask?> Parts;
            public bool TextureSet;
            public bool Color;
            public bool ValidRaces;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ExtraParts = defaultOn;
                this.Parts = new MaskItem<bool, Part.TranslationMask?>(defaultOn, null);
                this.TextureSet = defaultOn;
                this.Color = defaultOn;
                this.ValidRaces = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ExtraParts, null));
                ret.Add((Parts?.Overall ?? true, Parts?.Specific?.GetCrystal()));
                ret.Add((TextureSet, null));
                ret.Add((Color, null));
                ret.Add((ValidRaces, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = HeadPart_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => HeadPartCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => HeadPartCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartCommon.Instance.RemapLinks(this, mapping);
        public HeadPart(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public HeadPart(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public HeadPart(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static HeadPart CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadPart();
            ((HeadPartSetterCommon)((IHeadPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HeadPart item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new HeadPart GetNew()
        {
            return new HeadPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadPart :
        IHeadPartGetter,
        ISkyrimMajorRecord,
        ITranslatedNamed,
        IModeled,
        ILoquiObjectSetter<IHeadPartInternal>,
        ILinkedFormKeyContainer
    {
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new HeadPart.Flag Flags { get; set; }
        new HeadPart.TypeEnum? Type { get; set; }
        new IExtendedList<IFormLink<HeadPart>> ExtraParts { get; }
        new IExtendedList<Part> Parts { get; }
        new FormLinkNullable<TextureSet> TextureSet { get; set; }
        new FormLinkNullable<ColorRecord> Color { get; set; }
        new FormLinkNullable<FormList> ValidRaces { get; set; }
        #region Mutagen
        new HeadPart.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IHeadPartInternal :
        ISkyrimMajorRecordInternal,
        IHeadPart,
        IHeadPartGetter
    {
    }

    public partial interface IHeadPartGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedGetter,
        IModeledGetter,
        ILoquiObject<IHeadPartGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => HeadPart_Registration.Instance;
        TranslatedString? Name { get; }
        IModelGetter? Model { get; }
        HeadPart.Flag Flags { get; }
        HeadPart.TypeEnum? Type { get; }
        IReadOnlyList<IFormLink<IHeadPartGetter>> ExtraParts { get; }
        IReadOnlyList<IPartGetter> Parts { get; }
        FormLinkNullable<ITextureSetGetter> TextureSet { get; }
        FormLinkNullable<IColorRecordGetter> Color { get; }
        FormLinkNullable<IFormListGetter> ValidRaces { get; }

        #region Mutagen
        HeadPart.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class HeadPartMixIn
    {
        public static void Clear(this IHeadPartInternal item)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadPart.Mask<bool> GetEqualsMask(
            this IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHeadPartGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHeadPartGetter item,
            IHeadPartGetter rhs)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHeadPartInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum HeadPart_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Model = 7,
        Flags = 8,
        Type = 9,
        ExtraParts = 10,
        Parts = 11,
        TextureSet = 12,
        Color = 13,
        ValidRaces = 14,
    }
    #endregion

    #region Registration
    public partial class HeadPart_Registration : ILoquiRegistration
    {
        public static readonly HeadPart_Registration Instance = new HeadPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 44,
            version: 0);

        public const string GUID = "857a29e8-2860-48f1-b007-30df75c1667c";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(HeadPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadPart.ErrorMask);

        public static readonly Type ClassType = typeof(HeadPart);

        public static readonly Type GetterType = typeof(IHeadPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadPart);

        public static readonly Type? InternalSetterType = typeof(IHeadPartInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.HeadPart";

        public const string Name = "HeadPart";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)HeadPart_FieldIndex.Name;
                case "MODEL":
                    return (ushort)HeadPart_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)HeadPart_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)HeadPart_FieldIndex.Type;
                case "EXTRAPARTS":
                    return (ushort)HeadPart_FieldIndex.ExtraParts;
                case "PARTS":
                    return (ushort)HeadPart_FieldIndex.Parts;
                case "TEXTURESET":
                    return (ushort)HeadPart_FieldIndex.TextureSet;
                case "COLOR":
                    return (ushort)HeadPart_FieldIndex.Color;
                case "VALIDRACES":
                    return (ushort)HeadPart_FieldIndex.ValidRaces;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                    return true;
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.Color:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Parts:
                    return true;
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.Color:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.Color:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                    return "Name";
                case HeadPart_FieldIndex.Model:
                    return "Model";
                case HeadPart_FieldIndex.Flags:
                    return "Flags";
                case HeadPart_FieldIndex.Type:
                    return "Type";
                case HeadPart_FieldIndex.ExtraParts:
                    return "ExtraParts";
                case HeadPart_FieldIndex.Parts:
                    return "Parts";
                case HeadPart_FieldIndex.TextureSet:
                    return "TextureSet";
                case HeadPart_FieldIndex.Color:
                    return "Color";
                case HeadPart_FieldIndex.ValidRaces:
                    return "ValidRaces";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.Color:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.Color:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                    return typeof(TranslatedString);
                case HeadPart_FieldIndex.Model:
                    return typeof(Model);
                case HeadPart_FieldIndex.Flags:
                    return typeof(HeadPart.Flag);
                case HeadPart_FieldIndex.Type:
                    return typeof(HeadPart.TypeEnum);
                case HeadPart_FieldIndex.ExtraParts:
                    return typeof(IExtendedList<IFormLink<HeadPart>>);
                case HeadPart_FieldIndex.Parts:
                    return typeof(IExtendedList<Part>);
                case HeadPart_FieldIndex.TextureSet:
                    return typeof(FormLinkNullable<TextureSet>);
                case HeadPart_FieldIndex.Color:
                    return typeof(FormLinkNullable<ColorRecord>);
                case HeadPart_FieldIndex.ValidRaces:
                    return typeof(FormLinkNullable<FormList>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.HDPT;
        public static readonly Type BinaryWriteTranslation = typeof(HeadPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HeadPartSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly HeadPartSetterCommon Instance = new HeadPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadPartInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Flags = default;
            item.Type = default;
            item.ExtraParts.Clear();
            item.Parts.Clear();
            item.TextureSet = FormLinkNullable<TextureSet>.Null;
            item.Color = FormLinkNullable<ColorRecord>.Null;
            item.ValidRaces = FormLinkNullable<FormList>.Null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHeadPartInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IHeadPartInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: HeadPartBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: HeadPartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (HeadPart)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (HeadPart)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class HeadPartCommon : SkyrimMajorRecordCommon
    {
        public new static readonly HeadPartCommon Instance = new HeadPartCommon();

        public HeadPart.Mask<bool> GetEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadPart.Mask<bool>(false);
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            HeadPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ExtraParts = item.ExtraParts.CollectionEqualsHelper(
                rhs.ExtraParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.Parts = item.Parts.CollectionEqualsHelper(
                rhs.Parts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TextureSet = object.Equals(item.TextureSet, rhs.TextureSet);
            ret.Color = object.Equals(item.Color, rhs.Color);
            ret.ValidRaces = object.Equals(item.ValidRaces, rhs.ValidRaces);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHeadPartGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HeadPart =>");
            }
            else
            {
                fg.AppendLine($"{name} (HeadPart) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHeadPartGetter item,
            FileGeneration fg,
            HeadPart.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Type ?? true)
                && item.Type.TryGet(out var TypeItem))
            {
                fg.AppendItem(TypeItem, "Type");
            }
            if (printMask?.ExtraParts?.Overall ?? true)
            {
                fg.AppendLine("ExtraParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ExtraParts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Parts?.Overall ?? true)
            {
                fg.AppendLine("Parts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Parts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TextureSet ?? true)
            {
                fg.AppendItem(item.TextureSet.FormKey, "TextureSet");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendItem(item.Color.FormKey, "Color");
            }
            if (printMask?.ValidRaces ?? true)
            {
                fg.AppendItem(item.ValidRaces.FormKey, "ValidRaces");
            }
        }
        
        public static HeadPart_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new HeadPart_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadPartGetter? lhs,
            IHeadPartGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ExtraParts.SequenceEqual(rhs.ExtraParts)) return false;
            if (!lhs.Parts.SequenceEqual(rhs.Parts)) return false;
            if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            if (!lhs.Color.Equals(rhs.Color)) return false;
            if (!lhs.ValidRaces.Equals(rhs.ValidRaces)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter);
        }
        
        public virtual int GetHashCode(IHeadPartGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Flags);
            if (item.Type.TryGet(out var Typeitem))
            {
                hash.Add(Typeitem);
            }
            hash.Add(item.ExtraParts);
            hash.Add(item.Parts);
            hash.Add(item.TextureSet);
            hash.Add(item.Color);
            hash.Add(item.ValidRaces);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return HeadPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IHeadPartGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.ExtraParts.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.TextureSet.FormKey.TryGet(out var TextureSetKey))
            {
                yield return TextureSetKey;
            }
            if (obj.Color.FormKey.TryGet(out var ColorKey))
            {
                yield return ColorKey;
            }
            if (obj.ValidRaces.FormKey.TryGet(out var ValidRacesKey))
            {
                yield return ValidRacesKey;
            }
            yield break;
        }
        
        public void RemapLinks(IHeadPartGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(HeadPart obj, HeadPart rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new HeadPart(getNextFormKey());
            ret.DeepCopyIn((HeadPart)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (HeadPart)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class HeadPartSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly HeadPartSetterTranslationCommon Instance = new HeadPartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHeadPartInternal item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IHeadPart item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ExtraParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.ExtraParts);
                try
                {
                    item.ExtraParts.SetTo(
                        rhs.ExtraParts
                        .Select(r => (IFormLink<HeadPart>)new FormLink<HeadPart>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Parts) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Parts);
                try
                {
                    item.Parts.SetTo(
                        rhs.Parts
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet = new FormLinkNullable<TextureSet>(rhs.TextureSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Color) ?? true))
            {
                item.Color = new FormLinkNullable<ColorRecord>(rhs.Color.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ValidRaces) ?? true))
            {
                item.ValidRaces = new FormLinkNullable<FormList>(rhs.ValidRaces.FormKey);
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class HeadPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static HeadPart_Registration Registration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HeadPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static HeadPartBinaryWriteTranslation Instance = new HeadPartBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IHeadPartGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<HeadPart.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<HeadPart.TypeEnum>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.ExtraParts,
                transl: (MutagenWriter subWriter, IFormLink<IHeadPartGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IPartGetter>.Instance.Write(
                writer: writer,
                items: item.Parts,
                transl: (MutagenWriter subWriter, IPartGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((PartBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ValidRaces,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM));
        }

        public void Write(
            MutagenWriter writer,
            IHeadPartGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.HDPT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HeadPartBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static HeadPartBinaryCreateTranslation Instance = new HeadPartBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.HDPT;
        public static void FillBinaryStructs(
            IHeadPartInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IHeadPartInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)HeadPart_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)HeadPart_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<HeadPart.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)HeadPart_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<HeadPart.TypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)HeadPart_FieldIndex.Type;
                }
                case RecordTypeInts.HNAM:
                {
                    item.ExtraParts.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<HeadPart>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadPart_FieldIndex.ExtraParts;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM1:
                {
                    item.Parts.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Part>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Part_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Part.TryCreateFromBinary));
                    return (int)HeadPart_FieldIndex.Parts;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)HeadPart_FieldIndex.TextureSet;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)HeadPart_FieldIndex.Color;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ValidRaces = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)HeadPart_FieldIndex.ValidRaces;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HeadPartBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IHeadPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static HeadPart_Registration Registration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => HeadPartCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => HeadPartCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public HeadPart.MajorFlag MajorFlags => (HeadPart.MajorFlag)this.MajorRecordFlagsRaw;

        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Flags
        private int? _FlagsLocation;
        public HeadPart.Flag Flags => _FlagsLocation.HasValue ? (HeadPart.Flag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(HeadPart.Flag);
        #endregion
        #region Type
        private int? _TypeLocation;
        public HeadPart.TypeEnum? Type => _TypeLocation.HasValue ? (HeadPart.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TypeLocation!.Value, _package.MetaData.Constants)) : default(HeadPart.TypeEnum?);
        #endregion
        public IReadOnlyList<IFormLink<IHeadPartGetter>> ExtraParts { get; private set; } = ListExt.Empty<IFormLink<IHeadPartGetter>>();
        public IReadOnlyList<IPartGetter> Parts { get; private set; } = ListExt.Empty<PartBinaryOverlay>();
        #region TextureSet
        private int? _TextureSetLocation;
        public FormLinkNullable<ITextureSetGetter> TextureSet => _TextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region Color
        private int? _ColorLocation;
        public FormLinkNullable<IColorRecordGetter> Color => _ColorLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ColorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IColorRecordGetter>.Null;
        #endregion
        #region ValidRaces
        private int? _ValidRacesLocation;
        public FormLinkNullable<IFormListGetter> ValidRaces => _ValidRacesLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ValidRacesLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HeadPartBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static HeadPartBinaryOverlay HeadPartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new HeadPartBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static HeadPartBinaryOverlay HeadPartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return HeadPartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)HeadPart_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Type;
                }
                case RecordTypeInts.HNAM:
                {
                    this.ExtraParts = BinaryOverlayList.FactoryByArray<IFormLink<IHeadPartGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IHeadPartGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)HeadPart_FieldIndex.ExtraParts;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM1:
                {
                    this.Parts = this.ParseRepeatedTypelessSubrecord<PartBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Part_Registration.TriggeringRecordTypes,
                        factory:  PartBinaryOverlay.PartFactory);
                    return (int)HeadPart_FieldIndex.Parts;
                }
                case RecordTypeInts.TNAM:
                {
                    _TextureSetLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.TextureSet;
                }
                case RecordTypeInts.CNAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Color;
                }
                case RecordTypeInts.RNAM:
                {
                    _ValidRacesLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.ValidRaces;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadPartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

