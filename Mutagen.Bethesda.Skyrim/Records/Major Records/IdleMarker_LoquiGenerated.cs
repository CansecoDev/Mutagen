/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class IdleMarker :
        SkyrimMajorRecord,
        IIdleMarkerInternal,
        ILoquiObjectSetter<IdleMarker>,
        IEquatable<IdleMarker>,
        IEqualsMask
    {
        #region Ctor
        protected IdleMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IIdleMarkerGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Flags
        public IdleMarker.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IdleMarker.Flag? IIdleMarkerGetter.Flags => this.Flags;
        #endregion
        #region IdleTimer
        public Single? IdleTimer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IIdleMarkerGetter.IdleTimer => this.IdleTimer;
        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IdleAnimation>>? _Animations;
        public ExtendedList<IFormLink<IdleAnimation>>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IIdleAnimationGetter>>? IIdleMarkerGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IIdleMarkerGetter.Model => this.Model;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IdleMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIdleMarkerGetter rhs)) return false;
            return ((IdleMarkerCommon)((IIdleMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IdleMarker obj)
        {
            return ((IdleMarkerCommon)((IIdleMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IdleMarkerCommon)((IIdleMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IdleMarkerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IdleMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new IdleMarker CreateFromXml(
            XElement node,
            IdleMarker.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static IdleMarker CreateFromXml(
            XElement node,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static IdleMarker CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new IdleMarker();
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static IdleMarker CreateFromXml(
            string path,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IdleMarker CreateFromXml(
            string path,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleMarker CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static IdleMarker CreateFromXml(
            Stream stream,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IdleMarker CreateFromXml(
            Stream stream,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IdleMarker CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.IdleTimer = initialValue;
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Flags,
                TItem IdleTimer,
                TItem Animations,
                TItem Model)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Flags = Flags;
                this.IdleTimer = IdleTimer;
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Flags;
            public TItem IdleTimer;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.IdleTimer, rhs.IdleTimer)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Flags);
                hash.Add(this.IdleTimer);
                hash.Add(this.Animations);
                hash.Add(this.Model);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.IdleTimer)) return false;
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.IdleTimer)) return true;
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IdleMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.IdleTimer = eval(this.IdleTimer);
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(IdleMarker.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, IdleMarker.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(IdleMarker.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.IdleTimer ?? true)
                    {
                        fg.AppendItem(IdleTimer, "IdleTimer");
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations.TryGet(out var AnimationsItem))
                    {
                        fg.AppendLine("Animations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Flags;
            public Exception? IdleTimer;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
                switch (enu)
                {
                    case IdleMarker_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case IdleMarker_FieldIndex.Flags:
                        return Flags;
                    case IdleMarker_FieldIndex.IdleTimer:
                        return IdleTimer;
                    case IdleMarker_FieldIndex.Animations:
                        return Animations;
                    case IdleMarker_FieldIndex.Model:
                        return Model;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
                switch (enu)
                {
                    case IdleMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case IdleMarker_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case IdleMarker_FieldIndex.IdleTimer:
                        this.IdleTimer = ex;
                        break;
                    case IdleMarker_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case IdleMarker_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
                switch (enu)
                {
                    case IdleMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case IdleMarker_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case IdleMarker_FieldIndex.IdleTimer:
                        this.IdleTimer = (Exception?)obj;
                        break;
                    case IdleMarker_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case IdleMarker_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Flags != null) return true;
                if (IdleTimer != null) return true;
                if (Animations != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(IdleTimer, "IdleTimer");
                if (Animations.TryGet(out var AnimationsItem))
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Model?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.IdleTimer = this.IdleTimer.Combine(rhs.IdleTimer);
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Flags;
            public bool IdleTimer;
            public bool Animations;
            public MaskItem<bool, Model.TranslationMask?> Model;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.IdleTimer = defaultOn;
                this.Animations = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((IdleTimer, null));
                ret.Add((Animations, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = IdleMarker_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => IdleMarkerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => IdleMarkerCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleMarkerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleMarkerCommon.Instance.RemapLinks(this, mapping);
        public IdleMarker(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public IdleMarker(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public IdleMarker(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new IdleMarker CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static IdleMarker CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new IdleMarker();
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleMarkerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new IdleMarker GetNew()
        {
            return new IdleMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IIdleMarker :
        IIdleMarkerGetter,
        ISkyrimMajorRecord,
        IObjectId,
        IObjectBounded,
        ILoquiObjectSetter<IIdleMarkerInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new IdleMarker.Flag? Flags { get; set; }
        new Single? IdleTimer { get; set; }
        new ExtendedList<IFormLink<IdleAnimation>>? Animations { get; set; }
        new Model? Model { get; set; }
        #region Mutagen
        new IdleMarker.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IIdleMarkerInternal :
        ISkyrimMajorRecordInternal,
        IIdleMarker,
        IIdleMarkerGetter
    {
    }

    public partial interface IIdleMarkerGetter :
        ISkyrimMajorRecordGetter,
        IObjectIdGetter,
        IObjectBoundedGetter,
        ILoquiObject<IIdleMarkerGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => IdleMarker_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        IdleMarker.Flag? Flags { get; }
        Single? IdleTimer { get; }
        IReadOnlyList<IFormLink<IIdleAnimationGetter>>? Animations { get; }
        IModelGetter? Model { get; }

        #region Mutagen
        IdleMarker.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class IdleMarkerMixIn
    {
        public static void Clear(this IIdleMarkerInternal item)
        {
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IdleMarker.Mask<bool> GetEqualsMask(
            this IIdleMarkerGetter item,
            IIdleMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIdleMarkerGetter item,
            string? name = null,
            IdleMarker.Mask<bool>? printMask = null)
        {
            return ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIdleMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            IdleMarker.Mask<bool>? printMask = null)
        {
            ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIdleMarkerGetter item,
            IdleMarker.Mask<bool?> checkMask)
        {
            return ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static IdleMarker.Mask<bool> GetHasBeenSetMask(this IIdleMarkerGetter item)
        {
            var ret = new IdleMarker.Mask<bool>(false);
            ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIdleMarkerGetter item,
            IIdleMarkerGetter rhs)
        {
            return ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIdleMarkerInternal lhs,
            IIdleMarkerGetter rhs,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleMarkerSetterTranslationCommon)((IIdleMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = IdleMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIdleMarkerInternal lhs,
            IIdleMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IdleMarkerSetterTranslationCommon)((IIdleMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static IdleMarker DeepCopy(
            this IIdleMarkerGetter item,
            IdleMarker.TranslationMask? copyMask = null)
        {
            return ((IdleMarkerSetterTranslationCommon)((IIdleMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IdleMarker DeepCopy(
            this IIdleMarkerGetter item,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? copyMask = null)
        {
            return ((IdleMarkerSetterTranslationCommon)((IIdleMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IdleMarker DeepCopy(
            this IIdleMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IdleMarkerSetterTranslationCommon)((IIdleMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            XElement node,
            IdleMarker.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            XElement node,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            string path,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            string path,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            Stream stream,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            Stream stream,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIdleMarkerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IdleMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IIdleMarkerInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IIdleMarkerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleMarkerSetterCommon)((IIdleMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum IdleMarker_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Flags = 7,
        IdleTimer = 8,
        Animations = 9,
        Model = 10,
    }
    #endregion

    #region Registration
    public partial class IdleMarker_Registration : ILoquiRegistration
    {
        public static readonly IdleMarker_Registration Instance = new IdleMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 230,
            version: 0);

        public const string GUID = "fe40d14c-1bec-4308-8f53-fb83f48d4708";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(IdleMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleMarker.ErrorMask);

        public static readonly Type ClassType = typeof(IdleMarker);

        public static readonly Type GetterType = typeof(IIdleMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIdleMarker);

        public static readonly Type? InternalSetterType = typeof(IIdleMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.IdleMarker";

        public const string Name = "IdleMarker";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)IdleMarker_FieldIndex.ObjectBounds;
                case "FLAGS":
                    return (ushort)IdleMarker_FieldIndex.Flags;
                case "IDLETIMER":
                    return (ushort)IdleMarker_FieldIndex.IdleTimer;
                case "ANIMATIONS":
                    return (ushort)IdleMarker_FieldIndex.Animations;
                case "MODEL":
                    return (ushort)IdleMarker_FieldIndex.Model;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.Animations:
                    return true;
                case IdleMarker_FieldIndex.ObjectBounds:
                case IdleMarker_FieldIndex.Flags:
                case IdleMarker_FieldIndex.IdleTimer:
                case IdleMarker_FieldIndex.Model:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                case IdleMarker_FieldIndex.Model:
                    return true;
                case IdleMarker_FieldIndex.Flags:
                case IdleMarker_FieldIndex.IdleTimer:
                case IdleMarker_FieldIndex.Animations:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                case IdleMarker_FieldIndex.Flags:
                case IdleMarker_FieldIndex.IdleTimer:
                case IdleMarker_FieldIndex.Animations:
                case IdleMarker_FieldIndex.Model:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case IdleMarker_FieldIndex.Flags:
                    return "Flags";
                case IdleMarker_FieldIndex.IdleTimer:
                    return "IdleTimer";
                case IdleMarker_FieldIndex.Animations:
                    return "Animations";
                case IdleMarker_FieldIndex.Model:
                    return "Model";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                case IdleMarker_FieldIndex.Flags:
                case IdleMarker_FieldIndex.IdleTimer:
                case IdleMarker_FieldIndex.Animations:
                case IdleMarker_FieldIndex.Model:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                case IdleMarker_FieldIndex.Flags:
                case IdleMarker_FieldIndex.IdleTimer:
                case IdleMarker_FieldIndex.Animations:
                case IdleMarker_FieldIndex.Model:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            IdleMarker_FieldIndex enu = (IdleMarker_FieldIndex)index;
            switch (enu)
            {
                case IdleMarker_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case IdleMarker_FieldIndex.Flags:
                    return typeof(IdleMarker.Flag);
                case IdleMarker_FieldIndex.IdleTimer:
                    return typeof(Single);
                case IdleMarker_FieldIndex.Animations:
                    return typeof(ExtendedList<IFormLink<IdleAnimation>>);
                case IdleMarker_FieldIndex.Model:
                    return typeof(Model);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IdleMarkerXmlWriteTranslation);
        public static readonly RecordType IDLM_HEADER = new RecordType("IDLM");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType IDLF_HEADER = new RecordType("IDLF");
        public static readonly RecordType IDLC_HEADER = new RecordType("IDLC");
        public static readonly RecordType IDLT_HEADER = new RecordType("IDLT");
        public static readonly RecordType IDLA_HEADER = new RecordType("IDLA");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType TriggeringRecordType = IDLM_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(IdleMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IdleMarkerSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly IdleMarkerSetterCommon Instance = new IdleMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIdleMarkerInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Flags = default;
            item.IdleTimer = default;
            item.Animations = null;
            item.Model = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IIdleMarkerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleMarkerInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IIdleMarkerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IIdleMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    IdleMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (IdleMarker)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (IdleMarker)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIdleMarkerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IIdleMarkerInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: IdleMarkerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IdleMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (IdleMarker)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (IdleMarker)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class IdleMarkerCommon : SkyrimMajorRecordCommon
    {
        public new static readonly IdleMarkerCommon Instance = new IdleMarkerCommon();

        public IdleMarker.Mask<bool> GetEqualsMask(
            IIdleMarkerGetter item,
            IIdleMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleMarker.Mask<bool>(false);
            ((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIdleMarkerGetter item,
            IIdleMarkerGetter rhs,
            IdleMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.IdleTimer = item.IdleTimer.EqualsWithin(rhs.IdleTimer);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => object.Equals(l, r),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IIdleMarkerGetter item,
            string? name = null,
            IdleMarker.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIdleMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            IdleMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"IdleMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (IdleMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIdleMarkerGetter item,
            FileGeneration fg,
            IdleMarker.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.IdleTimer ?? true)
                && item.IdleTimer.TryGet(out var IdleTimerItem))
            {
                fg.AppendItem(IdleTimerItem, "IdleTimer");
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations.TryGet(out var AnimationsItem))
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
        }
        
        public bool HasBeenSet(
            IIdleMarkerGetter item,
            IdleMarker.Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.IdleTimer.HasValue && checkMask.IdleTimer.Value != (item.IdleTimer != null)) return false;
            if (checkMask.Animations?.Overall.HasValue ?? false && checkMask.Animations!.Overall.Value != (item.Animations != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IIdleMarkerGetter item,
            IdleMarker.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Flags = (item.Flags != null);
            mask.IdleTimer = (item.IdleTimer != null);
            mask.Animations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Animations != null), default);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static IdleMarker_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (IdleMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (IdleMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (IdleMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (IdleMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (IdleMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new IdleMarker_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (IdleMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIdleMarkerGetter? lhs,
            IIdleMarkerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.IdleTimer.EqualsWithin(rhs.IdleTimer)) return false;
            if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleMarkerGetter?)lhs,
                rhs: rhs as IIdleMarkerGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleMarkerGetter?)lhs,
                rhs: rhs as IIdleMarkerGetter);
        }
        
        public virtual int GetHashCode(IIdleMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.IdleTimer.TryGet(out var IdleTimeritem))
            {
                hash.Add(IdleTimeritem);
            }
            hash.Add(item.Animations);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleMarkerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleMarkerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return IdleMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IIdleMarkerGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Animations.TryGet(out var AnimationsItem))
            {
                foreach (var item in AnimationsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IIdleMarkerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(IdleMarker obj, IdleMarker rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new IdleMarker(getNextFormKey());
            ret.DeepCopyIn((IdleMarker)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (IdleMarker)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class IdleMarkerSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly IdleMarkerSetterTranslationCommon Instance = new IdleMarkerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IIdleMarkerInternal item,
            IIdleMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IIdleMarker item,
            IIdleMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)IdleMarker_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)IdleMarker_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.IdleTimer) ?? true))
            {
                item.IdleTimer = rhs.IdleTimer;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)IdleMarker_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .Select(r => (IFormLink<IdleAnimation>)new FormLink<IdleAnimation>(r.FormKey))
                            .ToExtendedList<IFormLink<IdleAnimation>>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)IdleMarker_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)IdleMarker_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleMarkerInternal)item,
                rhs: (IIdleMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleMarker)item,
                rhs: (IIdleMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleMarkerInternal)item,
                rhs: (IIdleMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIdleMarker)item,
                rhs: (IIdleMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public IdleMarker DeepCopy(
            IIdleMarkerGetter item,
            IdleMarker.TranslationMask? copyMask = null)
        {
            IdleMarker ret = (IdleMarker)((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public IdleMarker DeepCopy(
            IIdleMarkerGetter item,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? copyMask = null)
        {
            IdleMarker ret = (IdleMarker)((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public IdleMarker DeepCopy(
            IIdleMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IdleMarker ret = (IdleMarker)((IdleMarkerCommon)((IIdleMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class IdleMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleMarker_Registration.Instance;
        public new static IdleMarker_Registration Registration => IdleMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IdleMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleMarkerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IdleMarkerXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static IdleMarkerXmlWriteTranslation Instance = new IdleMarkerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIdleMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)IdleMarker_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleMarker_FieldIndex.ObjectBounds));
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<IdleMarker.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)IdleMarker_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.IdleTimer != null)
                && (translationMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.IdleTimer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IdleTimer),
                    item: item.IdleTimer.Value,
                    fieldIndex: (int)IdleMarker_FieldIndex.IdleTimer,
                    errorMask: errorMask);
            }
            if ((item.Animations != null)
                && (translationMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<IFormLink<IIdleAnimationGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)IdleMarker_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IdleMarker_FieldIndex.Animations),
                    transl: (XElement subNode, IFormLink<IIdleAnimationGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)IdleMarker_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)IdleMarker_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)IdleMarker_FieldIndex.Model));
                }
            }
        }

        public void Write(
            XElement node,
            IIdleMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.IdleMarker");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.IdleMarker");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class IdleMarkerXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static IdleMarkerXmlCreateTranslation Instance = new IdleMarkerXmlCreateTranslation();

        public static void FillPublicXml(
            IIdleMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IdleMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIdleMarkerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)IdleMarker_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)IdleMarker_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)IdleMarker_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<IdleMarker.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleTimer":
                    errorMask?.PushIndex((int)IdleMarker_FieldIndex.IdleTimer);
                    try
                    {
                        item.IdleTimer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    errorMask?.PushIndex((int)IdleMarker_FieldIndex.Animations);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<IdleAnimation>>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations = AnimationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Animations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)IdleMarker_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)IdleMarker_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class IdleMarkerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIdleMarkerGetter item,
            XElement node,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IdleMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIdleMarkerGetter item,
            string path,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIdleMarkerGetter item,
            Stream stream,
            out IdleMarker.ErrorMask errorMask,
            IdleMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IdleMarkerBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static IdleMarkerBinaryWriteTranslation Instance = new IdleMarkerBinaryWriteTranslation();

        static partial void WriteBinaryAnimationCountCustom(
            MutagenWriter writer,
            IIdleMarkerGetter item);

        public static void WriteBinaryAnimationCount(
            MutagenWriter writer,
            IIdleMarkerGetter item)
        {
            WriteBinaryAnimationCountCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryAnimationsCustom(
            MutagenWriter writer,
            IIdleMarkerGetter item);

        public static void WriteBinaryAnimations(
            MutagenWriter writer,
            IIdleMarkerGetter item)
        {
            WriteBinaryAnimationsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IIdleMarkerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<IdleMarker.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(IdleMarker_Registration.IDLF_HEADER));
            IdleMarkerBinaryWriteTranslation.WriteBinaryAnimationCount(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.IdleTimer,
                header: recordTypeConverter.ConvertToCustom(IdleMarker_Registration.IDLT_HEADER));
            IdleMarkerBinaryWriteTranslation.WriteBinaryAnimations(
                writer: writer,
                item: item);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IIdleMarkerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(IdleMarker_Registration.IDLM_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IdleMarkerBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static IdleMarkerBinaryCreateTranslation Instance = new IdleMarkerBinaryCreateTranslation();

        public override RecordType RecordType => IdleMarker_Registration.IDLM_HEADER;
        public static void FillBinaryStructs(
            IIdleMarkerInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IIdleMarkerInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.ObjectBounds);
                }
                case 0x464C4449: // IDLF
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<IdleMarker.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Flags);
                }
                case 0x434C4449: // IDLC
                {
                    IdleMarkerBinaryCreateTranslation.FillBinaryAnimationCountCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x544C4449: // IDLT
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleTimer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.IdleTimer);
                }
                case 0x414C4449: // IDLA
                {
                    IdleMarkerBinaryCreateTranslation.FillBinaryAnimationsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Animations);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Model);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

        static partial void FillBinaryAnimationCountCustom(
            MutagenFrame frame,
            IIdleMarkerInternal item);

        static partial void FillBinaryAnimationsCustom(
            MutagenFrame frame,
            IIdleMarkerInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class IdleMarkerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IdleMarkerBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IIdleMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleMarker_Registration.Instance;
        public new static IdleMarker_Registration Registration => IdleMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleMarkerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIdleMarkerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => IdleMarkerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => IdleMarkerCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleMarkerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleMarkerCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IdleMarkerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IdleMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public IdleMarker.MajorFlag MajorFlags => (IdleMarker.MajorFlag)this.MajorRecordFlagsRaw;

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public IdleMarker.Flag? Flags => _FlagsLocation.HasValue ? (IdleMarker.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(IdleMarker.Flag?);
        #endregion
        #region AnimationCount
        partial void AnimationCountCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region IdleTimer
        private int? _IdleTimerLocation;
        public Single? IdleTimer => _IdleTimerLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _IdleTimerLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region Animations
        partial void AnimationsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IModelGetter? Model { get; private set; }
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IdleMarkerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static IdleMarkerBinaryOverlay IdleMarkerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new IdleMarkerBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IdleMarkerBinaryOverlay IdleMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return IdleMarkerFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.ObjectBounds);
                }
                case 0x464C4449: // IDLF
                {
                    _FlagsLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Flags);
                }
                case 0x434C4449: // IDLC
                {
                    AnimationCountCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x544C4449: // IDLT
                {
                    _IdleTimerLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.IdleTimer);
                }
                case 0x414C4449: // IDLA
                {
                    AnimationsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Animations);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)IdleMarker_FieldIndex.Model);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IdleMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

