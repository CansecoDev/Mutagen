/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ImageSpaceDepthOfField :
        IImageSpaceDepthOfField,
        ILoquiObjectSetter<ImageSpaceDepthOfField>,
        IEquatable<ImageSpaceDepthOfField>,
        IEqualsMask
    {
        #region Ctor
        public ImageSpaceDepthOfField()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ImageSpaceDepthOfField.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Strength
        public Single Strength { get; set; } = default;
        #endregion
        #region Distance
        public Single Distance { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default;
        #endregion
        #region BlurRadius
        public Byte BlurRadius { get; set; } = default;
        public static RangeUInt8 BlurRadius_Range = new RangeUInt8(0, 7);
        #endregion
        #region Sky
        public Boolean Sky { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImageSpaceDepthOfFieldMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImageSpaceDepthOfFieldGetter rhs)) return false;
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ImageSpaceDepthOfField obj)
        {
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ImageSpaceDepthOfFieldXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ImageSpaceDepthOfField CreateFromXml(
            XElement node,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ImageSpaceDepthOfField CreateFromXml(
            XElement node,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ImageSpaceDepthOfField.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ImageSpaceDepthOfField();
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            string path,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            string path,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            Stream stream,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            Stream stream,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ImageSpaceDepthOfField CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Strength = initialValue;
                this.Distance = initialValue;
                this.Range = initialValue;
                this.Unknown = initialValue;
                this.BlurRadius = initialValue;
                this.Sky = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Strength,
                TItem Distance,
                TItem Range,
                TItem Unknown,
                TItem BlurRadius,
                TItem Sky)
            {
                this.Versioning = Versioning;
                this.Strength = Strength;
                this.Distance = Distance;
                this.Range = Range;
                this.Unknown = Unknown;
                this.BlurRadius = BlurRadius;
                this.Sky = Sky;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Strength;
            public TItem Distance;
            public TItem Range;
            public TItem Unknown;
            public TItem BlurRadius;
            public TItem Sky;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Distance, rhs.Distance)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.BlurRadius, rhs.BlurRadius)) return false;
                if (!object.Equals(this.Sky, rhs.Sky)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Strength);
                hash.Add(this.Distance);
                hash.Add(this.Range);
                hash.Add(this.Unknown);
                hash.Add(this.BlurRadius);
                hash.Add(this.Sky);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Distance)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.BlurRadius)) return false;
                if (!eval(this.Sky)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Distance)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.BlurRadius)) return true;
                if (eval(this.Sky)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImageSpaceDepthOfField.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Strength = eval(this.Strength);
                obj.Distance = eval(this.Distance);
                obj.Range = eval(this.Range);
                obj.Unknown = eval(this.Unknown);
                obj.BlurRadius = eval(this.BlurRadius);
                obj.Sky = eval(this.Sky);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ImageSpaceDepthOfField.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ImageSpaceDepthOfField.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ImageSpaceDepthOfField.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Distance ?? true)
                    {
                        fg.AppendItem(Distance, "Distance");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.BlurRadius ?? true)
                    {
                        fg.AppendItem(BlurRadius, "BlurRadius");
                    }
                    if (printMask?.Sky ?? true)
                    {
                        fg.AppendItem(Sky, "Sky");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Strength;
            public Exception? Distance;
            public Exception? Range;
            public Exception? Unknown;
            public Exception? BlurRadius;
            public Exception? Sky;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceDepthOfField_FieldIndex.Versioning:
                        return Versioning;
                    case ImageSpaceDepthOfField_FieldIndex.Strength:
                        return Strength;
                    case ImageSpaceDepthOfField_FieldIndex.Distance:
                        return Distance;
                    case ImageSpaceDepthOfField_FieldIndex.Range:
                        return Range;
                    case ImageSpaceDepthOfField_FieldIndex.Unknown:
                        return Unknown;
                    case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                        return BlurRadius;
                    case ImageSpaceDepthOfField_FieldIndex.Sky:
                        return Sky;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceDepthOfField_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Distance:
                        this.Distance = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                        this.BlurRadius = ex;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Sky:
                        this.Sky = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceDepthOfField_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Distance:
                        this.Distance = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                        this.BlurRadius = (Exception?)obj;
                        break;
                    case ImageSpaceDepthOfField_FieldIndex.Sky:
                        this.Sky = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Strength != null) return true;
                if (Distance != null) return true;
                if (Range != null) return true;
                if (Unknown != null) return true;
                if (BlurRadius != null) return true;
                if (Sky != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Strength, "Strength");
                fg.AppendItem(Distance, "Distance");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(BlurRadius, "BlurRadius");
                fg.AppendItem(Sky, "Sky");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Distance = this.Distance.Combine(rhs.Distance);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.BlurRadius = this.BlurRadius.Combine(rhs.BlurRadius);
                ret.Sky = this.Sky.Combine(rhs.Sky);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool Strength;
            public bool Distance;
            public bool Range;
            public bool Unknown;
            public bool BlurRadius;
            public bool Sky;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.Strength = defaultOn;
                this.Distance = defaultOn;
                this.Range = defaultOn;
                this.Unknown = defaultOn;
                this.BlurRadius = defaultOn;
                this.Sky = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Strength, null));
                ret.Add((Distance, null));
                ret.Add((Range, null));
                ret.Add((Unknown, null));
                ret.Add((BlurRadius, null));
                ret.Add((Sky, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ImageSpaceDepthOfField_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ImageSpaceDepthOfFieldBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceDepthOfFieldBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ImageSpaceDepthOfField CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ImageSpaceDepthOfField CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ImageSpaceDepthOfField();
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImageSpaceDepthOfField item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IImageSpaceDepthOfFieldGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ImageSpaceDepthOfField GetNew()
        {
            return new ImageSpaceDepthOfField();
        }

    }
    #endregion

    #region Interface
    public partial interface IImageSpaceDepthOfField :
        IImageSpaceDepthOfFieldGetter,
        ILoquiObjectSetter<IImageSpaceDepthOfField>
    {
        new ImageSpaceDepthOfField.VersioningBreaks Versioning { get; set; }
        new Single Strength { get; set; }
        new Single Distance { get; set; }
        new Single Range { get; set; }
        new Int16 Unknown { get; set; }
        new Byte BlurRadius { get; set; }
        new Boolean Sky { get; set; }
    }

    public partial interface IImageSpaceDepthOfFieldGetter :
        ILoquiObject,
        ILoquiObject<IImageSpaceDepthOfFieldGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ImageSpaceDepthOfField_Registration.Instance;
        ImageSpaceDepthOfField.VersioningBreaks Versioning { get; }
        Single Strength { get; }
        Single Distance { get; }
        Single Range { get; }
        Int16 Unknown { get; }
        Byte BlurRadius { get; }
        Boolean Sky { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImageSpaceDepthOfFieldMixIn
    {
        public static void Clear(this IImageSpaceDepthOfField item)
        {
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImageSpaceDepthOfField.Mask<bool> GetEqualsMask(
            this IImageSpaceDepthOfFieldGetter item,
            IImageSpaceDepthOfFieldGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IImageSpaceDepthOfFieldGetter item,
            string? name = null,
            ImageSpaceDepthOfField.Mask<bool>? printMask = null)
        {
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IImageSpaceDepthOfFieldGetter item,
            FileGeneration fg,
            string? name = null,
            ImageSpaceDepthOfField.Mask<bool>? printMask = null)
        {
            ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IImageSpaceDepthOfFieldGetter item,
            ImageSpaceDepthOfField.Mask<bool?> checkMask)
        {
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ImageSpaceDepthOfField.Mask<bool> GetHasBeenSetMask(this IImageSpaceDepthOfFieldGetter item)
        {
            var ret = new ImageSpaceDepthOfField.Mask<bool>(false);
            ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IImageSpaceDepthOfFieldGetter item,
            IImageSpaceDepthOfFieldGetter rhs)
        {
            return ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IImageSpaceDepthOfField lhs,
            IImageSpaceDepthOfFieldGetter rhs)
        {
            ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IImageSpaceDepthOfField lhs,
            IImageSpaceDepthOfFieldGetter rhs,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IImageSpaceDepthOfField lhs,
            IImageSpaceDepthOfFieldGetter rhs,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ImageSpaceDepthOfField.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImageSpaceDepthOfField lhs,
            IImageSpaceDepthOfFieldGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ImageSpaceDepthOfField DeepCopy(
            this IImageSpaceDepthOfFieldGetter item,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImageSpaceDepthOfField DeepCopy(
            this IImageSpaceDepthOfFieldGetter item,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImageSpaceDepthOfField DeepCopy(
            this IImageSpaceDepthOfFieldGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImageSpaceDepthOfFieldSetterTranslationCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            XElement node,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            XElement node,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ImageSpaceDepthOfField.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            string path,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            string path,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            string path,
            ErrorMaskBuilder? errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            Stream stream,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            Stream stream,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImageSpaceDepthOfField item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IImageSpaceDepthOfField item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IImageSpaceDepthOfField item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceDepthOfFieldSetterCommon)((IImageSpaceDepthOfFieldGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ImageSpaceDepthOfField_FieldIndex
    {
        Versioning = 0,
        Strength = 1,
        Distance = 2,
        Range = 3,
        Unknown = 4,
        BlurRadius = 5,
        Sky = 6,
    }
    #endregion

    #region Registration
    public partial class ImageSpaceDepthOfField_Registration : ILoquiRegistration
    {
        public static readonly ImageSpaceDepthOfField_Registration Instance = new ImageSpaceDepthOfField_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 409,
            version: 0);

        public const string GUID = "78ab71b8-6b57-4e09-bc44-6f48ba86d023";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ImageSpaceDepthOfField.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImageSpaceDepthOfField.ErrorMask);

        public static readonly Type ClassType = typeof(ImageSpaceDepthOfField);

        public static readonly Type GetterType = typeof(IImageSpaceDepthOfFieldGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImageSpaceDepthOfField);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ImageSpaceDepthOfField";

        public const string Name = "ImageSpaceDepthOfField";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Versioning;
                case "STRENGTH":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Strength;
                case "DISTANCE":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Distance;
                case "RANGE":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Range;
                case "UNKNOWN":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Unknown;
                case "BLURRADIUS":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.BlurRadius;
                case "SKY":
                    return (ushort)ImageSpaceDepthOfField_FieldIndex.Sky;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                case ImageSpaceDepthOfField_FieldIndex.Range:
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                case ImageSpaceDepthOfField_FieldIndex.Range:
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                case ImageSpaceDepthOfField_FieldIndex.Range:
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                    return "Versioning";
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                    return "Strength";
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                    return "Distance";
                case ImageSpaceDepthOfField_FieldIndex.Range:
                    return "Range";
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                    return "Unknown";
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                    return "BlurRadius";
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return "Sky";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                case ImageSpaceDepthOfField_FieldIndex.Range:
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                case ImageSpaceDepthOfField_FieldIndex.Range:
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ImageSpaceDepthOfField_FieldIndex enu = (ImageSpaceDepthOfField_FieldIndex)index;
            switch (enu)
            {
                case ImageSpaceDepthOfField_FieldIndex.Versioning:
                    return typeof(ImageSpaceDepthOfField.VersioningBreaks);
                case ImageSpaceDepthOfField_FieldIndex.Strength:
                    return typeof(Single);
                case ImageSpaceDepthOfField_FieldIndex.Distance:
                    return typeof(Single);
                case ImageSpaceDepthOfField_FieldIndex.Range:
                    return typeof(Single);
                case ImageSpaceDepthOfField_FieldIndex.Unknown:
                    return typeof(Int16);
                case ImageSpaceDepthOfField_FieldIndex.BlurRadius:
                    return typeof(Byte);
                case ImageSpaceDepthOfField_FieldIndex.Sky:
                    return typeof(Boolean);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ImageSpaceDepthOfFieldXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.DNAM;
        public static readonly Type BinaryWriteTranslation = typeof(ImageSpaceDepthOfFieldBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ImageSpaceDepthOfFieldSetterCommon
    {
        public static readonly ImageSpaceDepthOfFieldSetterCommon Instance = new ImageSpaceDepthOfFieldSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImageSpaceDepthOfField item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Strength = default;
            item.Distance = default;
            item.Range = default;
            item.Unknown = default;
            item.BlurRadius = default;
            item.Sky = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IImageSpaceDepthOfField item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ImageSpaceDepthOfFieldXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImageSpaceDepthOfField item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ImageSpaceDepthOfFieldBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ImageSpaceDepthOfFieldCommon
    {
        public static readonly ImageSpaceDepthOfFieldCommon Instance = new ImageSpaceDepthOfFieldCommon();

        public ImageSpaceDepthOfField.Mask<bool> GetEqualsMask(
            IImageSpaceDepthOfFieldGetter item,
            IImageSpaceDepthOfFieldGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImageSpaceDepthOfField.Mask<bool>(false);
            ((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImageSpaceDepthOfFieldGetter item,
            IImageSpaceDepthOfFieldGetter rhs,
            ImageSpaceDepthOfField.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Strength = item.Strength.EqualsWithin(rhs.Strength);
            ret.Distance = item.Distance.EqualsWithin(rhs.Distance);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.BlurRadius = item.BlurRadius == rhs.BlurRadius;
            ret.Sky = item.Sky == rhs.Sky;
        }
        
        public string ToString(
            IImageSpaceDepthOfFieldGetter item,
            string? name = null,
            ImageSpaceDepthOfField.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IImageSpaceDepthOfFieldGetter item,
            FileGeneration fg,
            string? name = null,
            ImageSpaceDepthOfField.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ImageSpaceDepthOfField =>");
            }
            else
            {
                fg.AppendLine($"{name} (ImageSpaceDepthOfField) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IImageSpaceDepthOfFieldGetter item,
            FileGeneration fg,
            ImageSpaceDepthOfField.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Distance ?? true)
            {
                fg.AppendItem(item.Distance, "Distance");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.BlurRadius ?? true)
            {
                fg.AppendItem(item.BlurRadius, "BlurRadius");
            }
            if (printMask?.Sky ?? true)
            {
                fg.AppendItem(item.Sky, "Sky");
            }
        }
        
        public bool HasBeenSet(
            IImageSpaceDepthOfFieldGetter item,
            ImageSpaceDepthOfField.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IImageSpaceDepthOfFieldGetter item,
            ImageSpaceDepthOfField.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Strength = true;
            mask.Distance = true;
            mask.Range = true;
            mask.Unknown = true;
            mask.BlurRadius = true;
            mask.Sky = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImageSpaceDepthOfFieldGetter? lhs,
            IImageSpaceDepthOfFieldGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.Strength.EqualsWithin(rhs.Strength)) return false;
            if (!lhs.Distance.EqualsWithin(rhs.Distance)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.BlurRadius != rhs.BlurRadius) return false;
            if (lhs.Sky != rhs.Sky) return false;
            return true;
        }
        
        public virtual int GetHashCode(IImageSpaceDepthOfFieldGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Strength);
            hash.Add(item.Distance);
            hash.Add(item.Range);
            hash.Add(item.Unknown);
            hash.Add(item.BlurRadius);
            hash.Add(item.Sky);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ImageSpaceDepthOfField.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IImageSpaceDepthOfFieldGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IImageSpaceDepthOfFieldGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ImageSpaceDepthOfFieldSetterTranslationCommon
    {
        public static readonly ImageSpaceDepthOfFieldSetterTranslationCommon Instance = new ImageSpaceDepthOfFieldSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IImageSpaceDepthOfField item,
            IImageSpaceDepthOfFieldGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Distance) ?? true))
            {
                item.Distance = rhs.Distance;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if (rhs.Versioning.HasFlag(ImageSpaceDepthOfField.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.BlurRadius) ?? true))
            {
                item.BlurRadius = rhs.BlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Sky) ?? true))
            {
                item.Sky = rhs.Sky;
            }
        }
        
        #endregion
        
        public ImageSpaceDepthOfField DeepCopy(
            IImageSpaceDepthOfFieldGetter item,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            ImageSpaceDepthOfField ret = (ImageSpaceDepthOfField)((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ImageSpaceDepthOfField DeepCopy(
            IImageSpaceDepthOfFieldGetter item,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? copyMask = null)
        {
            ImageSpaceDepthOfField ret = (ImageSpaceDepthOfField)((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ImageSpaceDepthOfField DeepCopy(
            IImageSpaceDepthOfFieldGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImageSpaceDepthOfField ret = (ImageSpaceDepthOfField)((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ImageSpaceDepthOfField
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpaceDepthOfField_Registration.Instance;
        public static ImageSpaceDepthOfField_Registration Registration => ImageSpaceDepthOfField_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ImageSpaceDepthOfFieldCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ImageSpaceDepthOfFieldSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ImageSpaceDepthOfFieldSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IImageSpaceDepthOfFieldGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IImageSpaceDepthOfFieldGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IImageSpaceDepthOfFieldGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImageSpaceDepthOfFieldXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ImageSpaceDepthOfFieldXmlWriteTranslation Instance = new ImageSpaceDepthOfFieldXmlWriteTranslation();

        public static void WriteToNodeXml(
            IImageSpaceDepthOfFieldGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<ImageSpaceDepthOfField.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Strength) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Strength),
                    item: item.Strength,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Strength,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Distance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Distance),
                    item: item.Distance,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Distance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Range) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Range),
                    item: item.Range,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Range,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Unknown) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.BlurRadius) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlurRadius),
                    item: item.BlurRadius,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.BlurRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ImageSpaceDepthOfField_FieldIndex.Sky) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sky),
                    item: item.Sky,
                    fieldIndex: (int)ImageSpaceDepthOfField_FieldIndex.Sky,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IImageSpaceDepthOfFieldGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ImageSpaceDepthOfField");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ImageSpaceDepthOfField");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IImageSpaceDepthOfFieldGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IImageSpaceDepthOfFieldGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IImageSpaceDepthOfFieldGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ImageSpaceDepthOfFieldXmlCreateTranslation
    {
        public readonly static ImageSpaceDepthOfFieldXmlCreateTranslation Instance = new ImageSpaceDepthOfFieldXmlCreateTranslation();

        public static void FillPublicXml(
            IImageSpaceDepthOfField item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ImageSpaceDepthOfFieldXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IImageSpaceDepthOfField item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<ImageSpaceDepthOfField.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Strength);
                    try
                    {
                        item.Strength = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Distance":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Distance);
                    try
                    {
                        item.Distance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Range":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Range);
                    try
                    {
                        item.Range = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlurRadius":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.BlurRadius);
                    try
                    {
                        item.BlurRadius = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sky":
                    errorMask?.PushIndex((int)ImageSpaceDepthOfField_FieldIndex.Sky);
                    try
                    {
                        item.Sky = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ImageSpaceDepthOfFieldXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            XElement node,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ImageSpaceDepthOfField.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            string path,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            Stream stream,
            out ImageSpaceDepthOfField.ErrorMask errorMask,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            XElement node,
            string? name = null,
            ImageSpaceDepthOfField.TranslationMask? translationMask = null)
        {
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IImageSpaceDepthOfFieldGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImageSpaceDepthOfFieldBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ImageSpaceDepthOfFieldBinaryWriteTranslation Instance = new ImageSpaceDepthOfFieldBinaryWriteTranslation();

        static partial void WriteBinaryBlurRadiusCustom(
            MutagenWriter writer,
            IImageSpaceDepthOfFieldGetter item);

        public static void WriteBinaryBlurRadius(
            MutagenWriter writer,
            IImageSpaceDepthOfFieldGetter item)
        {
            WriteBinaryBlurRadiusCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinarySkyCustom(
            MutagenWriter writer,
            IImageSpaceDepthOfFieldGetter item);

        public static void WriteBinarySky(
            MutagenWriter writer,
            IImageSpaceDepthOfFieldGetter item)
        {
            WriteBinarySkyCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IImageSpaceDepthOfFieldGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Strength);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Distance);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Range);
            if (!item.Versioning.HasFlag(ImageSpaceDepthOfField.VersioningBreaks.Break0))
            {
                writer.Write(item.Unknown);
                ImageSpaceDepthOfFieldBinaryWriteTranslation.WriteBinaryBlurRadius(
                    writer: writer,
                    item: item);
                ImageSpaceDepthOfFieldBinaryWriteTranslation.WriteBinarySky(
                    writer: writer,
                    item: item);
            }
        }

        public void Write(
            MutagenWriter writer,
            IImageSpaceDepthOfFieldGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImageSpaceDepthOfFieldGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ImageSpaceDepthOfFieldBinaryCreateTranslation
    {
        public readonly static ImageSpaceDepthOfFieldBinaryCreateTranslation Instance = new ImageSpaceDepthOfFieldBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IImageSpaceDepthOfField item,
            MutagenFrame frame)
        {
            item.Strength = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Distance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= ImageSpaceDepthOfField.VersioningBreaks.Break0;
                return;
            }
            item.Unknown = frame.ReadInt16();
            ImageSpaceDepthOfFieldBinaryCreateTranslation.FillBinaryBlurRadiusCustom(
                frame: frame,
                item: item);
            ImageSpaceDepthOfFieldBinaryCreateTranslation.FillBinarySkyCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryBlurRadiusCustom(
            MutagenFrame frame,
            IImageSpaceDepthOfField item);

        static partial void FillBinarySkyCustom(
            MutagenFrame frame,
            IImageSpaceDepthOfField item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ImageSpaceDepthOfFieldBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IImageSpaceDepthOfFieldGetter item,
            MutagenWriter writer)
        {
            ((ImageSpaceDepthOfFieldBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImageSpaceDepthOfFieldBinaryOverlay :
        BinaryOverlay,
        IImageSpaceDepthOfFieldGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpaceDepthOfField_Registration.Instance;
        public static ImageSpaceDepthOfField_Registration Registration => ImageSpaceDepthOfField_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ImageSpaceDepthOfFieldCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ImageSpaceDepthOfFieldSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IImageSpaceDepthOfFieldGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IImageSpaceDepthOfFieldGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IImageSpaceDepthOfFieldGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IImageSpaceDepthOfFieldGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ImageSpaceDepthOfFieldXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ImageSpaceDepthOfFieldXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ImageSpaceDepthOfFieldBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceDepthOfFieldBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ImageSpaceDepthOfField.VersioningBreaks Versioning { get; private set; }
        public Single Strength => SpanExt.GetFloat(_data.Slice(0x0, 0x4));
        public Single Distance => SpanExt.GetFloat(_data.Slice(0x4, 0x4));
        public Single Range => SpanExt.GetFloat(_data.Slice(0x8, 0x4));
        public Int16 Unknown => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xC, 0x2));
        #region BlurRadius
        public Byte BlurRadius => GetBlurRadiusCustom(location: 0xE);
        protected int BlurRadiusEndingPos;
        partial void CustomBlurRadiusEndPos();
        #endregion
        #region Sky
        public Boolean Sky => GetSkyCustom(location: BlurRadiusEndingPos);
        protected int SkyEndingPos;
        partial void CustomSkyEndPos();
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImageSpaceDepthOfFieldBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ImageSpaceDepthOfFieldBinaryOverlay ImageSpaceDepthOfFieldFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ImageSpaceDepthOfFieldBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0xC)
            {
                ret.Versioning |= ImageSpaceDepthOfField.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ImageSpaceDepthOfFieldBinaryOverlay ImageSpaceDepthOfFieldFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ImageSpaceDepthOfFieldFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImageSpaceDepthOfFieldMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

