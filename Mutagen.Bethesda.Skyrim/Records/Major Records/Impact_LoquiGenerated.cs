/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Impact :
        SkyrimMajorRecord,
        IImpactInternal,
        ILoquiObjectSetter<Impact>,
        IEquatable<Impact>,
        IEqualsMask
    {
        #region Ctor
        protected Impact()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IImpactGetter.Model => this.Model;
        #endregion
        #region Duration
        public Single Duration { get; set; } = default;
        #endregion
        #region Orientation
        public Impact.OrientationType Orientation { get; set; } = default;
        #endregion
        #region AngleThreshold
        public Single AngleThreshold { get; set; } = default;
        #endregion
        #region PlacementRadius
        public Single PlacementRadius { get; set; } = default;
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default;
        #endregion
        #region Flags
        public Impact.Flag Flags { get; set; } = default;
        #endregion
        #region Result
        public Impact.ResultType Result { get; set; } = default;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default;
        #endregion
        #region Decal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Decal? _Decal;
        public Decal? Decal
        {
            get => _Decal;
            set => _Decal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDecalGetter? IImpactGetter.Decal => this.Decal;
        #endregion
        #region TextureSet
        public FormLinkNullable<TextureSet> TextureSet { get; set; } = new FormLinkNullable<TextureSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ITextureSetGetter> IImpactGetter.TextureSet => this.TextureSet;
        #endregion
        #region SecondaryTextureSet
        public FormLinkNullable<TextureSet> SecondaryTextureSet { get; set; } = new FormLinkNullable<TextureSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ITextureSetGetter> IImpactGetter.SecondaryTextureSet => this.SecondaryTextureSet;
        #endregion
        #region Sound1
        public FormLinkNullable<ISound> Sound1 { get; set; } = new FormLinkNullable<ISound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundGetter> IImpactGetter.Sound1 => this.Sound1;
        #endregion
        #region Sound2
        public FormLinkNullable<ISound> Sound2 { get; set; } = new FormLinkNullable<ISound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundGetter> IImpactGetter.Sound2 => this.Sound2;
        #endregion
        #region Hazard
        public FormLinkNullable<Hazard> Hazard { get; set; } = new FormLinkNullable<Hazard>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IHazardGetter> IImpactGetter.Hazard => this.Hazard;
        #endregion
        #region DATADataTypeState
        public Impact.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImpactMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImpactGetter rhs)) return false;
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Impact obj)
        {
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ImpactXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ImpactXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Impact CreateFromXml(
            XElement node,
            Impact.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Impact CreateFromXml(
            XElement node,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Impact CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Impact();
            ((ImpactSetterCommon)((IImpactGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Impact CreateFromXml(
            string path,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Impact CreateFromXml(
            string path,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Impact CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Impact CreateFromXml(
            Stream stream,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Impact CreateFromXml(
            Stream stream,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Impact CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Duration = initialValue;
                this.Orientation = initialValue;
                this.AngleThreshold = initialValue;
                this.PlacementRadius = initialValue;
                this.SoundLevel = initialValue;
                this.Flags = initialValue;
                this.Result = initialValue;
                this.Unknown = initialValue;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(initialValue, new Decal.Mask<TItem>(initialValue));
                this.TextureSet = initialValue;
                this.SecondaryTextureSet = initialValue;
                this.Sound1 = initialValue;
                this.Sound2 = initialValue;
                this.Hazard = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Model,
                TItem Duration,
                TItem Orientation,
                TItem AngleThreshold,
                TItem PlacementRadius,
                TItem SoundLevel,
                TItem Flags,
                TItem Result,
                TItem Unknown,
                TItem Decal,
                TItem TextureSet,
                TItem SecondaryTextureSet,
                TItem Sound1,
                TItem Sound2,
                TItem Hazard,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Duration = Duration;
                this.Orientation = Orientation;
                this.AngleThreshold = AngleThreshold;
                this.PlacementRadius = PlacementRadius;
                this.SoundLevel = SoundLevel;
                this.Flags = Flags;
                this.Result = Result;
                this.Unknown = Unknown;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(Decal, new Decal.Mask<TItem>(Decal));
                this.TextureSet = TextureSet;
                this.SecondaryTextureSet = SecondaryTextureSet;
                this.Sound1 = Sound1;
                this.Sound2 = Sound2;
                this.Hazard = Hazard;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Duration;
            public TItem Orientation;
            public TItem AngleThreshold;
            public TItem PlacementRadius;
            public TItem SoundLevel;
            public TItem Flags;
            public TItem Result;
            public TItem Unknown;
            public MaskItem<TItem, Decal.Mask<TItem>?>? Decal { get; set; }
            public TItem TextureSet;
            public TItem SecondaryTextureSet;
            public TItem Sound1;
            public TItem Sound2;
            public TItem Hazard;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                if (!object.Equals(this.Orientation, rhs.Orientation)) return false;
                if (!object.Equals(this.AngleThreshold, rhs.AngleThreshold)) return false;
                if (!object.Equals(this.PlacementRadius, rhs.PlacementRadius)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Result, rhs.Result)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Decal, rhs.Decal)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.SecondaryTextureSet, rhs.SecondaryTextureSet)) return false;
                if (!object.Equals(this.Sound1, rhs.Sound1)) return false;
                if (!object.Equals(this.Sound2, rhs.Sound2)) return false;
                if (!object.Equals(this.Hazard, rhs.Hazard)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.Duration);
                hash.Add(this.Orientation);
                hash.Add(this.AngleThreshold);
                hash.Add(this.PlacementRadius);
                hash.Add(this.SoundLevel);
                hash.Add(this.Flags);
                hash.Add(this.Result);
                hash.Add(this.Unknown);
                hash.Add(this.Decal);
                hash.Add(this.TextureSet);
                hash.Add(this.SecondaryTextureSet);
                hash.Add(this.Sound1);
                hash.Add(this.Sound2);
                hash.Add(this.Hazard);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Duration)) return false;
                if (!eval(this.Orientation)) return false;
                if (!eval(this.AngleThreshold)) return false;
                if (!eval(this.PlacementRadius)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Result)) return false;
                if (!eval(this.Unknown)) return false;
                if (Decal != null)
                {
                    if (!eval(this.Decal.Overall)) return false;
                    if (this.Decal.Specific != null && !this.Decal.Specific.All(eval)) return false;
                }
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.SecondaryTextureSet)) return false;
                if (!eval(this.Sound1)) return false;
                if (!eval(this.Sound2)) return false;
                if (!eval(this.Hazard)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Duration)) return true;
                if (eval(this.Orientation)) return true;
                if (eval(this.AngleThreshold)) return true;
                if (eval(this.PlacementRadius)) return true;
                if (eval(this.SoundLevel)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Result)) return true;
                if (eval(this.Unknown)) return true;
                if (Decal != null)
                {
                    if (eval(this.Decal.Overall)) return true;
                    if (this.Decal.Specific != null && this.Decal.Specific.Any(eval)) return true;
                }
                if (eval(this.TextureSet)) return true;
                if (eval(this.SecondaryTextureSet)) return true;
                if (eval(this.Sound1)) return true;
                if (eval(this.Sound2)) return true;
                if (eval(this.Hazard)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Impact.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Duration = eval(this.Duration);
                obj.Orientation = eval(this.Orientation);
                obj.AngleThreshold = eval(this.AngleThreshold);
                obj.PlacementRadius = eval(this.PlacementRadius);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.Flags = eval(this.Flags);
                obj.Result = eval(this.Result);
                obj.Unknown = eval(this.Unknown);
                obj.Decal = this.Decal == null ? null : new MaskItem<R, Decal.Mask<R>?>(eval(this.Decal.Overall), this.Decal.Specific?.Translate(eval));
                obj.TextureSet = eval(this.TextureSet);
                obj.SecondaryTextureSet = eval(this.SecondaryTextureSet);
                obj.Sound1 = eval(this.Sound1);
                obj.Sound2 = eval(this.Sound2);
                obj.Hazard = eval(this.Hazard);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Impact.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Impact.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Impact.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Duration ?? true)
                    {
                        fg.AppendItem(Duration, "Duration");
                    }
                    if (printMask?.Orientation ?? true)
                    {
                        fg.AppendItem(Orientation, "Orientation");
                    }
                    if (printMask?.AngleThreshold ?? true)
                    {
                        fg.AppendItem(AngleThreshold, "AngleThreshold");
                    }
                    if (printMask?.PlacementRadius ?? true)
                    {
                        fg.AppendItem(PlacementRadius, "PlacementRadius");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        fg.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Result ?? true)
                    {
                        fg.AppendItem(Result, "Result");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Decal?.Overall ?? true)
                    {
                        Decal?.ToString(fg);
                    }
                    if (printMask?.TextureSet ?? true)
                    {
                        fg.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.SecondaryTextureSet ?? true)
                    {
                        fg.AppendItem(SecondaryTextureSet, "SecondaryTextureSet");
                    }
                    if (printMask?.Sound1 ?? true)
                    {
                        fg.AppendItem(Sound1, "Sound1");
                    }
                    if (printMask?.Sound2 ?? true)
                    {
                        fg.AppendItem(Sound2, "Sound2");
                    }
                    if (printMask?.Hazard ?? true)
                    {
                        fg.AppendItem(Hazard, "Hazard");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Duration;
            public Exception? Orientation;
            public Exception? AngleThreshold;
            public Exception? PlacementRadius;
            public Exception? SoundLevel;
            public Exception? Flags;
            public Exception? Result;
            public Exception? Unknown;
            public MaskItem<Exception?, Decal.ErrorMask?>? Decal;
            public Exception? TextureSet;
            public Exception? SecondaryTextureSet;
            public Exception? Sound1;
            public Exception? Sound2;
            public Exception? Hazard;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Model:
                        return Model;
                    case Impact_FieldIndex.Duration:
                        return Duration;
                    case Impact_FieldIndex.Orientation:
                        return Orientation;
                    case Impact_FieldIndex.AngleThreshold:
                        return AngleThreshold;
                    case Impact_FieldIndex.PlacementRadius:
                        return PlacementRadius;
                    case Impact_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Impact_FieldIndex.Flags:
                        return Flags;
                    case Impact_FieldIndex.Result:
                        return Result;
                    case Impact_FieldIndex.Unknown:
                        return Unknown;
                    case Impact_FieldIndex.Decal:
                        return Decal;
                    case Impact_FieldIndex.TextureSet:
                        return TextureSet;
                    case Impact_FieldIndex.SecondaryTextureSet:
                        return SecondaryTextureSet;
                    case Impact_FieldIndex.Sound1:
                        return Sound1;
                    case Impact_FieldIndex.Sound2:
                        return Sound2;
                    case Impact_FieldIndex.Hazard:
                        return Hazard;
                    case Impact_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    case Impact_FieldIndex.Orientation:
                        this.Orientation = ex;
                        break;
                    case Impact_FieldIndex.AngleThreshold:
                        this.AngleThreshold = ex;
                        break;
                    case Impact_FieldIndex.PlacementRadius:
                        this.PlacementRadius = ex;
                        break;
                    case Impact_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Impact_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Impact_FieldIndex.Result:
                        this.Result = ex;
                        break;
                    case Impact_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Impact_FieldIndex.Decal:
                        this.Decal = new MaskItem<Exception?, Decal.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case Impact_FieldIndex.SecondaryTextureSet:
                        this.SecondaryTextureSet = ex;
                        break;
                    case Impact_FieldIndex.Sound1:
                        this.Sound1 = ex;
                        break;
                    case Impact_FieldIndex.Sound2:
                        this.Sound2 = ex;
                        break;
                    case Impact_FieldIndex.Hazard:
                        this.Hazard = ex;
                        break;
                    case Impact_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Orientation:
                        this.Orientation = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.AngleThreshold:
                        this.AngleThreshold = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.PlacementRadius:
                        this.PlacementRadius = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Result:
                        this.Result = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Decal:
                        this.Decal = (MaskItem<Exception?, Decal.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.SecondaryTextureSet:
                        this.SecondaryTextureSet = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Sound1:
                        this.Sound1 = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Sound2:
                        this.Sound2 = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Hazard:
                        this.Hazard = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Duration != null) return true;
                if (Orientation != null) return true;
                if (AngleThreshold != null) return true;
                if (PlacementRadius != null) return true;
                if (SoundLevel != null) return true;
                if (Flags != null) return true;
                if (Result != null) return true;
                if (Unknown != null) return true;
                if (Decal != null) return true;
                if (TextureSet != null) return true;
                if (SecondaryTextureSet != null) return true;
                if (Sound1 != null) return true;
                if (Sound2 != null) return true;
                if (Hazard != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                fg.AppendItem(Duration, "Duration");
                fg.AppendItem(Orientation, "Orientation");
                fg.AppendItem(AngleThreshold, "AngleThreshold");
                fg.AppendItem(PlacementRadius, "PlacementRadius");
                fg.AppendItem(SoundLevel, "SoundLevel");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Result, "Result");
                fg.AppendItem(Unknown, "Unknown");
                Decal?.ToString(fg);
                fg.AppendItem(TextureSet, "TextureSet");
                fg.AppendItem(SecondaryTextureSet, "SecondaryTextureSet");
                fg.AppendItem(Sound1, "Sound1");
                fg.AppendItem(Sound2, "Sound2");
                fg.AppendItem(Hazard, "Hazard");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Duration = this.Duration.Combine(rhs.Duration);
                ret.Orientation = this.Orientation.Combine(rhs.Orientation);
                ret.AngleThreshold = this.AngleThreshold.Combine(rhs.AngleThreshold);
                ret.PlacementRadius = this.PlacementRadius.Combine(rhs.PlacementRadius);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Result = this.Result.Combine(rhs.Result);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Decal = this.Decal.Combine(rhs.Decal, (l, r) => l.Combine(r));
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.SecondaryTextureSet = this.SecondaryTextureSet.Combine(rhs.SecondaryTextureSet);
                ret.Sound1 = this.Sound1.Combine(rhs.Sound1);
                ret.Sound2 = this.Sound2.Combine(rhs.Sound2);
                ret.Hazard = this.Hazard.Combine(rhs.Hazard);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Duration;
            public bool Orientation;
            public bool AngleThreshold;
            public bool PlacementRadius;
            public bool SoundLevel;
            public bool Flags;
            public bool Result;
            public bool Unknown;
            public MaskItem<bool, Decal.TranslationMask?> Decal;
            public bool TextureSet;
            public bool SecondaryTextureSet;
            public bool Sound1;
            public bool Sound2;
            public bool Hazard;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Duration = defaultOn;
                this.Orientation = defaultOn;
                this.AngleThreshold = defaultOn;
                this.PlacementRadius = defaultOn;
                this.SoundLevel = defaultOn;
                this.Flags = defaultOn;
                this.Result = defaultOn;
                this.Unknown = defaultOn;
                this.Decal = new MaskItem<bool, Decal.TranslationMask?>(defaultOn, null);
                this.TextureSet = defaultOn;
                this.SecondaryTextureSet = defaultOn;
                this.Sound1 = defaultOn;
                this.Sound2 = defaultOn;
                this.Hazard = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Duration, null));
                ret.Add((Orientation, null));
                ret.Add((AngleThreshold, null));
                ret.Add((PlacementRadius, null));
                ret.Add((SoundLevel, null));
                ret.Add((Flags, null));
                ret.Add((Result, null));
                ret.Add((Unknown, null));
                ret.Add((Decal?.Overall ?? true, Decal?.Specific?.GetCrystal()));
                ret.Add((TextureSet, null));
                ret.Add((SecondaryTextureSet, null));
                ret.Add((Sound1, null));
                ret.Add((Sound2, null));
                ret.Add((Hazard, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Impact_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ImpactCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ImpactCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactCommon.Instance.RemapLinks(this, mapping);
        public Impact(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Impact(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Impact(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Impact CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Impact CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Impact();
            ((ImpactSetterCommon)((IImpactGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IImpactGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ImpactSetterCommon)((IImpactGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Impact GetNew()
        {
            return new Impact();
        }

    }
    #endregion

    #region Interface
    public partial interface IImpact :
        IImpactGetter,
        ISkyrimMajorRecord,
        IModeled,
        ILoquiObjectSetter<IImpactInternal>
    {
        new Model? Model { get; set; }
        new Single Duration { get; set; }
        new Impact.OrientationType Orientation { get; set; }
        new Single AngleThreshold { get; set; }
        new Single PlacementRadius { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new Impact.Flag Flags { get; set; }
        new Impact.ResultType Result { get; set; }
        new Int16 Unknown { get; set; }
        new Decal? Decal { get; set; }
        new FormLinkNullable<TextureSet> TextureSet { get; set; }
        new FormLinkNullable<TextureSet> SecondaryTextureSet { get; set; }
        new FormLinkNullable<ISound> Sound1 { get; set; }
        new FormLinkNullable<ISound> Sound2 { get; set; }
        new FormLinkNullable<Hazard> Hazard { get; set; }
        new Impact.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IImpactInternal :
        ISkyrimMajorRecordInternal,
        IImpact,
        IImpactGetter
    {
    }

    public partial interface IImpactGetter :
        ISkyrimMajorRecordGetter,
        IModeledGetter,
        ILoquiObject<IImpactGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Impact_Registration.Instance;
        IModelGetter? Model { get; }
        Single Duration { get; }
        Impact.OrientationType Orientation { get; }
        Single AngleThreshold { get; }
        Single PlacementRadius { get; }
        SoundLevel SoundLevel { get; }
        Impact.Flag Flags { get; }
        Impact.ResultType Result { get; }
        Int16 Unknown { get; }
        IDecalGetter? Decal { get; }
        IFormLinkNullable<ITextureSetGetter> TextureSet { get; }
        IFormLinkNullable<ITextureSetGetter> SecondaryTextureSet { get; }
        IFormLinkNullable<ISoundGetter> Sound1 { get; }
        IFormLinkNullable<ISoundGetter> Sound2 { get; }
        IFormLinkNullable<IHazardGetter> Hazard { get; }
        Impact.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImpactMixIn
    {
        public static void Clear(this IImpactInternal item)
        {
            ((ImpactSetterCommon)((IImpactGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Impact.Mask<bool> GetEqualsMask(
            this IImpactGetter item,
            IImpactGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IImpactGetter item,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IImpactGetter item,
            FileGeneration fg,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IImpactGetter item,
            Impact.Mask<bool?> checkMask)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Impact.Mask<bool> GetHasBeenSetMask(this IImpactGetter item)
        {
            var ret = new Impact.Mask<bool>(false);
            ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IImpactGetter item,
            IImpactGetter rhs)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IImpactInternal lhs,
            IImpactGetter rhs,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImpactSetterTranslationCommon)((IImpactGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImpactInternal lhs,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImpactSetterTranslationCommon)((IImpactGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            Impact.TranslationMask? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IImpactInternal item,
            XElement node,
            Impact.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IImpactInternal item,
            XElement node,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ImpactSetterCommon)((IImpactGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            string path,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            string path,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            Stream stream,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            Stream stream,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IImpactInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Impact.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IImpactInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IImpactInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactSetterCommon)((IImpactGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Impact_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Model = 6,
        Duration = 7,
        Orientation = 8,
        AngleThreshold = 9,
        PlacementRadius = 10,
        SoundLevel = 11,
        Flags = 12,
        Result = 13,
        Unknown = 14,
        Decal = 15,
        TextureSet = 16,
        SecondaryTextureSet = 17,
        Sound1 = 18,
        Sound2 = 19,
        Hazard = 20,
        DATADataTypeState = 21,
    }
    #endregion

    #region Registration
    public partial class Impact_Registration : ILoquiRegistration
    {
        public static readonly Impact_Registration Instance = new Impact_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 439,
            version: 0);

        public const string GUID = "d508129e-9303-4d72-bbb5-dc4abc363372";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Impact.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Impact.ErrorMask);

        public static readonly Type ClassType = typeof(Impact);

        public static readonly Type GetterType = typeof(IImpactGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImpact);

        public static readonly Type? InternalSetterType = typeof(IImpactInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Impact";

        public const string Name = "Impact";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Impact_FieldIndex.Model;
                case "DURATION":
                    return (ushort)Impact_FieldIndex.Duration;
                case "ORIENTATION":
                    return (ushort)Impact_FieldIndex.Orientation;
                case "ANGLETHRESHOLD":
                    return (ushort)Impact_FieldIndex.AngleThreshold;
                case "PLACEMENTRADIUS":
                    return (ushort)Impact_FieldIndex.PlacementRadius;
                case "SOUNDLEVEL":
                    return (ushort)Impact_FieldIndex.SoundLevel;
                case "FLAGS":
                    return (ushort)Impact_FieldIndex.Flags;
                case "RESULT":
                    return (ushort)Impact_FieldIndex.Result;
                case "UNKNOWN":
                    return (ushort)Impact_FieldIndex.Unknown;
                case "DECAL":
                    return (ushort)Impact_FieldIndex.Decal;
                case "TEXTURESET":
                    return (ushort)Impact_FieldIndex.TextureSet;
                case "SECONDARYTEXTURESET":
                    return (ushort)Impact_FieldIndex.SecondaryTextureSet;
                case "SOUND1":
                    return (ushort)Impact_FieldIndex.Sound1;
                case "SOUND2":
                    return (ushort)Impact_FieldIndex.Sound2;
                case "HAZARD":
                    return (ushort)Impact_FieldIndex.Hazard;
                case "DATADATATYPESTATE":
                    return (ushort)Impact_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                case Impact_FieldIndex.Duration:
                case Impact_FieldIndex.Orientation:
                case Impact_FieldIndex.AngleThreshold:
                case Impact_FieldIndex.PlacementRadius:
                case Impact_FieldIndex.SoundLevel:
                case Impact_FieldIndex.Flags:
                case Impact_FieldIndex.Result:
                case Impact_FieldIndex.Unknown:
                case Impact_FieldIndex.Decal:
                case Impact_FieldIndex.TextureSet:
                case Impact_FieldIndex.SecondaryTextureSet:
                case Impact_FieldIndex.Sound1:
                case Impact_FieldIndex.Sound2:
                case Impact_FieldIndex.Hazard:
                case Impact_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                case Impact_FieldIndex.Decal:
                    return true;
                case Impact_FieldIndex.Duration:
                case Impact_FieldIndex.Orientation:
                case Impact_FieldIndex.AngleThreshold:
                case Impact_FieldIndex.PlacementRadius:
                case Impact_FieldIndex.SoundLevel:
                case Impact_FieldIndex.Flags:
                case Impact_FieldIndex.Result:
                case Impact_FieldIndex.Unknown:
                case Impact_FieldIndex.TextureSet:
                case Impact_FieldIndex.SecondaryTextureSet:
                case Impact_FieldIndex.Sound1:
                case Impact_FieldIndex.Sound2:
                case Impact_FieldIndex.Hazard:
                case Impact_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                case Impact_FieldIndex.Duration:
                case Impact_FieldIndex.Orientation:
                case Impact_FieldIndex.AngleThreshold:
                case Impact_FieldIndex.PlacementRadius:
                case Impact_FieldIndex.SoundLevel:
                case Impact_FieldIndex.Flags:
                case Impact_FieldIndex.Result:
                case Impact_FieldIndex.Unknown:
                case Impact_FieldIndex.Decal:
                case Impact_FieldIndex.TextureSet:
                case Impact_FieldIndex.SecondaryTextureSet:
                case Impact_FieldIndex.Sound1:
                case Impact_FieldIndex.Sound2:
                case Impact_FieldIndex.Hazard:
                case Impact_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                    return "Model";
                case Impact_FieldIndex.Duration:
                    return "Duration";
                case Impact_FieldIndex.Orientation:
                    return "Orientation";
                case Impact_FieldIndex.AngleThreshold:
                    return "AngleThreshold";
                case Impact_FieldIndex.PlacementRadius:
                    return "PlacementRadius";
                case Impact_FieldIndex.SoundLevel:
                    return "SoundLevel";
                case Impact_FieldIndex.Flags:
                    return "Flags";
                case Impact_FieldIndex.Result:
                    return "Result";
                case Impact_FieldIndex.Unknown:
                    return "Unknown";
                case Impact_FieldIndex.Decal:
                    return "Decal";
                case Impact_FieldIndex.TextureSet:
                    return "TextureSet";
                case Impact_FieldIndex.SecondaryTextureSet:
                    return "SecondaryTextureSet";
                case Impact_FieldIndex.Sound1:
                    return "Sound1";
                case Impact_FieldIndex.Sound2:
                    return "Sound2";
                case Impact_FieldIndex.Hazard:
                    return "Hazard";
                case Impact_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                case Impact_FieldIndex.Duration:
                case Impact_FieldIndex.Orientation:
                case Impact_FieldIndex.AngleThreshold:
                case Impact_FieldIndex.PlacementRadius:
                case Impact_FieldIndex.SoundLevel:
                case Impact_FieldIndex.Flags:
                case Impact_FieldIndex.Result:
                case Impact_FieldIndex.Unknown:
                case Impact_FieldIndex.Decal:
                case Impact_FieldIndex.TextureSet:
                case Impact_FieldIndex.SecondaryTextureSet:
                case Impact_FieldIndex.Sound1:
                case Impact_FieldIndex.Sound2:
                case Impact_FieldIndex.Hazard:
                case Impact_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                case Impact_FieldIndex.Duration:
                case Impact_FieldIndex.Orientation:
                case Impact_FieldIndex.AngleThreshold:
                case Impact_FieldIndex.PlacementRadius:
                case Impact_FieldIndex.SoundLevel:
                case Impact_FieldIndex.Flags:
                case Impact_FieldIndex.Result:
                case Impact_FieldIndex.Unknown:
                case Impact_FieldIndex.Decal:
                case Impact_FieldIndex.TextureSet:
                case Impact_FieldIndex.SecondaryTextureSet:
                case Impact_FieldIndex.Sound1:
                case Impact_FieldIndex.Sound2:
                case Impact_FieldIndex.Hazard:
                case Impact_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Impact_FieldIndex enu = (Impact_FieldIndex)index;
            switch (enu)
            {
                case Impact_FieldIndex.Model:
                    return typeof(Model);
                case Impact_FieldIndex.Duration:
                    return typeof(Single);
                case Impact_FieldIndex.Orientation:
                    return typeof(Impact.OrientationType);
                case Impact_FieldIndex.AngleThreshold:
                    return typeof(Single);
                case Impact_FieldIndex.PlacementRadius:
                    return typeof(Single);
                case Impact_FieldIndex.SoundLevel:
                    return typeof(SoundLevel);
                case Impact_FieldIndex.Flags:
                    return typeof(Impact.Flag);
                case Impact_FieldIndex.Result:
                    return typeof(Impact.ResultType);
                case Impact_FieldIndex.Unknown:
                    return typeof(Int16);
                case Impact_FieldIndex.Decal:
                    return typeof(Decal);
                case Impact_FieldIndex.TextureSet:
                    return typeof(FormLinkNullable<TextureSet>);
                case Impact_FieldIndex.SecondaryTextureSet:
                    return typeof(FormLinkNullable<TextureSet>);
                case Impact_FieldIndex.Sound1:
                    return typeof(FormLinkNullable<ISound>);
                case Impact_FieldIndex.Sound2:
                    return typeof(FormLinkNullable<ISound>);
                case Impact_FieldIndex.Hazard:
                    return typeof(FormLinkNullable<Hazard>);
                case Impact_FieldIndex.DATADataTypeState:
                    return typeof(Impact.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ImpactXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.IPCT;
        public static readonly Type BinaryWriteTranslation = typeof(ImpactBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ImpactSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ImpactSetterCommon Instance = new ImpactSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImpactInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Duration = default;
            item.Orientation = default;
            item.AngleThreshold = default;
            item.PlacementRadius = default;
            item.SoundLevel = default;
            item.Flags = default;
            item.Result = default;
            item.Unknown = default;
            item.Decal = null;
            item.TextureSet = FormLinkNullable<TextureSet>.Null;
            item.SecondaryTextureSet = FormLinkNullable<TextureSet>.Null;
            item.Sound1 = FormLinkNullable<ISound>.Null;
            item.Sound2 = FormLinkNullable<ISound>.Null;
            item.Hazard = FormLinkNullable<Hazard>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IImpactInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImpactInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IImpactInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IImpactInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ImpactXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Impact)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Impact)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImpactInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IImpactInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ImpactBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImpactBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Impact)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Impact)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ImpactCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ImpactCommon Instance = new ImpactCommon();

        public Impact.Mask<bool> GetEqualsMask(
            IImpactGetter item,
            IImpactGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Impact.Mask<bool>(false);
            ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImpactGetter item,
            IImpactGetter rhs,
            Impact.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Duration = item.Duration.EqualsWithin(rhs.Duration);
            ret.Orientation = item.Orientation == rhs.Orientation;
            ret.AngleThreshold = item.AngleThreshold.EqualsWithin(rhs.AngleThreshold);
            ret.PlacementRadius = item.PlacementRadius.EqualsWithin(rhs.PlacementRadius);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Result = item.Result == rhs.Result;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Decal = EqualsMaskHelper.EqualsHelper(
                item.Decal,
                rhs.Decal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TextureSet = object.Equals(item.TextureSet, rhs.TextureSet);
            ret.SecondaryTextureSet = object.Equals(item.SecondaryTextureSet, rhs.SecondaryTextureSet);
            ret.Sound1 = object.Equals(item.Sound1, rhs.Sound1);
            ret.Sound2 = object.Equals(item.Sound2, rhs.Sound2);
            ret.Hazard = object.Equals(item.Hazard, rhs.Hazard);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IImpactGetter item,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IImpactGetter item,
            FileGeneration fg,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Impact =>");
            }
            else
            {
                fg.AppendLine($"{name} (Impact) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IImpactGetter item,
            FileGeneration fg,
            Impact.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Duration ?? true)
            {
                fg.AppendItem(item.Duration, "Duration");
            }
            if (printMask?.Orientation ?? true)
            {
                fg.AppendItem(item.Orientation, "Orientation");
            }
            if (printMask?.AngleThreshold ?? true)
            {
                fg.AppendItem(item.AngleThreshold, "AngleThreshold");
            }
            if (printMask?.PlacementRadius ?? true)
            {
                fg.AppendItem(item.PlacementRadius, "PlacementRadius");
            }
            if (printMask?.SoundLevel ?? true)
            {
                fg.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Result ?? true)
            {
                fg.AppendItem(item.Result, "Result");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.Decal?.Overall ?? true)
                && item.Decal.TryGet(out var DecalItem))
            {
                DecalItem?.ToString(fg, "Decal");
            }
            if ((printMask?.TextureSet ?? true)
                && item.TextureSet.TryGet(out var TextureSetItem))
            {
                fg.AppendItem(TextureSetItem, "TextureSet");
            }
            if ((printMask?.SecondaryTextureSet ?? true)
                && item.SecondaryTextureSet.TryGet(out var SecondaryTextureSetItem))
            {
                fg.AppendItem(SecondaryTextureSetItem, "SecondaryTextureSet");
            }
            if ((printMask?.Sound1 ?? true)
                && item.Sound1.TryGet(out var Sound1Item))
            {
                fg.AppendItem(Sound1Item, "Sound1");
            }
            if ((printMask?.Sound2 ?? true)
                && item.Sound2.TryGet(out var Sound2Item))
            {
                fg.AppendItem(Sound2Item, "Sound2");
            }
            if ((printMask?.Hazard ?? true)
                && item.Hazard.TryGet(out var HazardItem))
            {
                fg.AppendItem(HazardItem, "Hazard");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IImpactGetter item,
            Impact.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Decal?.Overall.HasValue ?? false && checkMask.Decal.Overall.Value != (item.Decal != null)) return false;
            if (checkMask.Decal?.Specific != null && (item.Decal == null || !item.Decal.HasBeenSet(checkMask.Decal.Specific))) return false;
            if (checkMask.TextureSet.HasValue && checkMask.TextureSet.Value != (item.TextureSet.FormKey != null)) return false;
            if (checkMask.SecondaryTextureSet.HasValue && checkMask.SecondaryTextureSet.Value != (item.SecondaryTextureSet.FormKey != null)) return false;
            if (checkMask.Sound1.HasValue && checkMask.Sound1.Value != (item.Sound1.FormKey != null)) return false;
            if (checkMask.Sound2.HasValue && checkMask.Sound2.Value != (item.Sound2.FormKey != null)) return false;
            if (checkMask.Hazard.HasValue && checkMask.Hazard.Value != (item.Hazard.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IImpactGetter item,
            Impact.Mask<bool> mask)
        {
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Duration = true;
            mask.Orientation = true;
            mask.AngleThreshold = true;
            mask.PlacementRadius = true;
            mask.SoundLevel = true;
            mask.Flags = true;
            mask.Result = true;
            mask.Unknown = true;
            var itemDecal = item.Decal;
            mask.Decal = new MaskItem<bool, Decal.Mask<bool>?>(itemDecal != null, itemDecal?.GetHasBeenSetMask());
            mask.TextureSet = (item.TextureSet.FormKey != null);
            mask.SecondaryTextureSet = (item.SecondaryTextureSet.FormKey != null);
            mask.Sound1 = (item.Sound1.FormKey != null);
            mask.Sound2 = (item.Sound2.FormKey != null);
            mask.Hazard = (item.Hazard.FormKey != null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Impact_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Impact_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Impact_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Impact_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Impact_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Impact_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Impact_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Impact_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Impact_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImpactGetter? lhs,
            IImpactGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Duration.EqualsWithin(rhs.Duration)) return false;
            if (lhs.Orientation != rhs.Orientation) return false;
            if (!lhs.AngleThreshold.EqualsWithin(rhs.AngleThreshold)) return false;
            if (!lhs.PlacementRadius.EqualsWithin(rhs.PlacementRadius)) return false;
            if (lhs.SoundLevel != rhs.SoundLevel) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Result != rhs.Result) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!object.Equals(lhs.Decal, rhs.Decal)) return false;
            if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            if (!lhs.SecondaryTextureSet.Equals(rhs.SecondaryTextureSet)) return false;
            if (!lhs.Sound1.Equals(rhs.Sound1)) return false;
            if (!lhs.Sound2.Equals(rhs.Sound2)) return false;
            if (!lhs.Hazard.Equals(rhs.Hazard)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IImpactGetter?)lhs,
                rhs: rhs as IImpactGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IImpactGetter?)lhs,
                rhs: rhs as IImpactGetter);
        }
        
        public virtual int GetHashCode(IImpactGetter item)
        {
            var hash = new HashCode();
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Duration);
            hash.Add(item.Orientation);
            hash.Add(item.AngleThreshold);
            hash.Add(item.PlacementRadius);
            hash.Add(item.SoundLevel);
            hash.Add(item.Flags);
            hash.Add(item.Result);
            hash.Add(item.Unknown);
            if (item.Decal.TryGet(out var Decalitem))
            {
                hash.Add(Decalitem);
            }
            if (item.TextureSet.TryGet(out var TextureSetitem))
            {
                hash.Add(TextureSetitem);
            }
            if (item.SecondaryTextureSet.TryGet(out var SecondaryTextureSetitem))
            {
                hash.Add(SecondaryTextureSetitem);
            }
            if (item.Sound1.TryGet(out var Sound1item))
            {
                hash.Add(Sound1item);
            }
            if (item.Sound2.TryGet(out var Sound2item))
            {
                hash.Add(Sound2item);
            }
            if (item.Hazard.TryGet(out var Hazarditem))
            {
                hash.Add(Hazarditem);
            }
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Impact.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IImpactGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.TextureSet.FormKey.TryGet(out var TextureSetKey))
            {
                yield return TextureSetKey;
            }
            if (obj.SecondaryTextureSet.FormKey.TryGet(out var SecondaryTextureSetKey))
            {
                yield return SecondaryTextureSetKey;
            }
            if (obj.Sound1.FormKey.TryGet(out var Sound1Key))
            {
                yield return Sound1Key;
            }
            if (obj.Sound2.FormKey.TryGet(out var Sound2Key))
            {
                yield return Sound2Key;
            }
            if (obj.Hazard.FormKey.TryGet(out var HazardKey))
            {
                yield return HazardKey;
            }
            yield break;
        }
        
        public void RemapLinks(IImpactGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Impact obj, Impact rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Impact(getNextFormKey());
            ret.DeepCopyIn((Impact)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Impact)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ImpactSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ImpactSetterTranslationCommon Instance = new ImpactSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IImpactInternal item,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IImpact item,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Orientation) ?? true))
            {
                item.Orientation = rhs.Orientation;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.AngleThreshold) ?? true))
            {
                item.AngleThreshold = rhs.AngleThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.PlacementRadius) ?? true))
            {
                item.PlacementRadius = rhs.PlacementRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Result) ?? true))
            {
                item.Result = rhs.Result;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Decal) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.Decal);
                try
                {
                    if(rhs.Decal.TryGet(out var rhsDecal))
                    {
                        item.Decal = rhsDecal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.Decal));
                    }
                    else
                    {
                        item.Decal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet = rhs.TextureSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.SecondaryTextureSet) ?? true))
            {
                item.SecondaryTextureSet = rhs.SecondaryTextureSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Sound1) ?? true))
            {
                item.Sound1 = rhs.Sound1.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Sound2) ?? true))
            {
                item.Sound2 = rhs.Sound2.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Hazard) ?? true))
            {
                item.Hazard = rhs.Hazard.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IImpactInternal)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IImpact)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IImpactInternal)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IImpact)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Impact DeepCopy(
            IImpactGetter item,
            Impact.TranslationMask? copyMask = null)
        {
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Impact DeepCopy(
            IImpactGetter item,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Impact DeepCopy(
            IImpactGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Impact
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Impact_Registration.Instance;
        public new static Impact_Registration Registration => Impact_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImpactSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImpactXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ImpactXmlWriteTranslation Instance = new ImpactXmlWriteTranslation();

        public static void WriteToNodeXml(
            IImpactGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Impact_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Impact_FieldIndex.Model));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Duration) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Duration),
                    item: item.Duration,
                    fieldIndex: (int)Impact_FieldIndex.Duration,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Orientation) ?? true))
            {
                EnumXmlTranslation<Impact.OrientationType>.Instance.Write(
                    node: node,
                    name: nameof(item.Orientation),
                    item: item.Orientation,
                    fieldIndex: (int)Impact_FieldIndex.Orientation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.AngleThreshold) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AngleThreshold),
                    item: item.AngleThreshold,
                    fieldIndex: (int)Impact_FieldIndex.AngleThreshold,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.PlacementRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PlacementRadius),
                    item: item.PlacementRadius,
                    fieldIndex: (int)Impact_FieldIndex.PlacementRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.SoundLevel) ?? true))
            {
                EnumXmlTranslation<SoundLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.SoundLevel),
                    item: item.SoundLevel,
                    fieldIndex: (int)Impact_FieldIndex.SoundLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Impact.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Impact_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Result) ?? true))
            {
                EnumXmlTranslation<Impact.ResultType>.Instance.Write(
                    node: node,
                    name: nameof(item.Result),
                    item: item.Result,
                    fieldIndex: (int)Impact_FieldIndex.Result,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Unknown) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Impact_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Decal != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Decal) ?? true))
            {
                if (item.Decal.TryGet(out var DecalItem))
                {
                    ((DecalXmlWriteTranslation)((IXmlItem)DecalItem).XmlWriteTranslator).Write(
                        item: DecalItem,
                        node: node,
                        name: nameof(item.Decal),
                        fieldIndex: (int)Impact_FieldIndex.Decal,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Impact_FieldIndex.Decal));
                }
            }
            if ((item.TextureSet.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.TextureSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureSet),
                    item: item.TextureSet.FormKey,
                    fieldIndex: (int)Impact_FieldIndex.TextureSet,
                    errorMask: errorMask);
            }
            if ((item.SecondaryTextureSet.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.SecondaryTextureSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SecondaryTextureSet),
                    item: item.SecondaryTextureSet.FormKey,
                    fieldIndex: (int)Impact_FieldIndex.SecondaryTextureSet,
                    errorMask: errorMask);
            }
            if ((item.Sound1.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Sound1) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound1),
                    item: item.Sound1.FormKey,
                    fieldIndex: (int)Impact_FieldIndex.Sound1,
                    errorMask: errorMask);
            }
            if ((item.Sound2.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Sound2) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound2),
                    item: item.Sound2.FormKey,
                    fieldIndex: (int)Impact_FieldIndex.Sound2,
                    errorMask: errorMask);
            }
            if ((item.Hazard.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Impact_FieldIndex.Hazard) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Hazard),
                    item: item.Hazard.FormKey,
                    fieldIndex: (int)Impact_FieldIndex.Hazard,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Impact_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Impact.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Impact_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IImpactGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Impact");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Impact");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IImpactGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IImpactGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IImpactGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ImpactXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ImpactXmlCreateTranslation Instance = new ImpactXmlCreateTranslation();

        public static void FillPublicXml(
            IImpactInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ImpactXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IImpactInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Model":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Impact_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Duration":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Duration);
                    try
                    {
                        item.Duration = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Orientation":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Orientation);
                    try
                    {
                        item.Orientation = EnumXmlTranslation<Impact.OrientationType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AngleThreshold":
                    errorMask?.PushIndex((int)Impact_FieldIndex.AngleThreshold);
                    try
                    {
                        item.AngleThreshold = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PlacementRadius":
                    errorMask?.PushIndex((int)Impact_FieldIndex.PlacementRadius);
                    try
                    {
                        item.PlacementRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundLevel":
                    errorMask?.PushIndex((int)Impact_FieldIndex.SoundLevel);
                    try
                    {
                        item.SoundLevel = EnumXmlTranslation<SoundLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Impact.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Result":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Result);
                    try
                    {
                        item.Result = EnumXmlTranslation<Impact.ResultType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Decal":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Decal);
                    try
                    {
                        item.Decal = LoquiXmlTranslation<Decal>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Impact_FieldIndex.Decal));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSet":
                    errorMask?.PushIndex((int)Impact_FieldIndex.TextureSet);
                    try
                    {
                        item.TextureSet = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryTextureSet":
                    errorMask?.PushIndex((int)Impact_FieldIndex.SecondaryTextureSet);
                    try
                    {
                        item.SecondaryTextureSet = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound1":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Sound1);
                    try
                    {
                        item.Sound1 = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound2":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Sound2);
                    try
                    {
                        item.Sound2 = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hazard":
                    errorMask?.PushIndex((int)Impact_FieldIndex.Hazard);
                    try
                    {
                        item.Hazard = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Impact_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Impact.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ImpactXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IImpactGetter item,
            XElement node,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ImpactXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IImpactGetter item,
            string path,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IImpactGetter item,
            Stream stream,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImpactBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ImpactBinaryWriteTranslation Instance = new ImpactBinaryWriteTranslation();

        public static void WriteEmbedded(
            IImpactGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IImpactGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Duration);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Impact.OrientationType>.Instance.Write(
                    writer,
                    item.Orientation,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AngleThreshold);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PlacementRadius);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundLevel>.Instance.Write(
                    writer,
                    item.SoundLevel,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Impact.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Impact.ResultType>.Instance.Write(
                    writer,
                    item.Result,
                    length: 1);
                writer.Write(item.Unknown);
            }
            if (item.Decal.TryGet(out var DecalItem))
            {
                ((DecalBinaryWriteTranslation)((IBinaryItem)DecalItem).BinaryWriteTranslator).Write(
                    item: DecalItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SecondaryTextureSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM1));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Hazard,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM2));
        }

        public void Write(
            MutagenWriter writer,
            IImpactGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.IPCT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ImpactBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ImpactBinaryCreateTranslation Instance = new ImpactBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IPCT;
        public static void FillBinaryStructs(
            IImpactInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IImpactInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Model);
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Duration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Orientation = EnumBinaryTranslation<Impact.OrientationType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.AngleThreshold = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.PlacementRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Flags = EnumBinaryTranslation<Impact.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Result = EnumBinaryTranslation<Impact.ResultType>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Unknown = dataFrame.ReadInt16();
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Unknown);
                }
                case RecordTypeInts.DODT:
                {
                    item.Decal = Mutagen.Bethesda.Skyrim.Decal.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Decal);
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.TextureSet);
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SecondaryTextureSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.SecondaryTextureSet);
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound1 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Sound1);
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound2 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Sound2);
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hazard = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Hazard);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ImpactBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ImpactBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IImpactGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Impact_Registration.Instance;
        public new static Impact_Registration Registration => Impact_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IImpactGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ImpactCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ImpactCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ImpactXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ImpactXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IModelGetter? Model { get; private set; }
        private int? _DATALocation;
        public Impact.DATADataType DATADataTypeState { get; private set; }
        #region Duration
        private int _DurationLocation => _DATALocation!.Value;
        private bool _Duration_IsSet => _DATALocation.HasValue;
        public Single Duration => _Duration_IsSet ? SpanExt.GetFloat(_data.Slice(_DurationLocation, 4)) : default;
        #endregion
        #region Orientation
        private int _OrientationLocation => _DATALocation!.Value + 0x4;
        private bool _Orientation_IsSet => _DATALocation.HasValue;
        public Impact.OrientationType Orientation => _Orientation_IsSet ? (Impact.OrientationType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_OrientationLocation, 0x4)) : default;
        #endregion
        #region AngleThreshold
        private int _AngleThresholdLocation => _DATALocation!.Value + 0x8;
        private bool _AngleThreshold_IsSet => _DATALocation.HasValue;
        public Single AngleThreshold => _AngleThreshold_IsSet ? SpanExt.GetFloat(_data.Slice(_AngleThresholdLocation, 4)) : default;
        #endregion
        #region PlacementRadius
        private int _PlacementRadiusLocation => _DATALocation!.Value + 0xC;
        private bool _PlacementRadius_IsSet => _DATALocation.HasValue;
        public Single PlacementRadius => _PlacementRadius_IsSet ? SpanExt.GetFloat(_data.Slice(_PlacementRadiusLocation, 4)) : default;
        #endregion
        #region SoundLevel
        private int _SoundLevelLocation => _DATALocation!.Value + 0x10;
        private bool _SoundLevel_IsSet => _DATALocation.HasValue;
        public SoundLevel SoundLevel => _SoundLevel_IsSet ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SoundLevelLocation, 0x4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x14;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Impact.Flag Flags => _Flags_IsSet ? (Impact.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Result
        private int _ResultLocation => _DATALocation!.Value + 0x15;
        private bool _Result_IsSet => _DATALocation.HasValue;
        public Impact.ResultType Result => _Result_IsSet ? (Impact.ResultType)_data.Span.Slice(_ResultLocation, 0x1)[0] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0x16;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(_UnknownLocation, 2)) : default;
        #endregion
        #region Decal
        private RangeInt32? _DecalLocation;
        public IDecalGetter? Decal => _DecalLocation.HasValue ? DecalBinaryOverlay.DecalFactory(new BinaryMemoryReadStream(_data.Slice(_DecalLocation!.Value.Min)), _package) : default;
        public bool Decal_IsSet => _DecalLocation.HasValue;
        #endregion
        #region TextureSet
        private int? _TextureSetLocation;
        public bool TextureSet_IsSet => _TextureSetLocation.HasValue;
        public IFormLinkNullable<ITextureSetGetter> TextureSet => _TextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region SecondaryTextureSet
        private int? _SecondaryTextureSetLocation;
        public bool SecondaryTextureSet_IsSet => _SecondaryTextureSetLocation.HasValue;
        public IFormLinkNullable<ITextureSetGetter> SecondaryTextureSet => _SecondaryTextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SecondaryTextureSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region Sound1
        private int? _Sound1Location;
        public bool Sound1_IsSet => _Sound1Location.HasValue;
        public IFormLinkNullable<ISoundGetter> Sound1 => _Sound1Location.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _Sound1Location.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region Sound2
        private int? _Sound2Location;
        public bool Sound2_IsSet => _Sound2Location.HasValue;
        public IFormLinkNullable<ISoundGetter> Sound2 => _Sound2Location.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _Sound2Location.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region Hazard
        private int? _HazardLocation;
        public bool Hazard_IsSet => _HazardLocation.HasValue;
        public IFormLinkNullable<IHazardGetter> Hazard => _HazardLocation.HasValue ? new FormLinkNullable<IHazardGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HazardLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IHazardGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImpactBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ImpactBinaryOverlay ImpactFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new ImpactBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ImpactBinaryOverlay ImpactFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ImpactFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Model);
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Unknown);
                }
                case RecordTypeInts.DODT:
                {
                    _DecalLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Decal);
                }
                case RecordTypeInts.DNAM:
                {
                    _TextureSetLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.TextureSet);
                }
                case RecordTypeInts.ENAM:
                {
                    _SecondaryTextureSetLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.SecondaryTextureSet);
                }
                case RecordTypeInts.SNAM:
                {
                    _Sound1Location = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Sound1);
                }
                case RecordTypeInts.NAM1:
                {
                    _Sound2Location = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Sound2);
                }
                case RecordTypeInts.NAM2:
                {
                    _HazardLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Impact_FieldIndex.Hazard);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImpactMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

