/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Ingredient :
        SkyrimMajorRecord,
        IIngredientInternal,
        ILoquiObjectSetter<Ingredient>,
        IEquatable<Ingredient>,
        IEqualsMask
    {
        #region Ctor
        protected Ingredient()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IIngredientGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IIngredientGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IIngredientGetter.Name => this.Name;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<Keyword>>? _Keywords;
        public IExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IIngredientGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IIngredientGetter.Model => this.Model;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IIngredientGetter.Icons => this.Icons;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IIngredientGetter.Destructible => this.Destructible;
        #endregion
        #region EquipType
        public FormLinkNullable<EquipType> EquipType { get; set; } = new FormLinkNullable<EquipType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IEquipTypeGetter> IIngredientGetter.EquipType => this.EquipType;
        #endregion
        #region PickUpSound
        public FormLinkNullable<SoundDescriptor> PickUpSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundDescriptorGetter> IIngredientGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        public FormLinkNullable<SoundDescriptor> PutDownSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundDescriptorGetter> IIngredientGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region IngredientValue
        public Int32 IngredientValue { get; set; } = default;
        #endregion
        #region Flags
        public Ingredient.Flag Flags { get; set; } = default;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public IExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IIngredientGetter.Effects => _Effects;
        #endregion

        #endregion
        #region DATADataTypeState
        public Ingredient.DATADataType DATADataTypeState { get; set; } = default;
        #endregion
        #region ENITDataTypeState
        public Ingredient.ENITDataType ENITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IngredientMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIngredientGetter rhs)) return false;
            return ((IngredientCommon)((IIngredientGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Ingredient? obj)
        {
            return ((IngredientCommon)((IIngredientGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IngredientCommon)((IIngredientGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IngredientXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IngredientXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Ingredient CreateFromXml(
            XElement node,
            Ingredient.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Ingredient CreateFromXml(
            XElement node,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ingredient.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Ingredient CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Ingredient();
            ((IngredientSetterCommon)((IIngredientGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Ingredient CreateFromXml(
            string path,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Ingredient CreateFromXml(
            string path,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Ingredient CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Ingredient CreateFromXml(
            Stream stream,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Ingredient CreateFromXml(
            Stream stream,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Ingredient CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.EquipType = initialValue;
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.IngredientValue = initialValue;
                this.Flags = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
                this.ENITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Keywords,
                TItem Model,
                TItem Icons,
                TItem Destructible,
                TItem EquipType,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Value,
                TItem Weight,
                TItem IngredientValue,
                TItem Flags,
                TItem Effects,
                TItem DATADataTypeState,
                TItem ENITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.EquipType = EquipType;
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Value = Value;
                this.Weight = Weight;
                this.IngredientValue = IngredientValue;
                this.Flags = Flags;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
                this.ENITDataTypeState = ENITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem EquipType;
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem Value;
            public TItem Weight;
            public TItem IngredientValue;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem DATADataTypeState;
            public TItem ENITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.EquipType, rhs.EquipType)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.IngredientValue, rhs.IngredientValue)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.Model);
                hash.Add(this.Icons);
                hash.Add(this.Destructible);
                hash.Add(this.EquipType);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.IngredientValue);
                hash.Add(this.Flags);
                hash.Add(this.Effects);
                hash.Add(this.DATADataTypeState);
                hash.Add(this.ENITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.EquipType)) return false;
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.IngredientValue)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                if (!eval(this.ENITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.EquipType)) return true;
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.IngredientValue)) return true;
                if (eval(this.Flags)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                if (eval(this.ENITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Ingredient.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.EquipType = eval(this.EquipType);
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.IngredientValue = eval(this.IngredientValue);
                obj.Flags = eval(this.Flags);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
                obj.ENITDataTypeState = eval(this.ENITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Ingredient.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Ingredient.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Ingredient.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.EquipType ?? true)
                    {
                        fg.AppendItem(EquipType, "EquipType");
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.IngredientValue ?? true)
                    {
                        fg.AppendItem(IngredientValue, "IngredientValue");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                    if (printMask?.ENITDataTypeState ?? true)
                    {
                        fg.AppendItem(ENITDataTypeState, "ENITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? EquipType;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? Value;
            public Exception? Weight;
            public Exception? IngredientValue;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? DATADataTypeState;
            public Exception? ENITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
                switch (enu)
                {
                    case Ingredient_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Ingredient_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Ingredient_FieldIndex.Name:
                        return Name;
                    case Ingredient_FieldIndex.Keywords:
                        return Keywords;
                    case Ingredient_FieldIndex.Model:
                        return Model;
                    case Ingredient_FieldIndex.Icons:
                        return Icons;
                    case Ingredient_FieldIndex.Destructible:
                        return Destructible;
                    case Ingredient_FieldIndex.EquipType:
                        return EquipType;
                    case Ingredient_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Ingredient_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Ingredient_FieldIndex.Value:
                        return Value;
                    case Ingredient_FieldIndex.Weight:
                        return Weight;
                    case Ingredient_FieldIndex.IngredientValue:
                        return IngredientValue;
                    case Ingredient_FieldIndex.Flags:
                        return Flags;
                    case Ingredient_FieldIndex.Effects:
                        return Effects;
                    case Ingredient_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    case Ingredient_FieldIndex.ENITDataTypeState:
                        return ENITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
                switch (enu)
                {
                    case Ingredient_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Ingredient_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.EquipType:
                        this.EquipType = ex;
                        break;
                    case Ingredient_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Ingredient_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Ingredient_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Ingredient_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Ingredient_FieldIndex.IngredientValue:
                        this.IngredientValue = ex;
                        break;
                    case Ingredient_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Ingredient_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case Ingredient_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    case Ingredient_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
                switch (enu)
                {
                    case Ingredient_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Ingredient_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Ingredient_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Ingredient_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Ingredient_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case Ingredient_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Ingredient_FieldIndex.EquipType:
                        this.EquipType = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.IngredientValue:
                        this.IngredientValue = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case Ingredient_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    case Ingredient_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (Model != null) return true;
                if (Icons != null) return true;
                if (Destructible != null) return true;
                if (EquipType != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (IngredientValue != null) return true;
                if (Flags != null) return true;
                if (Effects != null) return true;
                if (DATADataTypeState != null) return true;
                if (ENITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Model?.ToString(fg);
                Icons?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(EquipType, "EquipType");
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(IngredientValue, "IngredientValue");
                fg.AppendItem(Flags, "Flags");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                fg.AppendItem(ENITDataTypeState, "ENITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.EquipType = this.EquipType.Combine(rhs.EquipType);
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.IngredientValue = this.IngredientValue.Combine(rhs.IngredientValue);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public bool Keywords;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Icons.TranslationMask?> Icons;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool EquipType;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Value;
            public bool Weight;
            public bool IngredientValue;
            public bool Flags;
            public MaskItem<bool, Effect.TranslationMask?> Effects;
            public bool DATADataTypeState;
            public bool ENITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icons = new MaskItem<bool, Icons.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.EquipType = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.IngredientValue = defaultOn;
                this.Flags = defaultOn;
                this.Effects = new MaskItem<bool, Effect.TranslationMask?>(defaultOn, null);
                this.DATADataTypeState = defaultOn;
                this.ENITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icons?.Overall ?? true, Icons?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((EquipType, null));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((IngredientValue, null));
                ret.Add((Flags, null));
                ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
                ret.Add((ENITDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Ingredient_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => IngredientCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => IngredientCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IngredientCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IngredientCommon.Instance.RemapLinks(this, mapping);
        public Ingredient(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Ingredient(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Ingredient(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        [Flags]
        public enum ENITDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IngredientBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IngredientBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Ingredient CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Ingredient CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Ingredient();
            ((IngredientSetterCommon)((IIngredientGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Ingredient item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIngredientGetter)rhs, include);

        void IClearable.Clear()
        {
            ((IngredientSetterCommon)((IIngredientGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Ingredient GetNew()
        {
            return new Ingredient();
        }

    }
    #endregion

    #region Interface
    public partial interface IIngredient :
        IIngredientGetter,
        ISkyrimMajorRecord,
        IItem,
        IHarvestTarget,
        ITranslatedNamed,
        IHasIcons,
        IModeled,
        IObjectBounded,
        IWeightValue,
        ILoquiObjectSetter<IIngredientInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new IExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new Model? Model { get; set; }
        new Icons? Icons { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<EquipType> EquipType { get; set; }
        new FormLinkNullable<SoundDescriptor> PickUpSound { get; set; }
        new FormLinkNullable<SoundDescriptor> PutDownSound { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Int32 IngredientValue { get; set; }
        new Ingredient.Flag Flags { get; set; }
        new IExtendedList<Effect> Effects { get; }
        new Ingredient.DATADataType DATADataTypeState { get; set; }
        new Ingredient.ENITDataType ENITDataTypeState { get; set; }
    }

    public partial interface IIngredientInternal :
        ISkyrimMajorRecordInternal,
        IIngredient,
        IIngredientGetter
    {
    }

    public partial interface IIngredientGetter :
        ISkyrimMajorRecordGetter,
        IItemGetter,
        IHarvestTargetGetter,
        ITranslatedNamedGetter,
        IHasIconsGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IWeightValueGetter,
        ILoquiObject<IIngredientGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Ingredient_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        TranslatedString? Name { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        IModelGetter? Model { get; }
        IIconsGetter? Icons { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullable<IEquipTypeGetter> EquipType { get; }
        IFormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Int32 IngredientValue { get; }
        Ingredient.Flag Flags { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        Ingredient.DATADataType DATADataTypeState { get; }
        Ingredient.ENITDataType ENITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IngredientMixIn
    {
        public static void Clear(this IIngredientInternal item)
        {
            ((IngredientSetterCommon)((IIngredientGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Ingredient.Mask<bool> GetEqualsMask(
            this IIngredientGetter item,
            IIngredientGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIngredientGetter item,
            string? name = null,
            Ingredient.Mask<bool>? printMask = null)
        {
            return ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIngredientGetter item,
            FileGeneration fg,
            string? name = null,
            Ingredient.Mask<bool>? printMask = null)
        {
            ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIngredientGetter item,
            Ingredient.Mask<bool?> checkMask)
        {
            return ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Ingredient.Mask<bool> GetHasBeenSetMask(this IIngredientGetter item)
        {
            var ret = new Ingredient.Mask<bool>(false);
            ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIngredientGetter item,
            IIngredientGetter rhs)
        {
            return ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIngredientInternal lhs,
            IIngredientGetter rhs,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IngredientSetterTranslationCommon)((IIngredientGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Ingredient.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIngredientInternal lhs,
            IIngredientGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IngredientSetterTranslationCommon)((IIngredientGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Ingredient DeepCopy(
            this IIngredientGetter item,
            Ingredient.TranslationMask? copyMask = null)
        {
            return ((IngredientSetterTranslationCommon)((IIngredientGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Ingredient DeepCopy(
            this IIngredientGetter item,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? copyMask = null)
        {
            return ((IngredientSetterTranslationCommon)((IIngredientGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Ingredient DeepCopy(
            this IIngredientGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IngredientSetterTranslationCommon)((IIngredientGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIngredientInternal item,
            XElement node,
            Ingredient.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIngredientInternal item,
            XElement node,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ingredient.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((IngredientSetterCommon)((IIngredientGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            string path,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            string path,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            Stream stream,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            Stream stream,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIngredientInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Ingredient.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IIngredientInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IIngredientInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IngredientSetterCommon)((IIngredientGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Ingredient_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Keywords = 9,
        Model = 10,
        Icons = 11,
        Destructible = 12,
        EquipType = 13,
        PickUpSound = 14,
        PutDownSound = 15,
        Value = 16,
        Weight = 17,
        IngredientValue = 18,
        Flags = 19,
        Effects = 20,
        DATADataTypeState = 21,
        ENITDataTypeState = 22,
    }
    #endregion

    #region Registration
    public partial class Ingredient_Registration : ILoquiRegistration
    {
        public static readonly Ingredient_Registration Instance = new Ingredient_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 164,
            version: 0);

        public const string GUID = "03907af3-2557-45c7-9c9e-c22854b4ffe6";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Ingredient.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Ingredient.ErrorMask);

        public static readonly Type ClassType = typeof(Ingredient);

        public static readonly Type GetterType = typeof(IIngredientGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIngredient);

        public static readonly Type? InternalSetterType = typeof(IIngredientInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Ingredient";

        public const string Name = "Ingredient";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)Ingredient_FieldIndex.VirtualMachineAdapter;
                case "OBJECTBOUNDS":
                    return (ushort)Ingredient_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)Ingredient_FieldIndex.Name;
                case "KEYWORDS":
                    return (ushort)Ingredient_FieldIndex.Keywords;
                case "MODEL":
                    return (ushort)Ingredient_FieldIndex.Model;
                case "ICONS":
                    return (ushort)Ingredient_FieldIndex.Icons;
                case "DESTRUCTIBLE":
                    return (ushort)Ingredient_FieldIndex.Destructible;
                case "EQUIPTYPE":
                    return (ushort)Ingredient_FieldIndex.EquipType;
                case "PICKUPSOUND":
                    return (ushort)Ingredient_FieldIndex.PickUpSound;
                case "PUTDOWNSOUND":
                    return (ushort)Ingredient_FieldIndex.PutDownSound;
                case "VALUE":
                    return (ushort)Ingredient_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Ingredient_FieldIndex.Weight;
                case "INGREDIENTVALUE":
                    return (ushort)Ingredient_FieldIndex.IngredientValue;
                case "FLAGS":
                    return (ushort)Ingredient_FieldIndex.Flags;
                case "EFFECTS":
                    return (ushort)Ingredient_FieldIndex.Effects;
                case "DATADATATYPESTATE":
                    return (ushort)Ingredient_FieldIndex.DATADataTypeState;
                case "ENITDATATYPESTATE":
                    return (ushort)Ingredient_FieldIndex.ENITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.Keywords:
                case Ingredient_FieldIndex.Effects:
                    return true;
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                case Ingredient_FieldIndex.ObjectBounds:
                case Ingredient_FieldIndex.Name:
                case Ingredient_FieldIndex.Model:
                case Ingredient_FieldIndex.Icons:
                case Ingredient_FieldIndex.Destructible:
                case Ingredient_FieldIndex.EquipType:
                case Ingredient_FieldIndex.PickUpSound:
                case Ingredient_FieldIndex.PutDownSound:
                case Ingredient_FieldIndex.Value:
                case Ingredient_FieldIndex.Weight:
                case Ingredient_FieldIndex.IngredientValue:
                case Ingredient_FieldIndex.Flags:
                case Ingredient_FieldIndex.DATADataTypeState:
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                case Ingredient_FieldIndex.ObjectBounds:
                case Ingredient_FieldIndex.Model:
                case Ingredient_FieldIndex.Icons:
                case Ingredient_FieldIndex.Destructible:
                case Ingredient_FieldIndex.Effects:
                    return true;
                case Ingredient_FieldIndex.Name:
                case Ingredient_FieldIndex.Keywords:
                case Ingredient_FieldIndex.EquipType:
                case Ingredient_FieldIndex.PickUpSound:
                case Ingredient_FieldIndex.PutDownSound:
                case Ingredient_FieldIndex.Value:
                case Ingredient_FieldIndex.Weight:
                case Ingredient_FieldIndex.IngredientValue:
                case Ingredient_FieldIndex.Flags:
                case Ingredient_FieldIndex.DATADataTypeState:
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                case Ingredient_FieldIndex.ObjectBounds:
                case Ingredient_FieldIndex.Name:
                case Ingredient_FieldIndex.Keywords:
                case Ingredient_FieldIndex.Model:
                case Ingredient_FieldIndex.Icons:
                case Ingredient_FieldIndex.Destructible:
                case Ingredient_FieldIndex.EquipType:
                case Ingredient_FieldIndex.PickUpSound:
                case Ingredient_FieldIndex.PutDownSound:
                case Ingredient_FieldIndex.Value:
                case Ingredient_FieldIndex.Weight:
                case Ingredient_FieldIndex.IngredientValue:
                case Ingredient_FieldIndex.Flags:
                case Ingredient_FieldIndex.Effects:
                case Ingredient_FieldIndex.DATADataTypeState:
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case Ingredient_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Ingredient_FieldIndex.Name:
                    return "Name";
                case Ingredient_FieldIndex.Keywords:
                    return "Keywords";
                case Ingredient_FieldIndex.Model:
                    return "Model";
                case Ingredient_FieldIndex.Icons:
                    return "Icons";
                case Ingredient_FieldIndex.Destructible:
                    return "Destructible";
                case Ingredient_FieldIndex.EquipType:
                    return "EquipType";
                case Ingredient_FieldIndex.PickUpSound:
                    return "PickUpSound";
                case Ingredient_FieldIndex.PutDownSound:
                    return "PutDownSound";
                case Ingredient_FieldIndex.Value:
                    return "Value";
                case Ingredient_FieldIndex.Weight:
                    return "Weight";
                case Ingredient_FieldIndex.IngredientValue:
                    return "IngredientValue";
                case Ingredient_FieldIndex.Flags:
                    return "Flags";
                case Ingredient_FieldIndex.Effects:
                    return "Effects";
                case Ingredient_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return "ENITDataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                case Ingredient_FieldIndex.ObjectBounds:
                case Ingredient_FieldIndex.Name:
                case Ingredient_FieldIndex.Keywords:
                case Ingredient_FieldIndex.Model:
                case Ingredient_FieldIndex.Icons:
                case Ingredient_FieldIndex.Destructible:
                case Ingredient_FieldIndex.EquipType:
                case Ingredient_FieldIndex.PickUpSound:
                case Ingredient_FieldIndex.PutDownSound:
                case Ingredient_FieldIndex.Value:
                case Ingredient_FieldIndex.Weight:
                case Ingredient_FieldIndex.IngredientValue:
                case Ingredient_FieldIndex.Flags:
                case Ingredient_FieldIndex.Effects:
                case Ingredient_FieldIndex.DATADataTypeState:
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                case Ingredient_FieldIndex.ObjectBounds:
                case Ingredient_FieldIndex.Name:
                case Ingredient_FieldIndex.Keywords:
                case Ingredient_FieldIndex.Model:
                case Ingredient_FieldIndex.Icons:
                case Ingredient_FieldIndex.Destructible:
                case Ingredient_FieldIndex.EquipType:
                case Ingredient_FieldIndex.PickUpSound:
                case Ingredient_FieldIndex.PutDownSound:
                case Ingredient_FieldIndex.Value:
                case Ingredient_FieldIndex.Weight:
                case Ingredient_FieldIndex.IngredientValue:
                case Ingredient_FieldIndex.Flags:
                case Ingredient_FieldIndex.Effects:
                case Ingredient_FieldIndex.DATADataTypeState:
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Ingredient_FieldIndex enu = (Ingredient_FieldIndex)index;
            switch (enu)
            {
                case Ingredient_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case Ingredient_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Ingredient_FieldIndex.Name:
                    return typeof(TranslatedString);
                case Ingredient_FieldIndex.Keywords:
                    return typeof(IExtendedList<IFormLink<Keyword>>);
                case Ingredient_FieldIndex.Model:
                    return typeof(Model);
                case Ingredient_FieldIndex.Icons:
                    return typeof(Icons);
                case Ingredient_FieldIndex.Destructible:
                    return typeof(Destructible);
                case Ingredient_FieldIndex.EquipType:
                    return typeof(FormLinkNullable<EquipType>);
                case Ingredient_FieldIndex.PickUpSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Ingredient_FieldIndex.PutDownSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Ingredient_FieldIndex.Value:
                    return typeof(UInt32);
                case Ingredient_FieldIndex.Weight:
                    return typeof(Single);
                case Ingredient_FieldIndex.IngredientValue:
                    return typeof(Int32);
                case Ingredient_FieldIndex.Flags:
                    return typeof(Ingredient.Flag);
                case Ingredient_FieldIndex.Effects:
                    return typeof(IExtendedList<Effect>);
                case Ingredient_FieldIndex.DATADataTypeState:
                    return typeof(Ingredient.DATADataType);
                case Ingredient_FieldIndex.ENITDataTypeState:
                    return typeof(Ingredient.ENITDataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IngredientXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.INGR;
        public static readonly Type BinaryWriteTranslation = typeof(IngredientBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IngredientSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly IngredientSetterCommon Instance = new IngredientSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIngredientInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Keywords = null;
            item.Model = null;
            item.Icons = null;
            item.Destructible = null;
            item.EquipType = FormLinkNullable<EquipType>.Null;
            item.PickUpSound = FormLinkNullable<SoundDescriptor>.Null;
            item.PutDownSound = FormLinkNullable<SoundDescriptor>.Null;
            item.Value = default;
            item.Weight = default;
            item.IngredientValue = default;
            item.Flags = default;
            item.Effects.Clear();
            item.DATADataTypeState = default;
            item.ENITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IIngredientInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIngredientInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IIngredientInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IIngredientInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    IngredientXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Ingredient)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Ingredient)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIngredientInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IIngredientInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: IngredientBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IngredientBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Ingredient)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Ingredient)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class IngredientCommon : SkyrimMajorRecordCommon
    {
        public new static readonly IngredientCommon Instance = new IngredientCommon();

        public Ingredient.Mask<bool> GetEqualsMask(
            IIngredientGetter item,
            IIngredientGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Ingredient.Mask<bool>(false);
            ((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIngredientGetter item,
            IIngredientGetter rhs,
            Ingredient.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EquipType = object.Equals(item.EquipType, rhs.EquipType);
            ret.PickUpSound = object.Equals(item.PickUpSound, rhs.PickUpSound);
            ret.PutDownSound = object.Equals(item.PutDownSound, rhs.PutDownSound);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.IngredientValue = item.IngredientValue == rhs.IngredientValue;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            ret.ENITDataTypeState = item.ENITDataTypeState == rhs.ENITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IIngredientGetter item,
            string? name = null,
            Ingredient.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIngredientGetter item,
            FileGeneration fg,
            string? name = null,
            Ingredient.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Ingredient =>");
            }
            else
            {
                fg.AppendLine($"{name} (Ingredient) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIngredientGetter item,
            FileGeneration fg,
            Ingredient.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.EquipType ?? true)
                && item.EquipType.TryGet(out var EquipTypeItem))
            {
                fg.AppendItem(EquipTypeItem, "EquipType");
            }
            if ((printMask?.PickUpSound ?? true)
                && item.PickUpSound.TryGet(out var PickUpSoundItem))
            {
                fg.AppendItem(PickUpSoundItem, "PickUpSound");
            }
            if ((printMask?.PutDownSound ?? true)
                && item.PutDownSound.TryGet(out var PutDownSoundItem))
            {
                fg.AppendItem(PutDownSoundItem, "PutDownSound");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.IngredientValue ?? true)
            {
                fg.AppendItem(item.IngredientValue, "IngredientValue");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
                fg.AppendItem(item.ENITDataTypeState, "ENITDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IIngredientGetter item,
            Ingredient.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icons?.Overall.HasValue ?? false && checkMask.Icons.Overall.Value != (item.Icons != null)) return false;
            if (checkMask.Icons?.Specific != null && (item.Icons == null || !item.Icons.HasBeenSet(checkMask.Icons.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.EquipType.HasValue && checkMask.EquipType.Value != (item.EquipType.FormKey != null)) return false;
            if (checkMask.PickUpSound.HasValue && checkMask.PickUpSound.Value != (item.PickUpSound.FormKey != null)) return false;
            if (checkMask.PutDownSound.HasValue && checkMask.PutDownSound.Value != (item.PutDownSound.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IIngredientGetter item,
            Ingredient.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemIcons = item.Icons;
            mask.Icons = new MaskItem<bool, Icons.Mask<bool>?>(itemIcons != null, itemIcons?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.EquipType = (item.EquipType.FormKey != null);
            mask.PickUpSound = (item.PickUpSound.FormKey != null);
            mask.PutDownSound = (item.PutDownSound.FormKey != null);
            mask.Value = true;
            mask.Weight = true;
            mask.IngredientValue = true;
            mask.Flags = true;
            var EffectsItem = item.Effects;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect.Mask<bool>?>>?>(true, EffectsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DATADataTypeState = true;
            mask.ENITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Ingredient_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Ingredient_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Ingredient_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Ingredient_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Ingredient_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Ingredient_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Ingredient_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Ingredient_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Ingredient_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Ingredient_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Ingredient_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Ingredient_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIngredientGetter? lhs,
            IIngredientGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.EquipType.Equals(rhs.EquipType)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.IngredientValue != rhs.IngredientValue) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            if (lhs.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIngredientGetter?)lhs,
                rhs: rhs as IIngredientGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIngredientGetter?)lhs,
                rhs: rhs as IIngredientGetter);
        }
        
        public virtual int GetHashCode(IIngredientGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            if (item.EquipType.TryGet(out var EquipTypeitem))
            {
                hash.Add(EquipTypeitem);
            }
            if (item.PickUpSound.TryGet(out var PickUpSounditem))
            {
                hash.Add(PickUpSounditem);
            }
            if (item.PutDownSound.TryGet(out var PutDownSounditem))
            {
                hash.Add(PutDownSounditem);
            }
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.IngredientValue);
            hash.Add(item.Flags);
            hash.Add(item.Effects);
            hash.Add(item.DATADataTypeState);
            hash.Add(item.ENITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IIngredientGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIngredientGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Ingredient.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IIngredientGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EquipType.FormKey.TryGet(out var EquipTypeKey))
            {
                yield return EquipTypeKey;
            }
            if (obj.PickUpSound.FormKey.TryGet(out var PickUpSoundKey))
            {
                yield return PickUpSoundKey;
            }
            if (obj.PutDownSound.FormKey.TryGet(out var PutDownSoundKey))
            {
                yield return PutDownSoundKey;
            }
            foreach (var item in obj.Effects.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IIngredientGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Ingredient obj, Ingredient rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Ingredient(getNextFormKey());
            ret.DeepCopyIn((Ingredient)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Ingredient)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class IngredientSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly IngredientSetterTranslationCommon Instance = new IngredientSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IIngredientInternal item,
            IIngredientGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IIngredient item,
            IIngredientGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingredient_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Ingredient_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingredient_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingredient_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingredient_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.EquipType) ?? true))
            {
                item.EquipType = rhs.EquipType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = rhs.PickUpSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = rhs.PutDownSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.IngredientValue) ?? true))
            {
                item.IngredientValue = rhs.IngredientValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Ingredient_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingredient_FieldIndex.ENITDataTypeState) ?? true))
            {
                item.ENITDataTypeState = rhs.ENITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIngredientInternal)item,
                rhs: (IIngredientGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIngredient)item,
                rhs: (IIngredientGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIngredientInternal)item,
                rhs: (IIngredientGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IIngredient)item,
                rhs: (IIngredientGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Ingredient DeepCopy(
            IIngredientGetter item,
            Ingredient.TranslationMask? copyMask = null)
        {
            Ingredient ret = (Ingredient)((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Ingredient DeepCopy(
            IIngredientGetter item,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? copyMask = null)
        {
            Ingredient ret = (Ingredient)((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Ingredient DeepCopy(
            IIngredientGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Ingredient ret = (Ingredient)((IngredientCommon)((IIngredientGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Ingredient
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Ingredient_Registration.Instance;
        public new static Ingredient_Registration Registration => Ingredient_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IngredientCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IngredientSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IngredientSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IngredientXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static IngredientXmlWriteTranslation Instance = new IngredientXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIngredientGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)Ingredient_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Ingredient_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Ingredient_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLink<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)Ingredient_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLink<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Ingredient_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Model));
                }
            }
            if ((item.Icons != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Icons) ?? true))
            {
                if (item.Icons.TryGet(out var IconsItem))
                {
                    ((IconsXmlWriteTranslation)((IXmlItem)IconsItem).XmlWriteTranslator).Write(
                        item: IconsItem,
                        node: node,
                        name: nameof(item.Icons),
                        fieldIndex: (int)Ingredient_FieldIndex.Icons,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Icons));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)Ingredient_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Destructible));
                }
            }
            if ((item.EquipType.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.EquipType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EquipType),
                    item: item.EquipType.FormKey,
                    fieldIndex: (int)Ingredient_FieldIndex.EquipType,
                    errorMask: errorMask);
            }
            if ((item.PickUpSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.PickUpSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PickUpSound),
                    item: item.PickUpSound.FormKey,
                    fieldIndex: (int)Ingredient_FieldIndex.PickUpSound,
                    errorMask: errorMask);
            }
            if ((item.PutDownSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.PutDownSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PutDownSound),
                    item: item.PutDownSound.FormKey,
                    fieldIndex: (int)Ingredient_FieldIndex.PutDownSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Value),
                    item: item.Value,
                    fieldIndex: (int)Ingredient_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)Ingredient_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.IngredientValue) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IngredientValue),
                    item: item.IngredientValue,
                    fieldIndex: (int)Ingredient_FieldIndex.IngredientValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Ingredient.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Ingredient_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Ingredient_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((EffectXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Ingredient.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Ingredient_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Ingredient_FieldIndex.ENITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Ingredient.ENITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ENITDataTypeState),
                    item: item.ENITDataTypeState,
                    fieldIndex: (int)Ingredient_FieldIndex.ENITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IIngredientGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Ingredient");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Ingredient");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIngredientGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIngredientGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIngredientGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class IngredientXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static IngredientXmlCreateTranslation Instance = new IngredientXmlCreateTranslation();

        public static void FillPublicXml(
            IIngredientInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IngredientXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIngredientInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icons":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Icons);
                    try
                    {
                        item.Icons = LoquiXmlTranslation<Icons>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Icons));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Ingredient_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EquipType":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.EquipType);
                    try
                    {
                        item.EquipType = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickUpSound":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.PickUpSound);
                    try
                    {
                        item.PickUpSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PutDownSound":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.PutDownSound);
                    try
                    {
                        item.PutDownSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Value);
                    try
                    {
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IngredientValue":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.IngredientValue);
                    try
                    {
                        item.IngredientValue = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Ingredient.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.Effects);
                    try
                    {
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Ingredient.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ENITDataTypeState":
                    errorMask?.PushIndex((int)Ingredient_FieldIndex.ENITDataTypeState);
                    try
                    {
                        item.ENITDataTypeState = EnumXmlTranslation<Ingredient.ENITDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class IngredientXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIngredientGetter item,
            XElement node,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((IngredientXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Ingredient.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIngredientGetter item,
            string path,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIngredientGetter item,
            Stream stream,
            out Ingredient.ErrorMask errorMask,
            Ingredient.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IngredientBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static IngredientBinaryWriteTranslation Instance = new IngredientBinaryWriteTranslation();

        public static void WriteEmbedded(
            IIngredientGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IIngredientGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ETYP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.ENIT)))
            {
                writer.Write(item.IngredientValue);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Ingredient.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IIngredientGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.INGR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIngredientGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIngredientGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIngredientGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IngredientBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static IngredientBinaryCreateTranslation Instance = new IngredientBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.INGR;
        public static void FillBinaryStructs(
            IIngredientInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IIngredientInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Ingredient_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Ingredient_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Ingredient_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return (int)Ingredient_FieldIndex.Keywords;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Skyrim.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Icons;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Destructible;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Ingredient_FieldIndex.EquipType;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Ingredient_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Ingredient_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Ingredient_FieldIndex.Weight;
                }
                case RecordTypeInts.ENIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.IngredientValue = dataFrame.ReadInt32();
                    item.Flags = EnumBinaryTranslation<Ingredient.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return (int)Ingredient_FieldIndex.Flags;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Effect.TryCreateFromBinary));
                    return (int)Ingredient_FieldIndex.Effects;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class IngredientBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IngredientBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IIngredientGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Ingredient_Registration.Instance;
        public new static Ingredient_Registration Registration => Ingredient_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IngredientCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IngredientSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIngredientGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => IngredientCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => IngredientCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IngredientCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IngredientCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => IngredientXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IngredientXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IngredientBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IngredientBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        public IModelGetter? Model { get; private set; }
        public IIconsGetter? Icons { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region EquipType
        private int? _EquipTypeLocation;
        public bool EquipType_IsSet => _EquipTypeLocation.HasValue;
        public IFormLinkNullable<IEquipTypeGetter> EquipType => _EquipTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EquipTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public bool PickUpSound_IsSet => _PickUpSoundLocation.HasValue;
        public IFormLinkNullable<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public bool PutDownSound_IsSet => _PutDownSoundLocation.HasValue;
        public IFormLinkNullable<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        private int? _DATALocation;
        public Ingredient.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Slice(_WeightLocation, 4)) : default;
        #endregion
        private int? _ENITLocation;
        public Ingredient.ENITDataType ENITDataTypeState { get; private set; }
        #region IngredientValue
        private int _IngredientValueLocation => _ENITLocation!.Value;
        private bool _IngredientValue_IsSet => _ENITLocation.HasValue;
        public Int32 IngredientValue => _IngredientValue_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_IngredientValueLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation!.Value + 0x4;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public Ingredient.Flag Flags => _Flags_IsSet ? (Ingredient.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IngredientBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static IngredientBinaryOverlay IngredientFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new IngredientBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IngredientBinaryOverlay IngredientFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return IngredientFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Ingredient_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Ingredient_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Ingredient_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList<IFormLink<IKeywordGetter>>.FactoryByCount(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Ingredient_FieldIndex.Keywords;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Icons;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Ingredient_FieldIndex.Destructible;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipTypeLocation = (stream.Position - offset);
                    return (int)Ingredient_FieldIndex.EquipType;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Ingredient_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Ingredient_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Ingredient_FieldIndex.Weight;
                }
                case RecordTypeInts.ENIT:
                {
                    _ENITLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Ingredient_FieldIndex.Flags;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return (int)Ingredient_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IngredientMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

