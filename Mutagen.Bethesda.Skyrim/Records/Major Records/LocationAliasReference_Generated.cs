/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LocationAliasReference :
        ILocationAliasReference,
        ILoquiObjectSetter<LocationAliasReference>,
        IEquatable<LocationAliasReference>,
        IEqualsMask
    {
        #region Ctor
        public LocationAliasReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AliasIndex
        public Int32? AliasIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ILocationAliasReferenceGetter.AliasIndex => this.AliasIndex;
        #endregion
        #region Keyword
        public FormLinkNullable<Keyword> Keyword { get; set; } = new FormLinkNullable<Keyword>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IKeywordGetter> ILocationAliasReferenceGetter.Keyword => this.Keyword;
        #endregion
        #region RefType
        public FormLinkNullable<LocationReferenceType> RefType { get; set; } = new FormLinkNullable<LocationReferenceType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ILocationReferenceTypeGetter> ILocationAliasReferenceGetter.RefType => this.RefType;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocationAliasReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILocationAliasReferenceGetter rhs)) return false;
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LocationAliasReference? obj)
        {
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.AliasIndex = initialValue;
                this.Keyword = initialValue;
                this.RefType = initialValue;
            }

            public Mask(
                TItem AliasIndex,
                TItem Keyword,
                TItem RefType)
            {
                this.AliasIndex = AliasIndex;
                this.Keyword = Keyword;
                this.RefType = RefType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AliasIndex;
            public TItem Keyword;
            public TItem RefType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.AliasIndex, rhs.AliasIndex)) return false;
                if (!object.Equals(this.Keyword, rhs.Keyword)) return false;
                if (!object.Equals(this.RefType, rhs.RefType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AliasIndex);
                hash.Add(this.Keyword);
                hash.Add(this.RefType);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.AliasIndex)) return false;
                if (!eval(this.Keyword)) return false;
                if (!eval(this.RefType)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.AliasIndex)) return true;
                if (eval(this.Keyword)) return true;
                if (eval(this.RefType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocationAliasReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.AliasIndex = eval(this.AliasIndex);
                obj.Keyword = eval(this.Keyword);
                obj.RefType = eval(this.RefType);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LocationAliasReference.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LocationAliasReference.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LocationAliasReference.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.AliasIndex ?? true)
                    {
                        fg.AppendItem(AliasIndex, "AliasIndex");
                    }
                    if (printMask?.Keyword ?? true)
                    {
                        fg.AppendItem(Keyword, "Keyword");
                    }
                    if (printMask?.RefType ?? true)
                    {
                        fg.AppendItem(RefType, "RefType");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? AliasIndex;
            public Exception? Keyword;
            public Exception? RefType;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationAliasReference_FieldIndex.AliasIndex:
                        return AliasIndex;
                    case LocationAliasReference_FieldIndex.Keyword:
                        return Keyword;
                    case LocationAliasReference_FieldIndex.RefType:
                        return RefType;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationAliasReference_FieldIndex.AliasIndex:
                        this.AliasIndex = ex;
                        break;
                    case LocationAliasReference_FieldIndex.Keyword:
                        this.Keyword = ex;
                        break;
                    case LocationAliasReference_FieldIndex.RefType:
                        this.RefType = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationAliasReference_FieldIndex.AliasIndex:
                        this.AliasIndex = (Exception?)obj;
                        break;
                    case LocationAliasReference_FieldIndex.Keyword:
                        this.Keyword = (Exception?)obj;
                        break;
                    case LocationAliasReference_FieldIndex.RefType:
                        this.RefType = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (AliasIndex != null) return true;
                if (Keyword != null) return true;
                if (RefType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(AliasIndex, "AliasIndex");
                fg.AppendItem(Keyword, "Keyword");
                fg.AppendItem(RefType, "RefType");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AliasIndex = this.AliasIndex.Combine(rhs.AliasIndex);
                ret.Keyword = this.Keyword.Combine(rhs.Keyword);
                ret.RefType = this.RefType.Combine(rhs.RefType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool AliasIndex;
            public bool Keyword;
            public bool RefType;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.AliasIndex = defaultOn;
                this.Keyword = defaultOn;
                this.RefType = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((AliasIndex, null));
                ret.Add((Keyword, null));
                ret.Add((RefType, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => LocationAliasReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LocationAliasReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationAliasReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationAliasReferenceCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationAliasReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationAliasReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LocationAliasReference CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static LocationAliasReference CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocationAliasReference();
            ((LocationAliasReferenceSetterCommon)((ILocationAliasReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocationAliasReference item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocationAliasReferenceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LocationAliasReferenceSetterCommon)((ILocationAliasReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocationAliasReference GetNew()
        {
            return new LocationAliasReference();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocationAliasReference :
        ILocationAliasReferenceGetter,
        ILoquiObjectSetter<ILocationAliasReference>
    {
        new Int32? AliasIndex { get; set; }
        new FormLinkNullable<Keyword> Keyword { get; set; }
        new FormLinkNullable<LocationReferenceType> RefType { get; set; }
    }

    public partial interface ILocationAliasReferenceGetter :
        ILoquiObject,
        ILoquiObject<ILocationAliasReferenceGetter>,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LocationAliasReference_Registration.Instance;
        Int32? AliasIndex { get; }
        IFormLinkNullable<IKeywordGetter> Keyword { get; }
        IFormLinkNullable<ILocationReferenceTypeGetter> RefType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocationAliasReferenceMixIn
    {
        public static void Clear(this ILocationAliasReference item)
        {
            ((LocationAliasReferenceSetterCommon)((ILocationAliasReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocationAliasReference.Mask<bool> GetEqualsMask(
            this ILocationAliasReferenceGetter item,
            ILocationAliasReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILocationAliasReferenceGetter item,
            string? name = null,
            LocationAliasReference.Mask<bool>? printMask = null)
        {
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILocationAliasReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            LocationAliasReference.Mask<bool>? printMask = null)
        {
            ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILocationAliasReferenceGetter item,
            LocationAliasReference.Mask<bool?> checkMask)
        {
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LocationAliasReference.Mask<bool> GetHasBeenSetMask(this ILocationAliasReferenceGetter item)
        {
            var ret = new LocationAliasReference.Mask<bool>(false);
            ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILocationAliasReferenceGetter item,
            ILocationAliasReferenceGetter rhs)
        {
            return ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILocationAliasReference lhs,
            ILocationAliasReferenceGetter rhs)
        {
            ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ILocationAliasReference lhs,
            ILocationAliasReferenceGetter rhs,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocationAliasReference lhs,
            ILocationAliasReferenceGetter rhs,
            out LocationAliasReference.ErrorMask errorMask,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LocationAliasReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationAliasReference lhs,
            ILocationAliasReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LocationAliasReference DeepCopy(
            this ILocationAliasReferenceGetter item,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            return ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocationAliasReference DeepCopy(
            this ILocationAliasReferenceGetter item,
            out LocationAliasReference.ErrorMask errorMask,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            return ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocationAliasReference DeepCopy(
            this ILocationAliasReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationAliasReferenceSetterTranslationCommon)((ILocationAliasReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILocationAliasReference item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILocationAliasReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationAliasReferenceSetterCommon)((ILocationAliasReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum LocationAliasReference_FieldIndex
    {
        AliasIndex = 0,
        Keyword = 1,
        RefType = 2,
    }
    #endregion

    #region Registration
    public partial class LocationAliasReference_Registration : ILoquiRegistration
    {
        public static readonly LocationAliasReference_Registration Instance = new LocationAliasReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 368,
            version: 0);

        public const string GUID = "f2506ee5-0e90-44a0-a252-ef13849c1e03";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LocationAliasReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocationAliasReference.ErrorMask);

        public static readonly Type ClassType = typeof(LocationAliasReference);

        public static readonly Type GetterType = typeof(ILocationAliasReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocationAliasReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.LocationAliasReference";

        public const string Name = "LocationAliasReference";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ALIASINDEX":
                    return (ushort)LocationAliasReference_FieldIndex.AliasIndex;
                case "KEYWORD":
                    return (ushort)LocationAliasReference_FieldIndex.Keyword;
                case "REFTYPE":
                    return (ushort)LocationAliasReference_FieldIndex.RefType;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                case LocationAliasReference_FieldIndex.Keyword:
                case LocationAliasReference_FieldIndex.RefType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                case LocationAliasReference_FieldIndex.Keyword:
                case LocationAliasReference_FieldIndex.RefType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                case LocationAliasReference_FieldIndex.Keyword:
                case LocationAliasReference_FieldIndex.RefType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                    return "AliasIndex";
                case LocationAliasReference_FieldIndex.Keyword:
                    return "Keyword";
                case LocationAliasReference_FieldIndex.RefType:
                    return "RefType";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                case LocationAliasReference_FieldIndex.Keyword:
                case LocationAliasReference_FieldIndex.RefType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                case LocationAliasReference_FieldIndex.Keyword:
                case LocationAliasReference_FieldIndex.RefType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocationAliasReference_FieldIndex enu = (LocationAliasReference_FieldIndex)index;
            switch (enu)
            {
                case LocationAliasReference_FieldIndex.AliasIndex:
                    return typeof(Int32);
                case LocationAliasReference_FieldIndex.Keyword:
                    return typeof(FormLinkNullable<Keyword>);
                case LocationAliasReference_FieldIndex.RefType:
                    return typeof(FormLinkNullable<LocationReferenceType>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.ALFA,
                        RecordTypes.KNAM,
                        RecordTypes.ALRT
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(LocationAliasReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LocationAliasReferenceSetterCommon
    {
        public static readonly LocationAliasReferenceSetterCommon Instance = new LocationAliasReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationAliasReference item)
        {
            ClearPartial();
            item.AliasIndex = default;
            item.Keyword = FormLinkNullable<Keyword>.Null;
            item.RefType = FormLinkNullable<LocationReferenceType>.Null;
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationAliasReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LocationAliasReferenceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LocationAliasReferenceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LocationAliasReferenceCommon
    {
        public static readonly LocationAliasReferenceCommon Instance = new LocationAliasReferenceCommon();

        public LocationAliasReference.Mask<bool> GetEqualsMask(
            ILocationAliasReferenceGetter item,
            ILocationAliasReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocationAliasReference.Mask<bool>(false);
            ((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationAliasReferenceGetter item,
            ILocationAliasReferenceGetter rhs,
            LocationAliasReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AliasIndex = item.AliasIndex == rhs.AliasIndex;
            ret.Keyword = object.Equals(item.Keyword, rhs.Keyword);
            ret.RefType = object.Equals(item.RefType, rhs.RefType);
        }
        
        public string ToString(
            ILocationAliasReferenceGetter item,
            string? name = null,
            LocationAliasReference.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILocationAliasReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            LocationAliasReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LocationAliasReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (LocationAliasReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILocationAliasReferenceGetter item,
            FileGeneration fg,
            LocationAliasReference.Mask<bool>? printMask = null)
        {
            if ((printMask?.AliasIndex ?? true)
                && item.AliasIndex.TryGet(out var AliasIndexItem))
            {
                fg.AppendItem(AliasIndexItem, "AliasIndex");
            }
            if ((printMask?.Keyword ?? true)
                && item.Keyword.TryGet(out var KeywordItem))
            {
                fg.AppendItem(KeywordItem, "Keyword");
            }
            if ((printMask?.RefType ?? true)
                && item.RefType.TryGet(out var RefTypeItem))
            {
                fg.AppendItem(RefTypeItem, "RefType");
            }
        }
        
        public bool HasBeenSet(
            ILocationAliasReferenceGetter item,
            LocationAliasReference.Mask<bool?> checkMask)
        {
            if (checkMask.AliasIndex.HasValue && checkMask.AliasIndex.Value != (item.AliasIndex != null)) return false;
            if (checkMask.Keyword.HasValue && checkMask.Keyword.Value != (item.Keyword.FormKey != null)) return false;
            if (checkMask.RefType.HasValue && checkMask.RefType.Value != (item.RefType.FormKey != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILocationAliasReferenceGetter item,
            LocationAliasReference.Mask<bool> mask)
        {
            mask.AliasIndex = (item.AliasIndex != null);
            mask.Keyword = (item.Keyword.FormKey != null);
            mask.RefType = (item.RefType.FormKey != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationAliasReferenceGetter? lhs,
            ILocationAliasReferenceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.AliasIndex != rhs.AliasIndex) return false;
            if (!lhs.Keyword.Equals(rhs.Keyword)) return false;
            if (!lhs.RefType.Equals(rhs.RefType)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILocationAliasReferenceGetter item)
        {
            var hash = new HashCode();
            if (item.AliasIndex.TryGet(out var AliasIndexitem))
            {
                hash.Add(AliasIndexitem);
            }
            if (item.Keyword.TryGet(out var Keyworditem))
            {
                hash.Add(Keyworditem);
            }
            if (item.RefType.TryGet(out var RefTypeitem))
            {
                hash.Add(RefTypeitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocationAliasReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILocationAliasReferenceGetter obj)
        {
            if (obj.Keyword.FormKey.TryGet(out var KeywordKey))
            {
                yield return KeywordKey;
            }
            if (obj.RefType.FormKey.TryGet(out var RefTypeKey))
            {
                yield return RefTypeKey;
            }
            yield break;
        }
        
        public void RemapLinks(ILocationAliasReferenceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class LocationAliasReferenceSetterTranslationCommon
    {
        public static readonly LocationAliasReferenceSetterTranslationCommon Instance = new LocationAliasReferenceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILocationAliasReference item,
            ILocationAliasReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)LocationAliasReference_FieldIndex.AliasIndex) ?? true))
            {
                item.AliasIndex = rhs.AliasIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationAliasReference_FieldIndex.Keyword) ?? true))
            {
                item.Keyword = rhs.Keyword.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationAliasReference_FieldIndex.RefType) ?? true))
            {
                item.RefType = rhs.RefType.FormKey;
            }
        }
        
        #endregion
        
        public LocationAliasReference DeepCopy(
            ILocationAliasReferenceGetter item,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            LocationAliasReference ret = (LocationAliasReference)((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LocationAliasReference DeepCopy(
            ILocationAliasReferenceGetter item,
            out LocationAliasReference.ErrorMask errorMask,
            LocationAliasReference.TranslationMask? copyMask = null)
        {
            LocationAliasReference ret = (LocationAliasReference)((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LocationAliasReference DeepCopy(
            ILocationAliasReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocationAliasReference ret = (LocationAliasReference)((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LocationAliasReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationAliasReference_Registration.Instance;
        public static LocationAliasReference_Registration Registration => LocationAliasReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationAliasReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocationAliasReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationAliasReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationAliasReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocationAliasReferenceGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocationAliasReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LocationAliasReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LocationAliasReferenceBinaryWriteTranslation Instance = new LocationAliasReferenceBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILocationAliasReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AliasIndex,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALFA));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Keyword,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.KNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RefType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALRT));
        }

        public void Write(
            MutagenWriter writer,
            ILocationAliasReferenceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILocationAliasReferenceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LocationAliasReferenceBinaryCreateTranslation
    {
        public readonly static LocationAliasReferenceBinaryCreateTranslation Instance = new LocationAliasReferenceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocationAliasReference item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ILocationAliasReference item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALFA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.AliasIndex) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasIndex = frame.ReadInt32();
                    return (int)LocationAliasReference_FieldIndex.AliasIndex;
                }
                case RecordTypeInts.KNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.Keyword) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Keyword = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LocationAliasReference_FieldIndex.Keyword;
                }
                case RecordTypeInts.ALRT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.RefType) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RefType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LocationAliasReference_FieldIndex.RefType;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LocationAliasReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocationAliasReferenceGetter item,
            MutagenWriter writer)
        {
            ((LocationAliasReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LocationAliasReferenceBinaryOverlay :
        BinaryOverlay,
        ILocationAliasReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationAliasReference_Registration.Instance;
        public static LocationAliasReference_Registration Registration => LocationAliasReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationAliasReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationAliasReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationAliasReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocationAliasReferenceGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocationAliasReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocationAliasReferenceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => LocationAliasReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LocationAliasReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationAliasReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationAliasReferenceCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationAliasReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationAliasReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region AliasIndex
        private int? _AliasIndexLocation;
        public Int32? AliasIndex => _AliasIndexLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AliasIndexLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Keyword
        private int? _KeywordLocation;
        public bool Keyword_IsSet => _KeywordLocation.HasValue;
        public IFormLinkNullable<IKeywordGetter> Keyword => _KeywordLocation.HasValue ? new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _KeywordLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IKeywordGetter>.Null;
        #endregion
        #region RefType
        private int? _RefTypeLocation;
        public bool RefType_IsSet => _RefTypeLocation.HasValue;
        public IFormLinkNullable<ILocationReferenceTypeGetter> RefType => _RefTypeLocation.HasValue ? new FormLinkNullable<ILocationReferenceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RefTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationReferenceTypeGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationAliasReferenceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LocationAliasReferenceBinaryOverlay LocationAliasReferenceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocationAliasReferenceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LocationAliasReferenceBinaryOverlay LocationAliasReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LocationAliasReferenceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALFA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.AliasIndex) return ParseResult.Stop;
                    _AliasIndexLocation = (stream.Position - offset);
                    return (int)LocationAliasReference_FieldIndex.AliasIndex;
                }
                case RecordTypeInts.KNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.Keyword) return ParseResult.Stop;
                    _KeywordLocation = (stream.Position - offset);
                    return (int)LocationAliasReference_FieldIndex.Keyword;
                }
                case RecordTypeInts.ALRT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LocationAliasReference_FieldIndex.RefType) return ParseResult.Stop;
                    _RefTypeLocation = (stream.Position - offset);
                    return (int)LocationAliasReference_FieldIndex.RefType;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocationAliasReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

