/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class NavigationMeshInfoMap :
        SkyrimMajorRecord,
        INavigationMeshInfoMapInternal,
        ILoquiObjectSetter<NavigationMeshInfoMap>,
        IEquatable<NavigationMeshInfoMap>,
        IEqualsMask
    {
        #region Ctor
        protected NavigationMeshInfoMap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavMeshVersion
        public UInt32? NavMeshVersion { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? INavigationMeshInfoMapGetter.NavMeshVersion => this.NavMeshVersion;
        #endregion
        #region MapInfos
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavigationMapInfo> _MapInfos = new ExtendedList<NavigationMapInfo>();
        public ExtendedList<NavigationMapInfo> MapInfos
        {
            get => this._MapInfos;
            protected set => this._MapInfos = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavigationMapInfoGetter> INavigationMeshInfoMapGetter.MapInfos => _MapInfos;
        #endregion

        #endregion
        #region PreferredPathing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PreferredPathing? _PreferredPathing;
        public PreferredPathing? PreferredPathing
        {
            get => _PreferredPathing;
            set => _PreferredPathing = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPreferredPathingGetter? INavigationMeshInfoMapGetter.PreferredPathing => this.PreferredPathing;
        #endregion
        #region NVSI
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NVSI;
        public MemorySlice<Byte>? NVSI
        {
            get => this._NVSI;
            set => this._NVSI = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshInfoMapGetter.NVSI => this.NVSI;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavigationMeshInfoMapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavigationMeshInfoMapGetter rhs)) return false;
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(NavigationMeshInfoMap? obj)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NavigationMeshInfoMapXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NavigationMeshInfoMapXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new NavigationMeshInfoMap CreateFromXml(
            XElement node,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NavigationMeshInfoMap CreateFromXml(
            XElement node,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static NavigationMeshInfoMap CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new NavigationMeshInfoMap();
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static NavigationMeshInfoMap CreateFromXml(
            string path,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NavigationMeshInfoMap CreateFromXml(
            string path,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NavigationMeshInfoMap CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NavigationMeshInfoMap CreateFromXml(
            Stream stream,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NavigationMeshInfoMap CreateFromXml(
            Stream stream,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NavigationMeshInfoMap CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.NavMeshVersion = initialValue;
                this.MapInfos = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>());
                this.PreferredPathing = new MaskItem<TItem, PreferredPathing.Mask<TItem>?>(initialValue, new PreferredPathing.Mask<TItem>(initialValue));
                this.NVSI = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem NavMeshVersion,
                TItem MapInfos,
                TItem PreferredPathing,
                TItem NVSI)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.NavMeshVersion = NavMeshVersion;
                this.MapInfos = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>(MapInfos, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>());
                this.PreferredPathing = new MaskItem<TItem, PreferredPathing.Mask<TItem>?>(PreferredPathing, new PreferredPathing.Mask<TItem>(PreferredPathing));
                this.NVSI = NVSI;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavMeshVersion;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>? MapInfos;
            public MaskItem<TItem, PreferredPathing.Mask<TItem>?>? PreferredPathing { get; set; }
            public TItem NVSI;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.NavMeshVersion, rhs.NavMeshVersion)) return false;
                if (!object.Equals(this.MapInfos, rhs.MapInfos)) return false;
                if (!object.Equals(this.PreferredPathing, rhs.PreferredPathing)) return false;
                if (!object.Equals(this.NVSI, rhs.NVSI)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavMeshVersion);
                hash.Add(this.MapInfos);
                hash.Add(this.PreferredPathing);
                hash.Add(this.NVSI);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.NavMeshVersion)) return false;
                if (this.MapInfos != null)
                {
                    if (!eval(this.MapInfos.Overall)) return false;
                    if (this.MapInfos.Specific != null)
                    {
                        foreach (var item in this.MapInfos.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (PreferredPathing != null)
                {
                    if (!eval(this.PreferredPathing.Overall)) return false;
                    if (this.PreferredPathing.Specific != null && !this.PreferredPathing.Specific.All(eval)) return false;
                }
                if (!eval(this.NVSI)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.NavMeshVersion)) return true;
                if (this.MapInfos != null)
                {
                    if (eval(this.MapInfos.Overall)) return true;
                    if (this.MapInfos.Specific != null)
                    {
                        foreach (var item in this.MapInfos.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (PreferredPathing != null)
                {
                    if (eval(this.PreferredPathing.Overall)) return true;
                    if (this.PreferredPathing.Specific != null && this.PreferredPathing.Specific.Any(eval)) return true;
                }
                if (eval(this.NVSI)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMeshInfoMap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.NavMeshVersion = eval(this.NavMeshVersion);
                if (MapInfos != null)
                {
                    obj.MapInfos = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>?>(eval(this.MapInfos.Overall), Enumerable.Empty<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>());
                    if (MapInfos.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>();
                        obj.MapInfos.Specific = l;
                        foreach (var item in MapInfos.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PreferredPathing = this.PreferredPathing == null ? null : new MaskItem<R, PreferredPathing.Mask<R>?>(eval(this.PreferredPathing.Overall), this.PreferredPathing.Specific?.Translate(eval));
                obj.NVSI = eval(this.NVSI);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NavigationMeshInfoMap.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NavigationMeshInfoMap.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NavigationMeshInfoMap.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.NavMeshVersion ?? true)
                    {
                        fg.AppendItem(NavMeshVersion, "NavMeshVersion");
                    }
                    if ((printMask?.MapInfos?.Overall ?? true)
                        && MapInfos.TryGet(out var MapInfosItem))
                    {
                        fg.AppendLine("MapInfos =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MapInfosItem.Overall);
                            if (MapInfosItem.Specific != null)
                            {
                                foreach (var subItem in MapInfosItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PreferredPathing?.Overall ?? true)
                    {
                        PreferredPathing?.ToString(fg);
                    }
                    if (printMask?.NVSI ?? true)
                    {
                        fg.AppendItem(NVSI, "NVSI");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? NavMeshVersion;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>? MapInfos;
            public MaskItem<Exception?, PreferredPathing.ErrorMask?>? PreferredPathing;
            public Exception? NVSI;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        return NavMeshVersion;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        return MapInfos;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        return PreferredPathing;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        return NVSI;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        this.NavMeshVersion = ex;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        this.MapInfos = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>(ex, null);
                        break;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        this.PreferredPathing = new MaskItem<Exception?, PreferredPathing.ErrorMask?>(ex, null);
                        break;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        this.NVSI = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        this.NavMeshVersion = (Exception?)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        this.MapInfos = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        this.PreferredPathing = (MaskItem<Exception?, PreferredPathing.ErrorMask?>?)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        this.NVSI = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (NavMeshVersion != null) return true;
                if (MapInfos != null) return true;
                if (PreferredPathing != null) return true;
                if (NVSI != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(NavMeshVersion, "NavMeshVersion");
                if (MapInfos.TryGet(out var MapInfosItem))
                {
                    fg.AppendLine("MapInfos =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MapInfosItem.Overall);
                        if (MapInfosItem.Specific != null)
                        {
                            foreach (var subItem in MapInfosItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                PreferredPathing?.ToString(fg);
                fg.AppendItem(NVSI, "NVSI");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavMeshVersion = this.NavMeshVersion.Combine(rhs.NavMeshVersion);
                ret.MapInfos = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>(ExceptionExt.Combine(this.MapInfos?.Overall, rhs.MapInfos?.Overall), ExceptionExt.Combine(this.MapInfos?.Specific, rhs.MapInfos?.Specific));
                ret.PreferredPathing = this.PreferredPathing.Combine(rhs.PreferredPathing, (l, r) => l.Combine(r));
                ret.NVSI = this.NVSI.Combine(rhs.NVSI);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool NavMeshVersion;
            public MaskItem<bool, NavigationMapInfo.TranslationMask?> MapInfos;
            public MaskItem<bool, PreferredPathing.TranslationMask?> PreferredPathing;
            public bool NVSI;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.NavMeshVersion = defaultOn;
                this.MapInfos = new MaskItem<bool, NavigationMapInfo.TranslationMask?>(defaultOn, null);
                this.PreferredPathing = new MaskItem<bool, PreferredPathing.TranslationMask?>(defaultOn, null);
                this.NVSI = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((NavMeshVersion, null));
                ret.Add((MapInfos?.Overall ?? true, MapInfos?.Specific?.GetCrystal()));
                ret.Add((PreferredPathing?.Overall ?? true, PreferredPathing?.Specific?.GetCrystal()));
                ret.Add((NVSI, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = NavigationMeshInfoMap_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NavigationMeshInfoMapCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => NavigationMeshInfoMapCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshInfoMapCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshInfoMapCommon.Instance.RemapLinks(this, mapping);
        public NavigationMeshInfoMap(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public NavigationMeshInfoMap(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public NavigationMeshInfoMap(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshInfoMapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new NavigationMeshInfoMap CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static NavigationMeshInfoMap CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavigationMeshInfoMap();
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMeshInfoMap item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INavigationMeshInfoMapGetter)rhs, include);

        void IClearable.Clear()
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NavigationMeshInfoMap GetNew()
        {
            return new NavigationMeshInfoMap();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMeshInfoMap :
        INavigationMeshInfoMapGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<INavigationMeshInfoMapInternal>
    {
        new UInt32? NavMeshVersion { get; set; }
        new ExtendedList<NavigationMapInfo> MapInfos { get; }
        new PreferredPathing? PreferredPathing { get; set; }
        new MemorySlice<Byte>? NVSI { get; set; }
    }

    public partial interface INavigationMeshInfoMapInternal :
        ISkyrimMajorRecordInternal,
        INavigationMeshInfoMap,
        INavigationMeshInfoMapGetter
    {
    }

    public partial interface INavigationMeshInfoMapGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<INavigationMeshInfoMapGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => NavigationMeshInfoMap_Registration.Instance;
        UInt32? NavMeshVersion { get; }
        IReadOnlyList<INavigationMapInfoGetter> MapInfos { get; }
        IPreferredPathingGetter? PreferredPathing { get; }
        ReadOnlyMemorySlice<Byte>? NVSI { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMeshInfoMapMixIn
    {
        public static void Clear(this INavigationMeshInfoMapInternal item)
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMeshInfoMap.Mask<bool> GetEqualsMask(
            this INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INavigationMeshInfoMapGetter item,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.Mask<bool?> checkMask)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NavigationMeshInfoMap.Mask<bool> GetHasBeenSetMask(this INavigationMeshInfoMapGetter item)
        {
            var ret = new NavigationMeshInfoMap.Mask<bool>(false);
            ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INavigationMeshInfoMapInternal lhs,
            INavigationMeshInfoMapGetter rhs,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMeshInfoMapInternal lhs,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            XElement node,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            XElement node,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            string path,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            string path,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            Stream stream,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            Stream stream,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INavigationMeshInfoMapInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INavigationMeshInfoMapInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum NavigationMeshInfoMap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        NavMeshVersion = 6,
        MapInfos = 7,
        PreferredPathing = 8,
        NVSI = 9,
    }
    #endregion

    #region Registration
    public partial class NavigationMeshInfoMap_Registration : ILoquiRegistration
    {
        public static readonly NavigationMeshInfoMap_Registration Instance = new NavigationMeshInfoMap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 273,
            version: 0);

        public const string GUID = "046f7be8-3a4f-44f6-ac46-f94f92ec47eb";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(NavigationMeshInfoMap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMeshInfoMap.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMeshInfoMap);

        public static readonly Type GetterType = typeof(INavigationMeshInfoMapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMeshInfoMap);

        public static readonly Type? InternalSetterType = typeof(INavigationMeshInfoMapInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.NavigationMeshInfoMap";

        public const string Name = "NavigationMeshInfoMap";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAVMESHVERSION":
                    return (ushort)NavigationMeshInfoMap_FieldIndex.NavMeshVersion;
                case "MAPINFOS":
                    return (ushort)NavigationMeshInfoMap_FieldIndex.MapInfos;
                case "PREFERREDPATHING":
                    return (ushort)NavigationMeshInfoMap_FieldIndex.PreferredPathing;
                case "NVSI":
                    return (ushort)NavigationMeshInfoMap_FieldIndex.NVSI;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                    return true;
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                    return true;
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                    return "NavMeshVersion";
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                    return "MapInfos";
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                    return "PreferredPathing";
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return "NVSI";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
            switch (enu)
            {
                case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                    return typeof(UInt32);
                case NavigationMeshInfoMap_FieldIndex.MapInfos:
                    return typeof(ExtendedList<NavigationMapInfo>);
                case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                    return typeof(PreferredPathing);
                case NavigationMeshInfoMap_FieldIndex.NVSI:
                    return typeof(MemorySlice<Byte>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NavigationMeshInfoMapXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVI;
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMeshInfoMapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NavigationMeshInfoMapSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly NavigationMeshInfoMapSetterCommon Instance = new NavigationMeshInfoMapSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMeshInfoMapInternal item)
        {
            ClearPartial();
            item.NavMeshVersion = default;
            item.MapInfos.Clear();
            item.PreferredPathing = null;
            item.NVSI = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInfoMapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInfoMapInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            INavigationMeshInfoMapInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            INavigationMeshInfoMapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    NavigationMeshInfoMapXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (NavigationMeshInfoMap)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (NavigationMeshInfoMap)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<INavigationMeshInfoMapInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NavigationMeshInfoMapBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NavigationMeshInfoMapBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NavigationMeshInfoMap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NavigationMeshInfoMap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NavigationMeshInfoMapCommon : SkyrimMajorRecordCommon
    {
        public new static readonly NavigationMeshInfoMapCommon Instance = new NavigationMeshInfoMapCommon();

        public NavigationMeshInfoMap.Mask<bool> GetEqualsMask(
            INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMeshInfoMap.Mask<bool>(false);
            ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            NavigationMeshInfoMap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NavMeshVersion = item.NavMeshVersion == rhs.NavMeshVersion;
            ret.MapInfos = item.MapInfos.CollectionEqualsHelper(
                rhs.MapInfos,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PreferredPathing = EqualsMaskHelper.EqualsHelper(
                item.PreferredPathing,
                rhs.PreferredPathing,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NVSI = MemorySliceExt.Equal(item.NVSI, rhs.NVSI);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INavigationMeshInfoMapGetter item,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NavigationMeshInfoMap =>");
            }
            else
            {
                fg.AppendLine($"{name} (NavigationMeshInfoMap) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.NavMeshVersion ?? true)
                && item.NavMeshVersion.TryGet(out var NavMeshVersionItem))
            {
                fg.AppendItem(NavMeshVersionItem, "NavMeshVersion");
            }
            if (printMask?.MapInfos?.Overall ?? true)
            {
                fg.AppendLine("MapInfos =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MapInfos)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.PreferredPathing?.Overall ?? true)
                && item.PreferredPathing.TryGet(out var PreferredPathingItem))
            {
                PreferredPathingItem?.ToString(fg, "PreferredPathing");
            }
            if ((printMask?.NVSI ?? true)
                && item.NVSI.TryGet(out var NVSIItem))
            {
                fg.AppendLine($"NVSI => {SpanExt.ToHexString(NVSIItem)}");
            }
        }
        
        public bool HasBeenSet(
            INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.Mask<bool?> checkMask)
        {
            if (checkMask.NavMeshVersion.HasValue && checkMask.NavMeshVersion.Value != (item.NavMeshVersion != null)) return false;
            if (checkMask.PreferredPathing?.Overall.HasValue ?? false && checkMask.PreferredPathing.Overall.Value != (item.PreferredPathing != null)) return false;
            if (checkMask.PreferredPathing?.Specific != null && (item.PreferredPathing == null || !item.PreferredPathing.HasBeenSet(checkMask.PreferredPathing.Specific))) return false;
            if (checkMask.NVSI.HasValue && checkMask.NVSI.Value != (item.NVSI != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.Mask<bool> mask)
        {
            mask.NavMeshVersion = (item.NavMeshVersion != null);
            var MapInfosItem = item.MapInfos;
            mask.MapInfos = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, NavigationMapInfo.Mask<bool>?>>?>(true, MapInfosItem.WithIndex().Select((i) => new MaskItemIndexed<bool, NavigationMapInfo.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemPreferredPathing = item.PreferredPathing;
            mask.PreferredPathing = new MaskItem<bool, PreferredPathing.Mask<bool>?>(itemPreferredPathing != null, itemPreferredPathing?.GetHasBeenSetMask());
            mask.NVSI = (item.NVSI != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static NavigationMeshInfoMap_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new NavigationMeshInfoMap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMeshInfoMapGetter? lhs,
            INavigationMeshInfoMapGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.NavMeshVersion != rhs.NavMeshVersion) return false;
            if (!lhs.MapInfos.SequenceEqual(rhs.MapInfos)) return false;
            if (!object.Equals(lhs.PreferredPathing, rhs.PreferredPathing)) return false;
            if (!MemorySliceExt.Equal(lhs.NVSI, rhs.NVSI)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INavigationMeshInfoMapGetter?)lhs,
                rhs: rhs as INavigationMeshInfoMapGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INavigationMeshInfoMapGetter?)lhs,
                rhs: rhs as INavigationMeshInfoMapGetter);
        }
        
        public virtual int GetHashCode(INavigationMeshInfoMapGetter item)
        {
            var hash = new HashCode();
            if (item.NavMeshVersion.TryGet(out var NavMeshVersionitem))
            {
                hash.Add(NavMeshVersionitem);
            }
            hash.Add(item.MapInfos);
            if (item.PreferredPathing.TryGet(out var PreferredPathingitem))
            {
                hash.Add(PreferredPathingitem);
            }
            if (item.NVSI.TryGet(out var NVSIItem))
            {
                hash.Add(NVSIItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshInfoMapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshInfoMapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NavigationMeshInfoMap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(INavigationMeshInfoMapGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.MapInfos.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.PreferredPathing.TryGet(out var PreferredPathingItems))
            {
                foreach (var item in PreferredPathingItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(INavigationMeshInfoMapGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(NavigationMeshInfoMap obj, NavigationMeshInfoMap rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new NavigationMeshInfoMap(getNextFormKey());
            ret.DeepCopyIn((NavigationMeshInfoMap)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (NavigationMeshInfoMap)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class NavigationMeshInfoMapSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly NavigationMeshInfoMapSetterTranslationCommon Instance = new NavigationMeshInfoMapSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            INavigationMeshInfoMapInternal item,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            INavigationMeshInfoMap item,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion) ?? true))
            {
                item.NavMeshVersion = rhs.NavMeshVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.MapInfos) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.MapInfos);
                try
                {
                    item.MapInfos.SetTo(
                        rhs.MapInfos
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing);
                try
                {
                    if(rhs.PreferredPathing.TryGet(out var rhsPreferredPathing))
                    {
                        item.PreferredPathing = rhsPreferredPathing.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing));
                    }
                    else
                    {
                        item.PreferredPathing = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NVSI) ?? true))
            {
                if(rhs.NVSI.TryGet(out var NVSIrhs))
                {
                    item.NVSI = NVSIrhs.ToArray();
                }
                else
                {
                    item.NVSI = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMapInternal)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMap)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMapInternal)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMap)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class NavigationMeshInfoMap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshInfoMap_Registration.Instance;
        public new static NavigationMeshInfoMap_Registration Registration => NavigationMeshInfoMap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshInfoMapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NavigationMeshInfoMapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshInfoMapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NavigationMeshInfoMapXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NavigationMeshInfoMapXmlWriteTranslation Instance = new NavigationMeshInfoMapXmlWriteTranslation();

        public static void WriteToNodeXml(
            INavigationMeshInfoMapGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.NavMeshVersion != null)
                && (translationMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NavMeshVersion),
                    item: item.NavMeshVersion.Value,
                    fieldIndex: (int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.MapInfos) ?? true))
            {
                ListXmlTranslation<INavigationMapInfoGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.MapInfos),
                    item: item.MapInfos,
                    fieldIndex: (int)NavigationMeshInfoMap_FieldIndex.MapInfos,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NavigationMeshInfoMap_FieldIndex.MapInfos),
                    transl: (XElement subNode, INavigationMapInfoGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((NavigationMapInfoXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.PreferredPathing != null)
                && (translationMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing) ?? true))
            {
                if (item.PreferredPathing.TryGet(out var PreferredPathingItem))
                {
                    ((PreferredPathingXmlWriteTranslation)((IXmlItem)PreferredPathingItem).XmlWriteTranslator).Write(
                        item: PreferredPathingItem,
                        node: node,
                        name: nameof(item.PreferredPathing),
                        fieldIndex: (int)NavigationMeshInfoMap_FieldIndex.PreferredPathing,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing));
                }
            }
            if ((item.NVSI != null)
                && (translationMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NVSI) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NVSI),
                    item: item.NVSI.Value,
                    fieldIndex: (int)NavigationMeshInfoMap_FieldIndex.NVSI,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            INavigationMeshInfoMapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.NavigationMeshInfoMap");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.NavigationMeshInfoMap");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NavigationMeshInfoMapXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static NavigationMeshInfoMapXmlCreateTranslation Instance = new NavigationMeshInfoMapXmlCreateTranslation();

        public static void FillPublicXml(
            INavigationMeshInfoMapInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NavigationMeshInfoMapXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INavigationMeshInfoMapInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "NavMeshVersion":
                    errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion);
                    try
                    {
                        item.NavMeshVersion = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapInfos":
                    errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.MapInfos);
                    try
                    {
                        if (ListXmlTranslation<NavigationMapInfo>.Instance.Parse(
                            node: node,
                            enumer: out var MapInfosItem,
                            transl: LoquiXmlTranslation<NavigationMapInfo>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MapInfos.SetTo(MapInfosItem);
                        }
                        else
                        {
                            item.MapInfos.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PreferredPathing":
                    errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing);
                    try
                    {
                        item.PreferredPathing = LoquiXmlTranslation<PreferredPathing>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NVSI":
                    errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.NVSI);
                    try
                    {
                        item.NVSI = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class NavigationMeshInfoMapXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INavigationMeshInfoMapGetter item,
            XElement node,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshInfoMapXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INavigationMeshInfoMapGetter item,
            string path,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INavigationMeshInfoMapGetter item,
            Stream stream,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NavigationMeshInfoMapBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NavigationMeshInfoMapBinaryWriteTranslation Instance = new NavigationMeshInfoMapBinaryWriteTranslation();

        public static void WriteRecordTypes(
            INavigationMeshInfoMapGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NavMeshVersion,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NVER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INavigationMapInfoGetter>.Instance.Write(
                writer: writer,
                items: item.MapInfos,
                transl: (MutagenWriter subWriter, INavigationMapInfoGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NavigationMapInfoBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.PreferredPathing.TryGet(out var PreferredPathingItem))
            {
                ((PreferredPathingBinaryWriteTranslation)((IBinaryItem)PreferredPathingItem).BinaryWriteTranslator).Write(
                    item: PreferredPathingItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NVSI,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NVSI));
        }

        public void Write(
            MutagenWriter writer,
            INavigationMeshInfoMapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NAVI),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NavigationMeshInfoMapBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static NavigationMeshInfoMapBinaryCreateTranslation Instance = new NavigationMeshInfoMapBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NAVI;
        public static void FillBinaryStructs(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NVER:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NavMeshVersion = frame.ReadUInt32();
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion);
                }
                case RecordTypeInts.NVMI:
                {
                    item.MapInfos.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<NavigationMapInfo>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.NVMI,
                            recordTypeConverter: recordTypeConverter,
                            transl: NavigationMapInfo.TryCreateFromBinary));
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.MapInfos);
                }
                case RecordTypeInts.NVPP:
                {
                    item.PreferredPathing = Mutagen.Bethesda.Skyrim.PreferredPathing.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing);
                }
                case RecordTypeInts.NVSI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NVSI = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.NVSI);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NavigationMeshInfoMapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NavigationMeshInfoMapBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        INavigationMeshInfoMapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshInfoMap_Registration.Instance;
        public new static NavigationMeshInfoMap_Registration Registration => NavigationMeshInfoMap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshInfoMapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshInfoMapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INavigationMeshInfoMapGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NavigationMeshInfoMapCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => NavigationMeshInfoMapCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshInfoMapCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshInfoMapCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NavigationMeshInfoMapXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NavigationMeshInfoMapXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshInfoMapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region NavMeshVersion
        private int? _NavMeshVersionLocation;
        public UInt32? NavMeshVersion => _NavMeshVersionLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NavMeshVersionLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<INavigationMapInfoGetter> MapInfos { get; private set; } = ListExt.Empty<NavigationMapInfoBinaryOverlay>();
        #region PreferredPathing
        private RangeInt32? _PreferredPathingLocation;
        public IPreferredPathingGetter? PreferredPathing => _PreferredPathingLocation.HasValue ? PreferredPathingBinaryOverlay.PreferredPathingFactory(new OverlayStream(_data.Slice(_PreferredPathingLocation!.Value.Min), _package), _package) : default;
        public bool PreferredPathing_IsSet => _PreferredPathingLocation.HasValue;
        #endregion
        #region NVSI
        private int? _NVSILocation;
        public ReadOnlyMemorySlice<Byte>? NVSI => _NVSILocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NVSILocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMeshInfoMapBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NavigationMeshInfoMapBinaryOverlay NavigationMeshInfoMapFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new NavigationMeshInfoMapBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NavigationMeshInfoMapBinaryOverlay NavigationMeshInfoMapFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NavigationMeshInfoMapFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NVER:
                {
                    _NavMeshVersionLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion);
                }
                case RecordTypeInts.NVMI:
                {
                    this.MapInfos = BinaryOverlayList<NavigationMapInfoBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => NavigationMapInfoBinaryOverlay.NavigationMapInfoFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.MapInfos);
                }
                case RecordTypeInts.NVPP:
                {
                    _PreferredPathingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing);
                }
                case RecordTypeInts.NVSI:
                {
                    _NVSILocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)NavigationMeshInfoMap_FieldIndex.NVSI);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavigationMeshInfoMapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

