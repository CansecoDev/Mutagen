/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class NpcInheritSound :
        ANpcSoundDefinition,
        INpcInheritSound,
        ILoquiObjectSetter<NpcInheritSound>,
        IEquatable<NpcInheritSound>
    {
        #region Ctor
        public NpcInheritSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region InheritsSoundsFrom
        public FormLinkNullable<Npc> InheritsSoundsFrom { get; set; } = new FormLinkNullable<Npc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<INpcGetter> INpcInheritSoundGetter.InheritsSoundsFrom => this.InheritsSoundsFrom;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcInheritSoundMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcInheritSoundGetter rhs)) return false;
            return ((NpcInheritSoundCommon)((INpcInheritSoundGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(NpcInheritSound? obj)
        {
            return ((NpcInheritSoundCommon)((INpcInheritSoundGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcInheritSoundCommon)((INpcInheritSoundGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANpcSoundDefinition.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem InheritsSoundsFrom)
            : base()
            {
                this.InheritsSoundsFrom = InheritsSoundsFrom;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem InheritsSoundsFrom;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.InheritsSoundsFrom, rhs.InheritsSoundsFrom)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.InheritsSoundsFrom);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.InheritsSoundsFrom)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.InheritsSoundsFrom)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcInheritSound.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.InheritsSoundsFrom = eval(this.InheritsSoundsFrom);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NpcInheritSound.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NpcInheritSound.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NpcInheritSound.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.InheritsSoundsFrom ?? true)
                    {
                        fg.AppendItem(InheritsSoundsFrom, "InheritsSoundsFrom");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANpcSoundDefinition.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? InheritsSoundsFrom;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
                switch (enu)
                {
                    case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                        return InheritsSoundsFrom;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
                switch (enu)
                {
                    case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                        this.InheritsSoundsFrom = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
                switch (enu)
                {
                    case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                        this.InheritsSoundsFrom = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (InheritsSoundsFrom != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(InheritsSoundsFrom, "InheritsSoundsFrom");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.InheritsSoundsFrom = this.InheritsSoundsFrom.Combine(rhs.InheritsSoundsFrom);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANpcSoundDefinition.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool InheritsSoundsFrom;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.InheritsSoundsFrom = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((InheritsSoundsFrom, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NpcInheritSound_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NpcInheritSoundCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => NpcInheritSoundCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcInheritSoundCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcInheritSoundCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcInheritSoundBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcInheritSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static NpcInheritSound CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcInheritSound();
            ((NpcInheritSoundSetterCommon)((INpcInheritSoundGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcInheritSound item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NpcInheritSoundSetterCommon)((INpcInheritSoundGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NpcInheritSound GetNew()
        {
            return new NpcInheritSound();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcInheritSound :
        INpcInheritSoundGetter,
        IANpcSoundDefinition,
        ILoquiObjectSetter<INpcInheritSound>,
        ILinkedFormKeyContainer
    {
        new FormLinkNullable<Npc> InheritsSoundsFrom { get; set; }
    }

    public partial interface INpcInheritSoundGetter :
        IANpcSoundDefinitionGetter,
        ILoquiObject<INpcInheritSoundGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => NpcInheritSound_Registration.Instance;
        IFormLinkNullable<INpcGetter> InheritsSoundsFrom { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcInheritSoundMixIn
    {
        public static void Clear(this INpcInheritSound item)
        {
            ((NpcInheritSoundSetterCommon)((INpcInheritSoundGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcInheritSound.Mask<bool> GetEqualsMask(
            this INpcInheritSoundGetter item,
            INpcInheritSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcInheritSoundGetter item,
            string? name = null,
            NpcInheritSound.Mask<bool>? printMask = null)
        {
            return ((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcInheritSoundGetter item,
            FileGeneration fg,
            string? name = null,
            NpcInheritSound.Mask<bool>? printMask = null)
        {
            ((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcInheritSoundGetter item,
            INpcInheritSoundGetter rhs)
        {
            return ((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcInheritSound lhs,
            INpcInheritSoundGetter rhs,
            out NpcInheritSound.ErrorMask errorMask,
            NpcInheritSound.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcInheritSoundSetterTranslationCommon)((INpcInheritSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = NpcInheritSound.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInheritSound lhs,
            INpcInheritSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcInheritSoundSetterTranslationCommon)((INpcInheritSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static NpcInheritSound DeepCopy(
            this INpcInheritSoundGetter item,
            NpcInheritSound.TranslationMask? copyMask = null)
        {
            return ((NpcInheritSoundSetterTranslationCommon)((INpcInheritSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcInheritSound DeepCopy(
            this INpcInheritSoundGetter item,
            out NpcInheritSound.ErrorMask errorMask,
            NpcInheritSound.TranslationMask? copyMask = null)
        {
            return ((NpcInheritSoundSetterTranslationCommon)((INpcInheritSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcInheritSound DeepCopy(
            this INpcInheritSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcInheritSoundSetterTranslationCommon)((INpcInheritSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcInheritSound item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcInheritSoundSetterCommon)((INpcInheritSoundGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum NpcInheritSound_FieldIndex
    {
        InheritsSoundsFrom = 0,
    }
    #endregion

    #region Registration
    public partial class NpcInheritSound_Registration : ILoquiRegistration
    {
        public static readonly NpcInheritSound_Registration Instance = new NpcInheritSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 211,
            version: 0);

        public const string GUID = "055664b9-c721-4840-9cd4-6d4008dd9e03";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NpcInheritSound.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcInheritSound.ErrorMask);

        public static readonly Type ClassType = typeof(NpcInheritSound);

        public static readonly Type GetterType = typeof(INpcInheritSoundGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcInheritSound);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.NpcInheritSound";

        public const string Name = "NpcInheritSound";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INHERITSSOUNDSFROM":
                    return (ushort)NpcInheritSound_FieldIndex.InheritsSoundsFrom;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return false;
                default:
                    return ANpcSoundDefinition_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return false;
                default:
                    return ANpcSoundDefinition_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return false;
                default:
                    return ANpcSoundDefinition_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return "InheritsSoundsFrom";
                default:
                    return ANpcSoundDefinition_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return false;
                default:
                    return ANpcSoundDefinition_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return false;
                default:
                    return ANpcSoundDefinition_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NpcInheritSound_FieldIndex enu = (NpcInheritSound_FieldIndex)index;
            switch (enu)
            {
                case NpcInheritSound_FieldIndex.InheritsSoundsFrom:
                    return typeof(FormLinkNullable<Npc>);
                default:
                    return ANpcSoundDefinition_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSCR;
        public static readonly Type BinaryWriteTranslation = typeof(NpcInheritSoundBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcInheritSoundSetterCommon : ANpcSoundDefinitionSetterCommon
    {
        public new static readonly NpcInheritSoundSetterCommon Instance = new NpcInheritSoundSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInheritSound item)
        {
            ClearPartial();
            item.InheritsSoundsFrom = FormLinkNullable<Npc>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IANpcSoundDefinition item)
        {
            Clear(item: (INpcInheritSound)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcInheritSound item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NpcInheritSoundBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcInheritSoundBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANpcSoundDefinition item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NpcInheritSound)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NpcInheritSoundCommon : ANpcSoundDefinitionCommon
    {
        public new static readonly NpcInheritSoundCommon Instance = new NpcInheritSoundCommon();

        public NpcInheritSound.Mask<bool> GetEqualsMask(
            INpcInheritSoundGetter item,
            INpcInheritSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcInheritSound.Mask<bool>(false);
            ((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcInheritSoundGetter item,
            INpcInheritSoundGetter rhs,
            NpcInheritSound.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.InheritsSoundsFrom = object.Equals(item.InheritsSoundsFrom, rhs.InheritsSoundsFrom);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INpcInheritSoundGetter item,
            string? name = null,
            NpcInheritSound.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcInheritSoundGetter item,
            FileGeneration fg,
            string? name = null,
            NpcInheritSound.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NpcInheritSound =>");
            }
            else
            {
                fg.AppendLine($"{name} (NpcInheritSound) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcInheritSoundGetter item,
            FileGeneration fg,
            NpcInheritSound.Mask<bool>? printMask = null)
        {
            ANpcSoundDefinitionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.InheritsSoundsFrom ?? true)
                && item.InheritsSoundsFrom.TryGet(out var InheritsSoundsFromItem))
            {
                fg.AppendItem(InheritsSoundsFromItem, "InheritsSoundsFrom");
            }
        }
        
        public static NpcInheritSound_FieldIndex ConvertFieldIndex(ANpcSoundDefinition_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcInheritSoundGetter? lhs,
            INpcInheritSoundGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.InheritsSoundsFrom.Equals(rhs.InheritsSoundsFrom)) return false;
            return true;
        }
        
        public override bool Equals(
            IANpcSoundDefinitionGetter? lhs,
            IANpcSoundDefinitionGetter? rhs)
        {
            return Equals(
                lhs: (INpcInheritSoundGetter?)lhs,
                rhs: rhs as INpcInheritSoundGetter);
        }
        
        public virtual int GetHashCode(INpcInheritSoundGetter item)
        {
            var hash = new HashCode();
            if (item.InheritsSoundsFrom.TryGet(out var InheritsSoundsFromitem))
            {
                hash.Add(InheritsSoundsFromitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANpcSoundDefinitionGetter item)
        {
            return GetHashCode(item: (INpcInheritSoundGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NpcInheritSound.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(INpcInheritSoundGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.InheritsSoundsFrom.FormKey.TryGet(out var InheritsSoundsFromKey))
            {
                yield return InheritsSoundsFromKey;
            }
            yield break;
        }
        
        public void RemapLinks(INpcInheritSoundGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class NpcInheritSoundSetterTranslationCommon : ANpcSoundDefinitionSetterTranslationCommon
    {
        public new static readonly NpcInheritSoundSetterTranslationCommon Instance = new NpcInheritSoundSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            INpcInheritSound item,
            INpcInheritSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IANpcSoundDefinition)item,
                (IANpcSoundDefinitionGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)NpcInheritSound_FieldIndex.InheritsSoundsFrom) ?? true))
            {
                item.InheritsSoundsFrom = rhs.InheritsSoundsFrom.FormKey;
            }
        }
        
        
        public override void DeepCopyIn(
            IANpcSoundDefinition item,
            IANpcSoundDefinitionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpcInheritSound)item,
                rhs: (INpcInheritSoundGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public NpcInheritSound DeepCopy(
            INpcInheritSoundGetter item,
            NpcInheritSound.TranslationMask? copyMask = null)
        {
            NpcInheritSound ret = (NpcInheritSound)((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public NpcInheritSound DeepCopy(
            INpcInheritSoundGetter item,
            out NpcInheritSound.ErrorMask errorMask,
            NpcInheritSound.TranslationMask? copyMask = null)
        {
            NpcInheritSound ret = (NpcInheritSound)((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public NpcInheritSound DeepCopy(
            INpcInheritSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcInheritSound ret = (NpcInheritSound)((NpcInheritSoundCommon)((INpcInheritSoundGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class NpcInheritSound
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcInheritSound_Registration.Instance;
        public new static NpcInheritSound_Registration Registration => NpcInheritSound_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcInheritSoundCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcInheritSoundSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcInheritSoundSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NpcInheritSoundBinaryWriteTranslation :
        ANpcSoundDefinitionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NpcInheritSoundBinaryWriteTranslation Instance = new NpcInheritSoundBinaryWriteTranslation();

        public static void WriteRecordTypes(
            INpcInheritSoundGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InheritsSoundsFrom,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CSCR));
        }

        public void Write(
            MutagenWriter writer,
            INpcInheritSoundGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcInheritSoundGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcSoundDefinitionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcInheritSoundGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcInheritSoundBinaryCreateTranslation : ANpcSoundDefinitionBinaryCreateTranslation
    {
        public new readonly static NpcInheritSoundBinaryCreateTranslation Instance = new NpcInheritSoundBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcInheritSound item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            INpcInheritSound item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSCR:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)NpcInheritSound_FieldIndex.InheritsSoundsFrom) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InheritsSoundsFrom = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)NpcInheritSound_FieldIndex.InheritsSoundsFrom;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NpcInheritSoundBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NpcInheritSoundBinaryOverlay :
        ANpcSoundDefinitionBinaryOverlay,
        INpcInheritSoundGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcInheritSound_Registration.Instance;
        public new static NpcInheritSound_Registration Registration => NpcInheritSound_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcInheritSoundCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcInheritSoundSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NpcInheritSoundCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => NpcInheritSoundCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcInheritSoundBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcInheritSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region InheritsSoundsFrom
        private int? _InheritsSoundsFromLocation;
        public IFormLinkNullable<INpcGetter> InheritsSoundsFrom => _InheritsSoundsFromLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _InheritsSoundsFromLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcInheritSoundBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NpcInheritSoundBinaryOverlay NpcInheritSoundFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcInheritSoundBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NpcInheritSoundBinaryOverlay NpcInheritSoundFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcInheritSoundFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSCR:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)NpcInheritSound_FieldIndex.InheritsSoundsFrom) return ParseResult.Stop;
                    _InheritsSoundsFromLocation = (stream.Position - offset);
                    return (int)NpcInheritSound_FieldIndex.InheritsSoundsFrom;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcInheritSoundMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

