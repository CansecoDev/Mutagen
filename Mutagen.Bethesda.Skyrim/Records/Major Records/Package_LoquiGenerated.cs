/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Package :
        SkyrimMajorRecord,
        IPackageInternal,
        ILoquiObjectSetter<Package>,
        IEquatable<Package>,
        IEqualsMask
    {
        #region Ctor
        protected Package()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FragmentsAdapter? _VirtualMachineAdapter;
        public FragmentsAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFragmentsAdapterGetter? IPackageGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Flags
        public Package.Flag Flags { get; set; } = default;
        #endregion
        #region Type
        public Package.Types Type { get; set; } = default;
        #endregion
        #region InterruptOverride
        public Package.Interrupt InterruptOverride { get; set; } = default;
        #endregion
        #region PreferredSpeed
        public Package.Speed PreferredSpeed { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region InteruptFlags
        public Package.InterruptFlag InteruptFlags { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region ScheduleMonth
        public SByte ScheduleMonth { get; set; } = default;
        #endregion
        #region ScheduleDayOfWeek
        public Package.DayOfWeek ScheduleDayOfWeek { get; set; } = default;
        #endregion
        #region ScheduleDate
        public Byte ScheduleDate { get; set; } = default;
        #endregion
        #region ScheduleHour
        public SByte ScheduleHour { get; set; } = default;
        #endregion
        #region ScheduleMinute
        public SByte ScheduleMinute { get; set; } = default;
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown3 = new byte[3];
        public MemorySlice<Byte> Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPackageGetter.Unknown3 => this.Unknown3;
        #endregion
        #region ScheduleDurationInMinutes
        public Int32 ScheduleDurationInMinutes { get; set; } = default;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Unknown4
        public Int32? Unknown4 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPackageGetter.Unknown4 => this.Unknown4;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageIdles? _IdleAnimations;
        public PackageIdles? IdleAnimations
        {
            get => _IdleAnimations;
            set => _IdleAnimations = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageIdlesGetter? IPackageGetter.IdleAnimations => this.IdleAnimations;
        #endregion
        #region CombatStyle
        public FormLinkNullable<CombatStyle> CombatStyle { get; set; } = new FormLinkNullable<CombatStyle>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ICombatStyleGetter> IPackageGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region OwnerQuest
        public FormLinkNullable<Quest> OwnerQuest { get; set; } = new FormLinkNullable<Quest>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IQuestGetter> IPackageGetter.OwnerQuest => this.OwnerQuest;
        #endregion
        #region PackageTemplate
        public FormLink<Package> PackageTemplate { get; set; } = new FormLink<Package>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IPackageGetter> IPackageGetter.PackageTemplate => this.PackageTemplate;
        #endregion
        #region DataInputVersion
        public Int32 DataInputVersion { get; set; } = default;
        #endregion
        #region Data
        private readonly Dictionary<SByte, APackageData> _Data = new Dictionary<SByte, APackageData>();
        public IDictionary<SByte, APackageData> Data => _Data;
        #region Interface Members
        IDictionary<SByte, APackageData> IPackage.Data => _Data;
        IReadOnlyDictionary<SByte, IAPackageDataGetter> IPackageGetter.Data => _Data.Covariant<SByte, APackageData, IAPackageDataGetter>();
        #endregion

        #endregion
        #region XnamMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _XnamMarker = new byte[0];
        public MemorySlice<Byte> XnamMarker
        {
            get => _XnamMarker;
            set => this._XnamMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPackageGetter.XnamMarker => this.XnamMarker;
        #endregion
        #region ProcedureTree
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PackageBranch> _ProcedureTree = new ExtendedList<PackageBranch>();
        public ExtendedList<PackageBranch> ProcedureTree
        {
            get => this._ProcedureTree;
            protected set => this._ProcedureTree = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPackageBranchGetter> IPackageGetter.ProcedureTree => _ProcedureTree;
        #endregion

        #endregion
        #region OnBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnBegin;
        public PackageEvent? OnBegin
        {
            get => _OnBegin;
            set => _OnBegin = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnBegin => this.OnBegin;
        #endregion
        #region OnEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnEnd;
        public PackageEvent? OnEnd
        {
            get => _OnEnd;
            set => _OnEnd = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnEnd => this.OnEnd;
        #endregion
        #region OnChange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnChange;
        public PackageEvent? OnChange
        {
            get => _OnChange;
            set => _OnChange = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnChange => this.OnChange;
        #endregion
        #region PKDTDataTypeState
        public Package.PKDTDataType PKDTDataTypeState { get; set; } = default;
        #endregion
        #region PSDTDataTypeState
        public Package.PSDTDataType PSDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageGetter rhs)) return false;
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Package obj)
        {
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageCommon)((IPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Package CreateFromXml(
            XElement node,
            Package.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Package CreateFromXml(
            XElement node,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Package CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Package();
            ((PackageSetterCommon)((IPackageGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Package CreateFromXml(
            string path,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Package CreateFromXml(
            string path,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Package CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Package CreateFromXml(
            Stream stream,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Package CreateFromXml(
            Stream stream,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Package CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, FragmentsAdapter.Mask<TItem>?>(initialValue, new FragmentsAdapter.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.InterruptOverride = initialValue;
                this.PreferredSpeed = initialValue;
                this.Unknown = initialValue;
                this.InteruptFlags = initialValue;
                this.Unknown2 = initialValue;
                this.ScheduleMonth = initialValue;
                this.ScheduleDayOfWeek = initialValue;
                this.ScheduleDate = initialValue;
                this.ScheduleHour = initialValue;
                this.ScheduleMinute = initialValue;
                this.Unknown3 = initialValue;
                this.ScheduleDurationInMinutes = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unknown4 = initialValue;
                this.IdleAnimations = new MaskItem<TItem, PackageIdles.Mask<TItem>?>(initialValue, new PackageIdles.Mask<TItem>(initialValue));
                this.CombatStyle = initialValue;
                this.OwnerQuest = initialValue;
                this.PackageTemplate = initialValue;
                this.DataInputVersion = initialValue;
                this.Data = new MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>(initialValue, null);
                this.XnamMarker = initialValue;
                this.ProcedureTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>());
                this.OnBegin = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.OnEnd = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.OnChange = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.PKDTDataTypeState = initialValue;
                this.PSDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Flags,
                TItem Type,
                TItem InterruptOverride,
                TItem PreferredSpeed,
                TItem Unknown,
                TItem InteruptFlags,
                TItem Unknown2,
                TItem ScheduleMonth,
                TItem ScheduleDayOfWeek,
                TItem ScheduleDate,
                TItem ScheduleHour,
                TItem ScheduleMinute,
                TItem Unknown3,
                TItem ScheduleDurationInMinutes,
                TItem Conditions,
                TItem Unknown4,
                TItem IdleAnimations,
                TItem CombatStyle,
                TItem OwnerQuest,
                TItem PackageTemplate,
                TItem DataInputVersion,
                TItem Data,
                TItem XnamMarker,
                TItem ProcedureTree,
                TItem OnBegin,
                TItem OnEnd,
                TItem OnChange,
                TItem PKDTDataTypeState,
                TItem PSDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, FragmentsAdapter.Mask<TItem>?>(VirtualMachineAdapter, new FragmentsAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Flags = Flags;
                this.Type = Type;
                this.InterruptOverride = InterruptOverride;
                this.PreferredSpeed = PreferredSpeed;
                this.Unknown = Unknown;
                this.InteruptFlags = InteruptFlags;
                this.Unknown2 = Unknown2;
                this.ScheduleMonth = ScheduleMonth;
                this.ScheduleDayOfWeek = ScheduleDayOfWeek;
                this.ScheduleDate = ScheduleDate;
                this.ScheduleHour = ScheduleHour;
                this.ScheduleMinute = ScheduleMinute;
                this.Unknown3 = Unknown3;
                this.ScheduleDurationInMinutes = ScheduleDurationInMinutes;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unknown4 = Unknown4;
                this.IdleAnimations = new MaskItem<TItem, PackageIdles.Mask<TItem>?>(IdleAnimations, new PackageIdles.Mask<TItem>(IdleAnimations));
                this.CombatStyle = CombatStyle;
                this.OwnerQuest = OwnerQuest;
                this.PackageTemplate = PackageTemplate;
                this.DataInputVersion = DataInputVersion;
                this.Data = new MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>(Data, null);
                this.XnamMarker = XnamMarker;
                this.ProcedureTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>(ProcedureTree, Enumerable.Empty<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>());
                this.OnBegin = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnBegin, new PackageEvent.Mask<TItem>(OnBegin));
                this.OnEnd = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnEnd, new PackageEvent.Mask<TItem>(OnEnd));
                this.OnChange = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnChange, new PackageEvent.Mask<TItem>(OnChange));
                this.PKDTDataTypeState = PKDTDataTypeState;
                this.PSDTDataTypeState = PSDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, FragmentsAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Flags;
            public TItem Type;
            public TItem InterruptOverride;
            public TItem PreferredSpeed;
            public TItem Unknown;
            public TItem InteruptFlags;
            public TItem Unknown2;
            public TItem ScheduleMonth;
            public TItem ScheduleDayOfWeek;
            public TItem ScheduleDate;
            public TItem ScheduleHour;
            public TItem ScheduleMinute;
            public TItem Unknown3;
            public TItem ScheduleDurationInMinutes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Unknown4;
            public MaskItem<TItem, PackageIdles.Mask<TItem>?>? IdleAnimations { get; set; }
            public TItem CombatStyle;
            public TItem OwnerQuest;
            public TItem PackageTemplate;
            public TItem DataInputVersion;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>? Data;
            public TItem XnamMarker;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>? ProcedureTree;
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnBegin { get; set; }
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnEnd { get; set; }
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnChange { get; set; }
            public TItem PKDTDataTypeState;
            public TItem PSDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.InterruptOverride, rhs.InterruptOverride)) return false;
                if (!object.Equals(this.PreferredSpeed, rhs.PreferredSpeed)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.InteruptFlags, rhs.InteruptFlags)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ScheduleMonth, rhs.ScheduleMonth)) return false;
                if (!object.Equals(this.ScheduleDayOfWeek, rhs.ScheduleDayOfWeek)) return false;
                if (!object.Equals(this.ScheduleDate, rhs.ScheduleDate)) return false;
                if (!object.Equals(this.ScheduleHour, rhs.ScheduleHour)) return false;
                if (!object.Equals(this.ScheduleMinute, rhs.ScheduleMinute)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.ScheduleDurationInMinutes, rhs.ScheduleDurationInMinutes)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.OwnerQuest, rhs.OwnerQuest)) return false;
                if (!object.Equals(this.PackageTemplate, rhs.PackageTemplate)) return false;
                if (!object.Equals(this.DataInputVersion, rhs.DataInputVersion)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.XnamMarker, rhs.XnamMarker)) return false;
                if (!object.Equals(this.ProcedureTree, rhs.ProcedureTree)) return false;
                if (!object.Equals(this.OnBegin, rhs.OnBegin)) return false;
                if (!object.Equals(this.OnEnd, rhs.OnEnd)) return false;
                if (!object.Equals(this.OnChange, rhs.OnChange)) return false;
                if (!object.Equals(this.PKDTDataTypeState, rhs.PKDTDataTypeState)) return false;
                if (!object.Equals(this.PSDTDataTypeState, rhs.PSDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.InterruptOverride);
                hash.Add(this.PreferredSpeed);
                hash.Add(this.Unknown);
                hash.Add(this.InteruptFlags);
                hash.Add(this.Unknown2);
                hash.Add(this.ScheduleMonth);
                hash.Add(this.ScheduleDayOfWeek);
                hash.Add(this.ScheduleDate);
                hash.Add(this.ScheduleHour);
                hash.Add(this.ScheduleMinute);
                hash.Add(this.Unknown3);
                hash.Add(this.ScheduleDurationInMinutes);
                hash.Add(this.Conditions);
                hash.Add(this.Unknown4);
                hash.Add(this.IdleAnimations);
                hash.Add(this.CombatStyle);
                hash.Add(this.OwnerQuest);
                hash.Add(this.PackageTemplate);
                hash.Add(this.DataInputVersion);
                hash.Add(this.Data);
                hash.Add(this.XnamMarker);
                hash.Add(this.ProcedureTree);
                hash.Add(this.OnBegin);
                hash.Add(this.OnEnd);
                hash.Add(this.OnChange);
                hash.Add(this.PKDTDataTypeState);
                hash.Add(this.PSDTDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.InterruptOverride)) return false;
                if (!eval(this.PreferredSpeed)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.InteruptFlags)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ScheduleMonth)) return false;
                if (!eval(this.ScheduleDayOfWeek)) return false;
                if (!eval(this.ScheduleDate)) return false;
                if (!eval(this.ScheduleHour)) return false;
                if (!eval(this.ScheduleMinute)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.ScheduleDurationInMinutes)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown4)) return false;
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.OwnerQuest)) return false;
                if (!eval(this.PackageTemplate)) return false;
                if (!eval(this.DataInputVersion)) return false;
                if (this.Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (!eval(item.Overall)) return false;
                                if (!item.Specific?.All(eval) ?? false) return false;
                            }
                        }
                    }
                }
                if (!eval(this.XnamMarker)) return false;
                if (this.ProcedureTree != null)
                {
                    if (!eval(this.ProcedureTree.Overall)) return false;
                    if (this.ProcedureTree.Specific != null)
                    {
                        foreach (var item in this.ProcedureTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (OnBegin != null)
                {
                    if (!eval(this.OnBegin.Overall)) return false;
                    if (this.OnBegin.Specific != null && !this.OnBegin.Specific.All(eval)) return false;
                }
                if (OnEnd != null)
                {
                    if (!eval(this.OnEnd.Overall)) return false;
                    if (this.OnEnd.Specific != null && !this.OnEnd.Specific.All(eval)) return false;
                }
                if (OnChange != null)
                {
                    if (!eval(this.OnChange.Overall)) return false;
                    if (this.OnChange.Specific != null && !this.OnChange.Specific.All(eval)) return false;
                }
                if (!eval(this.PKDTDataTypeState)) return false;
                if (!eval(this.PSDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.InterruptOverride)) return true;
                if (eval(this.PreferredSpeed)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.InteruptFlags)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ScheduleMonth)) return true;
                if (eval(this.ScheduleDayOfWeek)) return true;
                if (eval(this.ScheduleDate)) return true;
                if (eval(this.ScheduleHour)) return true;
                if (eval(this.ScheduleMinute)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.ScheduleDurationInMinutes)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Unknown4)) return true;
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (eval(this.CombatStyle)) return true;
                if (eval(this.OwnerQuest)) return true;
                if (eval(this.PackageTemplate)) return true;
                if (eval(this.DataInputVersion)) return true;
                if (this.Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (eval(item.Overall)) return true;
                                if (item.Specific?.Any(eval) ?? false) return true;
                            }
                        }
                    }
                }
                if (eval(this.XnamMarker)) return true;
                if (this.ProcedureTree != null)
                {
                    if (eval(this.ProcedureTree.Overall)) return true;
                    if (this.ProcedureTree.Specific != null)
                    {
                        foreach (var item in this.ProcedureTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (OnBegin != null)
                {
                    if (eval(this.OnBegin.Overall)) return true;
                    if (this.OnBegin.Specific != null && this.OnBegin.Specific.Any(eval)) return true;
                }
                if (OnEnd != null)
                {
                    if (eval(this.OnEnd.Overall)) return true;
                    if (this.OnEnd.Specific != null && this.OnEnd.Specific.Any(eval)) return true;
                }
                if (OnChange != null)
                {
                    if (eval(this.OnChange.Overall)) return true;
                    if (this.OnChange.Specific != null && this.OnChange.Specific.Any(eval)) return true;
                }
                if (eval(this.PKDTDataTypeState)) return true;
                if (eval(this.PSDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Package.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, FragmentsAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.InterruptOverride = eval(this.InterruptOverride);
                obj.PreferredSpeed = eval(this.PreferredSpeed);
                obj.Unknown = eval(this.Unknown);
                obj.InteruptFlags = eval(this.InteruptFlags);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ScheduleMonth = eval(this.ScheduleMonth);
                obj.ScheduleDayOfWeek = eval(this.ScheduleDayOfWeek);
                obj.ScheduleDate = eval(this.ScheduleDate);
                obj.ScheduleHour = eval(this.ScheduleHour);
                obj.ScheduleMinute = eval(this.ScheduleMinute);
                obj.Unknown3 = eval(this.Unknown3);
                obj.ScheduleDurationInMinutes = eval(this.ScheduleDurationInMinutes);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Unknown4 = eval(this.Unknown4);
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, PackageIdles.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.CombatStyle = eval(this.CombatStyle);
                obj.OwnerQuest = eval(this.OwnerQuest);
                obj.PackageTemplate = eval(this.PackageTemplate);
                obj.DataInputVersion = eval(this.DataInputVersion);
                if (Data != null)
                {
                    obj.Data = new MaskItem<R, IEnumerable<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>>?>(eval(this.Data.Overall), default);
                    if (Data.Specific != null)
                    {
                        List<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>> l = new List<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>>();
                        obj.Data.Specific = l;
                        foreach (var item in Data.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.XnamMarker = eval(this.XnamMarker);
                if (ProcedureTree != null)
                {
                    obj.ProcedureTree = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PackageBranch.Mask<R>?>>?>(eval(this.ProcedureTree.Overall), Enumerable.Empty<MaskItemIndexed<R, PackageBranch.Mask<R>?>>());
                    if (ProcedureTree.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PackageBranch.Mask<R>?>>();
                        obj.ProcedureTree.Specific = l;
                        foreach (var item in ProcedureTree.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PackageBranch.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PackageBranch.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.OnBegin = this.OnBegin == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnBegin.Overall), this.OnBegin.Specific?.Translate(eval));
                obj.OnEnd = this.OnEnd == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnEnd.Overall), this.OnEnd.Specific?.Translate(eval));
                obj.OnChange = this.OnChange == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnChange.Overall), this.OnChange.Specific?.Translate(eval));
                obj.PKDTDataTypeState = eval(this.PKDTDataTypeState);
                obj.PSDTDataTypeState = eval(this.PSDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Package.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Package.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Package.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.InterruptOverride ?? true)
                    {
                        fg.AppendItem(InterruptOverride, "InterruptOverride");
                    }
                    if (printMask?.PreferredSpeed ?? true)
                    {
                        fg.AppendItem(PreferredSpeed, "PreferredSpeed");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.InteruptFlags ?? true)
                    {
                        fg.AppendItem(InteruptFlags, "InteruptFlags");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ScheduleMonth ?? true)
                    {
                        fg.AppendItem(ScheduleMonth, "ScheduleMonth");
                    }
                    if (printMask?.ScheduleDayOfWeek ?? true)
                    {
                        fg.AppendItem(ScheduleDayOfWeek, "ScheduleDayOfWeek");
                    }
                    if (printMask?.ScheduleDate ?? true)
                    {
                        fg.AppendItem(ScheduleDate, "ScheduleDate");
                    }
                    if (printMask?.ScheduleHour ?? true)
                    {
                        fg.AppendItem(ScheduleHour, "ScheduleHour");
                    }
                    if (printMask?.ScheduleMinute ?? true)
                    {
                        fg.AppendItem(ScheduleMinute, "ScheduleMinute");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.ScheduleDurationInMinutes ?? true)
                    {
                        fg.AppendItem(ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        fg.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.ToString(fg);
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.OwnerQuest ?? true)
                    {
                        fg.AppendItem(OwnerQuest, "OwnerQuest");
                    }
                    if (printMask?.PackageTemplate ?? true)
                    {
                        fg.AppendItem(PackageTemplate, "PackageTemplate");
                    }
                    if (printMask?.DataInputVersion ?? true)
                    {
                        fg.AppendItem(DataInputVersion, "DataInputVersion");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        fg.AppendLine("Data =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Data != null)
                            {
                                if (Data.Overall != null)
                                {
                                    fg.AppendLine(Data.Overall.ToString());
                                }
                                if (Data.Specific != null)
                                {
                                    foreach (var subItem in Data.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Index);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                subItem.Specific?.ToString(fg);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.XnamMarker ?? true)
                    {
                        fg.AppendItem(XnamMarker, "XnamMarker");
                    }
                    if ((printMask?.ProcedureTree?.Overall ?? true)
                        && ProcedureTree.TryGet(out var ProcedureTreeItem))
                    {
                        fg.AppendLine("ProcedureTree =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ProcedureTreeItem.Overall);
                            if (ProcedureTreeItem.Specific != null)
                            {
                                foreach (var subItem in ProcedureTreeItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.OnBegin?.Overall ?? true)
                    {
                        OnBegin?.ToString(fg);
                    }
                    if (printMask?.OnEnd?.Overall ?? true)
                    {
                        OnEnd?.ToString(fg);
                    }
                    if (printMask?.OnChange?.Overall ?? true)
                    {
                        OnChange?.ToString(fg);
                    }
                    if (printMask?.PKDTDataTypeState ?? true)
                    {
                        fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
                    }
                    if (printMask?.PSDTDataTypeState ?? true)
                    {
                        fg.AppendItem(PSDTDataTypeState, "PSDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, FragmentsAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Flags;
            public Exception? Type;
            public Exception? InterruptOverride;
            public Exception? PreferredSpeed;
            public Exception? Unknown;
            public Exception? InteruptFlags;
            public Exception? Unknown2;
            public Exception? ScheduleMonth;
            public Exception? ScheduleDayOfWeek;
            public Exception? ScheduleDate;
            public Exception? ScheduleHour;
            public Exception? ScheduleMinute;
            public Exception? Unknown3;
            public Exception? ScheduleDurationInMinutes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Unknown4;
            public MaskItem<Exception?, PackageIdles.ErrorMask?>? IdleAnimations;
            public Exception? CombatStyle;
            public Exception? OwnerQuest;
            public Exception? PackageTemplate;
            public Exception? DataInputVersion;
            public MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>? Data;
            public Exception? XnamMarker;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>? ProcedureTree;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnBegin;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnEnd;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnChange;
            public Exception? PKDTDataTypeState;
            public Exception? PSDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Package_FieldIndex.Flags:
                        return Flags;
                    case Package_FieldIndex.Type:
                        return Type;
                    case Package_FieldIndex.InterruptOverride:
                        return InterruptOverride;
                    case Package_FieldIndex.PreferredSpeed:
                        return PreferredSpeed;
                    case Package_FieldIndex.Unknown:
                        return Unknown;
                    case Package_FieldIndex.InteruptFlags:
                        return InteruptFlags;
                    case Package_FieldIndex.Unknown2:
                        return Unknown2;
                    case Package_FieldIndex.ScheduleMonth:
                        return ScheduleMonth;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        return ScheduleDayOfWeek;
                    case Package_FieldIndex.ScheduleDate:
                        return ScheduleDate;
                    case Package_FieldIndex.ScheduleHour:
                        return ScheduleHour;
                    case Package_FieldIndex.ScheduleMinute:
                        return ScheduleMinute;
                    case Package_FieldIndex.Unknown3:
                        return Unknown3;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        return ScheduleDurationInMinutes;
                    case Package_FieldIndex.Conditions:
                        return Conditions;
                    case Package_FieldIndex.Unknown4:
                        return Unknown4;
                    case Package_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case Package_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Package_FieldIndex.OwnerQuest:
                        return OwnerQuest;
                    case Package_FieldIndex.PackageTemplate:
                        return PackageTemplate;
                    case Package_FieldIndex.DataInputVersion:
                        return DataInputVersion;
                    case Package_FieldIndex.Data:
                        return Data;
                    case Package_FieldIndex.XnamMarker:
                        return XnamMarker;
                    case Package_FieldIndex.ProcedureTree:
                        return ProcedureTree;
                    case Package_FieldIndex.OnBegin:
                        return OnBegin;
                    case Package_FieldIndex.OnEnd:
                        return OnEnd;
                    case Package_FieldIndex.OnChange:
                        return OnChange;
                    case Package_FieldIndex.PKDTDataTypeState:
                        return PKDTDataTypeState;
                    case Package_FieldIndex.PSDTDataTypeState:
                        return PSDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, FragmentsAdapter.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Package_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Package_FieldIndex.InterruptOverride:
                        this.InterruptOverride = ex;
                        break;
                    case Package_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = ex;
                        break;
                    case Package_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Package_FieldIndex.InteruptFlags:
                        this.InteruptFlags = ex;
                        break;
                    case Package_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Package_FieldIndex.ScheduleMonth:
                        this.ScheduleMonth = ex;
                        break;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        this.ScheduleDayOfWeek = ex;
                        break;
                    case Package_FieldIndex.ScheduleDate:
                        this.ScheduleDate = ex;
                        break;
                    case Package_FieldIndex.ScheduleHour:
                        this.ScheduleHour = ex;
                        break;
                    case Package_FieldIndex.ScheduleMinute:
                        this.ScheduleMinute = ex;
                        break;
                    case Package_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        this.ScheduleDurationInMinutes = ex;
                        break;
                    case Package_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case Package_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, PackageIdles.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Package_FieldIndex.OwnerQuest:
                        this.OwnerQuest = ex;
                        break;
                    case Package_FieldIndex.PackageTemplate:
                        this.PackageTemplate = ex;
                        break;
                    case Package_FieldIndex.DataInputVersion:
                        this.DataInputVersion = ex;
                        break;
                    case Package_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.XnamMarker:
                        this.XnamMarker = ex;
                        break;
                    case Package_FieldIndex.ProcedureTree:
                        this.ProcedureTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.OnBegin:
                        this.OnBegin = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.OnEnd:
                        this.OnEnd = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.OnChange:
                        this.OnChange = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = ex;
                        break;
                    case Package_FieldIndex.PSDTDataTypeState:
                        this.PSDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, FragmentsAdapter.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Package_FieldIndex.InterruptOverride:
                        this.InterruptOverride = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Package_FieldIndex.InteruptFlags:
                        this.InteruptFlags = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleMonth:
                        this.ScheduleMonth = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        this.ScheduleDayOfWeek = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDate:
                        this.ScheduleDate = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleHour:
                        this.ScheduleHour = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleMinute:
                        this.ScheduleMinute = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        this.ScheduleDurationInMinutes = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, PackageIdles.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Package_FieldIndex.OwnerQuest:
                        this.OwnerQuest = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PackageTemplate:
                        this.PackageTemplate = (Exception?)obj;
                        break;
                    case Package_FieldIndex.DataInputVersion:
                        this.DataInputVersion = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.XnamMarker:
                        this.XnamMarker = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ProcedureTree:
                        this.ProcedureTree = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.OnBegin:
                        this.OnBegin = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.OnEnd:
                        this.OnEnd = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.OnChange:
                        this.OnChange = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PSDTDataTypeState:
                        this.PSDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (InterruptOverride != null) return true;
                if (PreferredSpeed != null) return true;
                if (Unknown != null) return true;
                if (InteruptFlags != null) return true;
                if (Unknown2 != null) return true;
                if (ScheduleMonth != null) return true;
                if (ScheduleDayOfWeek != null) return true;
                if (ScheduleDate != null) return true;
                if (ScheduleHour != null) return true;
                if (ScheduleMinute != null) return true;
                if (Unknown3 != null) return true;
                if (ScheduleDurationInMinutes != null) return true;
                if (Conditions != null) return true;
                if (Unknown4 != null) return true;
                if (IdleAnimations != null) return true;
                if (CombatStyle != null) return true;
                if (OwnerQuest != null) return true;
                if (PackageTemplate != null) return true;
                if (DataInputVersion != null) return true;
                if (Data != null) return true;
                if (XnamMarker != null) return true;
                if (ProcedureTree != null) return true;
                if (OnBegin != null) return true;
                if (OnEnd != null) return true;
                if (OnChange != null) return true;
                if (PKDTDataTypeState != null) return true;
                if (PSDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(InterruptOverride, "InterruptOverride");
                fg.AppendItem(PreferredSpeed, "PreferredSpeed");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(InteruptFlags, "InteruptFlags");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(ScheduleMonth, "ScheduleMonth");
                fg.AppendItem(ScheduleDayOfWeek, "ScheduleDayOfWeek");
                fg.AppendItem(ScheduleDate, "ScheduleDate");
                fg.AppendItem(ScheduleHour, "ScheduleHour");
                fg.AppendItem(ScheduleMinute, "ScheduleMinute");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Unknown4, "Unknown4");
                IdleAnimations?.ToString(fg);
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(OwnerQuest, "OwnerQuest");
                fg.AppendItem(PackageTemplate, "PackageTemplate");
                fg.AppendItem(DataInputVersion, "DataInputVersion");
                fg.AppendLine("Data =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Data != null)
                    {
                        if (Data.Overall != null)
                        {
                            fg.AppendLine(Data.Overall.ToString());
                        }
                        if (Data.Specific != null)
                        {
                            foreach (var subItem in Data.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Index);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Specific?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(XnamMarker, "XnamMarker");
                if (ProcedureTree.TryGet(out var ProcedureTreeItem))
                {
                    fg.AppendLine("ProcedureTree =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ProcedureTreeItem.Overall);
                        if (ProcedureTreeItem.Specific != null)
                        {
                            foreach (var subItem in ProcedureTreeItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                OnBegin?.ToString(fg);
                OnEnd?.ToString(fg);
                OnChange?.ToString(fg);
                fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
                fg.AppendItem(PSDTDataTypeState, "PSDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.InterruptOverride = this.InterruptOverride.Combine(rhs.InterruptOverride);
                ret.PreferredSpeed = this.PreferredSpeed.Combine(rhs.PreferredSpeed);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.InteruptFlags = this.InteruptFlags.Combine(rhs.InteruptFlags);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ScheduleMonth = this.ScheduleMonth.Combine(rhs.ScheduleMonth);
                ret.ScheduleDayOfWeek = this.ScheduleDayOfWeek.Combine(rhs.ScheduleDayOfWeek);
                ret.ScheduleDate = this.ScheduleDate.Combine(rhs.ScheduleDate);
                ret.ScheduleHour = this.ScheduleHour.Combine(rhs.ScheduleHour);
                ret.ScheduleMinute = this.ScheduleMinute.Combine(rhs.ScheduleMinute);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.ScheduleDurationInMinutes = this.ScheduleDurationInMinutes.Combine(rhs.ScheduleDurationInMinutes);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.OwnerQuest = this.OwnerQuest.Combine(rhs.OwnerQuest);
                ret.PackageTemplate = this.PackageTemplate.Combine(rhs.PackageTemplate);
                ret.DataInputVersion = this.DataInputVersion.Combine(rhs.DataInputVersion);
                ret.Data = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>(ExceptionExt.Combine(this.Data?.Overall, rhs.Data?.Overall), ExceptionExt.Combine(this.Data?.Specific, rhs.Data?.Specific));
                ret.XnamMarker = this.XnamMarker.Combine(rhs.XnamMarker);
                ret.ProcedureTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>(ExceptionExt.Combine(this.ProcedureTree?.Overall, rhs.ProcedureTree?.Overall), ExceptionExt.Combine(this.ProcedureTree?.Specific, rhs.ProcedureTree?.Specific));
                ret.OnBegin = this.OnBegin.Combine(rhs.OnBegin, (l, r) => l.Combine(r));
                ret.OnEnd = this.OnEnd.Combine(rhs.OnEnd, (l, r) => l.Combine(r));
                ret.OnChange = this.OnChange.Combine(rhs.OnChange, (l, r) => l.Combine(r));
                ret.PKDTDataTypeState = this.PKDTDataTypeState.Combine(rhs.PKDTDataTypeState);
                ret.PSDTDataTypeState = this.PSDTDataTypeState.Combine(rhs.PSDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, FragmentsAdapter.TranslationMask?> VirtualMachineAdapter;
            public bool Flags;
            public bool Type;
            public bool InterruptOverride;
            public bool PreferredSpeed;
            public bool Unknown;
            public bool InteruptFlags;
            public bool Unknown2;
            public bool ScheduleMonth;
            public bool ScheduleDayOfWeek;
            public bool ScheduleDate;
            public bool ScheduleHour;
            public bool ScheduleMinute;
            public bool Unknown3;
            public bool ScheduleDurationInMinutes;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool Unknown4;
            public MaskItem<bool, PackageIdles.TranslationMask?> IdleAnimations;
            public bool CombatStyle;
            public bool OwnerQuest;
            public bool PackageTemplate;
            public bool DataInputVersion;
            public MaskItem<bool, APackageData.TranslationMask?> Data;
            public bool XnamMarker;
            public MaskItem<bool, PackageBranch.TranslationMask?> ProcedureTree;
            public MaskItem<bool, PackageEvent.TranslationMask?> OnBegin;
            public MaskItem<bool, PackageEvent.TranslationMask?> OnEnd;
            public MaskItem<bool, PackageEvent.TranslationMask?> OnChange;
            public bool PKDTDataTypeState;
            public bool PSDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, FragmentsAdapter.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.InterruptOverride = defaultOn;
                this.PreferredSpeed = defaultOn;
                this.Unknown = defaultOn;
                this.InteruptFlags = defaultOn;
                this.Unknown2 = defaultOn;
                this.ScheduleMonth = defaultOn;
                this.ScheduleDayOfWeek = defaultOn;
                this.ScheduleDate = defaultOn;
                this.ScheduleHour = defaultOn;
                this.ScheduleMinute = defaultOn;
                this.Unknown3 = defaultOn;
                this.ScheduleDurationInMinutes = defaultOn;
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.Unknown4 = defaultOn;
                this.IdleAnimations = new MaskItem<bool, PackageIdles.TranslationMask?>(defaultOn, null);
                this.CombatStyle = defaultOn;
                this.OwnerQuest = defaultOn;
                this.PackageTemplate = defaultOn;
                this.DataInputVersion = defaultOn;
                this.Data = new MaskItem<bool, APackageData.TranslationMask?>(defaultOn, null);
                this.XnamMarker = defaultOn;
                this.ProcedureTree = new MaskItem<bool, PackageBranch.TranslationMask?>(defaultOn, null);
                this.OnBegin = new MaskItem<bool, PackageEvent.TranslationMask?>(defaultOn, null);
                this.OnEnd = new MaskItem<bool, PackageEvent.TranslationMask?>(defaultOn, null);
                this.OnChange = new MaskItem<bool, PackageEvent.TranslationMask?>(defaultOn, null);
                this.PKDTDataTypeState = defaultOn;
                this.PSDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((InterruptOverride, null));
                ret.Add((PreferredSpeed, null));
                ret.Add((Unknown, null));
                ret.Add((InteruptFlags, null));
                ret.Add((Unknown2, null));
                ret.Add((ScheduleMonth, null));
                ret.Add((ScheduleDayOfWeek, null));
                ret.Add((ScheduleDate, null));
                ret.Add((ScheduleHour, null));
                ret.Add((ScheduleMinute, null));
                ret.Add((Unknown3, null));
                ret.Add((ScheduleDurationInMinutes, null));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((Unknown4, null));
                ret.Add((IdleAnimations?.Overall ?? true, IdleAnimations?.Specific?.GetCrystal()));
                ret.Add((CombatStyle, null));
                ret.Add((OwnerQuest, null));
                ret.Add((PackageTemplate, null));
                ret.Add((DataInputVersion, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((XnamMarker, null));
                ret.Add((ProcedureTree?.Overall ?? true, ProcedureTree?.Specific?.GetCrystal()));
                ret.Add((OnBegin?.Overall ?? true, OnBegin?.Specific?.GetCrystal()));
                ret.Add((OnEnd?.Overall ?? true, OnEnd?.Specific?.GetCrystal()));
                ret.Add((OnChange?.Overall ?? true, OnChange?.Specific?.GetCrystal()));
                ret.Add((PKDTDataTypeState, null));
                ret.Add((PSDTDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Package_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PackageCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PackageCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageCommon.Instance.RemapLinks(this, mapping);
        public Package(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Package(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Package(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum PKDTDataType
        {
        }
        [Flags]
        public enum PSDTDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Package CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Package CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Package();
            ((PackageSetterCommon)((IPackageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPackageGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PackageSetterCommon)((IPackageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Package GetNew()
        {
            return new Package();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackage :
        IPackageGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IPackageInternal>
    {
        new FragmentsAdapter? VirtualMachineAdapter { get; set; }
        new Package.Flag Flags { get; set; }
        new Package.Types Type { get; set; }
        new Package.Interrupt InterruptOverride { get; set; }
        new Package.Speed PreferredSpeed { get; set; }
        new Byte Unknown { get; set; }
        new Package.InterruptFlag InteruptFlags { get; set; }
        new UInt16 Unknown2 { get; set; }
        new SByte ScheduleMonth { get; set; }
        new Package.DayOfWeek ScheduleDayOfWeek { get; set; }
        new Byte ScheduleDate { get; set; }
        new SByte ScheduleHour { get; set; }
        new SByte ScheduleMinute { get; set; }
        new MemorySlice<Byte> Unknown3 { get; set; }
        new Int32 ScheduleDurationInMinutes { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new Int32? Unknown4 { get; set; }
        new PackageIdles? IdleAnimations { get; set; }
        new FormLinkNullable<CombatStyle> CombatStyle { get; set; }
        new FormLinkNullable<Quest> OwnerQuest { get; set; }
        new FormLink<Package> PackageTemplate { get; set; }
        new Int32 DataInputVersion { get; set; }
        new IDictionary<SByte, APackageData> Data { get; }
        new MemorySlice<Byte> XnamMarker { get; set; }
        new ExtendedList<PackageBranch> ProcedureTree { get; }
        new PackageEvent? OnBegin { get; set; }
        new PackageEvent? OnEnd { get; set; }
        new PackageEvent? OnChange { get; set; }
        new Package.PKDTDataType PKDTDataTypeState { get; set; }
        new Package.PSDTDataType PSDTDataTypeState { get; set; }
    }

    public partial interface IPackageInternal :
        ISkyrimMajorRecordInternal,
        IPackage,
        IPackageGetter
    {
        new IDictionary<SByte, APackageData> Data { get; }
    }

    public partial interface IPackageGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IPackageGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Package_Registration.Instance;
        IFragmentsAdapterGetter? VirtualMachineAdapter { get; }
        Package.Flag Flags { get; }
        Package.Types Type { get; }
        Package.Interrupt InterruptOverride { get; }
        Package.Speed PreferredSpeed { get; }
        Byte Unknown { get; }
        Package.InterruptFlag InteruptFlags { get; }
        UInt16 Unknown2 { get; }
        SByte ScheduleMonth { get; }
        Package.DayOfWeek ScheduleDayOfWeek { get; }
        Byte ScheduleDate { get; }
        SByte ScheduleHour { get; }
        SByte ScheduleMinute { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }
        Int32 ScheduleDurationInMinutes { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        Int32? Unknown4 { get; }
        IPackageIdlesGetter? IdleAnimations { get; }
        IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; }
        IFormLinkNullable<IQuestGetter> OwnerQuest { get; }
        IFormLink<IPackageGetter> PackageTemplate { get; }
        Int32 DataInputVersion { get; }
        IReadOnlyDictionary<SByte, IAPackageDataGetter> Data { get; }
        ReadOnlyMemorySlice<Byte> XnamMarker { get; }
        IReadOnlyList<IPackageBranchGetter> ProcedureTree { get; }
        IPackageEventGetter? OnBegin { get; }
        IPackageEventGetter? OnEnd { get; }
        IPackageEventGetter? OnChange { get; }
        Package.PKDTDataType PKDTDataTypeState { get; }
        Package.PSDTDataType PSDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageMixIn
    {
        public static void Clear(this IPackageInternal item)
        {
            ((PackageSetterCommon)((IPackageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Package.Mask<bool> GetEqualsMask(
            this IPackageGetter item,
            IPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageGetter item,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageGetter item,
            FileGeneration fg,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            ((PackageCommon)((IPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPackageGetter item,
            Package.Mask<bool?> checkMask)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Package.Mask<bool> GetHasBeenSetMask(this IPackageGetter item)
        {
            var ret = new Package.Mask<bool>(false);
            ((PackageCommon)((IPackageGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPackageGetter item,
            IPackageGetter rhs)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageInternal lhs,
            IPackageGetter rhs,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageSetterTranslationCommon)((IPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageInternal lhs,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageSetterTranslationCommon)((IPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            Package.TranslationMask? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPackageInternal item,
            XElement node,
            Package.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPackageInternal item,
            XElement node,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PackageSetterCommon)((IPackageGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            string path,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            string path,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            Stream stream,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            Stream stream,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPackageInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Package.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPackageInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageSetterCommon)((IPackageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Package_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Flags = 7,
        Type = 8,
        InterruptOverride = 9,
        PreferredSpeed = 10,
        Unknown = 11,
        InteruptFlags = 12,
        Unknown2 = 13,
        ScheduleMonth = 14,
        ScheduleDayOfWeek = 15,
        ScheduleDate = 16,
        ScheduleHour = 17,
        ScheduleMinute = 18,
        Unknown3 = 19,
        ScheduleDurationInMinutes = 20,
        Conditions = 21,
        Unknown4 = 22,
        IdleAnimations = 23,
        CombatStyle = 24,
        OwnerQuest = 25,
        PackageTemplate = 26,
        DataInputVersion = 27,
        Data = 28,
        XnamMarker = 29,
        ProcedureTree = 30,
        OnBegin = 31,
        OnEnd = 32,
        OnChange = 33,
        PKDTDataTypeState = 34,
        PSDTDataTypeState = 35,
    }
    #endregion

    #region Registration
    public partial class Package_Registration : ILoquiRegistration
    {
        public static readonly Package_Registration Instance = new Package_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 215,
            version: 0);

        public const string GUID = "b5148cf5-ebc6-439e-b0d2-7b254b24f3eb";

        public const ushort AdditionalFieldCount = 30;

        public const ushort FieldCount = 36;

        public static readonly Type MaskType = typeof(Package.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Package.ErrorMask);

        public static readonly Type ClassType = typeof(Package);

        public static readonly Type GetterType = typeof(IPackageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackage);

        public static readonly Type? InternalSetterType = typeof(IPackageInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Package";

        public const string Name = "Package";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)Package_FieldIndex.VirtualMachineAdapter;
                case "FLAGS":
                    return (ushort)Package_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)Package_FieldIndex.Type;
                case "INTERRUPTOVERRIDE":
                    return (ushort)Package_FieldIndex.InterruptOverride;
                case "PREFERREDSPEED":
                    return (ushort)Package_FieldIndex.PreferredSpeed;
                case "UNKNOWN":
                    return (ushort)Package_FieldIndex.Unknown;
                case "INTERUPTFLAGS":
                    return (ushort)Package_FieldIndex.InteruptFlags;
                case "UNKNOWN2":
                    return (ushort)Package_FieldIndex.Unknown2;
                case "SCHEDULEMONTH":
                    return (ushort)Package_FieldIndex.ScheduleMonth;
                case "SCHEDULEDAYOFWEEK":
                    return (ushort)Package_FieldIndex.ScheduleDayOfWeek;
                case "SCHEDULEDATE":
                    return (ushort)Package_FieldIndex.ScheduleDate;
                case "SCHEDULEHOUR":
                    return (ushort)Package_FieldIndex.ScheduleHour;
                case "SCHEDULEMINUTE":
                    return (ushort)Package_FieldIndex.ScheduleMinute;
                case "UNKNOWN3":
                    return (ushort)Package_FieldIndex.Unknown3;
                case "SCHEDULEDURATIONINMINUTES":
                    return (ushort)Package_FieldIndex.ScheduleDurationInMinutes;
                case "CONDITIONS":
                    return (ushort)Package_FieldIndex.Conditions;
                case "UNKNOWN4":
                    return (ushort)Package_FieldIndex.Unknown4;
                case "IDLEANIMATIONS":
                    return (ushort)Package_FieldIndex.IdleAnimations;
                case "COMBATSTYLE":
                    return (ushort)Package_FieldIndex.CombatStyle;
                case "OWNERQUEST":
                    return (ushort)Package_FieldIndex.OwnerQuest;
                case "PACKAGETEMPLATE":
                    return (ushort)Package_FieldIndex.PackageTemplate;
                case "DATAINPUTVERSION":
                    return (ushort)Package_FieldIndex.DataInputVersion;
                case "DATA":
                    return (ushort)Package_FieldIndex.Data;
                case "XNAMMARKER":
                    return (ushort)Package_FieldIndex.XnamMarker;
                case "PROCEDURETREE":
                    return (ushort)Package_FieldIndex.ProcedureTree;
                case "ONBEGIN":
                    return (ushort)Package_FieldIndex.OnBegin;
                case "ONEND":
                    return (ushort)Package_FieldIndex.OnEnd;
                case "ONCHANGE":
                    return (ushort)Package_FieldIndex.OnChange;
                case "PKDTDATATYPESTATE":
                    return (ushort)Package_FieldIndex.PKDTDataTypeState;
                case "PSDTDATATYPESTATE":
                    return (ushort)Package_FieldIndex.PSDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.Conditions:
                case Package_FieldIndex.ProcedureTree:
                    return true;
                case Package_FieldIndex.VirtualMachineAdapter:
                case Package_FieldIndex.Flags:
                case Package_FieldIndex.Type:
                case Package_FieldIndex.InterruptOverride:
                case Package_FieldIndex.PreferredSpeed:
                case Package_FieldIndex.Unknown:
                case Package_FieldIndex.InteruptFlags:
                case Package_FieldIndex.Unknown2:
                case Package_FieldIndex.ScheduleMonth:
                case Package_FieldIndex.ScheduleDayOfWeek:
                case Package_FieldIndex.ScheduleDate:
                case Package_FieldIndex.ScheduleHour:
                case Package_FieldIndex.ScheduleMinute:
                case Package_FieldIndex.Unknown3:
                case Package_FieldIndex.ScheduleDurationInMinutes:
                case Package_FieldIndex.Unknown4:
                case Package_FieldIndex.IdleAnimations:
                case Package_FieldIndex.CombatStyle:
                case Package_FieldIndex.OwnerQuest:
                case Package_FieldIndex.PackageTemplate:
                case Package_FieldIndex.DataInputVersion:
                case Package_FieldIndex.Data:
                case Package_FieldIndex.XnamMarker:
                case Package_FieldIndex.OnBegin:
                case Package_FieldIndex.OnEnd:
                case Package_FieldIndex.OnChange:
                case Package_FieldIndex.PKDTDataTypeState:
                case Package_FieldIndex.PSDTDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                case Package_FieldIndex.Conditions:
                case Package_FieldIndex.IdleAnimations:
                case Package_FieldIndex.ProcedureTree:
                case Package_FieldIndex.OnBegin:
                case Package_FieldIndex.OnEnd:
                case Package_FieldIndex.OnChange:
                    return true;
                case Package_FieldIndex.Flags:
                case Package_FieldIndex.Type:
                case Package_FieldIndex.InterruptOverride:
                case Package_FieldIndex.PreferredSpeed:
                case Package_FieldIndex.Unknown:
                case Package_FieldIndex.InteruptFlags:
                case Package_FieldIndex.Unknown2:
                case Package_FieldIndex.ScheduleMonth:
                case Package_FieldIndex.ScheduleDayOfWeek:
                case Package_FieldIndex.ScheduleDate:
                case Package_FieldIndex.ScheduleHour:
                case Package_FieldIndex.ScheduleMinute:
                case Package_FieldIndex.Unknown3:
                case Package_FieldIndex.ScheduleDurationInMinutes:
                case Package_FieldIndex.Unknown4:
                case Package_FieldIndex.CombatStyle:
                case Package_FieldIndex.OwnerQuest:
                case Package_FieldIndex.PackageTemplate:
                case Package_FieldIndex.DataInputVersion:
                case Package_FieldIndex.Data:
                case Package_FieldIndex.XnamMarker:
                case Package_FieldIndex.PKDTDataTypeState:
                case Package_FieldIndex.PSDTDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                case Package_FieldIndex.Flags:
                case Package_FieldIndex.Type:
                case Package_FieldIndex.InterruptOverride:
                case Package_FieldIndex.PreferredSpeed:
                case Package_FieldIndex.Unknown:
                case Package_FieldIndex.InteruptFlags:
                case Package_FieldIndex.Unknown2:
                case Package_FieldIndex.ScheduleMonth:
                case Package_FieldIndex.ScheduleDayOfWeek:
                case Package_FieldIndex.ScheduleDate:
                case Package_FieldIndex.ScheduleHour:
                case Package_FieldIndex.ScheduleMinute:
                case Package_FieldIndex.Unknown3:
                case Package_FieldIndex.ScheduleDurationInMinutes:
                case Package_FieldIndex.Conditions:
                case Package_FieldIndex.Unknown4:
                case Package_FieldIndex.IdleAnimations:
                case Package_FieldIndex.CombatStyle:
                case Package_FieldIndex.OwnerQuest:
                case Package_FieldIndex.PackageTemplate:
                case Package_FieldIndex.DataInputVersion:
                case Package_FieldIndex.Data:
                case Package_FieldIndex.XnamMarker:
                case Package_FieldIndex.ProcedureTree:
                case Package_FieldIndex.OnBegin:
                case Package_FieldIndex.OnEnd:
                case Package_FieldIndex.OnChange:
                case Package_FieldIndex.PKDTDataTypeState:
                case Package_FieldIndex.PSDTDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case Package_FieldIndex.Flags:
                    return "Flags";
                case Package_FieldIndex.Type:
                    return "Type";
                case Package_FieldIndex.InterruptOverride:
                    return "InterruptOverride";
                case Package_FieldIndex.PreferredSpeed:
                    return "PreferredSpeed";
                case Package_FieldIndex.Unknown:
                    return "Unknown";
                case Package_FieldIndex.InteruptFlags:
                    return "InteruptFlags";
                case Package_FieldIndex.Unknown2:
                    return "Unknown2";
                case Package_FieldIndex.ScheduleMonth:
                    return "ScheduleMonth";
                case Package_FieldIndex.ScheduleDayOfWeek:
                    return "ScheduleDayOfWeek";
                case Package_FieldIndex.ScheduleDate:
                    return "ScheduleDate";
                case Package_FieldIndex.ScheduleHour:
                    return "ScheduleHour";
                case Package_FieldIndex.ScheduleMinute:
                    return "ScheduleMinute";
                case Package_FieldIndex.Unknown3:
                    return "Unknown3";
                case Package_FieldIndex.ScheduleDurationInMinutes:
                    return "ScheduleDurationInMinutes";
                case Package_FieldIndex.Conditions:
                    return "Conditions";
                case Package_FieldIndex.Unknown4:
                    return "Unknown4";
                case Package_FieldIndex.IdleAnimations:
                    return "IdleAnimations";
                case Package_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Package_FieldIndex.OwnerQuest:
                    return "OwnerQuest";
                case Package_FieldIndex.PackageTemplate:
                    return "PackageTemplate";
                case Package_FieldIndex.DataInputVersion:
                    return "DataInputVersion";
                case Package_FieldIndex.Data:
                    return "Data";
                case Package_FieldIndex.XnamMarker:
                    return "XnamMarker";
                case Package_FieldIndex.ProcedureTree:
                    return "ProcedureTree";
                case Package_FieldIndex.OnBegin:
                    return "OnBegin";
                case Package_FieldIndex.OnEnd:
                    return "OnEnd";
                case Package_FieldIndex.OnChange:
                    return "OnChange";
                case Package_FieldIndex.PKDTDataTypeState:
                    return "PKDTDataTypeState";
                case Package_FieldIndex.PSDTDataTypeState:
                    return "PSDTDataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                case Package_FieldIndex.Flags:
                case Package_FieldIndex.Type:
                case Package_FieldIndex.InterruptOverride:
                case Package_FieldIndex.PreferredSpeed:
                case Package_FieldIndex.Unknown:
                case Package_FieldIndex.InteruptFlags:
                case Package_FieldIndex.Unknown2:
                case Package_FieldIndex.ScheduleMonth:
                case Package_FieldIndex.ScheduleDayOfWeek:
                case Package_FieldIndex.ScheduleDate:
                case Package_FieldIndex.ScheduleHour:
                case Package_FieldIndex.ScheduleMinute:
                case Package_FieldIndex.Unknown3:
                case Package_FieldIndex.ScheduleDurationInMinutes:
                case Package_FieldIndex.Conditions:
                case Package_FieldIndex.Unknown4:
                case Package_FieldIndex.IdleAnimations:
                case Package_FieldIndex.CombatStyle:
                case Package_FieldIndex.OwnerQuest:
                case Package_FieldIndex.PackageTemplate:
                case Package_FieldIndex.DataInputVersion:
                case Package_FieldIndex.Data:
                case Package_FieldIndex.XnamMarker:
                case Package_FieldIndex.ProcedureTree:
                case Package_FieldIndex.OnBegin:
                case Package_FieldIndex.OnEnd:
                case Package_FieldIndex.OnChange:
                case Package_FieldIndex.PKDTDataTypeState:
                case Package_FieldIndex.PSDTDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                case Package_FieldIndex.Flags:
                case Package_FieldIndex.Type:
                case Package_FieldIndex.InterruptOverride:
                case Package_FieldIndex.PreferredSpeed:
                case Package_FieldIndex.Unknown:
                case Package_FieldIndex.InteruptFlags:
                case Package_FieldIndex.Unknown2:
                case Package_FieldIndex.ScheduleMonth:
                case Package_FieldIndex.ScheduleDayOfWeek:
                case Package_FieldIndex.ScheduleDate:
                case Package_FieldIndex.ScheduleHour:
                case Package_FieldIndex.ScheduleMinute:
                case Package_FieldIndex.Unknown3:
                case Package_FieldIndex.ScheduleDurationInMinutes:
                case Package_FieldIndex.Conditions:
                case Package_FieldIndex.Unknown4:
                case Package_FieldIndex.IdleAnimations:
                case Package_FieldIndex.CombatStyle:
                case Package_FieldIndex.OwnerQuest:
                case Package_FieldIndex.PackageTemplate:
                case Package_FieldIndex.DataInputVersion:
                case Package_FieldIndex.Data:
                case Package_FieldIndex.XnamMarker:
                case Package_FieldIndex.ProcedureTree:
                case Package_FieldIndex.OnBegin:
                case Package_FieldIndex.OnEnd:
                case Package_FieldIndex.OnChange:
                case Package_FieldIndex.PKDTDataTypeState:
                case Package_FieldIndex.PSDTDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Package_FieldIndex enu = (Package_FieldIndex)index;
            switch (enu)
            {
                case Package_FieldIndex.VirtualMachineAdapter:
                    return typeof(FragmentsAdapter);
                case Package_FieldIndex.Flags:
                    return typeof(Package.Flag);
                case Package_FieldIndex.Type:
                    return typeof(Package.Types);
                case Package_FieldIndex.InterruptOverride:
                    return typeof(Package.Interrupt);
                case Package_FieldIndex.PreferredSpeed:
                    return typeof(Package.Speed);
                case Package_FieldIndex.Unknown:
                    return typeof(Byte);
                case Package_FieldIndex.InteruptFlags:
                    return typeof(Package.InterruptFlag);
                case Package_FieldIndex.Unknown2:
                    return typeof(UInt16);
                case Package_FieldIndex.ScheduleMonth:
                    return typeof(SByte);
                case Package_FieldIndex.ScheduleDayOfWeek:
                    return typeof(Package.DayOfWeek);
                case Package_FieldIndex.ScheduleDate:
                    return typeof(Byte);
                case Package_FieldIndex.ScheduleHour:
                    return typeof(SByte);
                case Package_FieldIndex.ScheduleMinute:
                    return typeof(SByte);
                case Package_FieldIndex.Unknown3:
                    return typeof(MemorySlice<Byte>);
                case Package_FieldIndex.ScheduleDurationInMinutes:
                    return typeof(Int32);
                case Package_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case Package_FieldIndex.Unknown4:
                    return typeof(Int32);
                case Package_FieldIndex.IdleAnimations:
                    return typeof(PackageIdles);
                case Package_FieldIndex.CombatStyle:
                    return typeof(FormLinkNullable<CombatStyle>);
                case Package_FieldIndex.OwnerQuest:
                    return typeof(FormLinkNullable<Quest>);
                case Package_FieldIndex.PackageTemplate:
                    return typeof(FormLink<Package>);
                case Package_FieldIndex.DataInputVersion:
                    return typeof(Int32);
                case Package_FieldIndex.Data:
                    return typeof(Dictionary<SByte, APackageData>);
                case Package_FieldIndex.XnamMarker:
                    return typeof(MemorySlice<Byte>);
                case Package_FieldIndex.ProcedureTree:
                    return typeof(ExtendedList<PackageBranch>);
                case Package_FieldIndex.OnBegin:
                    return typeof(PackageEvent);
                case Package_FieldIndex.OnEnd:
                    return typeof(PackageEvent);
                case Package_FieldIndex.OnChange:
                    return typeof(PackageEvent);
                case Package_FieldIndex.PKDTDataTypeState:
                    return typeof(Package.PKDTDataType);
                case Package_FieldIndex.PSDTDataTypeState:
                    return typeof(Package.PSDTDataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PackageXmlWriteTranslation);
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType PKDT_HEADER = new RecordType("PKDT");
        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType IDLB_HEADER = new RecordType("IDLB");
        public static readonly RecordType IDLF_HEADER = new RecordType("IDLF");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType PKCU_HEADER = new RecordType("PKCU");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType POBA_HEADER = new RecordType("POBA");
        public static readonly RecordType POEA_HEADER = new RecordType("POEA");
        public static readonly RecordType POCA_HEADER = new RecordType("POCA");
        public static readonly RecordType TriggeringRecordType = PACK_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(PackageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly PackageSetterCommon Instance = new PackageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Flags = default;
            item.Type = default;
            item.InterruptOverride = default;
            item.PreferredSpeed = default;
            item.Unknown = default;
            item.InteruptFlags = default;
            item.Unknown2 = default;
            item.ScheduleMonth = default;
            item.ScheduleDayOfWeek = default;
            item.ScheduleDate = default;
            item.ScheduleHour = default;
            item.ScheduleMinute = default;
            item.Unknown3 = new byte[3];
            item.ScheduleDurationInMinutes = default;
            item.Conditions.Clear();
            item.Unknown4 = default;
            item.IdleAnimations = null;
            item.CombatStyle = FormLinkNullable<CombatStyle>.Null;
            item.OwnerQuest = FormLinkNullable<Quest>.Null;
            item.PackageTemplate = FormLink<Package>.Null;
            item.DataInputVersion = default;
            item.Data.Clear();
            item.XnamMarker = new byte[0];
            item.ProcedureTree.Clear();
            item.OnBegin = null;
            item.OnEnd = null;
            item.OnChange = null;
            item.PKDTDataTypeState = default;
            item.PSDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IPackageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPackageInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IPackageInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PackageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Package)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Package)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPackageInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PackageBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Package)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Package)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PackageCommon : SkyrimMajorRecordCommon
    {
        public new static readonly PackageCommon Instance = new PackageCommon();

        public Package.Mask<bool> GetEqualsMask(
            IPackageGetter item,
            IPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Package.Mask<bool>(false);
            ((PackageCommon)((IPackageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageGetter item,
            IPackageGetter rhs,
            Package.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.InterruptOverride = item.InterruptOverride == rhs.InterruptOverride;
            ret.PreferredSpeed = item.PreferredSpeed == rhs.PreferredSpeed;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.InteruptFlags = item.InteruptFlags == rhs.InteruptFlags;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ScheduleMonth = item.ScheduleMonth == rhs.ScheduleMonth;
            ret.ScheduleDayOfWeek = item.ScheduleDayOfWeek == rhs.ScheduleDayOfWeek;
            ret.ScheduleDate = item.ScheduleDate == rhs.ScheduleDate;
            ret.ScheduleHour = item.ScheduleHour == rhs.ScheduleHour;
            ret.ScheduleMinute = item.ScheduleMinute == rhs.ScheduleMinute;
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
            ret.ScheduleDurationInMinutes = item.ScheduleDurationInMinutes == rhs.ScheduleDurationInMinutes;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.IdleAnimations = EqualsMaskHelper.EqualsHelper(
                item.IdleAnimations,
                rhs.IdleAnimations,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CombatStyle = object.Equals(item.CombatStyle, rhs.CombatStyle);
            ret.OwnerQuest = object.Equals(item.OwnerQuest, rhs.OwnerQuest);
            ret.PackageTemplate = object.Equals(item.PackageTemplate, rhs.PackageTemplate);
            ret.DataInputVersion = item.DataInputVersion == rhs.DataInputVersion;
            ret.Data = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Data,
                rhs: rhs.Data,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
            ret.XnamMarker = MemoryExtensions.SequenceEqual(item.XnamMarker.Span, rhs.XnamMarker.Span);
            ret.ProcedureTree = item.ProcedureTree.CollectionEqualsHelper(
                rhs.ProcedureTree,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.OnBegin = EqualsMaskHelper.EqualsHelper(
                item.OnBegin,
                rhs.OnBegin,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnEnd = EqualsMaskHelper.EqualsHelper(
                item.OnEnd,
                rhs.OnEnd,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnChange = EqualsMaskHelper.EqualsHelper(
                item.OnChange,
                rhs.OnChange,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PKDTDataTypeState = item.PKDTDataTypeState == rhs.PKDTDataTypeState;
            ret.PSDTDataTypeState = item.PSDTDataTypeState == rhs.PSDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPackageGetter item,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageGetter item,
            FileGeneration fg,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Package =>");
            }
            else
            {
                fg.AppendLine($"{name} (Package) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageGetter item,
            FileGeneration fg,
            Package.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.InterruptOverride ?? true)
            {
                fg.AppendItem(item.InterruptOverride, "InterruptOverride");
            }
            if (printMask?.PreferredSpeed ?? true)
            {
                fg.AppendItem(item.PreferredSpeed, "PreferredSpeed");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.InteruptFlags ?? true)
            {
                fg.AppendItem(item.InteruptFlags, "InteruptFlags");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ScheduleMonth ?? true)
            {
                fg.AppendItem(item.ScheduleMonth, "ScheduleMonth");
            }
            if (printMask?.ScheduleDayOfWeek ?? true)
            {
                fg.AppendItem(item.ScheduleDayOfWeek, "ScheduleDayOfWeek");
            }
            if (printMask?.ScheduleDate ?? true)
            {
                fg.AppendItem(item.ScheduleDate, "ScheduleDate");
            }
            if (printMask?.ScheduleHour ?? true)
            {
                fg.AppendItem(item.ScheduleHour, "ScheduleHour");
            }
            if (printMask?.ScheduleMinute ?? true)
            {
                fg.AppendItem(item.ScheduleMinute, "ScheduleMinute");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
            if (printMask?.ScheduleDurationInMinutes ?? true)
            {
                fg.AppendItem(item.ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Unknown4 ?? true)
                && item.Unknown4.TryGet(out var Unknown4Item))
            {
                fg.AppendItem(Unknown4Item, "Unknown4");
            }
            if ((printMask?.IdleAnimations?.Overall ?? true)
                && item.IdleAnimations.TryGet(out var IdleAnimationsItem))
            {
                IdleAnimationsItem?.ToString(fg, "IdleAnimations");
            }
            if ((printMask?.CombatStyle ?? true)
                && item.CombatStyle.TryGet(out var CombatStyleItem))
            {
                fg.AppendItem(CombatStyleItem, "CombatStyle");
            }
            if ((printMask?.OwnerQuest ?? true)
                && item.OwnerQuest.TryGet(out var OwnerQuestItem))
            {
                fg.AppendItem(OwnerQuestItem, "OwnerQuest");
            }
            if (printMask?.PackageTemplate ?? true)
            {
                fg.AppendItem(item.PackageTemplate, "PackageTemplate");
            }
            if (printMask?.DataInputVersion ?? true)
            {
                fg.AppendItem(item.DataInputVersion, "DataInputVersion");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                fg.AppendLine("Data =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Data)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            subItem.Value?.ToString(fg, "Value");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.XnamMarker ?? true)
            {
                fg.AppendLine($"XnamMarker => {SpanExt.ToHexString(item.XnamMarker)}");
            }
            if (printMask?.ProcedureTree?.Overall ?? true)
            {
                fg.AppendLine("ProcedureTree =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ProcedureTree)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.OnBegin?.Overall ?? true)
                && item.OnBegin.TryGet(out var OnBeginItem))
            {
                OnBeginItem?.ToString(fg, "OnBegin");
            }
            if ((printMask?.OnEnd?.Overall ?? true)
                && item.OnEnd.TryGet(out var OnEndItem))
            {
                OnEndItem?.ToString(fg, "OnEnd");
            }
            if ((printMask?.OnChange?.Overall ?? true)
                && item.OnChange.TryGet(out var OnChangeItem))
            {
                OnChangeItem?.ToString(fg, "OnChange");
            }
            if (printMask?.PKDTDataTypeState ?? true)
            {
                fg.AppendItem(item.PKDTDataTypeState, "PKDTDataTypeState");
            }
            if (printMask?.PSDTDataTypeState ?? true)
            {
                fg.AppendItem(item.PSDTDataTypeState, "PSDTDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IPackageGetter item,
            Package.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Unknown4.HasValue && checkMask.Unknown4.Value != (item.Unknown4 != null)) return false;
            if (checkMask.IdleAnimations?.Overall.HasValue ?? false && checkMask.IdleAnimations.Overall.Value != (item.IdleAnimations != null)) return false;
            if (checkMask.IdleAnimations?.Specific != null && (item.IdleAnimations == null || !item.IdleAnimations.HasBeenSet(checkMask.IdleAnimations.Specific))) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != (item.CombatStyle.FormKey != null)) return false;
            if (checkMask.OwnerQuest.HasValue && checkMask.OwnerQuest.Value != (item.OwnerQuest.FormKey != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false) return false;
            if (checkMask.OnBegin?.Overall.HasValue ?? false && checkMask.OnBegin.Overall.Value != (item.OnBegin != null)) return false;
            if (checkMask.OnBegin?.Specific != null && (item.OnBegin == null || !item.OnBegin.HasBeenSet(checkMask.OnBegin.Specific))) return false;
            if (checkMask.OnEnd?.Overall.HasValue ?? false && checkMask.OnEnd.Overall.Value != (item.OnEnd != null)) return false;
            if (checkMask.OnEnd?.Specific != null && (item.OnEnd == null || !item.OnEnd.HasBeenSet(checkMask.OnEnd.Specific))) return false;
            if (checkMask.OnChange?.Overall.HasValue ?? false && checkMask.OnChange.Overall.Value != (item.OnChange != null)) return false;
            if (checkMask.OnChange?.Specific != null && (item.OnChange == null || !item.OnChange.HasBeenSet(checkMask.OnChange.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPackageGetter item,
            Package.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, FragmentsAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.Flags = true;
            mask.Type = true;
            mask.InterruptOverride = true;
            mask.PreferredSpeed = true;
            mask.Unknown = true;
            mask.InteruptFlags = true;
            mask.Unknown2 = true;
            mask.ScheduleMonth = true;
            mask.ScheduleDayOfWeek = true;
            mask.ScheduleDate = true;
            mask.ScheduleHour = true;
            mask.ScheduleMinute = true;
            mask.Unknown3 = true;
            mask.ScheduleDurationInMinutes = true;
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Unknown4 = (item.Unknown4 != null);
            var itemIdleAnimations = item.IdleAnimations;
            mask.IdleAnimations = new MaskItem<bool, PackageIdles.Mask<bool>?>(itemIdleAnimations != null, itemIdleAnimations?.GetHasBeenSetMask());
            mask.CombatStyle = (item.CombatStyle.FormKey != null);
            mask.OwnerQuest = (item.OwnerQuest.FormKey != null);
            mask.PackageTemplate = true;
            mask.DataInputVersion = true;
            mask.Data = new MaskItem<bool, IEnumerable<MaskItemIndexed<SByte, bool, APackageData.Mask<bool>?>>?>(
                (item.Data != null), item.Data.Select((i) => new MaskItemIndexed<SByte, bool, APackageData.Mask<bool>?>(
                    i.Key,
                    true,
                    i.Value.GetHasBeenSetMask())));
            mask.XnamMarker = true;
            var ProcedureTreeItem = item.ProcedureTree;
            mask.ProcedureTree = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, PackageBranch.Mask<bool>?>>?>(true, ProcedureTreeItem.WithIndex().Select((i) => new MaskItemIndexed<bool, PackageBranch.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemOnBegin = item.OnBegin;
            mask.OnBegin = new MaskItem<bool, PackageEvent.Mask<bool>?>(itemOnBegin != null, itemOnBegin?.GetHasBeenSetMask());
            var itemOnEnd = item.OnEnd;
            mask.OnEnd = new MaskItem<bool, PackageEvent.Mask<bool>?>(itemOnEnd != null, itemOnEnd?.GetHasBeenSetMask());
            var itemOnChange = item.OnChange;
            mask.OnChange = new MaskItem<bool, PackageEvent.Mask<bool>?>(itemOnChange != null, itemOnChange?.GetHasBeenSetMask());
            mask.PKDTDataTypeState = true;
            mask.PSDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Package_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Package_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Package_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Package_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Package_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Package_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Package_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Package_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Package_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageGetter? lhs,
            IPackageGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.InterruptOverride != rhs.InterruptOverride) return false;
            if (lhs.PreferredSpeed != rhs.PreferredSpeed) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.InteruptFlags != rhs.InteruptFlags) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.ScheduleMonth != rhs.ScheduleMonth) return false;
            if (lhs.ScheduleDayOfWeek != rhs.ScheduleDayOfWeek) return false;
            if (lhs.ScheduleDate != rhs.ScheduleDate) return false;
            if (lhs.ScheduleHour != rhs.ScheduleHour) return false;
            if (lhs.ScheduleMinute != rhs.ScheduleMinute) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            if (lhs.ScheduleDurationInMinutes != rhs.ScheduleDurationInMinutes) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (lhs.Unknown4 != rhs.Unknown4) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!lhs.OwnerQuest.Equals(rhs.OwnerQuest)) return false;
            if (!lhs.PackageTemplate.Equals(rhs.PackageTemplate)) return false;
            if (lhs.DataInputVersion != rhs.DataInputVersion) return false;
            if (!lhs.Data.SequenceEqual(rhs.Data)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.XnamMarker.Span, rhs.XnamMarker.Span)) return false;
            if (!lhs.ProcedureTree.SequenceEqual(rhs.ProcedureTree)) return false;
            if (!object.Equals(lhs.OnBegin, rhs.OnBegin)) return false;
            if (!object.Equals(lhs.OnEnd, rhs.OnEnd)) return false;
            if (!object.Equals(lhs.OnChange, rhs.OnChange)) return false;
            if (lhs.PKDTDataTypeState != rhs.PKDTDataTypeState) return false;
            if (lhs.PSDTDataTypeState != rhs.PSDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPackageGetter?)lhs,
                rhs: rhs as IPackageGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPackageGetter?)lhs,
                rhs: rhs as IPackageGetter);
        }
        
        public virtual int GetHashCode(IPackageGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.InterruptOverride);
            hash.Add(item.PreferredSpeed);
            hash.Add(item.Unknown);
            hash.Add(item.InteruptFlags);
            hash.Add(item.Unknown2);
            hash.Add(item.ScheduleMonth);
            hash.Add(item.ScheduleDayOfWeek);
            hash.Add(item.ScheduleDate);
            hash.Add(item.ScheduleHour);
            hash.Add(item.ScheduleMinute);
            hash.Add(item.Unknown3);
            hash.Add(item.ScheduleDurationInMinutes);
            hash.Add(item.Conditions);
            if (item.Unknown4.TryGet(out var Unknown4item))
            {
                hash.Add(Unknown4item);
            }
            if (item.IdleAnimations.TryGet(out var IdleAnimationsitem))
            {
                hash.Add(IdleAnimationsitem);
            }
            if (item.CombatStyle.TryGet(out var CombatStyleitem))
            {
                hash.Add(CombatStyleitem);
            }
            if (item.OwnerQuest.TryGet(out var OwnerQuestitem))
            {
                hash.Add(OwnerQuestitem);
            }
            hash.Add(item.PackageTemplate);
            hash.Add(item.DataInputVersion);
            hash.Add(item.Data);
            hash.Add(item.XnamMarker);
            hash.Add(item.ProcedureTree);
            if (item.OnBegin.TryGet(out var OnBeginitem))
            {
                hash.Add(OnBeginitem);
            }
            if (item.OnEnd.TryGet(out var OnEnditem))
            {
                hash.Add(OnEnditem);
            }
            if (item.OnChange.TryGet(out var OnChangeitem))
            {
                hash.Add(OnChangeitem);
            }
            hash.Add(item.PKDTDataTypeState);
            hash.Add(item.PSDTDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IPackageGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPackageGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Package.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPackageGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.IdleAnimations.TryGet(out var IdleAnimationsItems))
            {
                foreach (var item in IdleAnimationsItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyle.FormKey.TryGet(out var CombatStyleKey))
            {
                yield return CombatStyleKey;
            }
            if (obj.OwnerQuest.FormKey.TryGet(out var OwnerQuestKey))
            {
                yield return OwnerQuestKey;
            }
            yield return obj.PackageTemplate.FormKey;
            foreach (var item in obj.ProcedureTree.WhereCastable<IPackageBranchGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.OnBegin.TryGet(out var OnBeginItems))
            {
                foreach (var item in OnBeginItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.OnEnd.TryGet(out var OnEndItems))
            {
                foreach (var item in OnEndItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.OnChange.TryGet(out var OnChangeItems))
            {
                foreach (var item in OnChangeItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IPackageGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Package obj, Package rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Package(getNextFormKey());
            ret.DeepCopyIn((Package)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Package)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PackageSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly PackageSetterTranslationCommon Instance = new PackageSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPackageInternal item,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IPackage item,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.InterruptOverride) ?? true))
            {
                item.InterruptOverride = rhs.InterruptOverride;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PreferredSpeed) ?? true))
            {
                item.PreferredSpeed = rhs.PreferredSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.InteruptFlags) ?? true))
            {
                item.InteruptFlags = rhs.InteruptFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMonth) ?? true))
            {
                item.ScheduleMonth = rhs.ScheduleMonth;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDayOfWeek) ?? true))
            {
                item.ScheduleDayOfWeek = rhs.ScheduleDayOfWeek;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDate) ?? true))
            {
                item.ScheduleDate = rhs.ScheduleDate;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleHour) ?? true))
            {
                item.ScheduleHour = rhs.ScheduleHour;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMinute) ?? true))
            {
                item.ScheduleMinute = rhs.ScheduleMinute;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDurationInMinutes) ?? true))
            {
                item.ScheduleDurationInMinutes = rhs.ScheduleDurationInMinutes;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.IdleAnimations);
                try
                {
                    if(rhs.IdleAnimations.TryGet(out var rhsIdleAnimations))
                    {
                        item.IdleAnimations = rhsIdleAnimations.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.IdleAnimations));
                    }
                    else
                    {
                        item.IdleAnimations = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle = rhs.CombatStyle.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OwnerQuest) ?? true))
            {
                item.OwnerQuest = rhs.OwnerQuest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PackageTemplate) ?? true))
            {
                item.PackageTemplate = rhs.PackageTemplate.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.DataInputVersion) ?? true))
            {
                item.DataInputVersion = rhs.DataInputVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Data) ?? true))
            {
                item.Data.SetTo(
                    rhs.Data
                        .Select((r) =>
                        {
                            var value = r.Value.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                            return new KeyValuePair<SByte, APackageData>(r.Key, value);
                        }));
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.XnamMarker) ?? true))
            {
                item.XnamMarker = rhs.XnamMarker.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ProcedureTree) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.ProcedureTree);
                try
                {
                    item.ProcedureTree.SetTo(
                        rhs.ProcedureTree
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnBegin) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnBegin);
                try
                {
                    if(rhs.OnBegin.TryGet(out var rhsOnBegin))
                    {
                        item.OnBegin = rhsOnBegin.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnBegin));
                    }
                    else
                    {
                        item.OnBegin = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnEnd) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnEnd);
                try
                {
                    if(rhs.OnEnd.TryGet(out var rhsOnEnd))
                    {
                        item.OnEnd = rhsOnEnd.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnEnd));
                    }
                    else
                    {
                        item.OnEnd = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnChange) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnChange);
                try
                {
                    if(rhs.OnChange.TryGet(out var rhsOnChange))
                    {
                        item.OnChange = rhsOnChange.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnChange));
                    }
                    else
                    {
                        item.OnChange = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PKDTDataTypeState) ?? true))
            {
                item.PKDTDataTypeState = rhs.PKDTDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PSDTDataTypeState) ?? true))
            {
                item.PSDTDataTypeState = rhs.PSDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPackageInternal)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPackage)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPackageInternal)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPackage)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Package DeepCopy(
            IPackageGetter item,
            Package.TranslationMask? copyMask = null)
        {
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Package DeepCopy(
            IPackageGetter item,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Package DeepCopy(
            IPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Package
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Package_Registration.Instance;
        public new static Package_Registration Registration => Package_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PackageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PackageXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PackageXmlWriteTranslation Instance = new PackageXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPackageGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((FragmentsAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)Package_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Package.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Package_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<Package.Types>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)Package_FieldIndex.Type,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.InterruptOverride) ?? true))
            {
                EnumXmlTranslation<Package.Interrupt>.Instance.Write(
                    node: node,
                    name: nameof(item.InterruptOverride),
                    item: item.InterruptOverride,
                    fieldIndex: (int)Package_FieldIndex.InterruptOverride,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.PreferredSpeed) ?? true))
            {
                EnumXmlTranslation<Package.Speed>.Instance.Write(
                    node: node,
                    name: nameof(item.PreferredSpeed),
                    item: item.PreferredSpeed,
                    fieldIndex: (int)Package_FieldIndex.PreferredSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Package_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.InteruptFlags) ?? true))
            {
                EnumXmlTranslation<Package.InterruptFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.InteruptFlags),
                    item: item.InteruptFlags,
                    fieldIndex: (int)Package_FieldIndex.InteruptFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)Package_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMonth) ?? true))
            {
                Int8XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleMonth),
                    item: item.ScheduleMonth,
                    fieldIndex: (int)Package_FieldIndex.ScheduleMonth,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDayOfWeek) ?? true))
            {
                EnumXmlTranslation<Package.DayOfWeek>.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleDayOfWeek),
                    item: item.ScheduleDayOfWeek,
                    fieldIndex: (int)Package_FieldIndex.ScheduleDayOfWeek,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDate) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleDate),
                    item: item.ScheduleDate,
                    fieldIndex: (int)Package_FieldIndex.ScheduleDate,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleHour) ?? true))
            {
                Int8XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleHour),
                    item: item.ScheduleHour,
                    fieldIndex: (int)Package_FieldIndex.ScheduleHour,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMinute) ?? true))
            {
                Int8XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleMinute),
                    item: item.ScheduleMinute,
                    fieldIndex: (int)Package_FieldIndex.ScheduleMinute,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown3) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown3),
                    item: item.Unknown3,
                    fieldIndex: (int)Package_FieldIndex.Unknown3,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDurationInMinutes) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ScheduleDurationInMinutes),
                    item: item.ScheduleDurationInMinutes,
                    fieldIndex: (int)Package_FieldIndex.ScheduleDurationInMinutes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)Package_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.Unknown4 != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown4) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown4),
                    item: item.Unknown4.Value,
                    fieldIndex: (int)Package_FieldIndex.Unknown4,
                    errorMask: errorMask);
            }
            if ((item.IdleAnimations != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.IdleAnimations) ?? true))
            {
                if (item.IdleAnimations.TryGet(out var IdleAnimationsItem))
                {
                    ((PackageIdlesXmlWriteTranslation)((IXmlItem)IdleAnimationsItem).XmlWriteTranslator).Write(
                        item: IdleAnimationsItem,
                        node: node,
                        name: nameof(item.IdleAnimations),
                        fieldIndex: (int)Package_FieldIndex.IdleAnimations,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.IdleAnimations));
                }
            }
            if ((item.CombatStyle.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle.FormKey.Value,
                    fieldIndex: (int)Package_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if ((item.OwnerQuest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.OwnerQuest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OwnerQuest),
                    item: item.OwnerQuest.FormKey.Value,
                    fieldIndex: (int)Package_FieldIndex.OwnerQuest,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.PackageTemplate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PackageTemplate),
                    item: item.PackageTemplate.FormKey,
                    fieldIndex: (int)Package_FieldIndex.PackageTemplate,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.DataInputVersion) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DataInputVersion),
                    item: item.DataInputVersion,
                    fieldIndex: (int)Package_FieldIndex.DataInputVersion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.Data) ?? true))
            {
                DictXmlTranslation<SByte, IAPackageDataGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Data),
                    items: item.Data,
                    fieldIndex: (int)Package_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, SByte subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        Int8XmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, IAPackageDataGetter subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        var Item = subItem;
                        ((APackageDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: "Value",
                            errorMask: dictSubMask,
                            translationMask: dictSubTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.XnamMarker) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XnamMarker),
                    item: item.XnamMarker,
                    fieldIndex: (int)Package_FieldIndex.XnamMarker,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.ProcedureTree) ?? true))
            {
                ListXmlTranslation<IPackageBranchGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.ProcedureTree),
                    item: item.ProcedureTree,
                    fieldIndex: (int)Package_FieldIndex.ProcedureTree,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.ProcedureTree),
                    transl: (XElement subNode, IPackageBranchGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((PackageBranchXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.OnBegin != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.OnBegin) ?? true))
            {
                if (item.OnBegin.TryGet(out var OnBeginItem))
                {
                    ((PackageEventXmlWriteTranslation)((IXmlItem)OnBeginItem).XmlWriteTranslator).Write(
                        item: OnBeginItem,
                        node: node,
                        name: nameof(item.OnBegin),
                        fieldIndex: (int)Package_FieldIndex.OnBegin,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnBegin));
                }
            }
            if ((item.OnEnd != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.OnEnd) ?? true))
            {
                if (item.OnEnd.TryGet(out var OnEndItem))
                {
                    ((PackageEventXmlWriteTranslation)((IXmlItem)OnEndItem).XmlWriteTranslator).Write(
                        item: OnEndItem,
                        node: node,
                        name: nameof(item.OnEnd),
                        fieldIndex: (int)Package_FieldIndex.OnEnd,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnEnd));
                }
            }
            if ((item.OnChange != null)
                && (translationMask?.GetShouldTranslate((int)Package_FieldIndex.OnChange) ?? true))
            {
                if (item.OnChange.TryGet(out var OnChangeItem))
                {
                    ((PackageEventXmlWriteTranslation)((IXmlItem)OnChangeItem).XmlWriteTranslator).Write(
                        item: OnChangeItem,
                        node: node,
                        name: nameof(item.OnChange),
                        fieldIndex: (int)Package_FieldIndex.OnChange,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnChange));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.PKDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<Package.PKDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.PKDTDataTypeState),
                    item: item.PKDTDataTypeState,
                    fieldIndex: (int)Package_FieldIndex.PKDTDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Package_FieldIndex.PSDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<Package.PSDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.PSDTDataTypeState),
                    item: item.PSDTDataTypeState,
                    fieldIndex: (int)Package_FieldIndex.PSDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Package");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Package");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PackageXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static PackageXmlCreateTranslation Instance = new PackageXmlCreateTranslation();

        public static void FillPublicXml(
            IPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PackageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPackageInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)Package_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<FragmentsAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Package_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Package.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)Package_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<Package.Types>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InterruptOverride":
                    errorMask?.PushIndex((int)Package_FieldIndex.InterruptOverride);
                    try
                    {
                        item.InterruptOverride = EnumXmlTranslation<Package.Interrupt>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PreferredSpeed":
                    errorMask?.PushIndex((int)Package_FieldIndex.PreferredSpeed);
                    try
                    {
                        item.PreferredSpeed = EnumXmlTranslation<Package.Speed>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Package_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InteruptFlags":
                    errorMask?.PushIndex((int)Package_FieldIndex.InteruptFlags);
                    try
                    {
                        item.InteruptFlags = EnumXmlTranslation<Package.InterruptFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)Package_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleMonth":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleMonth);
                    try
                    {
                        item.ScheduleMonth = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleDayOfWeek":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleDayOfWeek);
                    try
                    {
                        item.ScheduleDayOfWeek = EnumXmlTranslation<Package.DayOfWeek>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleDate":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleDate);
                    try
                    {
                        item.ScheduleDate = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleHour":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleHour);
                    try
                    {
                        item.ScheduleHour = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleMinute":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleMinute);
                    try
                    {
                        item.ScheduleMinute = Int8XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown3":
                    errorMask?.PushIndex((int)Package_FieldIndex.Unknown3);
                    try
                    {
                        item.Unknown3 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 3,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScheduleDurationInMinutes":
                    errorMask?.PushIndex((int)Package_FieldIndex.ScheduleDurationInMinutes);
                    try
                    {
                        item.ScheduleDurationInMinutes = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)Package_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown4":
                    errorMask?.PushIndex((int)Package_FieldIndex.Unknown4);
                    try
                    {
                        item.Unknown4 = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimations":
                    errorMask?.PushIndex((int)Package_FieldIndex.IdleAnimations);
                    try
                    {
                        item.IdleAnimations = LoquiXmlTranslation<PackageIdles>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.IdleAnimations));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    errorMask?.PushIndex((int)Package_FieldIndex.CombatStyle);
                    try
                    {
                        item.CombatStyle = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OwnerQuest":
                    errorMask?.PushIndex((int)Package_FieldIndex.OwnerQuest);
                    try
                    {
                        item.OwnerQuest = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PackageTemplate":
                    errorMask?.PushIndex((int)Package_FieldIndex.PackageTemplate);
                    try
                    {
                        item.PackageTemplate = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DataInputVersion":
                    errorMask?.PushIndex((int)Package_FieldIndex.DataInputVersion);
                    try
                    {
                        item.DataInputVersion = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    DictXmlTranslation<SByte, APackageData>.Instance.ParseInto(
                        node: node,
                        item: item.Data,
                        fieldIndex: (int)Package_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: Int8XmlTranslation.Instance.Parse,
                        valTransl: LoquiXmlTranslation<APackageData>.Instance.Parse);
                    break;
                case "XnamMarker":
                    errorMask?.PushIndex((int)Package_FieldIndex.XnamMarker);
                    try
                    {
                        item.XnamMarker = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 0,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ProcedureTree":
                    errorMask?.PushIndex((int)Package_FieldIndex.ProcedureTree);
                    try
                    {
                        if (ListXmlTranslation<PackageBranch>.Instance.Parse(
                            node: node,
                            enumer: out var ProcedureTreeItem,
                            transl: LoquiXmlTranslation<PackageBranch>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.ProcedureTree.SetTo(ProcedureTreeItem);
                        }
                        else
                        {
                            item.ProcedureTree.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OnBegin":
                    errorMask?.PushIndex((int)Package_FieldIndex.OnBegin);
                    try
                    {
                        item.OnBegin = LoquiXmlTranslation<PackageEvent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnBegin));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OnEnd":
                    errorMask?.PushIndex((int)Package_FieldIndex.OnEnd);
                    try
                    {
                        item.OnEnd = LoquiXmlTranslation<PackageEvent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnEnd));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OnChange":
                    errorMask?.PushIndex((int)Package_FieldIndex.OnChange);
                    try
                    {
                        item.OnChange = LoquiXmlTranslation<PackageEvent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Package_FieldIndex.OnChange));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PKDTDataTypeState":
                    errorMask?.PushIndex((int)Package_FieldIndex.PKDTDataTypeState);
                    try
                    {
                        item.PKDTDataTypeState = EnumXmlTranslation<Package.PKDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PSDTDataTypeState":
                    errorMask?.PushIndex((int)Package_FieldIndex.PSDTDataTypeState);
                    try
                    {
                        item.PSDTDataTypeState = EnumXmlTranslation<Package.PSDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class PackageXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPackageGetter item,
            XElement node,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPackageGetter item,
            string path,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPackageGetter item,
            Stream stream,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PackageBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PackageBinaryWriteTranslation Instance = new PackageBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryPackageTemplateCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryPackageTemplate(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryPackageTemplateCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryXnamMarkerCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryXnamMarker(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryXnamMarkerCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IPackageGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IPackageGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((FragmentsAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(Package_Registration.PKDT_HEADER)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Types>.Instance.Write(
                    writer,
                    item.Type,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Interrupt>.Instance.Write(
                    writer,
                    item.InterruptOverride,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Speed>.Instance.Write(
                    writer,
                    item.PreferredSpeed,
                    length: 1);
                writer.Write(item.Unknown);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.InterruptFlag>.Instance.Write(
                    writer,
                    item.InteruptFlags,
                    length: 2);
                writer.Write(item.Unknown2);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(Package_Registration.PSDT_HEADER)))
            {
                writer.Write(item.ScheduleMonth);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.DayOfWeek>.Instance.Write(
                    writer,
                    item.ScheduleDayOfWeek,
                    length: 1);
                writer.Write(item.ScheduleDate);
                writer.Write(item.ScheduleHour);
                writer.Write(item.ScheduleMinute);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
                writer.Write(item.ScheduleDurationInMinutes);
            }
            PackageBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Unknown4,
                header: recordTypeConverter.ConvertToCustom(Package_Registration.IDLB_HEADER));
            if (item.IdleAnimations.TryGet(out var IdleAnimationsItem))
            {
                ((PackageIdlesBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write(
                    item: IdleAnimationsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(Package_Registration.CNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OwnerQuest,
                header: recordTypeConverter.ConvertToCustom(Package_Registration.QNAM_HEADER));
            PackageBinaryWriteTranslation.WriteBinaryPackageTemplate(
                writer: writer,
                item: item);
            PackageBinaryWriteTranslation.WriteBinaryXnamMarker(
                writer: writer,
                item: item);
            if (item.OnBegin.TryGet(out var OnBeginItem))
            {
                using (HeaderExport.Subrecord(writer, Package_Registration.POBA_HEADER)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnBeginItem).BinaryWriteTranslator).Write(
                    item: OnBeginItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.OnEnd.TryGet(out var OnEndItem))
            {
                using (HeaderExport.Subrecord(writer, Package_Registration.POEA_HEADER)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnEndItem).BinaryWriteTranslator).Write(
                    item: OnEndItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.OnChange.TryGet(out var OnChangeItem))
            {
                using (HeaderExport.Subrecord(writer, Package_Registration.POCA_HEADER)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnChangeItem).BinaryWriteTranslator).Write(
                    item: OnChangeItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IPackageGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Package_Registration.PACK_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static PackageBinaryCreateTranslation Instance = new PackageBinaryCreateTranslation();

        public override RecordType RecordType => Package_Registration.PACK_HEADER;
        public static void FillBinaryStructs(
            IPackageInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IPackageInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.FragmentsAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.VirtualMachineAdapter);
                }
                case 0x54444B50: // PKDT
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<Package.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Type = EnumBinaryTranslation<Package.Types>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.InterruptOverride = EnumBinaryTranslation<Package.Interrupt>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.PreferredSpeed = EnumBinaryTranslation<Package.Speed>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Unknown = dataFrame.ReadUInt8();
                    item.InteruptFlags = EnumBinaryTranslation<Package.InterruptFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Unknown2 = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Unknown2);
                }
                case 0x54445350: // PSDT
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.ScheduleMonth = dataFrame.ReadInt8();
                    item.ScheduleDayOfWeek = EnumBinaryTranslation<Package.DayOfWeek>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.ScheduleDate = dataFrame.ReadUInt8();
                    item.ScheduleHour = dataFrame.ReadInt8();
                    item.ScheduleMinute = dataFrame.ReadInt8();
                    item.Unknown3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    item.ScheduleDurationInMinutes = dataFrame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.ScheduleDurationInMinutes);
                }
                case 0x41445443: // CTDA
                {
                    PackageBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Conditions);
                }
                case 0x424C4449: // IDLB
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown4 = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Unknown4);
                }
                case 0x464C4449: // IDLF
                {
                    item.IdleAnimations = Mutagen.Bethesda.Skyrim.PackageIdles.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.IdleAnimations);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.CombatStyle);
                }
                case 0x4D414E51: // QNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OwnerQuest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OwnerQuest);
                }
                case 0x55434B50: // PKCU
                {
                    PackageBinaryCreateTranslation.FillBinaryPackageTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.PackageTemplate);
                }
                case 0x4D414E58: // XNAM
                {
                    PackageBinaryCreateTranslation.FillBinaryXnamMarkerCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.XnamMarker);
                }
                case 0x41424F50: // POBA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnBegin = Mutagen.Bethesda.Skyrim.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnBegin);
                }
                case 0x41454F50: // POEA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnEnd = Mutagen.Bethesda.Skyrim.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnEnd);
                }
                case 0x41434F50: // POCA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnChange = Mutagen.Bethesda.Skyrim.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnChange);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IPackageInternal item);

        static partial void FillBinaryPackageTemplateCustom(
            MutagenFrame frame,
            IPackageInternal item);

        static partial void FillBinaryXnamMarkerCustom(
            MutagenFrame frame,
            IPackageInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PackageBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PackageBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IPackageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Package_Registration.Instance;
        public new static Package_Registration Registration => Package_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPackageGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PackageCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PackageCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IFragmentsAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? FragmentsAdapterBinaryOverlay.FragmentsAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        private int? _PKDTLocation;
        public Package.PKDTDataType PKDTDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _PKDTLocation!.Value;
        private bool _Flags_IsSet => _PKDTLocation.HasValue;
        public Package.Flag Flags => _Flags_IsSet ? (Package.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _PKDTLocation!.Value + 0x4;
        private bool _Type_IsSet => _PKDTLocation.HasValue;
        public Package.Types Type => _Type_IsSet ? (Package.Types)_data.Span.Slice(_TypeLocation, 0x1)[0] : default;
        #endregion
        #region InterruptOverride
        private int _InterruptOverrideLocation => _PKDTLocation!.Value + 0x5;
        private bool _InterruptOverride_IsSet => _PKDTLocation.HasValue;
        public Package.Interrupt InterruptOverride => _InterruptOverride_IsSet ? (Package.Interrupt)_data.Span.Slice(_InterruptOverrideLocation, 0x1)[0] : default;
        #endregion
        #region PreferredSpeed
        private int _PreferredSpeedLocation => _PKDTLocation!.Value + 0x6;
        private bool _PreferredSpeed_IsSet => _PKDTLocation.HasValue;
        public Package.Speed PreferredSpeed => _PreferredSpeed_IsSet ? (Package.Speed)_data.Span.Slice(_PreferredSpeedLocation, 0x1)[0] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _PKDTLocation!.Value + 0x7;
        private bool _Unknown_IsSet => _PKDTLocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _data.Span[_UnknownLocation] : default;
        #endregion
        #region InteruptFlags
        private int _InteruptFlagsLocation => _PKDTLocation!.Value + 0x8;
        private bool _InteruptFlags_IsSet => _PKDTLocation.HasValue;
        public Package.InterruptFlag InteruptFlags => _InteruptFlags_IsSet ? (Package.InterruptFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_InteruptFlagsLocation, 0x2)) : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _PKDTLocation!.Value + 0xA;
        private bool _Unknown2_IsSet => _PKDTLocation.HasValue;
        public UInt16 Unknown2 => _Unknown2_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_Unknown2Location, 2)) : default;
        #endregion
        private int? _PSDTLocation;
        public Package.PSDTDataType PSDTDataTypeState { get; private set; }
        #region ScheduleMonth
        private int _ScheduleMonthLocation => _PSDTLocation!.Value;
        private bool _ScheduleMonth_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleMonth => _ScheduleMonth_IsSet ? (sbyte)_data.Slice(_ScheduleMonthLocation, 1)[0] : default;
        #endregion
        #region ScheduleDayOfWeek
        private int _ScheduleDayOfWeekLocation => _PSDTLocation!.Value + 0x1;
        private bool _ScheduleDayOfWeek_IsSet => _PSDTLocation.HasValue;
        public Package.DayOfWeek ScheduleDayOfWeek => _ScheduleDayOfWeek_IsSet ? (Package.DayOfWeek)_data.Span.Slice(_ScheduleDayOfWeekLocation, 0x1)[0] : default;
        #endregion
        #region ScheduleDate
        private int _ScheduleDateLocation => _PSDTLocation!.Value + 0x2;
        private bool _ScheduleDate_IsSet => _PSDTLocation.HasValue;
        public Byte ScheduleDate => _ScheduleDate_IsSet ? _data.Span[_ScheduleDateLocation] : default;
        #endregion
        #region ScheduleHour
        private int _ScheduleHourLocation => _PSDTLocation!.Value + 0x3;
        private bool _ScheduleHour_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleHour => _ScheduleHour_IsSet ? (sbyte)_data.Slice(_ScheduleHourLocation, 1)[0] : default;
        #endregion
        #region ScheduleMinute
        private int _ScheduleMinuteLocation => _PSDTLocation!.Value + 0x4;
        private bool _ScheduleMinute_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleMinute => _ScheduleMinute_IsSet ? (sbyte)_data.Slice(_ScheduleMinuteLocation, 1)[0] : default;
        #endregion
        #region Unknown3
        private int _Unknown3Location => _PSDTLocation!.Value + 0x5;
        private bool _Unknown3_IsSet => _PSDTLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown3 => _Unknown3_IsSet ? _data.Span.Slice(_Unknown3Location, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region ScheduleDurationInMinutes
        private int _ScheduleDurationInMinutesLocation => _PSDTLocation!.Value + 0x8;
        private bool _ScheduleDurationInMinutes_IsSet => _PSDTLocation.HasValue;
        public Int32 ScheduleDurationInMinutes => _ScheduleDurationInMinutes_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_ScheduleDurationInMinutesLocation, 4)) : default;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region Unknown4
        private int? _Unknown4Location;
        public Int32? Unknown4 => _Unknown4Location.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _Unknown4Location.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public IPackageIdlesGetter? IdleAnimations { get; private set; }
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICombatStyleGetter>.Null;
        #endregion
        #region OwnerQuest
        private int? _OwnerQuestLocation;
        public bool OwnerQuest_IsSet => _OwnerQuestLocation.HasValue;
        public IFormLinkNullable<IQuestGetter> OwnerQuest => _OwnerQuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerQuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region PackageTemplate
        partial void PackageTemplateCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public IFormLink<IPackageGetter> PackageTemplate => GetPackageTemplateCustom();
        #endregion
        #region XnamMarker
        partial void XnamMarkerCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public ReadOnlyMemorySlice<Byte> XnamMarker => GetXnamMarkerCustom();
        #endregion
        public IPackageEventGetter? OnBegin { get; private set; }
        public IPackageEventGetter? OnEnd { get; private set; }
        public IPackageEventGetter? OnChange { get; private set; }
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageBinaryOverlay PackageFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new PackageBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PackageBinaryOverlay PackageFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.VirtualMachineAdapter);
                }
                case 0x54444B50: // PKDT
                {
                    _PKDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Unknown2);
                }
                case 0x54445350: // PSDT
                {
                    _PSDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.ScheduleDurationInMinutes);
                }
                case 0x41445443: // CTDA
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Conditions);
                }
                case 0x424C4449: // IDLB
                {
                    _Unknown4Location = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.Unknown4);
                }
                case 0x464C4449: // IDLF
                {
                    this.IdleAnimations = PackageIdlesBinaryOverlay.PackageIdlesFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.IdleAnimations);
                }
                case 0x4D414E43: // CNAM
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.CombatStyle);
                }
                case 0x4D414E51: // QNAM
                {
                    _OwnerQuestLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OwnerQuest);
                }
                case 0x55434B50: // PKCU
                {
                    PackageTemplateCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.PackageTemplate);
                }
                case 0x4D414E58: // XNAM
                {
                    XnamMarkerCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.XnamMarker);
                }
                case 0x41424F50: // POBA
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnBegin = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnBegin);
                }
                case 0x41454F50: // POEA
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnEnd = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnEnd);
                }
                case 0x41434F50: // POCA
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnChange = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Package_FieldIndex.OnChange);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

