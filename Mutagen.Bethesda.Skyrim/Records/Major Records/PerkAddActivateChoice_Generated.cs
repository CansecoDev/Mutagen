/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PerkAddActivateChoice :
        APerkEntryPointEffect,
        IPerkAddActivateChoice,
        ILoquiObjectSetter<PerkAddActivateChoice>,
        IEquatable<PerkAddActivateChoice>
    {
        #region Ctor
        public PerkAddActivateChoice()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Spell
        public FormLinkNullable<Spell> Spell { get; set; } = new FormLinkNullable<Spell>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FormLinkNullable<ISpellGetter> IPerkAddActivateChoiceGetter.Spell => this.Spell.ToGetter<Spell, ISpellGetter>();
        #endregion
        #region ButtonLabel
        public TranslatedString? ButtonLabel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IPerkAddActivateChoiceGetter.ButtonLabel => this.ButtonLabel;
        #endregion
        #region Flags
        public PerkScriptFlag Flags { get; set; } = new PerkScriptFlag();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPerkScriptFlagGetter IPerkAddActivateChoiceGetter.Flags => Flags;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkAddActivateChoiceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkAddActivateChoiceGetter rhs)) return false;
            return ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PerkAddActivateChoice? obj)
        {
            return ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEntryPointEffect.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Spell = initialValue;
                this.ButtonLabel = initialValue;
                this.Flags = new MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>(initialValue, new PerkScriptFlag.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState,
                TItem EntryPoint,
                TItem PerkConditionTabCount,
                TItem Spell,
                TItem ButtonLabel,
                TItem Flags)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions,
                PRKEDataTypeState: PRKEDataTypeState,
                EntryPoint: EntryPoint,
                PerkConditionTabCount: PerkConditionTabCount)
            {
                this.Spell = Spell;
                this.ButtonLabel = ButtonLabel;
                this.Flags = new MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>(Flags, new PerkScriptFlag.Mask<TItem>(Flags));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Spell;
            public TItem ButtonLabel;
            public MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>? Flags { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Spell, rhs.Spell)) return false;
                if (!object.Equals(this.ButtonLabel, rhs.ButtonLabel)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Spell);
                hash.Add(this.ButtonLabel);
                hash.Add(this.Flags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Spell)) return false;
                if (!eval(this.ButtonLabel)) return false;
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Spell)) return true;
                if (eval(this.ButtonLabel)) return true;
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkAddActivateChoice.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Spell = eval(this.Spell);
                obj.ButtonLabel = eval(this.ButtonLabel);
                obj.Flags = this.Flags == null ? null : new MaskItem<R, PerkScriptFlag.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkAddActivateChoice.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkAddActivateChoice.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkAddActivateChoice.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Spell ?? true)
                    {
                        fg.AppendItem(Spell, "Spell");
                    }
                    if (printMask?.ButtonLabel ?? true)
                    {
                        fg.AppendItem(ButtonLabel, "ButtonLabel");
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEntryPointEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Spell;
            public Exception? ButtonLabel;
            public MaskItem<Exception?, PerkScriptFlag.ErrorMask?>? Flags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkAddActivateChoice_FieldIndex.Spell:
                        return Spell;
                    case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                        return ButtonLabel;
                    case PerkAddActivateChoice_FieldIndex.Flags:
                        return Flags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkAddActivateChoice_FieldIndex.Spell:
                        this.Spell = ex;
                        break;
                    case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                        this.ButtonLabel = ex;
                        break;
                    case PerkAddActivateChoice_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, PerkScriptFlag.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkAddActivateChoice_FieldIndex.Spell:
                        this.Spell = (Exception?)obj;
                        break;
                    case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                        this.ButtonLabel = (Exception?)obj;
                        break;
                    case PerkAddActivateChoice_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, PerkScriptFlag.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Spell != null) return true;
                if (ButtonLabel != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Spell, "Spell");
                fg.AppendItem(ButtonLabel, "ButtonLabel");
                Flags?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Spell = this.Spell.Combine(rhs.Spell);
                ret.ButtonLabel = this.ButtonLabel.Combine(rhs.ButtonLabel);
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEntryPointEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Spell;
            public bool ButtonLabel;
            public PerkScriptFlag.TranslationMask? Flags;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Spell = defaultOn;
                this.ButtonLabel = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Spell, null));
                ret.Add((ButtonLabel, null));
                ret.Add((Flags != null || DefaultOn, Flags?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PerkAddActivateChoice_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PerkAddActivateChoiceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => PerkAddActivateChoiceCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PerkAddActivateChoiceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PerkAddActivateChoiceCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkAddActivateChoiceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkAddActivateChoiceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PerkAddActivateChoice CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkAddActivateChoice();
            ((PerkAddActivateChoiceSetterCommon)((IPerkAddActivateChoiceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkAddActivateChoice item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkAddActivateChoiceSetterCommon)((IPerkAddActivateChoiceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PerkAddActivateChoice GetNew()
        {
            return new PerkAddActivateChoice();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkAddActivateChoice :
        IPerkAddActivateChoiceGetter,
        IAPerkEntryPointEffect,
        ILoquiObjectSetter<IPerkAddActivateChoice>,
        ILinkedFormKeyContainer
    {
        new FormLinkNullable<Spell> Spell { get; set; }
        new TranslatedString? ButtonLabel { get; set; }
        new PerkScriptFlag Flags { get; set; }
    }

    public partial interface IPerkAddActivateChoiceGetter :
        IAPerkEntryPointEffectGetter,
        ILoquiObject<IPerkAddActivateChoiceGetter>,
        ILinkedFormKeyContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PerkAddActivateChoice_Registration.Instance;
        FormLinkNullable<ISpellGetter> Spell { get; }
        TranslatedString? ButtonLabel { get; }
        IPerkScriptFlagGetter Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkAddActivateChoiceMixIn
    {
        public static void Clear(this IPerkAddActivateChoice item)
        {
            ((PerkAddActivateChoiceSetterCommon)((IPerkAddActivateChoiceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkAddActivateChoice.Mask<bool> GetEqualsMask(
            this IPerkAddActivateChoiceGetter item,
            IPerkAddActivateChoiceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkAddActivateChoiceGetter item,
            string? name = null,
            PerkAddActivateChoice.Mask<bool>? printMask = null)
        {
            return ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkAddActivateChoiceGetter item,
            FileGeneration fg,
            string? name = null,
            PerkAddActivateChoice.Mask<bool>? printMask = null)
        {
            ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkAddActivateChoiceGetter item,
            IPerkAddActivateChoiceGetter rhs)
        {
            return ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkAddActivateChoice lhs,
            IPerkAddActivateChoiceGetter rhs,
            out PerkAddActivateChoice.ErrorMask errorMask,
            PerkAddActivateChoice.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkAddActivateChoice.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkAddActivateChoice lhs,
            IPerkAddActivateChoiceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkAddActivateChoice DeepCopy(
            this IPerkAddActivateChoiceGetter item,
            PerkAddActivateChoice.TranslationMask? copyMask = null)
        {
            return ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkAddActivateChoice DeepCopy(
            this IPerkAddActivateChoiceGetter item,
            out PerkAddActivateChoice.ErrorMask errorMask,
            PerkAddActivateChoice.TranslationMask? copyMask = null)
        {
            return ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkAddActivateChoice DeepCopy(
            this IPerkAddActivateChoiceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkAddActivateChoice item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkAddActivateChoiceSetterCommon)((IPerkAddActivateChoiceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum PerkAddActivateChoice_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
        EntryPoint = 4,
        PerkConditionTabCount = 5,
        Spell = 6,
        ButtonLabel = 7,
        Flags = 8,
    }
    #endregion

    #region Registration
    public partial class PerkAddActivateChoice_Registration : ILoquiRegistration
    {
        public static readonly PerkAddActivateChoice_Registration Instance = new PerkAddActivateChoice_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 422,
            version: 0);

        public const string GUID = "628923c0-a9a0-489d-a73e-934ee88f5351";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PerkAddActivateChoice.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkAddActivateChoice.ErrorMask);

        public static readonly Type ClassType = typeof(PerkAddActivateChoice);

        public static readonly Type GetterType = typeof(IPerkAddActivateChoiceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkAddActivateChoice);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PerkAddActivateChoice";

        public const string Name = "PerkAddActivateChoice";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SPELL":
                    return (ushort)PerkAddActivateChoice_FieldIndex.Spell;
                case "BUTTONLABEL":
                    return (ushort)PerkAddActivateChoice_FieldIndex.ButtonLabel;
                case "FLAGS":
                    return (ushort)PerkAddActivateChoice_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return true;
                case PerkAddActivateChoice_FieldIndex.Spell:
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                    return "Spell";
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                    return "ButtonLabel";
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return "Flags";
                default:
                    return APerkEntryPointEffect_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PerkAddActivateChoice_FieldIndex enu = (PerkAddActivateChoice_FieldIndex)index;
            switch (enu)
            {
                case PerkAddActivateChoice_FieldIndex.Spell:
                    return typeof(FormLinkNullable<Spell>);
                case PerkAddActivateChoice_FieldIndex.ButtonLabel:
                    return typeof(TranslatedString);
                case PerkAddActivateChoice_FieldIndex.Flags:
                    return typeof(PerkScriptFlag);
                default:
                    return APerkEntryPointEffect_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(PerkAddActivateChoiceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkAddActivateChoiceSetterCommon : APerkEntryPointEffectSetterCommon
    {
        public new static readonly PerkAddActivateChoiceSetterCommon Instance = new PerkAddActivateChoiceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkAddActivateChoice item)
        {
            ClearPartial();
            item.Spell = FormLinkNullable<Spell>.Null;
            item.ButtonLabel = default;
            item.Flags.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEntryPointEffect item)
        {
            Clear(item: (IPerkAddActivateChoice)item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IPerkAddActivateChoice)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkAddActivateChoice item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkAddActivateChoiceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PerkAddActivateChoiceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkAddActivateChoice)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkAddActivateChoice)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PerkAddActivateChoiceCommon : APerkEntryPointEffectCommon
    {
        public new static readonly PerkAddActivateChoiceCommon Instance = new PerkAddActivateChoiceCommon();

        public PerkAddActivateChoice.Mask<bool> GetEqualsMask(
            IPerkAddActivateChoiceGetter item,
            IPerkAddActivateChoiceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkAddActivateChoice.Mask<bool>(false);
            ((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkAddActivateChoiceGetter item,
            IPerkAddActivateChoiceGetter rhs,
            PerkAddActivateChoice.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Spell = object.Equals(item.Spell, rhs.Spell);
            ret.ButtonLabel = string.Equals(item.ButtonLabel, rhs.ButtonLabel);
            ret.Flags = MaskItemExt.Factory(item.Flags.GetEqualsMask(rhs.Flags, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPerkAddActivateChoiceGetter item,
            string? name = null,
            PerkAddActivateChoice.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkAddActivateChoiceGetter item,
            FileGeneration fg,
            string? name = null,
            PerkAddActivateChoice.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkAddActivateChoice =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkAddActivateChoice) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkAddActivateChoiceGetter item,
            FileGeneration fg,
            PerkAddActivateChoice.Mask<bool>? printMask = null)
        {
            APerkEntryPointEffectCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Spell ?? true)
            {
                fg.AppendItem(item.Spell.FormKey, "Spell");
            }
            if ((printMask?.ButtonLabel ?? true)
                && item.ButtonLabel.TryGet(out var ButtonLabelItem))
            {
                fg.AppendItem(ButtonLabelItem, "ButtonLabel");
            }
            if (printMask?.Flags?.Overall ?? true)
            {
                item.Flags?.ToString(fg, "Flags");
            }
        }
        
        public static PerkAddActivateChoice_FieldIndex ConvertFieldIndex(APerkEntryPointEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEntryPointEffect_FieldIndex.Rank:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Priority:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Conditions:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PerkAddActivateChoice_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkAddActivateChoice_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkAddActivateChoiceGetter? lhs,
            IPerkAddActivateChoiceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Spell.Equals(rhs.Spell)) return false;
            if (!string.Equals(lhs.ButtonLabel, rhs.ButtonLabel)) return false;
            if (!object.Equals(lhs.Flags, rhs.Flags)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkAddActivateChoiceGetter?)lhs,
                rhs: rhs as IPerkAddActivateChoiceGetter);
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkAddActivateChoiceGetter?)lhs,
                rhs: rhs as IPerkAddActivateChoiceGetter);
        }
        
        public virtual int GetHashCode(IPerkAddActivateChoiceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Spell);
            if (item.ButtonLabel.TryGet(out var ButtonLabelitem))
            {
                hash.Add(ButtonLabelitem);
            }
            hash.Add(item.Flags);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            return GetHashCode(item: (IPerkAddActivateChoiceGetter)item);
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IPerkAddActivateChoiceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PerkAddActivateChoice.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPerkAddActivateChoiceGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Spell.FormKey.TryGet(out var SpellKey))
            {
                yield return SpellKey;
            }
            yield break;
        }
        
        public void RemapLinks(IPerkAddActivateChoiceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class PerkAddActivateChoiceSetterTranslationCommon : APerkEntryPointEffectSetterTranslationCommon
    {
        public new static readonly PerkAddActivateChoiceSetterTranslationCommon Instance = new PerkAddActivateChoiceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkAddActivateChoice item,
            IPerkAddActivateChoiceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPerkEntryPointEffect)item,
                (IAPerkEntryPointEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PerkAddActivateChoice_FieldIndex.Spell) ?? true))
            {
                item.Spell = new FormLinkNullable<Spell>(rhs.Spell.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)PerkAddActivateChoice_FieldIndex.ButtonLabel) ?? true))
            {
                item.ButtonLabel = rhs.ButtonLabel;
            }
            if ((copyMask?.GetShouldTranslate((int)PerkAddActivateChoice_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)PerkAddActivateChoice_FieldIndex.Flags);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)PerkAddActivateChoice_FieldIndex.Flags) ?? true))
                    {
                        item.Flags = rhs.Flags.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)PerkAddActivateChoice_FieldIndex.Flags),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkAddActivateChoice)item,
                rhs: (IPerkAddActivateChoiceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkAddActivateChoice)item,
                rhs: (IPerkAddActivateChoiceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PerkAddActivateChoice DeepCopy(
            IPerkAddActivateChoiceGetter item,
            PerkAddActivateChoice.TranslationMask? copyMask = null)
        {
            PerkAddActivateChoice ret = (PerkAddActivateChoice)((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkAddActivateChoice DeepCopy(
            IPerkAddActivateChoiceGetter item,
            out PerkAddActivateChoice.ErrorMask errorMask,
            PerkAddActivateChoice.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkAddActivateChoice ret = (PerkAddActivateChoice)((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkAddActivateChoice.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkAddActivateChoice DeepCopy(
            IPerkAddActivateChoiceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkAddActivateChoice ret = (PerkAddActivateChoice)((PerkAddActivateChoiceCommon)((IPerkAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkAddActivateChoiceSetterTranslationCommon)((IPerkAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PerkAddActivateChoice
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkAddActivateChoice_Registration.Instance;
        public new static PerkAddActivateChoice_Registration Registration => PerkAddActivateChoice_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkAddActivateChoiceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PerkAddActivateChoiceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkAddActivateChoiceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PerkAddActivateChoiceBinaryWriteTranslation :
        APerkEntryPointEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PerkAddActivateChoiceBinaryWriteTranslation Instance = new PerkAddActivateChoiceBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkAddActivateChoiceGetter item,
            MutagenWriter writer)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Spell);
        }

        public static void WriteRecordTypes(
            IPerkAddActivateChoiceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ButtonLabel,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EPF2),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            var FlagsItem = item.Flags;
            ((PerkScriptFlagBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                item: FlagsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            IPerkAddActivateChoiceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkAddActivateChoiceBinaryCreateTranslation : APerkEntryPointEffectBinaryCreateTranslation
    {
        public new readonly static PerkAddActivateChoiceBinaryCreateTranslation Instance = new PerkAddActivateChoiceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkAddActivateChoice item,
            MutagenFrame frame)
        {
            APerkEntryPointEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete) return;
            item.Spell = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPerkAddActivateChoice item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EPF2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ButtonLabel = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)PerkAddActivateChoice_FieldIndex.ButtonLabel;
                }
                case RecordTypeInts.EPF3:
                {
                    item.Flags = Mutagen.Bethesda.Skyrim.PerkScriptFlag.CreateFromBinary(frame: frame);
                    return (int)PerkAddActivateChoice_FieldIndex.Flags;
                }
                default:
                    return APerkEntryPointEffectBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PerkAddActivateChoiceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PerkAddActivateChoiceBinaryOverlay :
        APerkEntryPointEffectBinaryOverlay,
        IPerkAddActivateChoiceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkAddActivateChoice_Registration.Instance;
        public new static PerkAddActivateChoice_Registration Registration => PerkAddActivateChoice_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkAddActivateChoiceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkAddActivateChoiceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => PerkAddActivateChoiceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainerGetter.LinkFormKeys => PerkAddActivateChoiceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkAddActivateChoiceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkAddActivateChoiceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLinkNullable<ISpellGetter> Spell => new FormLinkNullable<ISpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x2, 0x4))));
        #region ButtonLabel
        private int? _ButtonLabelLocation;
        public TranslatedString? ButtonLabel => _ButtonLabelLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ButtonLabelLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        private IPerkScriptFlagGetter? _Flags => _FlagsLocation.HasValue ? PerkScriptFlagBinaryOverlay.PerkScriptFlagFactory(new OverlayStream(_data.Slice(_FlagsLocation!.Value.Min), _package), _package) : default;
        public IPerkScriptFlagGetter Flags => _Flags ?? new PerkScriptFlag();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkAddActivateChoiceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkAddActivateChoiceBinaryOverlay PerkAddActivateChoiceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkAddActivateChoiceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PerkAddActivateChoiceBinaryOverlay PerkAddActivateChoiceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkAddActivateChoiceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EPF2:
                {
                    _ButtonLabelLocation = (stream.Position - offset);
                    return (int)PerkAddActivateChoice_FieldIndex.ButtonLabel;
                }
                case RecordTypeInts.EPF3:
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PerkAddActivateChoice_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkAddActivateChoiceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

