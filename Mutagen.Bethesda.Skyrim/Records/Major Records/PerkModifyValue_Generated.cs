/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PerkModifyValue :
        APerkEntryPointEffect,
        IPerkModifyValue,
        ILoquiObjectSetter<PerkModifyValue>,
        IEquatable<PerkModifyValue>
    {
        #region Ctor
        public PerkModifyValue()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Modification
        public PerkModifyValue.ModificationType Modification { get; set; } = default;
        #endregion
        #region Value
        public Single Value { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkModifyValueMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkModifyValueGetter rhs)) return false;
            return ((PerkModifyValueCommon)((IPerkModifyValueGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PerkModifyValue? obj)
        {
            return ((PerkModifyValueCommon)((IPerkModifyValueGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkModifyValueCommon)((IPerkModifyValueGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEntryPointEffect.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Modification = initialValue;
                this.Value = initialValue;
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState,
                TItem EntryPoint,
                TItem PerkConditionTabCount,
                TItem Modification,
                TItem Value)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions,
                PRKEDataTypeState: PRKEDataTypeState,
                EntryPoint: EntryPoint,
                PerkConditionTabCount: PerkConditionTabCount)
            {
                this.Modification = Modification;
                this.Value = Value;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Modification;
            public TItem Value;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Modification, rhs.Modification)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Modification);
                hash.Add(this.Value);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Modification)) return false;
                if (!eval(this.Value)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Modification)) return true;
                if (eval(this.Value)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkModifyValue.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Modification = eval(this.Modification);
                obj.Value = eval(this.Value);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkModifyValue.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkModifyValue.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkModifyValue.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Modification ?? true)
                    {
                        fg.AppendItem(Modification, "Modification");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEntryPointEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Modification;
            public Exception? Value;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
                switch (enu)
                {
                    case PerkModifyValue_FieldIndex.Modification:
                        return Modification;
                    case PerkModifyValue_FieldIndex.Value:
                        return Value;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
                switch (enu)
                {
                    case PerkModifyValue_FieldIndex.Modification:
                        this.Modification = ex;
                        break;
                    case PerkModifyValue_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
                switch (enu)
                {
                    case PerkModifyValue_FieldIndex.Modification:
                        this.Modification = (Exception?)obj;
                        break;
                    case PerkModifyValue_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Modification != null) return true;
                if (Value != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Modification, "Modification");
                fg.AppendItem(Value, "Value");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Modification = this.Modification.Combine(rhs.Modification);
                ret.Value = this.Value.Combine(rhs.Value);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEntryPointEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Modification;
            public bool Value;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Modification = defaultOn;
                this.Value = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Modification, null));
                ret.Add((Value, null));
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PerkModifyValue_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkModifyValueBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkModifyValueBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PerkModifyValue CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkModifyValue();
            ((PerkModifyValueSetterCommon)((IPerkModifyValueGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkModifyValue item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkModifyValueSetterCommon)((IPerkModifyValueGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PerkModifyValue GetNew()
        {
            return new PerkModifyValue();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkModifyValue :
        IPerkModifyValueGetter,
        IAPerkEntryPointEffect,
        ILoquiObjectSetter<IPerkModifyValue>
    {
        new PerkModifyValue.ModificationType Modification { get; set; }
        new Single Value { get; set; }
    }

    public partial interface IPerkModifyValueGetter :
        IAPerkEntryPointEffectGetter,
        ILoquiObject<IPerkModifyValueGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PerkModifyValue_Registration.Instance;
        PerkModifyValue.ModificationType Modification { get; }
        Single Value { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkModifyValueMixIn
    {
        public static void Clear(this IPerkModifyValue item)
        {
            ((PerkModifyValueSetterCommon)((IPerkModifyValueGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkModifyValue.Mask<bool> GetEqualsMask(
            this IPerkModifyValueGetter item,
            IPerkModifyValueGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkModifyValueGetter item,
            string? name = null,
            PerkModifyValue.Mask<bool>? printMask = null)
        {
            return ((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkModifyValueGetter item,
            FileGeneration fg,
            string? name = null,
            PerkModifyValue.Mask<bool>? printMask = null)
        {
            ((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkModifyValueGetter item,
            IPerkModifyValueGetter rhs)
        {
            return ((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkModifyValue lhs,
            IPerkModifyValueGetter rhs,
            out PerkModifyValue.ErrorMask errorMask,
            PerkModifyValue.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkModifyValue.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkModifyValue lhs,
            IPerkModifyValueGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkModifyValue DeepCopy(
            this IPerkModifyValueGetter item,
            PerkModifyValue.TranslationMask? copyMask = null)
        {
            return ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkModifyValue DeepCopy(
            this IPerkModifyValueGetter item,
            out PerkModifyValue.ErrorMask errorMask,
            PerkModifyValue.TranslationMask? copyMask = null)
        {
            return ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkModifyValue DeepCopy(
            this IPerkModifyValueGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkModifyValue item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkModifyValueSetterCommon)((IPerkModifyValueGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum PerkModifyValue_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
        EntryPoint = 4,
        PerkConditionTabCount = 5,
        Modification = 6,
        Value = 7,
    }
    #endregion

    #region Registration
    public partial class PerkModifyValue_Registration : ILoquiRegistration
    {
        public static readonly PerkModifyValue_Registration Instance = new PerkModifyValue_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 417,
            version: 0);

        public const string GUID = "1d49c96a-ffbd-42f5-8420-24ced8b5991e";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(PerkModifyValue.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkModifyValue.ErrorMask);

        public static readonly Type ClassType = typeof(PerkModifyValue);

        public static readonly Type GetterType = typeof(IPerkModifyValueGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkModifyValue);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PerkModifyValue";

        public const string Name = "PerkModifyValue";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODIFICATION":
                    return (ushort)PerkModifyValue_FieldIndex.Modification;
                case "VALUE":
                    return (ushort)PerkModifyValue_FieldIndex.Value;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                case PerkModifyValue_FieldIndex.Value:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                case PerkModifyValue_FieldIndex.Value:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                case PerkModifyValue_FieldIndex.Value:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                    return "Modification";
                case PerkModifyValue_FieldIndex.Value:
                    return "Value";
                default:
                    return APerkEntryPointEffect_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                case PerkModifyValue_FieldIndex.Value:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                case PerkModifyValue_FieldIndex.Value:
                    return false;
                default:
                    return APerkEntryPointEffect_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PerkModifyValue_FieldIndex enu = (PerkModifyValue_FieldIndex)index;
            switch (enu)
            {
                case PerkModifyValue_FieldIndex.Modification:
                    return typeof(PerkModifyValue.ModificationType);
                case PerkModifyValue_FieldIndex.Value:
                    return typeof(Single);
                default:
                    return APerkEntryPointEffect_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(PerkModifyValueBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkModifyValueSetterCommon : APerkEntryPointEffectSetterCommon
    {
        public new static readonly PerkModifyValueSetterCommon Instance = new PerkModifyValueSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkModifyValue item)
        {
            ClearPartial();
            item.Modification = default;
            item.Value = default;
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEntryPointEffect item)
        {
            Clear(item: (IPerkModifyValue)item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IPerkModifyValue)item);
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkModifyValue item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkModifyValueBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PerkModifyValueBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkModifyValue)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkModifyValue)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PerkModifyValueCommon : APerkEntryPointEffectCommon
    {
        public new static readonly PerkModifyValueCommon Instance = new PerkModifyValueCommon();

        public PerkModifyValue.Mask<bool> GetEqualsMask(
            IPerkModifyValueGetter item,
            IPerkModifyValueGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkModifyValue.Mask<bool>(false);
            ((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkModifyValueGetter item,
            IPerkModifyValueGetter rhs,
            PerkModifyValue.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Modification = item.Modification == rhs.Modification;
            ret.Value = item.Value.EqualsWithin(rhs.Value);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPerkModifyValueGetter item,
            string? name = null,
            PerkModifyValue.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkModifyValueGetter item,
            FileGeneration fg,
            string? name = null,
            PerkModifyValue.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkModifyValue =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkModifyValue) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkModifyValueGetter item,
            FileGeneration fg,
            PerkModifyValue.Mask<bool>? printMask = null)
        {
            APerkEntryPointEffectCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Modification ?? true)
            {
                fg.AppendItem(item.Modification, "Modification");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
        }
        
        public static PerkModifyValue_FieldIndex ConvertFieldIndex(APerkEntryPointEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEntryPointEffect_FieldIndex.Rank:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Priority:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Conditions:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return (PerkModifyValue_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PerkModifyValue_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (PerkModifyValue_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkModifyValue_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkModifyValueGetter? lhs,
            IPerkModifyValueGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Modification != rhs.Modification) return false;
            if (!lhs.Value.EqualsWithin(rhs.Value)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkModifyValueGetter?)lhs,
                rhs: rhs as IPerkModifyValueGetter);
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkModifyValueGetter?)lhs,
                rhs: rhs as IPerkModifyValueGetter);
        }
        
        public virtual int GetHashCode(IPerkModifyValueGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Modification);
            hash.Add(item.Value);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            return GetHashCode(item: (IPerkModifyValueGetter)item);
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IPerkModifyValueGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PerkModifyValue.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPerkModifyValueGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IPerkModifyValueGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class PerkModifyValueSetterTranslationCommon : APerkEntryPointEffectSetterTranslationCommon
    {
        public new static readonly PerkModifyValueSetterTranslationCommon Instance = new PerkModifyValueSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkModifyValue item,
            IPerkModifyValueGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPerkEntryPointEffect)item,
                (IAPerkEntryPointEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PerkModifyValue_FieldIndex.Modification) ?? true))
            {
                item.Modification = rhs.Modification;
            }
            if ((copyMask?.GetShouldTranslate((int)PerkModifyValue_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkModifyValue)item,
                rhs: (IPerkModifyValueGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkModifyValue)item,
                rhs: (IPerkModifyValueGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PerkModifyValue DeepCopy(
            IPerkModifyValueGetter item,
            PerkModifyValue.TranslationMask? copyMask = null)
        {
            PerkModifyValue ret = (PerkModifyValue)((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).GetNew();
            ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkModifyValue DeepCopy(
            IPerkModifyValueGetter item,
            out PerkModifyValue.ErrorMask errorMask,
            PerkModifyValue.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkModifyValue ret = (PerkModifyValue)((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).GetNew();
            ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkModifyValue.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkModifyValue DeepCopy(
            IPerkModifyValueGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkModifyValue ret = (PerkModifyValue)((PerkModifyValueCommon)((IPerkModifyValueGetter)item).CommonInstance()!).GetNew();
            ((PerkModifyValueSetterTranslationCommon)((IPerkModifyValueGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PerkModifyValue
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkModifyValue_Registration.Instance;
        public new static PerkModifyValue_Registration Registration => PerkModifyValue_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkModifyValueCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PerkModifyValueSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkModifyValueSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PerkModifyValueBinaryWriteTranslation :
        APerkEntryPointEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PerkModifyValueBinaryWriteTranslation Instance = new PerkModifyValueBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkModifyValueGetter item,
            MutagenWriter writer)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PerkModifyValue.ModificationType>.Instance.Write(
                writer,
                item.Modification,
                length: 4);
        }

        public static void WriteRecordTypes(
            IPerkModifyValueGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Value,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EPFD));
        }

        public void Write(
            MutagenWriter writer,
            IPerkModifyValueGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkModifyValueGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkModifyValueGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkModifyValueGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkModifyValueBinaryCreateTranslation : APerkEntryPointEffectBinaryCreateTranslation
    {
        public new readonly static PerkModifyValueBinaryCreateTranslation Instance = new PerkModifyValueBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkModifyValue item,
            MutagenFrame frame)
        {
            APerkEntryPointEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Modification = EnumBinaryTranslation<PerkModifyValue.ModificationType>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }

        public static ParseResult FillBinaryRecordTypes(
            IPerkModifyValue item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EPFD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Value = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PerkModifyValue_FieldIndex.Value;
                }
                default:
                    return APerkEntryPointEffectBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PerkModifyValueBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PerkModifyValueBinaryOverlay :
        APerkEntryPointEffectBinaryOverlay,
        IPerkModifyValueGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkModifyValue_Registration.Instance;
        public new static PerkModifyValue_Registration Registration => PerkModifyValue_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkModifyValueCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkModifyValueSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkModifyValueBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkModifyValueBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public PerkModifyValue.ModificationType Modification => (PerkModifyValue.ModificationType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x2, 0x4));
        #region Value
        private int? _ValueLocation;
        public Single Value => _ValueLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ValueLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkModifyValueBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkModifyValueBinaryOverlay PerkModifyValueFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkModifyValueBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PerkModifyValueBinaryOverlay PerkModifyValueFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkModifyValueFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EPFD:
                {
                    _ValueLocation = (stream.Position - offset);
                    return (int)PerkModifyValue_FieldIndex.Value;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkModifyValueMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

