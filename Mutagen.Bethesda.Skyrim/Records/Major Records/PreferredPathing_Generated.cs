/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PreferredPathing :
        IPreferredPathing,
        ILoquiObjectSetter<PreferredPathing>,
        IEquatable<PreferredPathing>,
        IEqualsMask
    {
        #region Ctor
        public PreferredPathing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavmeshSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<NavmeshSet> _NavmeshSets = new ExtendedList<NavmeshSet>();
        public IExtendedList<NavmeshSet> NavmeshSets
        {
            get => this._NavmeshSets;
            protected set => this._NavmeshSets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshSetGetter> IPreferredPathingGetter.NavmeshSets => _NavmeshSets;
        #endregion

        #endregion
        #region NavmeshTree
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<NavmeshNode> _NavmeshTree = new ExtendedList<NavmeshNode>();
        public IExtendedList<NavmeshNode> NavmeshTree
        {
            get => this._NavmeshTree;
            protected set => this._NavmeshTree = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshNodeGetter> IPreferredPathingGetter.NavmeshTree => _NavmeshTree;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PreferredPathingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPreferredPathingGetter rhs)) return false;
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PreferredPathing? obj)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PreferredPathingCommon)((IPreferredPathingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PreferredPathingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PreferredPathingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PreferredPathing CreateFromXml(
            XElement node,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PreferredPathing CreateFromXml(
            XElement node,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PreferredPathing CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PreferredPathing();
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PreferredPathing CreateFromXml(
            string path,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PreferredPathing CreateFromXml(
            string path,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PreferredPathing CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PreferredPathing CreateFromXml(
            Stream stream,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PreferredPathing CreateFromXml(
            Stream stream,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PreferredPathing CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavmeshSets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>());
                this.NavmeshTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>());
            }

            public Mask(
                TItem NavmeshSets,
                TItem NavmeshTree)
            {
                this.NavmeshSets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>(NavmeshSets, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>());
                this.NavmeshTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>(NavmeshTree, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshSet.Mask<TItem>?>>?>? NavmeshSets;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshNode.Mask<TItem>?>>?>? NavmeshTree;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavmeshSets, rhs.NavmeshSets)) return false;
                if (!object.Equals(this.NavmeshTree, rhs.NavmeshTree)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavmeshSets);
                hash.Add(this.NavmeshTree);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.NavmeshSets != null)
                {
                    if (!eval(this.NavmeshSets.Overall)) return false;
                    if (this.NavmeshSets.Specific != null)
                    {
                        foreach (var item in this.NavmeshSets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.NavmeshTree != null)
                {
                    if (!eval(this.NavmeshTree.Overall)) return false;
                    if (this.NavmeshTree.Specific != null)
                    {
                        foreach (var item in this.NavmeshTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.NavmeshSets != null)
                {
                    if (eval(this.NavmeshSets.Overall)) return true;
                    if (this.NavmeshSets.Specific != null)
                    {
                        foreach (var item in this.NavmeshSets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.NavmeshTree != null)
                {
                    if (eval(this.NavmeshTree.Overall)) return true;
                    if (this.NavmeshTree.Specific != null)
                    {
                        foreach (var item in this.NavmeshTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PreferredPathing.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (NavmeshSets != null)
                {
                    obj.NavmeshSets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>?>(eval(this.NavmeshSets.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>());
                    if (NavmeshSets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshSet.Mask<R>?>>();
                        obj.NavmeshSets.Specific = l;
                        foreach (var item in NavmeshSets.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NavmeshSet.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NavmeshSet.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (NavmeshTree != null)
                {
                    obj.NavmeshTree = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>?>(eval(this.NavmeshTree.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>());
                    if (NavmeshTree.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshNode.Mask<R>?>>();
                        obj.NavmeshTree.Specific = l;
                        foreach (var item in NavmeshTree.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NavmeshNode.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NavmeshNode.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PreferredPathing.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PreferredPathing.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PreferredPathing.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.NavmeshSets?.Overall ?? true)
                        && NavmeshSets.TryGet(out var NavmeshSetsItem))
                    {
                        fg.AppendLine("NavmeshSets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(NavmeshSetsItem.Overall);
                            if (NavmeshSetsItem.Specific != null)
                            {
                                foreach (var subItem in NavmeshSetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.NavmeshTree?.Overall ?? true)
                        && NavmeshTree.TryGet(out var NavmeshTreeItem))
                    {
                        fg.AppendLine("NavmeshTree =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(NavmeshTreeItem.Overall);
                            if (NavmeshTreeItem.Specific != null)
                            {
                                foreach (var subItem in NavmeshTreeItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>? NavmeshSets;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>? NavmeshTree;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        return NavmeshSets;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        return NavmeshTree;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        this.NavmeshSets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>(ex, null);
                        break;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        this.NavmeshTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
                switch (enu)
                {
                    case PreferredPathing_FieldIndex.NavmeshSets:
                        this.NavmeshSets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>)obj;
                        break;
                    case PreferredPathing_FieldIndex.NavmeshTree:
                        this.NavmeshTree = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavmeshSets != null) return true;
                if (NavmeshTree != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                if (NavmeshSets.TryGet(out var NavmeshSetsItem))
                {
                    fg.AppendLine("NavmeshSets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(NavmeshSetsItem.Overall);
                        if (NavmeshSetsItem.Specific != null)
                        {
                            foreach (var subItem in NavmeshSetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (NavmeshTree.TryGet(out var NavmeshTreeItem))
                {
                    fg.AppendLine("NavmeshTree =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(NavmeshTreeItem.Overall);
                        if (NavmeshTreeItem.Specific != null)
                        {
                            foreach (var subItem in NavmeshTreeItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavmeshSets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshSet.ErrorMask?>>?>(ExceptionExt.Combine(this.NavmeshSets?.Overall, rhs.NavmeshSets?.Overall), ExceptionExt.Combine(this.NavmeshSets?.Specific, rhs.NavmeshSets?.Specific));
                ret.NavmeshTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshNode.ErrorMask?>>?>(ExceptionExt.Combine(this.NavmeshTree?.Overall, rhs.NavmeshTree?.Overall), ExceptionExt.Combine(this.NavmeshTree?.Specific, rhs.NavmeshTree?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, NavmeshSet.TranslationMask?> NavmeshSets;
            public MaskItem<bool, NavmeshNode.TranslationMask?> NavmeshTree;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.NavmeshSets = new MaskItem<bool, NavmeshSet.TranslationMask?>(defaultOn, null);
                this.NavmeshTree = new MaskItem<bool, NavmeshNode.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavmeshSets?.Overall ?? true, NavmeshSets?.Specific?.GetCrystal()));
                ret.Add((NavmeshTree?.Overall ?? true, NavmeshTree?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PreferredPathing_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => PreferredPathingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PreferredPathingCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PreferredPathingCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PreferredPathingCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PreferredPathingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PreferredPathingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PreferredPathing CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static PreferredPathing CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PreferredPathing();
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PreferredPathing item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPreferredPathingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PreferredPathing GetNew()
        {
            return new PreferredPathing();
        }

    }
    #endregion

    #region Interface
    public partial interface IPreferredPathing :
        IPreferredPathingGetter,
        ILoquiObjectSetter<IPreferredPathing>
    {
        new IExtendedList<NavmeshSet> NavmeshSets { get; }
        new IExtendedList<NavmeshNode> NavmeshTree { get; }
    }

    public partial interface IPreferredPathingGetter :
        ILoquiObject,
        ILoquiObject<IPreferredPathingGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => PreferredPathing_Registration.Instance;
        IReadOnlyList<INavmeshSetGetter> NavmeshSets { get; }
        IReadOnlyList<INavmeshNodeGetter> NavmeshTree { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PreferredPathingMixIn
    {
        public static void Clear(this IPreferredPathing item)
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PreferredPathing.Mask<bool> GetEqualsMask(
            this IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPreferredPathingGetter item,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPreferredPathingGetter item,
            FileGeneration fg,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPreferredPathingGetter item,
            PreferredPathing.Mask<bool?> checkMask)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PreferredPathing.Mask<bool> GetHasBeenSetMask(this IPreferredPathingGetter item)
        {
            var ret = new PreferredPathing.Mask<bool>(false);
            ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPreferredPathingGetter item,
            IPreferredPathingGetter rhs)
        {
            return ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPreferredPathing lhs,
            IPreferredPathingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PreferredPathing DeepCopy(
            this IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PreferredPathingSetterTranslationCommon)((IPreferredPathingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPreferredPathing item,
            XElement node,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPreferredPathing item,
            XElement node,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            string path,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            string path,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            string path,
            ErrorMaskBuilder? errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            Stream stream,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            Stream stream,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPreferredPathing item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPreferredPathing item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPreferredPathing item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PreferredPathingSetterCommon)((IPreferredPathingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum PreferredPathing_FieldIndex
    {
        NavmeshSets = 0,
        NavmeshTree = 1,
    }
    #endregion

    #region Registration
    public partial class PreferredPathing_Registration : ILoquiRegistration
    {
        public static readonly PreferredPathing_Registration Instance = new PreferredPathing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 280,
            version: 0);

        public const string GUID = "2744a2e7-3a68-48fb-8211-ae957f1f4543";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PreferredPathing.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PreferredPathing.ErrorMask);

        public static readonly Type ClassType = typeof(PreferredPathing);

        public static readonly Type GetterType = typeof(IPreferredPathingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPreferredPathing);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PreferredPathing";

        public const string Name = "PreferredPathing";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAVMESHSETS":
                    return (ushort)PreferredPathing_FieldIndex.NavmeshSets;
                case "NAVMESHTREE":
                    return (ushort)PreferredPathing_FieldIndex.NavmeshTree;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                    return "NavmeshSets";
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return "NavmeshTree";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PreferredPathing_FieldIndex enu = (PreferredPathing_FieldIndex)index;
            switch (enu)
            {
                case PreferredPathing_FieldIndex.NavmeshSets:
                    return typeof(IExtendedList<NavmeshSet>);
                case PreferredPathing_FieldIndex.NavmeshTree:
                    return typeof(IExtendedList<NavmeshNode>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PreferredPathingXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.NVPP;
        public static readonly Type BinaryWriteTranslation = typeof(PreferredPathingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PreferredPathingSetterCommon
    {
        public static readonly PreferredPathingSetterCommon Instance = new PreferredPathingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPreferredPathing item)
        {
            ClearPartial();
            item.NavmeshSets.Clear();
            item.NavmeshTree.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IPreferredPathing item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PreferredPathingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPreferredPathing item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.NVPP)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PreferredPathingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PreferredPathingCommon
    {
        public static readonly PreferredPathingCommon Instance = new PreferredPathingCommon();

        public PreferredPathing.Mask<bool> GetEqualsMask(
            IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PreferredPathing.Mask<bool>(false);
            ((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPreferredPathingGetter item,
            IPreferredPathingGetter rhs,
            PreferredPathing.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NavmeshSets = item.NavmeshSets.CollectionEqualsHelper(
                rhs.NavmeshSets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshTree = item.NavmeshTree.CollectionEqualsHelper(
                rhs.NavmeshTree,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IPreferredPathingGetter item,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPreferredPathingGetter item,
            FileGeneration fg,
            string? name = null,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PreferredPathing =>");
            }
            else
            {
                fg.AppendLine($"{name} (PreferredPathing) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPreferredPathingGetter item,
            FileGeneration fg,
            PreferredPathing.Mask<bool>? printMask = null)
        {
            if (printMask?.NavmeshSets?.Overall ?? true)
            {
                fg.AppendLine("NavmeshSets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.NavmeshSets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.NavmeshTree?.Overall ?? true)
            {
                fg.AppendLine("NavmeshTree =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.NavmeshTree)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IPreferredPathingGetter item,
            PreferredPathing.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPreferredPathingGetter item,
            PreferredPathing.Mask<bool> mask)
        {
            var NavmeshSetsItem = item.NavmeshSets;
            mask.NavmeshSets = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, NavmeshSet.Mask<bool>?>>?>(true, NavmeshSetsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, NavmeshSet.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var NavmeshTreeItem = item.NavmeshTree;
            mask.NavmeshTree = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, NavmeshNode.Mask<bool>?>>?>(true, NavmeshTreeItem.WithIndex().Select((i) => new MaskItemIndexed<bool, NavmeshNode.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPreferredPathingGetter? lhs,
            IPreferredPathingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.NavmeshSets.SequenceEqual(rhs.NavmeshSets)) return false;
            if (!lhs.NavmeshTree.SequenceEqual(rhs.NavmeshTree)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPreferredPathingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavmeshSets);
            hash.Add(item.NavmeshTree);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PreferredPathing.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPreferredPathingGetter obj)
        {
            foreach (var item in obj.NavmeshSets.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.NavmeshTree.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IPreferredPathingGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class PreferredPathingSetterTranslationCommon
    {
        public static readonly PreferredPathingSetterTranslationCommon Instance = new PreferredPathingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPreferredPathing item,
            IPreferredPathingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshSets) ?? true))
            {
                errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshSets);
                try
                {
                    item.NavmeshSets.SetTo(
                        rhs.NavmeshSets
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshTree) ?? true))
            {
                errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshTree);
                try
                {
                    item.NavmeshTree.SetTo(
                        rhs.NavmeshTree
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? copyMask = null)
        {
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PreferredPathing DeepCopy(
            IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PreferredPathing ret = (PreferredPathing)((PreferredPathingCommon)((IPreferredPathingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PreferredPathing
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PreferredPathing_Registration.Instance;
        public static PreferredPathing_Registration Registration => PreferredPathing_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PreferredPathingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PreferredPathingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PreferredPathingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PreferredPathingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PreferredPathingXmlWriteTranslation Instance = new PreferredPathingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPreferredPathingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshSets) ?? true))
            {
                ListXmlTranslation<INavmeshSetGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.NavmeshSets),
                    item: item.NavmeshSets,
                    fieldIndex: (int)PreferredPathing_FieldIndex.NavmeshSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PreferredPathing_FieldIndex.NavmeshSets),
                    transl: (XElement subNode, INavmeshSetGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((NavmeshSetXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)PreferredPathing_FieldIndex.NavmeshTree) ?? true))
            {
                ListXmlTranslation<INavmeshNodeGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.NavmeshTree),
                    item: item.NavmeshTree,
                    fieldIndex: (int)PreferredPathing_FieldIndex.NavmeshTree,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PreferredPathing_FieldIndex.NavmeshTree),
                    transl: (XElement subNode, INavmeshNodeGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((NavmeshNodeXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.PreferredPathing");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.PreferredPathing");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPreferredPathingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPreferredPathingGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IPreferredPathingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PreferredPathingXmlCreateTranslation
    {
        public readonly static PreferredPathingXmlCreateTranslation Instance = new PreferredPathingXmlCreateTranslation();

        public static void FillPublicXml(
            IPreferredPathing item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PreferredPathingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPreferredPathing item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "NavmeshSets":
                    errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshSets);
                    try
                    {
                        if (ListXmlTranslation<NavmeshSet>.Instance.Parse(
                            node: node,
                            enumer: out var NavmeshSetsItem,
                            transl: LoquiXmlTranslation<NavmeshSet>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.NavmeshSets.SetTo(NavmeshSetsItem);
                        }
                        else
                        {
                            item.NavmeshSets.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NavmeshTree":
                    errorMask?.PushIndex((int)PreferredPathing_FieldIndex.NavmeshTree);
                    try
                    {
                        if (ListXmlTranslation<NavmeshNode>.Instance.Parse(
                            node: node,
                            enumer: out var NavmeshTreeItem,
                            transl: LoquiXmlTranslation<NavmeshNode>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.NavmeshTree.SetTo(NavmeshTreeItem);
                        }
                        else
                        {
                            item.NavmeshTree.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class PreferredPathingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPreferredPathingGetter item,
            XElement node,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PreferredPathingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PreferredPathing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            string path,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            Stream stream,
            out PreferredPathing.ErrorMask errorMask,
            PreferredPathing.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((PreferredPathingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            XElement node,
            string? name = null,
            PreferredPathing.TranslationMask? translationMask = null)
        {
            ((PreferredPathingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PreferredPathingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPreferredPathingGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PreferredPathingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PreferredPathingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PreferredPathingBinaryWriteTranslation Instance = new PreferredPathingBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPreferredPathingGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INavmeshSetGetter>.Instance.Write(
                writer: writer,
                items: item.NavmeshSets,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshSetGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NavmeshSetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INavmeshNodeGetter>.Instance.Write(
                writer: writer,
                items: item.NavmeshTree,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshNodeGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NavmeshNodeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPreferredPathingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NVPP),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPreferredPathingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PreferredPathingBinaryCreateTranslation
    {
        public readonly static PreferredPathingBinaryCreateTranslation Instance = new PreferredPathingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPreferredPathing item,
            MutagenFrame frame)
        {
            item.NavmeshSets.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<NavmeshSet>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: NavmeshSet.TryCreateFromBinary));
            item.NavmeshTree.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<NavmeshNode>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: NavmeshNode.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PreferredPathingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPreferredPathingGetter item,
            MutagenWriter writer)
        {
            ((PreferredPathingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PreferredPathingBinaryOverlay :
        BinaryOverlay,
        IPreferredPathingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PreferredPathing_Registration.Instance;
        public static PreferredPathing_Registration Registration => PreferredPathing_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PreferredPathingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PreferredPathingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPreferredPathingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPreferredPathingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPreferredPathingGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => PreferredPathingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PreferredPathingCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PreferredPathingCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PreferredPathingCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PreferredPathingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PreferredPathingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PreferredPathingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PreferredPathingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region NavmeshSets
        protected int NavmeshSetsEndingPos;
        partial void CustomNavmeshSetsEndPos();
        #endregion
        #region NavmeshTree
        public IReadOnlyList<INavmeshNodeGetter> NavmeshTree => BinaryOverlayList.FactoryByCountLength<NavmeshNodeBinaryOverlay>(_data.Slice(NavmeshSetsEndingPos), _package, 8, countLength: 4, (s, p) => NavmeshNodeBinaryOverlay.NavmeshNodeFactory(s, p));
        protected int NavmeshTreeEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PreferredPathingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PreferredPathingBinaryOverlay PreferredPathingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PreferredPathingBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.CustomNavmeshSetsEndPos();
            ret.NavmeshTreeEndingPos = ret.NavmeshSetsEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.NavmeshSetsEndingPos)) * 8 + 4;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static PreferredPathingBinaryOverlay PreferredPathingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PreferredPathingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PreferredPathingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

