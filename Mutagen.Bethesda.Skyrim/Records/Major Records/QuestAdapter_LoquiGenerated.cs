/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class QuestAdapter :
        AVirtualMachineAdapter,
        IQuestAdapter,
        ILoquiObjectSetter<QuestAdapter>,
        IEquatable<QuestAdapter>,
        IEqualsMask
    {
        #region Ctor
        public QuestAdapter()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public QuestAdapter.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region FileName
        public String FileName { get; set; } = string.Empty;
        #endregion
        #region Fragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestScriptFragment> _Fragments = new ExtendedList<QuestScriptFragment>();
        public ExtendedList<QuestScriptFragment> Fragments
        {
            get => this._Fragments;
            protected set => this._Fragments = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestScriptFragmentGetter> IQuestAdapterGetter.Fragments => _Fragments;
        #endregion

        #endregion
        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestFragmentAlias> _Aliases = new ExtendedList<QuestFragmentAlias>();
        public ExtendedList<QuestFragmentAlias> Aliases
        {
            get => this._Aliases;
            protected set => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestFragmentAliasGetter> IQuestAdapterGetter.Aliases => _Aliases;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IQuestAdapterGetter rhs)) return false;
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(QuestAdapter obj)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestAdapterCommon)((IQuestAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => QuestAdapterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((QuestAdapterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new QuestAdapter CreateFromXml(
            XElement node,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static QuestAdapter CreateFromXml(
            XElement node,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static QuestAdapter CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new QuestAdapter();
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static QuestAdapter CreateFromXml(
            string path,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static QuestAdapter CreateFromXml(
            string path,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestAdapter CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static QuestAdapter CreateFromXml(
            Stream stream,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static QuestAdapter CreateFromXml(
            Stream stream,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static QuestAdapter CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AVirtualMachineAdapter.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Versioning = initialValue;
                this.Unknown = initialValue;
                this.FileName = initialValue;
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>());
            }

            public Mask(
                TItem Version,
                TItem ObjectFormat,
                TItem Scripts,
                TItem Versioning,
                TItem Unknown,
                TItem FileName,
                TItem Fragments,
                TItem Aliases)
            : base(
                Version: Version,
                ObjectFormat: ObjectFormat,
                Scripts: Scripts)
            {
                this.Versioning = Versioning;
                this.Unknown = Unknown;
                this.FileName = FileName;
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>(Fragments, Enumerable.Empty<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>(Aliases, Enumerable.Empty<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Unknown;
            public TItem FileName;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestScriptFragment.Mask<TItem>?>>?>? Fragments;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestFragmentAlias.Mask<TItem>?>>?>? Aliases;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.Fragments, rhs.Fragments)) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Unknown);
                hash.Add(this.FileName);
                hash.Add(this.Fragments);
                hash.Add(this.Aliases);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.FileName)) return false;
                if (this.Fragments != null)
                {
                    if (!eval(this.Fragments.Overall)) return false;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Versioning)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.FileName)) return true;
                if (this.Fragments != null)
                {
                    if (eval(this.Fragments.Overall)) return true;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestAdapter.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Versioning = eval(this.Versioning);
                obj.Unknown = eval(this.Unknown);
                obj.FileName = eval(this.FileName);
                if (Fragments != null)
                {
                    obj.Fragments = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>?>(eval(this.Fragments.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>());
                    if (Fragments.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>>();
                        obj.Fragments.Specific = l;
                        foreach (var item in Fragments.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, QuestScriptFragment.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>?>(eval(this.Aliases.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, QuestFragmentAlias.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(QuestAdapter.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, QuestAdapter.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(QuestAdapter.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        fg.AppendItem(FileName, "FileName");
                    }
                    if ((printMask?.Fragments?.Overall ?? true)
                        && Fragments.TryGet(out var FragmentsItem))
                    {
                        fg.AppendLine("Fragments =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FragmentsItem.Overall);
                            if (FragmentsItem.Specific != null)
                            {
                                foreach (var subItem in FragmentsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases.TryGet(out var AliasesItem))
                    {
                        fg.AppendLine("Aliases =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AVirtualMachineAdapter.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Versioning;
            public Exception? Unknown;
            public Exception? FileName;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>? Fragments;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>? Aliases;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        return Versioning;
                    case QuestAdapter_FieldIndex.Unknown:
                        return Unknown;
                    case QuestAdapter_FieldIndex.FileName:
                        return FileName;
                    case QuestAdapter_FieldIndex.Fragments:
                        return Fragments;
                    case QuestAdapter_FieldIndex.Aliases:
                        return Aliases;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case QuestAdapter_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case QuestAdapter_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case QuestAdapter_FieldIndex.Fragments:
                        this.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAdapter_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
                switch (enu)
                {
                    case QuestAdapter_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case QuestAdapter_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case QuestAdapter_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case QuestAdapter_FieldIndex.Fragments:
                        this.Fragments = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>)obj;
                        break;
                    case QuestAdapter_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Unknown != null) return true;
                if (FileName != null) return true;
                if (Fragments != null) return true;
                if (Aliases != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(FileName, "FileName");
                if (Fragments.TryGet(out var FragmentsItem))
                {
                    fg.AppendLine("Fragments =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FragmentsItem.Overall);
                        if (FragmentsItem.Specific != null)
                        {
                            foreach (var subItem in FragmentsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Aliases.TryGet(out var AliasesItem))
                {
                    fg.AppendLine("Aliases =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestScriptFragment.ErrorMask?>>?>(ExceptionExt.Combine(this.Fragments?.Overall, rhs.Fragments?.Overall), ExceptionExt.Combine(this.Fragments?.Specific, rhs.Fragments?.Specific));
                ret.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestFragmentAlias.ErrorMask?>>?>(ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AVirtualMachineAdapter.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Versioning;
            public bool Unknown;
            public bool FileName;
            public MaskItem<bool, QuestScriptFragment.TranslationMask?> Fragments;
            public MaskItem<bool, QuestFragmentAlias.TranslationMask?> Aliases;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Versioning = defaultOn;
                this.Unknown = defaultOn;
                this.FileName = defaultOn;
                this.Fragments = new MaskItem<bool, QuestScriptFragment.TranslationMask?>(defaultOn, null);
                this.Aliases = new MaskItem<bool, QuestFragmentAlias.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Versioning, null));
                ret.Add((Unknown, null));
                ret.Add((FileName, null));
                ret.Add((Fragments?.Overall ?? true, Fragments?.Specific?.GetCrystal()));
                ret.Add((Aliases?.Overall ?? true, Aliases?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = QuestAdapter_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => QuestAdapterCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => QuestAdapterCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAdapterCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAdapterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new QuestAdapter CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static QuestAdapter CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new QuestAdapter();
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestAdapter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestAdapterGetter)rhs, include);

        void IClearable.Clear()
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new QuestAdapter GetNew()
        {
            return new QuestAdapter();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestAdapter :
        IQuestAdapterGetter,
        IAVirtualMachineAdapter,
        ILoquiObjectSetter<IQuestAdapter>
    {
        new QuestAdapter.VersioningBreaks Versioning { get; set; }
        new Byte Unknown { get; set; }
        new String FileName { get; set; }
        new ExtendedList<QuestScriptFragment> Fragments { get; }
        new ExtendedList<QuestFragmentAlias> Aliases { get; }
    }

    public partial interface IQuestAdapterGetter :
        IAVirtualMachineAdapterGetter,
        ILoquiObject<IQuestAdapterGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => QuestAdapter_Registration.Instance;
        QuestAdapter.VersioningBreaks Versioning { get; }
        Byte Unknown { get; }
        String FileName { get; }
        IReadOnlyList<IQuestScriptFragmentGetter> Fragments { get; }
        IReadOnlyList<IQuestFragmentAliasGetter> Aliases { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestAdapterMixIn
    {
        public static void Clear(this IQuestAdapter item)
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestAdapter.Mask<bool> GetEqualsMask(
            this IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestAdapterGetter item,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IQuestAdapterGetter item,
            QuestAdapter.Mask<bool?> checkMask)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static QuestAdapter.Mask<bool> GetHasBeenSetMask(this IQuestAdapterGetter item)
        {
            var ret = new QuestAdapter.Mask<bool>(false);
            ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IQuestAdapterGetter item,
            IQuestAdapterGetter rhs)
        {
            return ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IQuestAdapter lhs,
            IQuestAdapterGetter rhs,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestAdapter lhs,
            IQuestAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestAdapter DeepCopy(
            this IQuestAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestAdapterSetterTranslationCommon)((IQuestAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestAdapter item,
            XElement node,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IQuestAdapter item,
            XElement node,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            string path,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            string path,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            string path,
            ErrorMaskBuilder? errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            Stream stream,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            Stream stream,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IQuestAdapter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            QuestAdapter.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IQuestAdapter item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IQuestAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAdapterSetterCommon)((IQuestAdapterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum QuestAdapter_FieldIndex
    {
        Version = 0,
        ObjectFormat = 1,
        Scripts = 2,
        Versioning = 3,
        Unknown = 4,
        FileName = 5,
        Fragments = 6,
        Aliases = 7,
    }
    #endregion

    #region Registration
    public partial class QuestAdapter_Registration : ILoquiRegistration
    {
        public static readonly QuestAdapter_Registration Instance = new QuestAdapter_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 360,
            version: 0);

        public const string GUID = "9b79d88c-6b07-459c-959e-f6c5d1318ea8";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(QuestAdapter.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestAdapter.ErrorMask);

        public static readonly Type ClassType = typeof(QuestAdapter);

        public static readonly Type GetterType = typeof(IQuestAdapterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestAdapter);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.QuestAdapter";

        public const string Name = "QuestAdapter";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)QuestAdapter_FieldIndex.Versioning;
                case "UNKNOWN":
                    return (ushort)QuestAdapter_FieldIndex.Unknown;
                case "FILENAME":
                    return (ushort)QuestAdapter_FieldIndex.FileName;
                case "FRAGMENTS":
                    return (ushort)QuestAdapter_FieldIndex.Fragments;
                case "ALIASES":
                    return (ushort)QuestAdapter_FieldIndex.Aliases;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Fragments:
                case QuestAdapter_FieldIndex.Aliases:
                    return true;
                case QuestAdapter_FieldIndex.Versioning:
                case QuestAdapter_FieldIndex.Unknown:
                case QuestAdapter_FieldIndex.FileName:
                    return false;
                default:
                    return AVirtualMachineAdapter_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Fragments:
                case QuestAdapter_FieldIndex.Aliases:
                    return true;
                case QuestAdapter_FieldIndex.Versioning:
                case QuestAdapter_FieldIndex.Unknown:
                case QuestAdapter_FieldIndex.FileName:
                    return false;
                default:
                    return AVirtualMachineAdapter_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Versioning:
                case QuestAdapter_FieldIndex.Unknown:
                case QuestAdapter_FieldIndex.FileName:
                case QuestAdapter_FieldIndex.Fragments:
                case QuestAdapter_FieldIndex.Aliases:
                    return false;
                default:
                    return AVirtualMachineAdapter_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Versioning:
                    return "Versioning";
                case QuestAdapter_FieldIndex.Unknown:
                    return "Unknown";
                case QuestAdapter_FieldIndex.FileName:
                    return "FileName";
                case QuestAdapter_FieldIndex.Fragments:
                    return "Fragments";
                case QuestAdapter_FieldIndex.Aliases:
                    return "Aliases";
                default:
                    return AVirtualMachineAdapter_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Versioning:
                case QuestAdapter_FieldIndex.Unknown:
                case QuestAdapter_FieldIndex.FileName:
                case QuestAdapter_FieldIndex.Fragments:
                case QuestAdapter_FieldIndex.Aliases:
                    return false;
                default:
                    return AVirtualMachineAdapter_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Versioning:
                case QuestAdapter_FieldIndex.Unknown:
                case QuestAdapter_FieldIndex.FileName:
                case QuestAdapter_FieldIndex.Fragments:
                case QuestAdapter_FieldIndex.Aliases:
                    return false;
                default:
                    return AVirtualMachineAdapter_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            QuestAdapter_FieldIndex enu = (QuestAdapter_FieldIndex)index;
            switch (enu)
            {
                case QuestAdapter_FieldIndex.Versioning:
                    return typeof(QuestAdapter.VersioningBreaks);
                case QuestAdapter_FieldIndex.Unknown:
                    return typeof(Byte);
                case QuestAdapter_FieldIndex.FileName:
                    return typeof(String);
                case QuestAdapter_FieldIndex.Fragments:
                    return typeof(ExtendedList<QuestScriptFragment>);
                case QuestAdapter_FieldIndex.Aliases:
                    return typeof(ExtendedList<QuestFragmentAlias>);
                default:
                    return AVirtualMachineAdapter_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(QuestAdapterXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.VMAD;
        public static readonly Type BinaryWriteTranslation = typeof(QuestAdapterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestAdapterSetterCommon : AVirtualMachineAdapterSetterCommon
    {
        public new static readonly QuestAdapterSetterCommon Instance = new QuestAdapterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestAdapter item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Unknown = default;
            item.FileName = string.Empty;
            item.Fragments.Clear();
            item.Aliases.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAVirtualMachineAdapter item)
        {
            Clear(item: (IQuestAdapter)item);
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IQuestAdapter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestAdapterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IAVirtualMachineAdapter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (QuestAdapter)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.VMAD)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: QuestAdapterBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAVirtualMachineAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (QuestAdapter)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class QuestAdapterCommon : AVirtualMachineAdapterCommon
    {
        public new static readonly QuestAdapterCommon Instance = new QuestAdapterCommon();

        public QuestAdapter.Mask<bool> GetEqualsMask(
            IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestAdapter.Mask<bool>(false);
            ((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestAdapterGetter item,
            IQuestAdapterGetter rhs,
            QuestAdapter.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
            ret.Fragments = item.Fragments.CollectionEqualsHelper(
                rhs.Fragments,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IQuestAdapterGetter item,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IQuestAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"QuestAdapter =>");
            }
            else
            {
                fg.AppendLine($"{name} (QuestAdapter) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IQuestAdapterGetter item,
            FileGeneration fg,
            QuestAdapter.Mask<bool>? printMask = null)
        {
            AVirtualMachineAdapterCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.FileName ?? true)
            {
                fg.AppendItem(item.FileName, "FileName");
            }
            if (printMask?.Fragments?.Overall ?? true)
            {
                fg.AppendLine("Fragments =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Fragments)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Aliases?.Overall ?? true)
            {
                fg.AppendLine("Aliases =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Aliases)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IQuestAdapterGetter item,
            QuestAdapter.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IQuestAdapterGetter item,
            QuestAdapter.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Unknown = true;
            mask.FileName = true;
            var FragmentsItem = item.Fragments;
            mask.Fragments = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, QuestScriptFragment.Mask<bool>?>>?>(true, FragmentsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, QuestScriptFragment.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var AliasesItem = item.Aliases;
            mask.Aliases = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, QuestFragmentAlias.Mask<bool>?>>?>(true, AliasesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, QuestFragmentAlias.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static QuestAdapter_FieldIndex ConvertFieldIndex(AVirtualMachineAdapter_FieldIndex index)
        {
            switch (index)
            {
                case AVirtualMachineAdapter_FieldIndex.Version:
                    return (QuestAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                    return (QuestAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.Scripts:
                    return (QuestAdapter_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestAdapterGetter? lhs,
            IQuestAdapterGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            if (!lhs.Fragments.SequenceEqual(rhs.Fragments)) return false;
            if (!lhs.Aliases.SequenceEqual(rhs.Aliases)) return false;
            return true;
        }
        
        public override bool Equals(
            IAVirtualMachineAdapterGetter? lhs,
            IAVirtualMachineAdapterGetter? rhs)
        {
            return Equals(
                lhs: (IQuestAdapterGetter?)lhs,
                rhs: rhs as IQuestAdapterGetter);
        }
        
        public virtual int GetHashCode(IQuestAdapterGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Unknown);
            hash.Add(item.FileName);
            hash.Add(item.Fragments);
            hash.Add(item.Aliases);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAVirtualMachineAdapterGetter item)
        {
            return GetHashCode(item: (IQuestAdapterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return QuestAdapter.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IQuestAdapterGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Aliases.WhereCastable<IQuestFragmentAliasGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IQuestAdapterGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class QuestAdapterSetterTranslationCommon : AVirtualMachineAdapterSetterTranslationCommon
    {
        public new static readonly QuestAdapterSetterTranslationCommon Instance = new QuestAdapterSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IQuestAdapter item,
            IQuestAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IAVirtualMachineAdapter)item,
                (IAVirtualMachineAdapterGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if (rhs.Versioning.HasFlag(QuestAdapter.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Fragments) ?? true))
            {
                errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Fragments);
                try
                {
                    item.Fragments.SetTo(
                        rhs.Fragments
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Aliases);
                try
                {
                    item.Aliases.SetTo(
                        rhs.Aliases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAVirtualMachineAdapter item,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IQuestAdapter)item,
                rhs: (IQuestAdapterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? copyMask = null)
        {
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public QuestAdapter DeepCopy(
            IQuestAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestAdapter ret = (QuestAdapter)((QuestAdapterCommon)((IQuestAdapterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestAdapter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAdapter_Registration.Instance;
        public new static QuestAdapter_Registration Registration => QuestAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestAdapterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestAdapterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class QuestAdapterXmlWriteTranslation :
        AVirtualMachineAdapterXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static QuestAdapterXmlWriteTranslation Instance = new QuestAdapterXmlWriteTranslation();

        public static void WriteToNodeXml(
            IQuestAdapterGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            AVirtualMachineAdapterXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<QuestAdapter.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)QuestAdapter_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Unknown) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)QuestAdapter_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.FileName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FileName),
                    item: item.FileName,
                    fieldIndex: (int)QuestAdapter_FieldIndex.FileName,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Fragments) ?? true))
            {
                ListXmlTranslation<IQuestScriptFragmentGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Fragments),
                    item: item.Fragments,
                    fieldIndex: (int)QuestAdapter_FieldIndex.Fragments,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Fragments),
                    transl: (XElement subNode, IQuestScriptFragmentGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((QuestScriptFragmentXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)QuestAdapter_FieldIndex.Aliases) ?? true))
            {
                ListXmlTranslation<IQuestFragmentAliasGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Aliases),
                    item: item.Aliases,
                    fieldIndex: (int)QuestAdapter_FieldIndex.Aliases,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)QuestAdapter_FieldIndex.Aliases),
                    transl: (XElement subNode, IQuestFragmentAliasGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((QuestFragmentAliasXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IQuestAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.QuestAdapter");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.QuestAdapter");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IAVirtualMachineAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class QuestAdapterXmlCreateTranslation : AVirtualMachineAdapterXmlCreateTranslation
    {
        public new readonly static QuestAdapterXmlCreateTranslation Instance = new QuestAdapterXmlCreateTranslation();

        public static void FillPublicXml(
            IQuestAdapter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    QuestAdapterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IQuestAdapter item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<QuestAdapter.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FileName":
                    errorMask?.PushIndex((int)QuestAdapter_FieldIndex.FileName);
                    try
                    {
                        item.FileName = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fragments":
                    errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Fragments);
                    try
                    {
                        if (ListXmlTranslation<QuestScriptFragment>.Instance.Parse(
                            node: node,
                            enumer: out var FragmentsItem,
                            transl: LoquiXmlTranslation<QuestScriptFragment>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Fragments.SetTo(FragmentsItem);
                        }
                        else
                        {
                            item.Fragments.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aliases":
                    errorMask?.PushIndex((int)QuestAdapter_FieldIndex.Aliases);
                    try
                    {
                        if (ListXmlTranslation<QuestFragmentAlias>.Instance.Parse(
                            node: node,
                            enumer: out var AliasesItem,
                            transl: LoquiXmlTranslation<QuestFragmentAlias>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Aliases.SetTo(AliasesItem);
                        }
                        else
                        {
                            item.Aliases.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    AVirtualMachineAdapterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class QuestAdapterXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IQuestAdapterGetter item,
            XElement node,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestAdapterXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = QuestAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IQuestAdapterGetter item,
            string path,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IQuestAdapterGetter item,
            Stream stream,
            out QuestAdapter.ErrorMask errorMask,
            QuestAdapter.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class QuestAdapterBinaryWriteTranslation :
        AVirtualMachineAdapterBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static QuestAdapterBinaryWriteTranslation Instance = new QuestAdapterBinaryWriteTranslation();

        static partial void WriteBinaryFragmentCountCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryFragmentCount(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryFragmentCountCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFileNameCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryFileName(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryFileNameCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFragmentsCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryFragments(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryFragmentsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryAliasesCustom(
            MutagenWriter writer,
            IQuestAdapterGetter item);

        public static void WriteBinaryAliases(
            MutagenWriter writer,
            IQuestAdapterGetter item)
        {
            WriteBinaryAliasesCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IQuestAdapterGetter item,
            MutagenWriter writer)
        {
            AVirtualMachineAdapterBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            if (!item.Versioning.HasFlag(QuestAdapter.VersioningBreaks.Break0))
            {
                writer.Write(item.Unknown);
                QuestAdapterBinaryWriteTranslation.WriteBinaryFragmentCount(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryFileName(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryFragments(
                    writer: writer,
                    item: item);
                QuestAdapterBinaryWriteTranslation.WriteBinaryAliases(
                    writer: writer,
                    item: item);
            }
        }

        public void Write(
            MutagenWriter writer,
            IQuestAdapterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.VMAD),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestAdapterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class QuestAdapterBinaryCreateTranslation : AVirtualMachineAdapterBinaryCreateTranslation
    {
        public new readonly static QuestAdapterBinaryCreateTranslation Instance = new QuestAdapterBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestAdapter item,
            MutagenFrame frame)
        {
            AVirtualMachineAdapterBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= QuestAdapter.VersioningBreaks.Break0;
                return;
            }
            item.Unknown = frame.ReadUInt8();
            QuestAdapterBinaryCreateTranslation.FillBinaryFragmentCountCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryFileNameCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryFragmentsCustom(
                frame: frame,
                item: item);
            QuestAdapterBinaryCreateTranslation.FillBinaryAliasesCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryFragmentCountCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        static partial void FillBinaryFileNameCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        static partial void FillBinaryFragmentsCustom(
            MutagenFrame frame,
            IQuestAdapter item);

        static partial void FillBinaryAliasesCustom(
            MutagenFrame frame,
            IQuestAdapter item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class QuestAdapterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class QuestAdapterBinaryOverlay :
        AVirtualMachineAdapterBinaryOverlay,
        IQuestAdapterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAdapter_Registration.Instance;
        public new static QuestAdapter_Registration Registration => QuestAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestAdapterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IQuestAdapterGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => QuestAdapterCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => QuestAdapterCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAdapterCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAdapterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => QuestAdapterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((QuestAdapterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public QuestAdapter.VersioningBreaks Versioning { get; private set; }
        public Byte Unknown => _data.Span[ScriptsEndingPos + 0x0];
        #region FragmentCount
        partial void FragmentCountCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region FileName
        public String FileName => GetFileNameCustom(location: ScriptsEndingPos + 0x3);
        protected int FileNameEndingPos;
        partial void CustomFileNameEndPos();
        #endregion
        #region Fragments
        protected int FragmentsEndingPos;
        partial void CustomFragmentsEndPos();
        #endregion
        #region Aliases
        protected int AliasesEndingPos;
        partial void CustomAliasesEndPos();
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestAdapterBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static QuestAdapterBinaryOverlay QuestAdapterFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new QuestAdapterBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.CustomFileNameEndPos();
            ret.CustomFragmentsEndPos();
            ret.CustomAliasesEndPos();
            if (ret._data.Length <= ret.ScriptsEndingPos)
            {
                ret.Versioning |= QuestAdapter.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static QuestAdapterBinaryOverlay QuestAdapterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return QuestAdapterFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

