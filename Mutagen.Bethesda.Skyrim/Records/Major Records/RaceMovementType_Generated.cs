/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class RaceMovementType :
        IRaceMovementType,
        ILoquiObjectSetter<RaceMovementType>,
        IEquatable<RaceMovementType>,
        IEqualsMask
    {
        #region Ctor
        public RaceMovementType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MovementType
        public FormLinkNullable<MovementType> MovementType { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IMovementTypeGetter> IRaceMovementTypeGetter.MovementType => this.MovementType;
        #endregion
        #region Overrides
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SpeedOverrides? _Overrides;
        public SpeedOverrides? Overrides
        {
            get => _Overrides;
            set => _Overrides = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISpeedOverridesGetter? IRaceMovementTypeGetter.Overrides => this.Overrides;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMovementTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceMovementTypeGetter rhs)) return false;
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RaceMovementType? obj)
        {
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MovementType = initialValue;
                this.Overrides = new MaskItem<TItem, SpeedOverrides.Mask<TItem>?>(initialValue, new SpeedOverrides.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MovementType,
                TItem Overrides)
            {
                this.MovementType = MovementType;
                this.Overrides = new MaskItem<TItem, SpeedOverrides.Mask<TItem>?>(Overrides, new SpeedOverrides.Mask<TItem>(Overrides));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MovementType;
            public MaskItem<TItem, SpeedOverrides.Mask<TItem>?>? Overrides { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MovementType, rhs.MovementType)) return false;
                if (!object.Equals(this.Overrides, rhs.Overrides)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MovementType);
                hash.Add(this.Overrides);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MovementType)) return false;
                if (Overrides != null)
                {
                    if (!eval(this.Overrides.Overall)) return false;
                    if (this.Overrides.Specific != null && !this.Overrides.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MovementType)) return true;
                if (Overrides != null)
                {
                    if (eval(this.Overrides.Overall)) return true;
                    if (this.Overrides.Specific != null && this.Overrides.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RaceMovementType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MovementType = eval(this.MovementType);
                obj.Overrides = this.Overrides == null ? null : new MaskItem<R, SpeedOverrides.Mask<R>?>(eval(this.Overrides.Overall), this.Overrides.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RaceMovementType.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RaceMovementType.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RaceMovementType.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MovementType ?? true)
                    {
                        fg.AppendItem(MovementType, "MovementType");
                    }
                    if (printMask?.Overrides?.Overall ?? true)
                    {
                        Overrides?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MovementType;
            public MaskItem<Exception?, SpeedOverrides.ErrorMask?>? Overrides;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
                switch (enu)
                {
                    case RaceMovementType_FieldIndex.MovementType:
                        return MovementType;
                    case RaceMovementType_FieldIndex.Overrides:
                        return Overrides;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
                switch (enu)
                {
                    case RaceMovementType_FieldIndex.MovementType:
                        this.MovementType = ex;
                        break;
                    case RaceMovementType_FieldIndex.Overrides:
                        this.Overrides = new MaskItem<Exception?, SpeedOverrides.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
                switch (enu)
                {
                    case RaceMovementType_FieldIndex.MovementType:
                        this.MovementType = (Exception?)obj;
                        break;
                    case RaceMovementType_FieldIndex.Overrides:
                        this.Overrides = (MaskItem<Exception?, SpeedOverrides.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MovementType != null) return true;
                if (Overrides != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(MovementType, "MovementType");
                Overrides?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MovementType = this.MovementType.Combine(rhs.MovementType);
                ret.Overrides = this.Overrides.Combine(rhs.Overrides, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool MovementType;
            public MaskItem<bool, SpeedOverrides.TranslationMask?> Overrides;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.MovementType = defaultOn;
                this.Overrides = new MaskItem<bool, SpeedOverrides.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MovementType, null));
                ret.Add((Overrides?.Overall ?? true, Overrides?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => RaceMovementTypeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceMovementTypeCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceMovementTypeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceMovementTypeCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceMovementTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceMovementTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceMovementType CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static RaceMovementType CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceMovementType();
            ((RaceMovementTypeSetterCommon)((IRaceMovementTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RaceMovementType item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceMovementTypeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceMovementTypeSetterCommon)((IRaceMovementTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RaceMovementType GetNew()
        {
            return new RaceMovementType();
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceMovementType :
        IRaceMovementTypeGetter,
        ILoquiObjectSetter<IRaceMovementType>
    {
        new FormLinkNullable<MovementType> MovementType { get; set; }
        new SpeedOverrides? Overrides { get; set; }
    }

    public partial interface IRaceMovementTypeGetter :
        ILoquiObject,
        ILoquiObject<IRaceMovementTypeGetter>,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => RaceMovementType_Registration.Instance;
        IFormLinkNullable<IMovementTypeGetter> MovementType { get; }
        ISpeedOverridesGetter? Overrides { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMovementTypeMixIn
    {
        public static void Clear(this IRaceMovementType item)
        {
            ((RaceMovementTypeSetterCommon)((IRaceMovementTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RaceMovementType.Mask<bool> GetEqualsMask(
            this IRaceMovementTypeGetter item,
            IRaceMovementTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceMovementTypeGetter item,
            string? name = null,
            RaceMovementType.Mask<bool>? printMask = null)
        {
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceMovementTypeGetter item,
            FileGeneration fg,
            string? name = null,
            RaceMovementType.Mask<bool>? printMask = null)
        {
            ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceMovementTypeGetter item,
            RaceMovementType.Mask<bool?> checkMask)
        {
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceMovementType.Mask<bool> GetHasBeenSetMask(this IRaceMovementTypeGetter item)
        {
            var ret = new RaceMovementType.Mask<bool>(false);
            ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceMovementTypeGetter item,
            IRaceMovementTypeGetter rhs)
        {
            return ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceMovementType lhs,
            IRaceMovementTypeGetter rhs)
        {
            ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRaceMovementType lhs,
            IRaceMovementTypeGetter rhs,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceMovementType lhs,
            IRaceMovementTypeGetter rhs,
            out RaceMovementType.ErrorMask errorMask,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RaceMovementType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceMovementType lhs,
            IRaceMovementTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RaceMovementType DeepCopy(
            this IRaceMovementTypeGetter item,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            return ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RaceMovementType DeepCopy(
            this IRaceMovementTypeGetter item,
            out RaceMovementType.ErrorMask errorMask,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            return ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RaceMovementType DeepCopy(
            this IRaceMovementTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceMovementTypeSetterTranslationCommon)((IRaceMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceMovementType item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceMovementType item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceMovementTypeSetterCommon)((IRaceMovementTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum RaceMovementType_FieldIndex
    {
        MovementType = 0,
        Overrides = 1,
    }
    #endregion

    #region Registration
    public partial class RaceMovementType_Registration : ILoquiRegistration
    {
        public static readonly RaceMovementType_Registration Instance = new RaceMovementType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 67,
            version: 0);

        public const string GUID = "fb099dce-2d5d-4b0e-86dd-ae8fa82d4951";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceMovementType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceMovementType.ErrorMask);

        public static readonly Type ClassType = typeof(RaceMovementType);

        public static readonly Type GetterType = typeof(IRaceMovementTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceMovementType);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.RaceMovementType";

        public const string Name = "RaceMovementType";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MOVEMENTTYPE":
                    return (ushort)RaceMovementType_FieldIndex.MovementType;
                case "OVERRIDES":
                    return (ushort)RaceMovementType_FieldIndex.Overrides;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                case RaceMovementType_FieldIndex.Overrides:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.Overrides:
                    return true;
                case RaceMovementType_FieldIndex.MovementType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                case RaceMovementType_FieldIndex.Overrides:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                    return "MovementType";
                case RaceMovementType_FieldIndex.Overrides:
                    return "Overrides";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                case RaceMovementType_FieldIndex.Overrides:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                case RaceMovementType_FieldIndex.Overrides:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceMovementType_FieldIndex enu = (RaceMovementType_FieldIndex)index;
            switch (enu)
            {
                case RaceMovementType_FieldIndex.MovementType:
                    return typeof(FormLinkNullable<MovementType>);
                case RaceMovementType_FieldIndex.Overrides:
                    return typeof(SpeedOverrides);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.MTYP,
                        RecordTypes.SPED
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(RaceMovementTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceMovementTypeSetterCommon
    {
        public static readonly RaceMovementTypeSetterCommon Instance = new RaceMovementTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceMovementType item)
        {
            ClearPartial();
            item.MovementType = FormLinkNullable<MovementType>.Null;
            item.Overrides = null;
        }
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceMovementType item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RaceMovementTypeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceMovementTypeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RaceMovementTypeCommon
    {
        public static readonly RaceMovementTypeCommon Instance = new RaceMovementTypeCommon();

        public RaceMovementType.Mask<bool> GetEqualsMask(
            IRaceMovementTypeGetter item,
            IRaceMovementTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceMovementType.Mask<bool>(false);
            ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceMovementTypeGetter item,
            IRaceMovementTypeGetter rhs,
            RaceMovementType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MovementType = object.Equals(item.MovementType, rhs.MovementType);
            ret.Overrides = EqualsMaskHelper.EqualsHelper(
                item.Overrides,
                rhs.Overrides,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IRaceMovementTypeGetter item,
            string? name = null,
            RaceMovementType.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceMovementTypeGetter item,
            FileGeneration fg,
            string? name = null,
            RaceMovementType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceMovementType =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceMovementType) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceMovementTypeGetter item,
            FileGeneration fg,
            RaceMovementType.Mask<bool>? printMask = null)
        {
            if ((printMask?.MovementType ?? true)
                && item.MovementType.TryGet(out var MovementTypeItem))
            {
                fg.AppendItem(MovementTypeItem, "MovementType");
            }
            if ((printMask?.Overrides?.Overall ?? true)
                && item.Overrides.TryGet(out var OverridesItem))
            {
                OverridesItem?.ToString(fg, "Overrides");
            }
        }
        
        public bool HasBeenSet(
            IRaceMovementTypeGetter item,
            RaceMovementType.Mask<bool?> checkMask)
        {
            if (checkMask.MovementType.HasValue && checkMask.MovementType.Value != (item.MovementType.FormKey != null)) return false;
            if (checkMask.Overrides?.Overall.HasValue ?? false && checkMask.Overrides.Overall.Value != (item.Overrides != null)) return false;
            if (checkMask.Overrides?.Specific != null && (item.Overrides == null || !item.Overrides.HasBeenSet(checkMask.Overrides.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRaceMovementTypeGetter item,
            RaceMovementType.Mask<bool> mask)
        {
            mask.MovementType = (item.MovementType.FormKey != null);
            var itemOverrides = item.Overrides;
            mask.Overrides = new MaskItem<bool, SpeedOverrides.Mask<bool>?>(itemOverrides != null, itemOverrides?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceMovementTypeGetter? lhs,
            IRaceMovementTypeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.MovementType.Equals(rhs.MovementType)) return false;
            if (!object.Equals(lhs.Overrides, rhs.Overrides)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRaceMovementTypeGetter item)
        {
            var hash = new HashCode();
            if (item.MovementType.TryGet(out var MovementTypeitem))
            {
                hash.Add(MovementTypeitem);
            }
            if (item.Overrides.TryGet(out var Overridesitem))
            {
                hash.Add(Overridesitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RaceMovementType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRaceMovementTypeGetter obj)
        {
            if (obj.MovementType.FormKey.TryGet(out var MovementTypeKey))
            {
                yield return MovementTypeKey;
            }
            yield break;
        }
        
        public void RemapLinks(IRaceMovementTypeGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class RaceMovementTypeSetterTranslationCommon
    {
        public static readonly RaceMovementTypeSetterTranslationCommon Instance = new RaceMovementTypeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceMovementType item,
            IRaceMovementTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RaceMovementType_FieldIndex.MovementType) ?? true))
            {
                item.MovementType = rhs.MovementType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceMovementType_FieldIndex.Overrides) ?? true))
            {
                errorMask?.PushIndex((int)RaceMovementType_FieldIndex.Overrides);
                try
                {
                    if(rhs.Overrides.TryGet(out var rhsOverrides))
                    {
                        item.Overrides = rhsOverrides.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)RaceMovementType_FieldIndex.Overrides));
                    }
                    else
                    {
                        item.Overrides = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public RaceMovementType DeepCopy(
            IRaceMovementTypeGetter item,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            RaceMovementType ret = (RaceMovementType)((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceMovementType DeepCopy(
            IRaceMovementTypeGetter item,
            out RaceMovementType.ErrorMask errorMask,
            RaceMovementType.TranslationMask? copyMask = null)
        {
            RaceMovementType ret = (RaceMovementType)((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceMovementType DeepCopy(
            IRaceMovementTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RaceMovementType ret = (RaceMovementType)((RaceMovementTypeCommon)((IRaceMovementTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class RaceMovementType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceMovementType_Registration.Instance;
        public static RaceMovementType_Registration Registration => RaceMovementType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceMovementTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RaceMovementTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceMovementTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceMovementTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRaceMovementTypeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRaceMovementTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceMovementTypeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceMovementTypeBinaryWriteTranslation Instance = new RaceMovementTypeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRaceMovementTypeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MovementType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MTYP));
            if (item.Overrides.TryGet(out var OverridesItem))
            {
                ((SpeedOverridesBinaryWriteTranslation)((IBinaryItem)OverridesItem).BinaryWriteTranslator).Write(
                    item: OverridesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRaceMovementTypeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceMovementTypeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceMovementTypeBinaryCreateTranslation
    {
        public readonly static RaceMovementTypeBinaryCreateTranslation Instance = new RaceMovementTypeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRaceMovementType item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IRaceMovementType item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MTYP:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RaceMovementType_FieldIndex.MovementType) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MovementType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)RaceMovementType_FieldIndex.MovementType;
                }
                case RecordTypeInts.SPED:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RaceMovementType_FieldIndex.Overrides) return ParseResult.Stop;
                    item.Overrides = Mutagen.Bethesda.Skyrim.SpeedOverrides.CreateFromBinary(frame: frame);
                    return (int)RaceMovementType_FieldIndex.Overrides;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RaceMovementTypeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceMovementTypeGetter item,
            MutagenWriter writer)
        {
            ((RaceMovementTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceMovementTypeBinaryOverlay :
        BinaryOverlay,
        IRaceMovementTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceMovementType_Registration.Instance;
        public static RaceMovementType_Registration Registration => RaceMovementType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceMovementTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceMovementTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceMovementTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRaceMovementTypeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRaceMovementTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceMovementTypeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => RaceMovementTypeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceMovementTypeCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceMovementTypeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceMovementTypeCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceMovementTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceMovementTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region MovementType
        private int? _MovementTypeLocation;
        public bool MovementType_IsSet => _MovementTypeLocation.HasValue;
        public IFormLinkNullable<IMovementTypeGetter> MovementType => _MovementTypeLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MovementTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region Overrides
        private RangeInt32? _OverridesLocation;
        public ISpeedOverridesGetter? Overrides => _OverridesLocation.HasValue ? SpeedOverridesBinaryOverlay.SpeedOverridesFactory(new OverlayStream(_data.Slice(_OverridesLocation!.Value.Min), _package), _package) : default;
        public bool Overrides_IsSet => _OverridesLocation.HasValue;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceMovementTypeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RaceMovementTypeBinaryOverlay RaceMovementTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceMovementTypeBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RaceMovementTypeBinaryOverlay RaceMovementTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RaceMovementTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MTYP:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RaceMovementType_FieldIndex.MovementType) return ParseResult.Stop;
                    _MovementTypeLocation = (stream.Position - offset);
                    return (int)RaceMovementType_FieldIndex.MovementType;
                }
                case RecordTypeInts.SPED:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RaceMovementType_FieldIndex.Overrides) return ParseResult.Stop;
                    _OverridesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)RaceMovementType_FieldIndex.Overrides;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMovementTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

