/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Relationship :
        SkyrimMajorRecord,
        IRelationshipInternal,
        ILoquiObjectSetter<Relationship>,
        IEquatable<Relationship>,
        IEqualsMask
    {
        #region Ctor
        protected Relationship()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Parent
        public FormLink<Npc> Parent { get; set; } = new FormLink<Npc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<INpcGetter> IRelationshipGetter.Parent => this.Parent;
        #endregion
        #region Child
        public FormLink<Npc> Child { get; set; } = new FormLink<Npc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<INpcGetter> IRelationshipGetter.Child => this.Child;
        #endregion
        #region Rank
        public Relationship.RankType Rank { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region Flags
        public Relationship.Flag Flags { get; set; } = default;
        #endregion
        #region AssociationType
        public FormLink<AssociationType> AssociationType { get; set; } = new FormLink<AssociationType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IAssociationTypeGetter> IRelationshipGetter.AssociationType => this.AssociationType;
        #endregion
        #region DATADataTypeState
        public Relationship.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RelationshipMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRelationshipGetter rhs)) return false;
            return ((RelationshipCommon)((IRelationshipGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Relationship? obj)
        {
            return ((RelationshipCommon)((IRelationshipGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RelationshipCommon)((IRelationshipGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RelationshipXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelationshipXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Relationship CreateFromXml(
            XElement node,
            Relationship.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Relationship CreateFromXml(
            XElement node,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relationship.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Relationship CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Relationship();
            ((RelationshipSetterCommon)((IRelationshipGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Relationship CreateFromXml(
            string path,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Relationship CreateFromXml(
            string path,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relationship CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Relationship CreateFromXml(
            Stream stream,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Relationship CreateFromXml(
            Stream stream,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relationship CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Parent = initialValue;
                this.Child = initialValue;
                this.Rank = initialValue;
                this.Unknown = initialValue;
                this.Flags = initialValue;
                this.AssociationType = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Parent,
                TItem Child,
                TItem Rank,
                TItem Unknown,
                TItem Flags,
                TItem AssociationType,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Parent = Parent;
                this.Child = Child;
                this.Rank = Rank;
                this.Unknown = Unknown;
                this.Flags = Flags;
                this.AssociationType = AssociationType;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Parent;
            public TItem Child;
            public TItem Rank;
            public TItem Unknown;
            public TItem Flags;
            public TItem AssociationType;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Child, rhs.Child)) return false;
                if (!object.Equals(this.Rank, rhs.Rank)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AssociationType, rhs.AssociationType)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Parent);
                hash.Add(this.Child);
                hash.Add(this.Rank);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.AssociationType);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.Child)) return false;
                if (!eval(this.Rank)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AssociationType)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.Child)) return true;
                if (eval(this.Rank)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AssociationType)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Relationship.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Parent = eval(this.Parent);
                obj.Child = eval(this.Child);
                obj.Rank = eval(this.Rank);
                obj.Unknown = eval(this.Unknown);
                obj.Flags = eval(this.Flags);
                obj.AssociationType = eval(this.AssociationType);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Relationship.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Relationship.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Relationship.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.Child ?? true)
                    {
                        fg.AppendItem(Child, "Child");
                    }
                    if (printMask?.Rank ?? true)
                    {
                        fg.AppendItem(Rank, "Rank");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AssociationType ?? true)
                    {
                        fg.AppendItem(AssociationType, "AssociationType");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Parent;
            public Exception? Child;
            public Exception? Rank;
            public Exception? Unknown;
            public Exception? Flags;
            public Exception? AssociationType;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
                switch (enu)
                {
                    case Relationship_FieldIndex.Parent:
                        return Parent;
                    case Relationship_FieldIndex.Child:
                        return Child;
                    case Relationship_FieldIndex.Rank:
                        return Rank;
                    case Relationship_FieldIndex.Unknown:
                        return Unknown;
                    case Relationship_FieldIndex.Flags:
                        return Flags;
                    case Relationship_FieldIndex.AssociationType:
                        return AssociationType;
                    case Relationship_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
                switch (enu)
                {
                    case Relationship_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case Relationship_FieldIndex.Child:
                        this.Child = ex;
                        break;
                    case Relationship_FieldIndex.Rank:
                        this.Rank = ex;
                        break;
                    case Relationship_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Relationship_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Relationship_FieldIndex.AssociationType:
                        this.AssociationType = ex;
                        break;
                    case Relationship_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
                switch (enu)
                {
                    case Relationship_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.Child:
                        this.Child = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.Rank:
                        this.Rank = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.AssociationType:
                        this.AssociationType = (Exception?)obj;
                        break;
                    case Relationship_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Parent != null) return true;
                if (Child != null) return true;
                if (Rank != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (AssociationType != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(Child, "Child");
                fg.AppendItem(Rank, "Rank");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AssociationType, "AssociationType");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Child = this.Child.Combine(rhs.Child);
                ret.Rank = this.Rank.Combine(rhs.Rank);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AssociationType = this.AssociationType.Combine(rhs.AssociationType);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Parent;
            public bool Child;
            public bool Rank;
            public bool Unknown;
            public bool Flags;
            public bool AssociationType;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Parent = defaultOn;
                this.Child = defaultOn;
                this.Rank = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.AssociationType = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Parent, null));
                ret.Add((Child, null));
                ret.Add((Rank, null));
                ret.Add((Unknown, null));
                ret.Add((Flags, null));
                ret.Add((AssociationType, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Relationship_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RelationshipCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RelationshipCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RelationshipCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RelationshipCommon.Instance.RemapLinks(this, mapping);
        public Relationship(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Relationship(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Relationship(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RelationshipBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationshipBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Relationship CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Relationship CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Relationship();
            ((RelationshipSetterCommon)((IRelationshipGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Relationship item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelationshipGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RelationshipSetterCommon)((IRelationshipGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Relationship GetNew()
        {
            return new Relationship();
        }

    }
    #endregion

    #region Interface
    public partial interface IRelationship :
        IRelationshipGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IRelationshipInternal>
    {
        new FormLink<Npc> Parent { get; set; }
        new FormLink<Npc> Child { get; set; }
        new Relationship.RankType Rank { get; set; }
        new Byte Unknown { get; set; }
        new Relationship.Flag Flags { get; set; }
        new FormLink<AssociationType> AssociationType { get; set; }
        new Relationship.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Relationship.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IRelationshipInternal :
        ISkyrimMajorRecordInternal,
        IRelationship,
        IRelationshipGetter
    {
    }

    public partial interface IRelationshipGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IRelationshipGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Relationship_Registration.Instance;
        IFormLink<INpcGetter> Parent { get; }
        IFormLink<INpcGetter> Child { get; }
        Relationship.RankType Rank { get; }
        Byte Unknown { get; }
        Relationship.Flag Flags { get; }
        IFormLink<IAssociationTypeGetter> AssociationType { get; }
        Relationship.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Relationship.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class RelationshipMixIn
    {
        public static void Clear(this IRelationshipInternal item)
        {
            ((RelationshipSetterCommon)((IRelationshipGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Relationship.Mask<bool> GetEqualsMask(
            this IRelationshipGetter item,
            IRelationshipGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRelationshipGetter item,
            string? name = null,
            Relationship.Mask<bool>? printMask = null)
        {
            return ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRelationshipGetter item,
            FileGeneration fg,
            string? name = null,
            Relationship.Mask<bool>? printMask = null)
        {
            ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRelationshipGetter item,
            Relationship.Mask<bool?> checkMask)
        {
            return ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Relationship.Mask<bool> GetHasBeenSetMask(this IRelationshipGetter item)
        {
            var ret = new Relationship.Mask<bool>(false);
            ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRelationshipGetter item,
            IRelationshipGetter rhs)
        {
            return ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRelationshipInternal lhs,
            IRelationshipGetter rhs,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RelationshipSetterTranslationCommon)((IRelationshipGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Relationship.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRelationshipInternal lhs,
            IRelationshipGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RelationshipSetterTranslationCommon)((IRelationshipGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Relationship DeepCopy(
            this IRelationshipGetter item,
            Relationship.TranslationMask? copyMask = null)
        {
            return ((RelationshipSetterTranslationCommon)((IRelationshipGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Relationship DeepCopy(
            this IRelationshipGetter item,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? copyMask = null)
        {
            return ((RelationshipSetterTranslationCommon)((IRelationshipGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Relationship DeepCopy(
            this IRelationshipGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RelationshipSetterTranslationCommon)((IRelationshipGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelationshipInternal item,
            XElement node,
            Relationship.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelationshipInternal item,
            XElement node,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relationship.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RelationshipSetterCommon)((IRelationshipGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            string path,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            string path,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            Stream stream,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            Stream stream,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelationshipInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Relationship.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRelationshipInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRelationshipInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationshipSetterCommon)((IRelationshipGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Relationship_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Parent = 6,
        Child = 7,
        Rank = 8,
        Unknown = 9,
        Flags = 10,
        AssociationType = 11,
        DATADataTypeState = 12,
    }
    #endregion

    #region Registration
    public partial class Relationship_Registration : ILoquiRegistration
    {
        public static readonly Relationship_Registration Instance = new Relationship_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 463,
            version: 0);

        public const string GUID = "8d5e6837-c926-4b13-9d68-132c96ca3319";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Relationship.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Relationship.ErrorMask);

        public static readonly Type ClassType = typeof(Relationship);

        public static readonly Type GetterType = typeof(IRelationshipGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRelationship);

        public static readonly Type? InternalSetterType = typeof(IRelationshipInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Relationship";

        public const string Name = "Relationship";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "PARENT":
                    return (ushort)Relationship_FieldIndex.Parent;
                case "CHILD":
                    return (ushort)Relationship_FieldIndex.Child;
                case "RANK":
                    return (ushort)Relationship_FieldIndex.Rank;
                case "UNKNOWN":
                    return (ushort)Relationship_FieldIndex.Unknown;
                case "FLAGS":
                    return (ushort)Relationship_FieldIndex.Flags;
                case "ASSOCIATIONTYPE":
                    return (ushort)Relationship_FieldIndex.AssociationType;
                case "DATADATATYPESTATE":
                    return (ushort)Relationship_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                case Relationship_FieldIndex.Child:
                case Relationship_FieldIndex.Rank:
                case Relationship_FieldIndex.Unknown:
                case Relationship_FieldIndex.Flags:
                case Relationship_FieldIndex.AssociationType:
                case Relationship_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                case Relationship_FieldIndex.Child:
                case Relationship_FieldIndex.Rank:
                case Relationship_FieldIndex.Unknown:
                case Relationship_FieldIndex.Flags:
                case Relationship_FieldIndex.AssociationType:
                case Relationship_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                case Relationship_FieldIndex.Child:
                case Relationship_FieldIndex.Rank:
                case Relationship_FieldIndex.Unknown:
                case Relationship_FieldIndex.Flags:
                case Relationship_FieldIndex.AssociationType:
                case Relationship_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                    return "Parent";
                case Relationship_FieldIndex.Child:
                    return "Child";
                case Relationship_FieldIndex.Rank:
                    return "Rank";
                case Relationship_FieldIndex.Unknown:
                    return "Unknown";
                case Relationship_FieldIndex.Flags:
                    return "Flags";
                case Relationship_FieldIndex.AssociationType:
                    return "AssociationType";
                case Relationship_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                case Relationship_FieldIndex.Child:
                case Relationship_FieldIndex.Rank:
                case Relationship_FieldIndex.Unknown:
                case Relationship_FieldIndex.Flags:
                case Relationship_FieldIndex.AssociationType:
                case Relationship_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                case Relationship_FieldIndex.Child:
                case Relationship_FieldIndex.Rank:
                case Relationship_FieldIndex.Unknown:
                case Relationship_FieldIndex.Flags:
                case Relationship_FieldIndex.AssociationType:
                case Relationship_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Relationship_FieldIndex enu = (Relationship_FieldIndex)index;
            switch (enu)
            {
                case Relationship_FieldIndex.Parent:
                    return typeof(FormLink<Npc>);
                case Relationship_FieldIndex.Child:
                    return typeof(FormLink<Npc>);
                case Relationship_FieldIndex.Rank:
                    return typeof(Relationship.RankType);
                case Relationship_FieldIndex.Unknown:
                    return typeof(Byte);
                case Relationship_FieldIndex.Flags:
                    return typeof(Relationship.Flag);
                case Relationship_FieldIndex.AssociationType:
                    return typeof(FormLink<AssociationType>);
                case Relationship_FieldIndex.DATADataTypeState:
                    return typeof(Relationship.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RelationshipXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.RELA;
        public static readonly Type BinaryWriteTranslation = typeof(RelationshipBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RelationshipSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly RelationshipSetterCommon Instance = new RelationshipSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRelationshipInternal item)
        {
            ClearPartial();
            item.Parent = FormLink<Npc>.Null;
            item.Child = FormLink<Npc>.Null;
            item.Rank = default;
            item.Unknown = default;
            item.Flags = default;
            item.AssociationType = FormLink<AssociationType>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IRelationshipInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRelationshipInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRelationshipInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IRelationshipInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RelationshipXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Relationship)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Relationship)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRelationshipInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IRelationshipInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RelationshipBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RelationshipBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Relationship)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Relationship)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class RelationshipCommon : SkyrimMajorRecordCommon
    {
        public new static readonly RelationshipCommon Instance = new RelationshipCommon();

        public Relationship.Mask<bool> GetEqualsMask(
            IRelationshipGetter item,
            IRelationshipGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Relationship.Mask<bool>(false);
            ((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRelationshipGetter item,
            IRelationshipGetter rhs,
            Relationship.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Parent = object.Equals(item.Parent, rhs.Parent);
            ret.Child = object.Equals(item.Child, rhs.Child);
            ret.Rank = item.Rank == rhs.Rank;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Flags = item.Flags == rhs.Flags;
            ret.AssociationType = object.Equals(item.AssociationType, rhs.AssociationType);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRelationshipGetter item,
            string? name = null,
            Relationship.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRelationshipGetter item,
            FileGeneration fg,
            string? name = null,
            Relationship.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Relationship =>");
            }
            else
            {
                fg.AppendLine($"{name} (Relationship) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRelationshipGetter item,
            FileGeneration fg,
            Relationship.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Parent ?? true)
            {
                fg.AppendItem(item.Parent, "Parent");
            }
            if (printMask?.Child ?? true)
            {
                fg.AppendItem(item.Child, "Child");
            }
            if (printMask?.Rank ?? true)
            {
                fg.AppendItem(item.Rank, "Rank");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AssociationType ?? true)
            {
                fg.AppendItem(item.AssociationType, "AssociationType");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IRelationshipGetter item,
            Relationship.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRelationshipGetter item,
            Relationship.Mask<bool> mask)
        {
            mask.Parent = true;
            mask.Child = true;
            mask.Rank = true;
            mask.Unknown = true;
            mask.Flags = true;
            mask.AssociationType = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Relationship_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Relationship_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Relationship_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Relationship_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Relationship_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Relationship_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Relationship_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Relationship_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Relationship_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Relationship_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Relationship_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Relationship_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRelationshipGetter? lhs,
            IRelationshipGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Parent.Equals(rhs.Parent)) return false;
            if (!lhs.Child.Equals(rhs.Child)) return false;
            if (lhs.Rank != rhs.Rank) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.AssociationType.Equals(rhs.AssociationType)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRelationshipGetter?)lhs,
                rhs: rhs as IRelationshipGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRelationshipGetter?)lhs,
                rhs: rhs as IRelationshipGetter);
        }
        
        public virtual int GetHashCode(IRelationshipGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Parent);
            hash.Add(item.Child);
            hash.Add(item.Rank);
            hash.Add(item.Unknown);
            hash.Add(item.Flags);
            hash.Add(item.AssociationType);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IRelationshipGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRelationshipGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Relationship.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRelationshipGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield return obj.Parent.FormKey;
            yield return obj.Child.FormKey;
            yield return obj.AssociationType.FormKey;
            yield break;
        }
        
        public void RemapLinks(IRelationshipGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Relationship obj, Relationship rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Relationship(getNextFormKey());
            ret.DeepCopyIn((Relationship)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Relationship)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RelationshipSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly RelationshipSetterTranslationCommon Instance = new RelationshipSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRelationshipInternal item,
            IRelationshipGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRelationship item,
            IRelationshipGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.Parent) ?? true))
            {
                item.Parent = rhs.Parent.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.Child) ?? true))
            {
                item.Child = rhs.Child.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.Rank) ?? true))
            {
                item.Rank = rhs.Rank;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.AssociationType) ?? true))
            {
                item.AssociationType = rhs.AssociationType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Relationship_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRelationshipInternal)item,
                rhs: (IRelationshipGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRelationship)item,
                rhs: (IRelationshipGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRelationshipInternal)item,
                rhs: (IRelationshipGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRelationship)item,
                rhs: (IRelationshipGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Relationship DeepCopy(
            IRelationshipGetter item,
            Relationship.TranslationMask? copyMask = null)
        {
            Relationship ret = (Relationship)((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Relationship DeepCopy(
            IRelationshipGetter item,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? copyMask = null)
        {
            Relationship ret = (Relationship)((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Relationship DeepCopy(
            IRelationshipGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Relationship ret = (Relationship)((RelationshipCommon)((IRelationshipGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Relationship
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Relationship_Registration.Instance;
        public new static Relationship_Registration Registration => Relationship_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RelationshipCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RelationshipSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RelationshipSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationshipXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RelationshipXmlWriteTranslation Instance = new RelationshipXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRelationshipGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.Parent) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Parent),
                    item: item.Parent.FormKey,
                    fieldIndex: (int)Relationship_FieldIndex.Parent,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.Child) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Child),
                    item: item.Child.FormKey,
                    fieldIndex: (int)Relationship_FieldIndex.Child,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.Rank) ?? true))
            {
                EnumXmlTranslation<Relationship.RankType>.Instance.Write(
                    node: node,
                    name: nameof(item.Rank),
                    item: item.Rank,
                    fieldIndex: (int)Relationship_FieldIndex.Rank,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.Unknown) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Relationship_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Relationship.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Relationship_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.AssociationType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AssociationType),
                    item: item.AssociationType.FormKey,
                    fieldIndex: (int)Relationship_FieldIndex.AssociationType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relationship_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Relationship.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Relationship_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRelationshipGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Relationship");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Relationship");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RelationshipXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static RelationshipXmlCreateTranslation Instance = new RelationshipXmlCreateTranslation();

        public static void FillPublicXml(
            IRelationshipInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelationshipXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRelationshipInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Parent":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.Parent);
                    try
                    {
                        item.Parent = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Child":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.Child);
                    try
                    {
                        item.Child = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rank":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.Rank);
                    try
                    {
                        item.Rank = EnumXmlTranslation<Relationship.RankType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Relationship.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AssociationType":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.AssociationType);
                    try
                    {
                        item.AssociationType = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Relationship_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Relationship.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RelationshipXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRelationshipGetter item,
            XElement node,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RelationshipXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relationship.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRelationshipGetter item,
            string path,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelationshipGetter item,
            Stream stream,
            out Relationship.ErrorMask errorMask,
            Relationship.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationshipBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RelationshipBinaryWriteTranslation Instance = new RelationshipBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRelationshipGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IRelationshipGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Parent);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Child);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Relationship.RankType>.Instance.Write(
                    writer,
                    item.Rank,
                    length: 2);
                writer.Write(item.Unknown);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Relationship.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AssociationType);
            }
        }

        public void Write(
            MutagenWriter writer,
            IRelationshipGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.RELA),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRelationshipGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RelationshipBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static RelationshipBinaryCreateTranslation Instance = new RelationshipBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RELA;
        public static void FillBinaryStructs(
            IRelationshipInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IRelationshipInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Parent = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Child = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Rank = EnumBinaryTranslation<Relationship.RankType>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Unknown = dataFrame.ReadUInt8();
                    item.Flags = EnumBinaryTranslation<Relationship.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.AssociationType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return (int)Relationship_FieldIndex.AssociationType;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RelationshipBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationshipBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IRelationshipGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Relationship_Registration.Instance;
        public new static Relationship_Registration Registration => Relationship_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RelationshipCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RelationshipSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelationshipGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RelationshipCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RelationshipCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RelationshipCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RelationshipCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RelationshipXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelationshipXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RelationshipBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationshipBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Relationship.MajorFlag MajorFlags => (Relationship.MajorFlag)this.MajorRecordFlagsRaw;

        private int? _DATALocation;
        public Relationship.DATADataType DATADataTypeState { get; private set; }
        #region Parent
        private int _ParentLocation => _DATALocation!.Value;
        private bool _Parent_IsSet => _DATALocation.HasValue;
        public IFormLink<INpcGetter> Parent => _Parent_IsSet ? new FormLink<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ParentLocation, 0x4)))) : FormLink<INpcGetter>.Null;
        #endregion
        #region Child
        private int _ChildLocation => _DATALocation!.Value + 0x4;
        private bool _Child_IsSet => _DATALocation.HasValue;
        public IFormLink<INpcGetter> Child => _Child_IsSet ? new FormLink<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ChildLocation, 0x4)))) : FormLink<INpcGetter>.Null;
        #endregion
        #region Rank
        private int _RankLocation => _DATALocation!.Value + 0x8;
        private bool _Rank_IsSet => _DATALocation.HasValue;
        public Relationship.RankType Rank => _Rank_IsSet ? (Relationship.RankType)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_RankLocation, 0x2)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0xA;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _data.Span[_UnknownLocation] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xB;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Relationship.Flag Flags => _Flags_IsSet ? (Relationship.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region AssociationType
        private int _AssociationTypeLocation => _DATALocation!.Value + 0xC;
        private bool _AssociationType_IsSet => _DATALocation.HasValue;
        public IFormLink<IAssociationTypeGetter> AssociationType => _AssociationType_IsSet ? new FormLink<IAssociationTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_AssociationTypeLocation, 0x4)))) : FormLink<IAssociationTypeGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RelationshipBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RelationshipBinaryOverlay RelationshipFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new RelationshipBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RelationshipBinaryOverlay RelationshipFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RelationshipFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Relationship_FieldIndex.AssociationType;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RelationshipMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

