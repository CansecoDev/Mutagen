/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SoulGem :
        SkyrimMajorRecord,
        ISoulGemInternal,
        ILoquiObjectSetter<SoulGem>,
        IEquatable<SoulGem>,
        IEqualsMask
    {
        #region Ctor
        protected SoulGem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds? _ObjectBounds;
        public ObjectBounds? ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? ISoulGemGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? ISoulGemGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ISoulGemGetter.Model => this.Model;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? ISoulGemGetter.Icons => this.Icons;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? ISoulGemGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        public FormLinkNullable<SoundDescriptor> PickUpSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundDescriptorGetter> ISoulGemGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        public FormLinkNullable<SoundDescriptor> PutDownSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundDescriptorGetter> ISoulGemGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<Keyword>>? _Keywords;
        public IExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? ISoulGemGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region ContainedSoul
        public SoulGem.Level ContainedSoul { get; set; } = default;
        #endregion
        #region MaximumCapacity
        public SoulGem.Level MaximumCapacity { get; set; } = default;
        #endregion
        #region LinkedTo
        public FormLinkNullable<SoulGem> LinkedTo { get; set; } = new FormLinkNullable<SoulGem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoulGemGetter> ISoulGemGetter.LinkedTo => this.LinkedTo;
        #endregion
        #region DATADataTypeState
        public SoulGem.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoulGemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoulGemGetter rhs)) return false;
            return ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SoulGem? obj)
        {
            return ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoulGemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoulGemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SoulGem CreateFromXml(
            XElement node,
            SoulGem.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoulGem CreateFromXml(
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoulGem CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SoulGem();
            ((SoulGemSetterCommon)((ISoulGemGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoulGem CreateFromXml(
            string path,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = initialValue;
                this.Weight = initialValue;
                this.ContainedSoul = initialValue;
                this.MaximumCapacity = initialValue;
                this.LinkedTo = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Icons,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Keywords,
                TItem Value,
                TItem Weight,
                TItem ContainedSoul,
                TItem MaximumCapacity,
                TItem LinkedTo,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = Value;
                this.Weight = Weight;
                this.ContainedSoul = ContainedSoul;
                this.MaximumCapacity = MaximumCapacity;
                this.LinkedTo = LinkedTo;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Value;
            public TItem Weight;
            public TItem ContainedSoul;
            public TItem MaximumCapacity;
            public TItem LinkedTo;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
                if (!object.Equals(this.MaximumCapacity, rhs.MaximumCapacity)) return false;
                if (!object.Equals(this.LinkedTo, rhs.LinkedTo)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Icons);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Keywords);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.ContainedSoul);
                hash.Add(this.MaximumCapacity);
                hash.Add(this.LinkedTo);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.ContainedSoul)) return false;
                if (!eval(this.MaximumCapacity)) return false;
                if (!eval(this.LinkedTo)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.ContainedSoul)) return true;
                if (eval(this.MaximumCapacity)) return true;
                if (eval(this.LinkedTo)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoulGem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.ContainedSoul = eval(this.ContainedSoul);
                obj.MaximumCapacity = eval(this.MaximumCapacity);
                obj.LinkedTo = eval(this.LinkedTo);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoulGem.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoulGem.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoulGem.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.ContainedSoul ?? true)
                    {
                        fg.AppendItem(ContainedSoul, "ContainedSoul");
                    }
                    if (printMask?.MaximumCapacity ?? true)
                    {
                        fg.AppendItem(MaximumCapacity, "MaximumCapacity");
                    }
                    if (printMask?.LinkedTo ?? true)
                    {
                        fg.AppendItem(LinkedTo, "LinkedTo");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Value;
            public Exception? Weight;
            public Exception? ContainedSoul;
            public Exception? MaximumCapacity;
            public Exception? LinkedTo;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case SoulGem_FieldIndex.Name:
                        return Name;
                    case SoulGem_FieldIndex.Model:
                        return Model;
                    case SoulGem_FieldIndex.Icons:
                        return Icons;
                    case SoulGem_FieldIndex.Destructible:
                        return Destructible;
                    case SoulGem_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case SoulGem_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case SoulGem_FieldIndex.Keywords:
                        return Keywords;
                    case SoulGem_FieldIndex.Value:
                        return Value;
                    case SoulGem_FieldIndex.Weight:
                        return Weight;
                    case SoulGem_FieldIndex.ContainedSoul:
                        return ContainedSoul;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        return MaximumCapacity;
                    case SoulGem_FieldIndex.LinkedTo:
                        return LinkedTo;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case SoulGem_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case SoulGem_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case SoulGem_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case SoulGem_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case SoulGem_FieldIndex.ContainedSoul:
                        this.ContainedSoul = ex;
                        break;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        this.MaximumCapacity = ex;
                        break;
                    case SoulGem_FieldIndex.LinkedTo:
                        this.LinkedTo = ex;
                        break;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case SoulGem_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case SoulGem_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case SoulGem_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case SoulGem_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SoulGem_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.ContainedSoul:
                        this.ContainedSoul = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        this.MaximumCapacity = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.LinkedTo:
                        this.LinkedTo = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Icons != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Keywords != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (ContainedSoul != null) return true;
                if (MaximumCapacity != null) return true;
                if (LinkedTo != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Icons?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(ContainedSoul, "ContainedSoul");
                fg.AppendItem(MaximumCapacity, "MaximumCapacity");
                fg.AppendItem(LinkedTo, "LinkedTo");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
                ret.MaximumCapacity = this.MaximumCapacity.Combine(rhs.MaximumCapacity);
                ret.LinkedTo = this.LinkedTo.Combine(rhs.LinkedTo);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Icons.TranslationMask?> Icons;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Keywords;
            public bool Value;
            public bool Weight;
            public bool ContainedSoul;
            public bool MaximumCapacity;
            public bool LinkedTo;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icons = new MaskItem<bool, Icons.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Keywords = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.ContainedSoul = defaultOn;
                this.MaximumCapacity = defaultOn;
                this.LinkedTo = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icons?.Overall ?? true, Icons?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Keywords, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((ContainedSoul, null));
                ret.Add((MaximumCapacity, null));
                ret.Add((LinkedTo, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SoulGem_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => SoulGemCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SoulGemCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoulGemCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoulGemCommon.Instance.RemapLinks(this, mapping);
        public SoulGem(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SoulGem(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public SoulGem(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoulGemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoulGemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new SoulGem CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static SoulGem CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoulGem();
            ((SoulGemSetterCommon)((ISoulGemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoulGem item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoulGemGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoulGem GetNew()
        {
            return new SoulGem();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoulGem :
        ISoulGemGetter,
        ISkyrimMajorRecord,
        IItem,
        IObjectBoundedOptional,
        IWeightValue,
        ILoquiObjectSetter<ISoulGemInternal>
    {
        new ObjectBounds? ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new Icons? Icons { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<SoundDescriptor> PickUpSound { get; set; }
        new FormLinkNullable<SoundDescriptor> PutDownSound { get; set; }
        new IExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new SoulGem.Level ContainedSoul { get; set; }
        new SoulGem.Level MaximumCapacity { get; set; }
        new FormLinkNullable<SoulGem> LinkedTo { get; set; }
        new SoulGem.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new SoulGem.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ISoulGemInternal :
        ISkyrimMajorRecordInternal,
        ISoulGem,
        ISoulGemGetter
    {
    }

    public partial interface ISoulGemGetter :
        ISkyrimMajorRecordGetter,
        IItemGetter,
        IObjectBoundedOptionalGetter,
        IWeightValueGetter,
        ILoquiObject<ISoulGemGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => SoulGem_Registration.Instance;
        IObjectBoundsGetter? ObjectBounds { get; }
        TranslatedString? Name { get; }
        IModelGetter? Model { get; }
        IIconsGetter? Icons { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        SoulGem.Level ContainedSoul { get; }
        SoulGem.Level MaximumCapacity { get; }
        IFormLinkNullable<ISoulGemGetter> LinkedTo { get; }
        SoulGem.DATADataType DATADataTypeState { get; }

        #region Mutagen
        SoulGem.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class SoulGemMixIn
    {
        public static void Clear(this ISoulGemInternal item)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoulGem.Mask<bool> GetEqualsMask(
            this ISoulGemGetter item,
            ISoulGemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoulGemGetter item,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoulGemGetter item,
            FileGeneration fg,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoulGemGetter item,
            SoulGem.Mask<bool?> checkMask)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoulGem.Mask<bool> GetHasBeenSetMask(this ISoulGemGetter item)
        {
            var ret = new SoulGem.Mask<bool>(false);
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoulGemGetter item,
            ISoulGemGetter rhs)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoulGemInternal lhs,
            ISoulGemGetter rhs,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoulGemSetterTranslationCommon)((ISoulGemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoulGemInternal lhs,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoulGemSetterTranslationCommon)((ISoulGemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            SoulGem.TranslationMask? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            SoulGem.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoulGemInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISoulGemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SoulGem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Model = 8,
        Icons = 9,
        Destructible = 10,
        PickUpSound = 11,
        PutDownSound = 12,
        Keywords = 13,
        Value = 14,
        Weight = 15,
        ContainedSoul = 16,
        MaximumCapacity = 17,
        LinkedTo = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class SoulGem_Registration : ILoquiRegistration
    {
        public static readonly SoulGem_Registration Instance = new SoulGem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 168,
            version: 0);

        public const string GUID = "1d5e8cdd-e010-45ed-aca9-7d332b1eb235";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(SoulGem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoulGem.ErrorMask);

        public static readonly Type ClassType = typeof(SoulGem);

        public static readonly Type GetterType = typeof(ISoulGemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoulGem);

        public static readonly Type? InternalSetterType = typeof(ISoulGemInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SoulGem";

        public const string Name = "SoulGem";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)SoulGem_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)SoulGem_FieldIndex.Name;
                case "MODEL":
                    return (ushort)SoulGem_FieldIndex.Model;
                case "ICONS":
                    return (ushort)SoulGem_FieldIndex.Icons;
                case "DESTRUCTIBLE":
                    return (ushort)SoulGem_FieldIndex.Destructible;
                case "PICKUPSOUND":
                    return (ushort)SoulGem_FieldIndex.PickUpSound;
                case "PUTDOWNSOUND":
                    return (ushort)SoulGem_FieldIndex.PutDownSound;
                case "KEYWORDS":
                    return (ushort)SoulGem_FieldIndex.Keywords;
                case "VALUE":
                    return (ushort)SoulGem_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)SoulGem_FieldIndex.Weight;
                case "CONTAINEDSOUL":
                    return (ushort)SoulGem_FieldIndex.ContainedSoul;
                case "MAXIMUMCAPACITY":
                    return (ushort)SoulGem_FieldIndex.MaximumCapacity;
                case "LINKEDTO":
                    return (ushort)SoulGem_FieldIndex.LinkedTo;
                case "DATADATATYPESTATE":
                    return (ushort)SoulGem_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Keywords:
                    return true;
                case SoulGem_FieldIndex.ObjectBounds:
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icons:
                case SoulGem_FieldIndex.Destructible:
                case SoulGem_FieldIndex.PickUpSound:
                case SoulGem_FieldIndex.PutDownSound:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.LinkedTo:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icons:
                case SoulGem_FieldIndex.Destructible:
                    return true;
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.PickUpSound:
                case SoulGem_FieldIndex.PutDownSound:
                case SoulGem_FieldIndex.Keywords:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.LinkedTo:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icons:
                case SoulGem_FieldIndex.Destructible:
                case SoulGem_FieldIndex.PickUpSound:
                case SoulGem_FieldIndex.PutDownSound:
                case SoulGem_FieldIndex.Keywords:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.LinkedTo:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case SoulGem_FieldIndex.Name:
                    return "Name";
                case SoulGem_FieldIndex.Model:
                    return "Model";
                case SoulGem_FieldIndex.Icons:
                    return "Icons";
                case SoulGem_FieldIndex.Destructible:
                    return "Destructible";
                case SoulGem_FieldIndex.PickUpSound:
                    return "PickUpSound";
                case SoulGem_FieldIndex.PutDownSound:
                    return "PutDownSound";
                case SoulGem_FieldIndex.Keywords:
                    return "Keywords";
                case SoulGem_FieldIndex.Value:
                    return "Value";
                case SoulGem_FieldIndex.Weight:
                    return "Weight";
                case SoulGem_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case SoulGem_FieldIndex.MaximumCapacity:
                    return "MaximumCapacity";
                case SoulGem_FieldIndex.LinkedTo:
                    return "LinkedTo";
                case SoulGem_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icons:
                case SoulGem_FieldIndex.Destructible:
                case SoulGem_FieldIndex.PickUpSound:
                case SoulGem_FieldIndex.PutDownSound:
                case SoulGem_FieldIndex.Keywords:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.LinkedTo:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icons:
                case SoulGem_FieldIndex.Destructible:
                case SoulGem_FieldIndex.PickUpSound:
                case SoulGem_FieldIndex.PutDownSound:
                case SoulGem_FieldIndex.Keywords:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.LinkedTo:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case SoulGem_FieldIndex.Name:
                    return typeof(TranslatedString);
                case SoulGem_FieldIndex.Model:
                    return typeof(Model);
                case SoulGem_FieldIndex.Icons:
                    return typeof(Icons);
                case SoulGem_FieldIndex.Destructible:
                    return typeof(Destructible);
                case SoulGem_FieldIndex.PickUpSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case SoulGem_FieldIndex.PutDownSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case SoulGem_FieldIndex.Keywords:
                    return typeof(IExtendedList<IFormLink<Keyword>>);
                case SoulGem_FieldIndex.Value:
                    return typeof(UInt32);
                case SoulGem_FieldIndex.Weight:
                    return typeof(Single);
                case SoulGem_FieldIndex.ContainedSoul:
                    return typeof(SoulGem.Level);
                case SoulGem_FieldIndex.MaximumCapacity:
                    return typeof(SoulGem.Level);
                case SoulGem_FieldIndex.LinkedTo:
                    return typeof(FormLinkNullable<SoulGem>);
                case SoulGem_FieldIndex.DATADataTypeState:
                    return typeof(SoulGem.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoulGemXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.SLGM;
        public static readonly Type BinaryWriteTranslation = typeof(SoulGemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoulGemSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly SoulGemSetterCommon Instance = new SoulGemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoulGemInternal item)
        {
            ClearPartial();
            item.ObjectBounds = null;
            item.Name = default;
            item.Model = null;
            item.Icons = null;
            item.Destructible = null;
            item.PickUpSound = FormLinkNullable<SoundDescriptor>.Null;
            item.PutDownSound = FormLinkNullable<SoundDescriptor>.Null;
            item.Keywords = null;
            item.Value = default;
            item.Weight = default;
            item.ContainedSoul = default;
            item.MaximumCapacity = default;
            item.LinkedTo = FormLinkNullable<SoulGem>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ISoulGemInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoulGemInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISoulGemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SoulGemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (SoulGem)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (SoulGem)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoulGemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISoulGemInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SoulGemBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoulGemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoulGem)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoulGem)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SoulGemCommon : SkyrimMajorRecordCommon
    {
        public new static readonly SoulGemCommon Instance = new SoulGemCommon();

        public SoulGem.Mask<bool> GetEqualsMask(
            ISoulGemGetter item,
            ISoulGemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoulGem.Mask<bool>(false);
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoulGemGetter item,
            ISoulGemGetter rhs,
            SoulGem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = EqualsMaskHelper.EqualsHelper(
                item.ObjectBounds,
                rhs.ObjectBounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = object.Equals(item.PickUpSound, rhs.PickUpSound);
            ret.PutDownSound = object.Equals(item.PutDownSound, rhs.PutDownSound);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.ContainedSoul = item.ContainedSoul == rhs.ContainedSoul;
            ret.MaximumCapacity = item.MaximumCapacity == rhs.MaximumCapacity;
            ret.LinkedTo = object.Equals(item.LinkedTo, rhs.LinkedTo);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoulGemGetter item,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoulGemGetter item,
            FileGeneration fg,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoulGem =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoulGem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoulGemGetter item,
            FileGeneration fg,
            SoulGem.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ObjectBounds?.Overall ?? true)
                && item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ObjectBoundsItem?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.PickUpSound ?? true)
                && item.PickUpSound.TryGet(out var PickUpSoundItem))
            {
                fg.AppendItem(PickUpSoundItem, "PickUpSound");
            }
            if ((printMask?.PutDownSound ?? true)
                && item.PutDownSound.TryGet(out var PutDownSoundItem))
            {
                fg.AppendItem(PutDownSoundItem, "PutDownSound");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.ContainedSoul ?? true)
            {
                fg.AppendItem(item.ContainedSoul, "ContainedSoul");
            }
            if (printMask?.MaximumCapacity ?? true)
            {
                fg.AppendItem(item.MaximumCapacity, "MaximumCapacity");
            }
            if ((printMask?.LinkedTo ?? true)
                && item.LinkedTo.TryGet(out var LinkedToItem))
            {
                fg.AppendItem(LinkedToItem, "LinkedTo");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ISoulGemGetter item,
            SoulGem.Mask<bool?> checkMask)
        {
            if (checkMask.ObjectBounds?.Overall.HasValue ?? false && checkMask.ObjectBounds.Overall.Value != (item.ObjectBounds != null)) return false;
            if (checkMask.ObjectBounds?.Specific != null && (item.ObjectBounds == null || !item.ObjectBounds.HasBeenSet(checkMask.ObjectBounds.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icons?.Overall.HasValue ?? false && checkMask.Icons.Overall.Value != (item.Icons != null)) return false;
            if (checkMask.Icons?.Specific != null && (item.Icons == null || !item.Icons.HasBeenSet(checkMask.Icons.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.PickUpSound.HasValue && checkMask.PickUpSound.Value != (item.PickUpSound.FormKey != null)) return false;
            if (checkMask.PutDownSound.HasValue && checkMask.PutDownSound.Value != (item.PutDownSound.FormKey != null)) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.LinkedTo.HasValue && checkMask.LinkedTo.Value != (item.LinkedTo.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISoulGemGetter item,
            SoulGem.Mask<bool> mask)
        {
            var itemObjectBounds = item.ObjectBounds;
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(itemObjectBounds != null, itemObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemIcons = item.Icons;
            mask.Icons = new MaskItem<bool, Icons.Mask<bool>?>(itemIcons != null, itemIcons?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.PickUpSound = (item.PickUpSound.FormKey != null);
            mask.PutDownSound = (item.PutDownSound.FormKey != null);
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.Value = true;
            mask.Weight = true;
            mask.ContainedSoul = true;
            mask.MaximumCapacity = true;
            mask.LinkedTo = (item.LinkedTo.FormKey != null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SoulGem_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoulGem_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (SoulGem_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoulGem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoulGemGetter? lhs,
            ISoulGemGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.ContainedSoul != rhs.ContainedSoul) return false;
            if (lhs.MaximumCapacity != rhs.MaximumCapacity) return false;
            if (!lhs.LinkedTo.Equals(rhs.LinkedTo)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoulGemGetter?)lhs,
                rhs: rhs as ISoulGemGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoulGemGetter?)lhs,
                rhs: rhs as ISoulGemGetter);
        }
        
        public virtual int GetHashCode(ISoulGemGetter item)
        {
            var hash = new HashCode();
            if (item.ObjectBounds.TryGet(out var ObjectBoundsitem))
            {
                hash.Add(ObjectBoundsitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            if (item.PickUpSound.TryGet(out var PickUpSounditem))
            {
                hash.Add(PickUpSounditem);
            }
            if (item.PutDownSound.TryGet(out var PutDownSounditem))
            {
                hash.Add(PutDownSounditem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.ContainedSoul);
            hash.Add(item.MaximumCapacity);
            if (item.LinkedTo.TryGet(out var LinkedToitem))
            {
                hash.Add(LinkedToitem);
            }
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoulGemGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoulGemGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoulGem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ISoulGemGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKey.TryGet(out var PickUpSoundKey))
            {
                yield return PickUpSoundKey;
            }
            if (obj.PutDownSound.FormKey.TryGet(out var PutDownSoundKey))
            {
                yield return PutDownSoundKey;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.LinkedTo.FormKey.TryGet(out var LinkedToKey))
            {
                yield return LinkedToKey;
            }
            yield break;
        }
        
        public void RemapLinks(ISoulGemGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(SoulGem obj, SoulGem rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new SoulGem(getNextFormKey());
            ret.DeepCopyIn((SoulGem)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (SoulGem)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class SoulGemSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly SoulGemSetterTranslationCommon Instance = new SoulGemSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISoulGemInternal item,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ISoulGem item,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.ObjectBounds);
                try
                {
                    if(rhs.ObjectBounds.TryGet(out var rhsObjectBounds))
                    {
                        item.ObjectBounds = rhsObjectBounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoulGem_FieldIndex.ObjectBounds));
                    }
                    else
                    {
                        item.ObjectBounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoulGem_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoulGem_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = rhs.PickUpSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = rhs.PutDownSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ContainedSoul) ?? true))
            {
                item.ContainedSoul = rhs.ContainedSoul;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.MaximumCapacity) ?? true))
            {
                item.MaximumCapacity = rhs.MaximumCapacity;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.LinkedTo) ?? true))
            {
                item.LinkedTo = rhs.LinkedTo.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGemInternal)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGem)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGemInternal)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGem)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            SoulGem.TranslationMask? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoulGem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoulGem_Registration.Instance;
        public new static SoulGem_Registration Registration => SoulGem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoulGemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoulGemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoulGemSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoulGemXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SoulGemXmlWriteTranslation Instance = new SoulGemXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoulGemGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.ObjectBounds != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ObjectBounds) ?? true))
            {
                if (item.ObjectBounds.TryGet(out var ObjectBoundsItem))
                {
                    ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                        item: ObjectBoundsItem,
                        node: node,
                        name: nameof(item.ObjectBounds),
                        fieldIndex: (int)SoulGem_FieldIndex.ObjectBounds,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.ObjectBounds));
                }
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)SoulGem_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)SoulGem_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                }
            }
            if ((item.Icons != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Icons) ?? true))
            {
                if (item.Icons.TryGet(out var IconsItem))
                {
                    ((IconsXmlWriteTranslation)((IXmlItem)IconsItem).XmlWriteTranslator).Write(
                        item: IconsItem,
                        node: node,
                        name: nameof(item.Icons),
                        fieldIndex: (int)SoulGem_FieldIndex.Icons,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Icons));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)SoulGem_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Destructible));
                }
            }
            if ((item.PickUpSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.PickUpSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PickUpSound),
                    item: item.PickUpSound.FormKey,
                    fieldIndex: (int)SoulGem_FieldIndex.PickUpSound,
                    errorMask: errorMask);
            }
            if ((item.PutDownSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.PutDownSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PutDownSound),
                    item: item.PutDownSound.FormKey,
                    fieldIndex: (int)SoulGem_FieldIndex.PutDownSound,
                    errorMask: errorMask);
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLink<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)SoulGem_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLink<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Value),
                    item: item.Value,
                    fieldIndex: (int)SoulGem_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)SoulGem_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ContainedSoul) ?? true))
            {
                EnumXmlTranslation<SoulGem.Level>.Instance.Write(
                    node: node,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul,
                    fieldIndex: (int)SoulGem_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.MaximumCapacity) ?? true))
            {
                EnumXmlTranslation<SoulGem.Level>.Instance.Write(
                    node: node,
                    name: nameof(item.MaximumCapacity),
                    item: item.MaximumCapacity,
                    fieldIndex: (int)SoulGem_FieldIndex.MaximumCapacity,
                    errorMask: errorMask);
            }
            if ((item.LinkedTo.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.LinkedTo) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LinkedTo),
                    item: item.LinkedTo.FormKey,
                    fieldIndex: (int)SoulGem_FieldIndex.LinkedTo,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<SoulGem.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)SoulGem_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SoulGem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SoulGem");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SoulGemXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static SoulGemXmlCreateTranslation Instance = new SoulGemXmlCreateTranslation();

        public static void FillPublicXml(
            ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoulGemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoulGemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icons":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Icons);
                    try
                    {
                        item.Icons = LoquiXmlTranslation<Icons>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Icons));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickUpSound":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.PickUpSound);
                    try
                    {
                        item.PickUpSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PutDownSound":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.PutDownSound);
                    try
                    {
                        item.PutDownSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Value);
                    try
                    {
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.ContainedSoul);
                    try
                    {
                        item.ContainedSoul = EnumXmlTranslation<SoulGem.Level>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumCapacity":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.MaximumCapacity);
                    try
                    {
                        item.MaximumCapacity = EnumXmlTranslation<SoulGem.Level>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkedTo":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.LinkedTo);
                    try
                    {
                        item.LinkedTo = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<SoulGem.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SoulGemXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoulGemGetter item,
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SoulGemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoulGemGetter item,
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoulGemGetter item,
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoulGemBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoulGemBinaryWriteTranslation Instance = new SoulGemBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISoulGemGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ISoulGemGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulGem.Level>.Instance.Write(
                writer,
                item.ContainedSoul,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SOUL));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulGem.Level>.Instance.Write(
                writer,
                item.MaximumCapacity,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SLCP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LinkedTo,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM0));
        }

        public void Write(
            MutagenWriter writer,
            ISoulGemGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SLGM),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoulGemBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static SoulGemBinaryCreateTranslation Instance = new SoulGemBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SLGM;
        public static void FillBinaryStructs(
            ISoulGemInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ISoulGemInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)SoulGem_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)SoulGem_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Skyrim.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Icons;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoulGem_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoulGem_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return (int)SoulGem_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)SoulGem_FieldIndex.Weight;
                }
                case RecordTypeInts.SOUL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ContainedSoul = EnumBinaryTranslation<SoulGem.Level>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)SoulGem_FieldIndex.ContainedSoul;
                }
                case RecordTypeInts.SLCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaximumCapacity = EnumBinaryTranslation<SoulGem.Level>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)SoulGem_FieldIndex.MaximumCapacity;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LinkedTo = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoulGem_FieldIndex.LinkedTo;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SoulGemBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoulGemBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ISoulGemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoulGem_Registration.Instance;
        public new static SoulGem_Registration Registration => SoulGem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoulGemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoulGemSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoulGemGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => SoulGemCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SoulGemCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoulGemCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoulGemCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoulGemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoulGemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoulGemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoulGemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public SoulGem.MajorFlag MajorFlags => (SoulGem.MajorFlag)this.MajorRecordFlagsRaw;

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        public IObjectBoundsGetter? ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public bool ObjectBounds_IsSet => _ObjectBoundsLocation.HasValue;
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IIconsGetter? Icons { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public bool PickUpSound_IsSet => _PickUpSoundLocation.HasValue;
        public IFormLinkNullable<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public bool PutDownSound_IsSet => _PutDownSoundLocation.HasValue;
        public IFormLinkNullable<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        private int? _DATALocation;
        public SoulGem.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region ContainedSoul
        private int? _ContainedSoulLocation;
        public SoulGem.Level ContainedSoul => _ContainedSoulLocation.HasValue ? (SoulGem.Level)HeaderTranslation.ExtractSubrecordSpan(_data, _ContainedSoulLocation!.Value, _package.MetaData.Constants)[0] : default(SoulGem.Level);
        #endregion
        #region MaximumCapacity
        private int? _MaximumCapacityLocation;
        public SoulGem.Level MaximumCapacity => _MaximumCapacityLocation.HasValue ? (SoulGem.Level)HeaderTranslation.ExtractSubrecordSpan(_data, _MaximumCapacityLocation!.Value, _package.MetaData.Constants)[0] : default(SoulGem.Level);
        #endregion
        #region LinkedTo
        private int? _LinkedToLocation;
        public bool LinkedTo_IsSet => _LinkedToLocation.HasValue;
        public IFormLinkNullable<ISoulGemGetter> LinkedTo => _LinkedToLocation.HasValue ? new FormLinkNullable<ISoulGemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _LinkedToLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoulGemGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoulGemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SoulGemBinaryOverlay SoulGemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new SoulGemBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SoulGemBinaryOverlay SoulGemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SoulGemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)SoulGem_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Icons;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)SoulGem_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList<IFormLink<IKeywordGetter>>.FactoryByCount(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)SoulGem_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)SoulGem_FieldIndex.Weight;
                }
                case RecordTypeInts.SOUL:
                {
                    _ContainedSoulLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.ContainedSoul;
                }
                case RecordTypeInts.SLCP:
                {
                    _MaximumCapacityLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.MaximumCapacity;
                }
                case RecordTypeInts.NAM0:
                {
                    _LinkedToLocation = (stream.Position - offset);
                    return (int)SoulGem_FieldIndex.LinkedTo;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoulGemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

