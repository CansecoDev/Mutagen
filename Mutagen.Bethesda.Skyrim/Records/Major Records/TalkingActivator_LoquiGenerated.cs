/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TalkingActivator :
        SkyrimMajorRecord,
        ITalkingActivatorInternal,
        ILoquiObjectSetter<TalkingActivator>,
        IEquatable<TalkingActivator>,
        IEqualsMask
    {
        #region Ctor
        protected TalkingActivator()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ITalkingActivatorGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITalkingActivatorGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? ITalkingActivatorGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITalkingActivatorGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? ITalkingActivatorGetter.Destructible => this.Destructible;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Keyword>>? _Keywords;
        public ExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? ITalkingActivatorGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region PNAM
        public Int32? PNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITalkingActivatorGetter.PNAM => this.PNAM;
        #endregion
        #region LoopingSound
        public FormLinkNullable<SoundMarker> LoopingSound { get; set; } = new FormLinkNullable<SoundMarker>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundMarkerGetter> ITalkingActivatorGetter.LoopingSound => this.LoopingSound;
        #endregion
        #region FNAM
        public Int16? FNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ITalkingActivatorGetter.FNAM => this.FNAM;
        #endregion
        #region VoiceType
        public FormLinkNullable<VoiceType> VoiceType { get; set; } = new FormLinkNullable<VoiceType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IVoiceTypeGetter> ITalkingActivatorGetter.VoiceType => this.VoiceType;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TalkingActivatorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITalkingActivatorGetter rhs)) return false;
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TalkingActivator obj)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TalkingActivatorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TalkingActivatorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new TalkingActivator CreateFromXml(
            XElement node,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TalkingActivator CreateFromXml(
            XElement node,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static TalkingActivator CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TalkingActivator();
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TalkingActivator CreateFromXml(
            string path,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TalkingActivator CreateFromXml(
            string path,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TalkingActivator CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TalkingActivator CreateFromXml(
            Stream stream,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TalkingActivator CreateFromXml(
            Stream stream,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TalkingActivator CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = initialValue;
                this.LoopingSound = initialValue;
                this.FNAM = initialValue;
                this.VoiceType = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem PNAM,
                TItem LoopingSound,
                TItem FNAM,
                TItem VoiceType)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = PNAM;
                this.LoopingSound = LoopingSound;
                this.FNAM = FNAM;
                this.VoiceType = VoiceType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem PNAM;
            public TItem LoopingSound;
            public TItem FNAM;
            public TItem VoiceType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.LoopingSound, rhs.LoopingSound)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.VoiceType, rhs.VoiceType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.PNAM);
                hash.Add(this.LoopingSound);
                hash.Add(this.FNAM);
                hash.Add(this.VoiceType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.LoopingSound)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.VoiceType)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.LoopingSound)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.VoiceType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TalkingActivator.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.LoopingSound = eval(this.LoopingSound);
                obj.FNAM = eval(this.FNAM);
                obj.VoiceType = eval(this.VoiceType);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TalkingActivator.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TalkingActivator.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TalkingActivator.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        fg.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.LoopingSound ?? true)
                    {
                        fg.AppendItem(LoopingSound, "LoopingSound");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        fg.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.VoiceType ?? true)
                    {
                        fg.AppendItem(VoiceType, "VoiceType");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? PNAM;
            public Exception? LoopingSound;
            public Exception? FNAM;
            public Exception? VoiceType;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case TalkingActivator_FieldIndex.Name:
                        return Name;
                    case TalkingActivator_FieldIndex.Model:
                        return Model;
                    case TalkingActivator_FieldIndex.Destructible:
                        return Destructible;
                    case TalkingActivator_FieldIndex.Keywords:
                        return Keywords;
                    case TalkingActivator_FieldIndex.PNAM:
                        return PNAM;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        return LoopingSound;
                    case TalkingActivator_FieldIndex.FNAM:
                        return FNAM;
                    case TalkingActivator_FieldIndex.VoiceType:
                        return VoiceType;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case TalkingActivator_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        this.LoopingSound = ex;
                        break;
                    case TalkingActivator_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case TalkingActivator_FieldIndex.VoiceType:
                        this.VoiceType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case TalkingActivator_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        this.LoopingSound = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.VoiceType:
                        this.VoiceType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (PNAM != null) return true;
                if (LoopingSound != null) return true;
                if (FNAM != null) return true;
                if (VoiceType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(PNAM, "PNAM");
                fg.AppendItem(LoopingSound, "LoopingSound");
                fg.AppendItem(FNAM, "FNAM");
                fg.AppendItem(VoiceType, "VoiceType");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.LoopingSound = this.LoopingSound.Combine(rhs.LoopingSound);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.VoiceType = this.VoiceType.Combine(rhs.VoiceType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool Keywords;
            public bool PNAM;
            public bool LoopingSound;
            public bool FNAM;
            public bool VoiceType;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.Keywords = defaultOn;
                this.PNAM = defaultOn;
                this.LoopingSound = defaultOn;
                this.FNAM = defaultOn;
                this.VoiceType = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((PNAM, null));
                ret.Add((LoopingSound, null));
                ret.Add((FNAM, null));
                ret.Add((VoiceType, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = TalkingActivator_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => TalkingActivatorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TalkingActivatorCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TalkingActivatorCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TalkingActivatorCommon.Instance.RemapLinks(this, mapping);
        public TalkingActivator(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public TalkingActivator(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public TalkingActivator(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TalkingActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TalkingActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new TalkingActivator CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static TalkingActivator CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TalkingActivator();
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TalkingActivator item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITalkingActivatorGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TalkingActivator GetNew()
        {
            return new TalkingActivator();
        }

    }
    #endregion

    #region Interface
    public partial interface ITalkingActivator :
        ITalkingActivatorGetter,
        ISkyrimMajorRecord,
        ITranslatedNamed,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<ITalkingActivatorInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new ExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new Int32? PNAM { get; set; }
        new FormLinkNullable<SoundMarker> LoopingSound { get; set; }
        new Int16? FNAM { get; set; }
        new FormLinkNullable<VoiceType> VoiceType { get; set; }
        #region Mutagen
        new TalkingActivator.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITalkingActivatorInternal :
        ISkyrimMajorRecordInternal,
        ITalkingActivator,
        ITalkingActivatorGetter
    {
    }

    public partial interface ITalkingActivatorGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<ITalkingActivatorGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => TalkingActivator_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        TranslatedString? Name { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        Int32? PNAM { get; }
        IFormLinkNullable<ISoundMarkerGetter> LoopingSound { get; }
        Int16? FNAM { get; }
        IFormLinkNullable<IVoiceTypeGetter> VoiceType { get; }

        #region Mutagen
        TalkingActivator.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TalkingActivatorMixIn
    {
        public static void Clear(this ITalkingActivatorInternal item)
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TalkingActivator.Mask<bool> GetEqualsMask(
            this ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITalkingActivatorGetter item,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITalkingActivatorGetter item,
            FileGeneration fg,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITalkingActivatorGetter item,
            TalkingActivator.Mask<bool?> checkMask)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TalkingActivator.Mask<bool> GetHasBeenSetMask(this ITalkingActivatorGetter item)
        {
            var ret = new TalkingActivator.Mask<bool>(false);
            ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITalkingActivatorInternal lhs,
            ITalkingActivatorGetter rhs,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITalkingActivatorInternal lhs,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            XElement node,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            XElement node,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            string path,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            string path,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            Stream stream,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            Stream stream,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITalkingActivatorInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TalkingActivator.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITalkingActivatorInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITalkingActivatorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TalkingActivator_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        Destructible = 10,
        Keywords = 11,
        PNAM = 12,
        LoopingSound = 13,
        FNAM = 14,
        VoiceType = 15,
    }
    #endregion

    #region Registration
    public partial class TalkingActivator_Registration : ILoquiRegistration
    {
        public static readonly TalkingActivator_Registration Instance = new TalkingActivator_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 150,
            version: 0);

        public const string GUID = "94183ba9-f9eb-4dd2-9969-62218607a50f";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(TalkingActivator.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TalkingActivator.ErrorMask);

        public static readonly Type ClassType = typeof(TalkingActivator);

        public static readonly Type GetterType = typeof(ITalkingActivatorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITalkingActivator);

        public static readonly Type? InternalSetterType = typeof(ITalkingActivatorInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.TalkingActivator";

        public const string Name = "TalkingActivator";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)TalkingActivator_FieldIndex.VirtualMachineAdapter;
                case "OBJECTBOUNDS":
                    return (ushort)TalkingActivator_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)TalkingActivator_FieldIndex.Name;
                case "MODEL":
                    return (ushort)TalkingActivator_FieldIndex.Model;
                case "DESTRUCTIBLE":
                    return (ushort)TalkingActivator_FieldIndex.Destructible;
                case "KEYWORDS":
                    return (ushort)TalkingActivator_FieldIndex.Keywords;
                case "PNAM":
                    return (ushort)TalkingActivator_FieldIndex.PNAM;
                case "LOOPINGSOUND":
                    return (ushort)TalkingActivator_FieldIndex.LoopingSound;
                case "FNAM":
                    return (ushort)TalkingActivator_FieldIndex.FNAM;
                case "VOICETYPE":
                    return (ushort)TalkingActivator_FieldIndex.VoiceType;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.Keywords:
                    return true;
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                case TalkingActivator_FieldIndex.ObjectBounds:
                case TalkingActivator_FieldIndex.Name:
                case TalkingActivator_FieldIndex.Model:
                case TalkingActivator_FieldIndex.Destructible:
                case TalkingActivator_FieldIndex.PNAM:
                case TalkingActivator_FieldIndex.LoopingSound:
                case TalkingActivator_FieldIndex.FNAM:
                case TalkingActivator_FieldIndex.VoiceType:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                case TalkingActivator_FieldIndex.ObjectBounds:
                case TalkingActivator_FieldIndex.Model:
                case TalkingActivator_FieldIndex.Destructible:
                    return true;
                case TalkingActivator_FieldIndex.Name:
                case TalkingActivator_FieldIndex.Keywords:
                case TalkingActivator_FieldIndex.PNAM:
                case TalkingActivator_FieldIndex.LoopingSound:
                case TalkingActivator_FieldIndex.FNAM:
                case TalkingActivator_FieldIndex.VoiceType:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                case TalkingActivator_FieldIndex.ObjectBounds:
                case TalkingActivator_FieldIndex.Name:
                case TalkingActivator_FieldIndex.Model:
                case TalkingActivator_FieldIndex.Destructible:
                case TalkingActivator_FieldIndex.Keywords:
                case TalkingActivator_FieldIndex.PNAM:
                case TalkingActivator_FieldIndex.LoopingSound:
                case TalkingActivator_FieldIndex.FNAM:
                case TalkingActivator_FieldIndex.VoiceType:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case TalkingActivator_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case TalkingActivator_FieldIndex.Name:
                    return "Name";
                case TalkingActivator_FieldIndex.Model:
                    return "Model";
                case TalkingActivator_FieldIndex.Destructible:
                    return "Destructible";
                case TalkingActivator_FieldIndex.Keywords:
                    return "Keywords";
                case TalkingActivator_FieldIndex.PNAM:
                    return "PNAM";
                case TalkingActivator_FieldIndex.LoopingSound:
                    return "LoopingSound";
                case TalkingActivator_FieldIndex.FNAM:
                    return "FNAM";
                case TalkingActivator_FieldIndex.VoiceType:
                    return "VoiceType";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                case TalkingActivator_FieldIndex.ObjectBounds:
                case TalkingActivator_FieldIndex.Name:
                case TalkingActivator_FieldIndex.Model:
                case TalkingActivator_FieldIndex.Destructible:
                case TalkingActivator_FieldIndex.Keywords:
                case TalkingActivator_FieldIndex.PNAM:
                case TalkingActivator_FieldIndex.LoopingSound:
                case TalkingActivator_FieldIndex.FNAM:
                case TalkingActivator_FieldIndex.VoiceType:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                case TalkingActivator_FieldIndex.ObjectBounds:
                case TalkingActivator_FieldIndex.Name:
                case TalkingActivator_FieldIndex.Model:
                case TalkingActivator_FieldIndex.Destructible:
                case TalkingActivator_FieldIndex.Keywords:
                case TalkingActivator_FieldIndex.PNAM:
                case TalkingActivator_FieldIndex.LoopingSound:
                case TalkingActivator_FieldIndex.FNAM:
                case TalkingActivator_FieldIndex.VoiceType:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
            switch (enu)
            {
                case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case TalkingActivator_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case TalkingActivator_FieldIndex.Name:
                    return typeof(TranslatedString);
                case TalkingActivator_FieldIndex.Model:
                    return typeof(Model);
                case TalkingActivator_FieldIndex.Destructible:
                    return typeof(Destructible);
                case TalkingActivator_FieldIndex.Keywords:
                    return typeof(ExtendedList<IFormLink<Keyword>>);
                case TalkingActivator_FieldIndex.PNAM:
                    return typeof(Int32);
                case TalkingActivator_FieldIndex.LoopingSound:
                    return typeof(FormLinkNullable<SoundMarker>);
                case TalkingActivator_FieldIndex.FNAM:
                    return typeof(Int16);
                case TalkingActivator_FieldIndex.VoiceType:
                    return typeof(FormLinkNullable<VoiceType>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TalkingActivatorXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.TACT;
        public static readonly Type BinaryWriteTranslation = typeof(TalkingActivatorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TalkingActivatorSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TalkingActivatorSetterCommon Instance = new TalkingActivatorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITalkingActivatorInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.PNAM = default;
            item.LoopingSound = FormLinkNullable<SoundMarker>.Null;
            item.FNAM = default;
            item.VoiceType = FormLinkNullable<VoiceType>.Null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITalkingActivatorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITalkingActivatorInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ITalkingActivatorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ITalkingActivatorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TalkingActivatorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (TalkingActivator)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (TalkingActivator)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITalkingActivatorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ITalkingActivatorInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TalkingActivatorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TalkingActivatorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (TalkingActivator)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (TalkingActivator)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class TalkingActivatorCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TalkingActivatorCommon Instance = new TalkingActivatorCommon();

        public TalkingActivator.Mask<bool> GetEqualsMask(
            ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TalkingActivator.Mask<bool>(false);
            ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            TalkingActivator.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.PNAM = item.PNAM == rhs.PNAM;
            ret.LoopingSound = object.Equals(item.LoopingSound, rhs.LoopingSound);
            ret.FNAM = item.FNAM == rhs.FNAM;
            ret.VoiceType = object.Equals(item.VoiceType, rhs.VoiceType);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITalkingActivatorGetter item,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITalkingActivatorGetter item,
            FileGeneration fg,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TalkingActivator =>");
            }
            else
            {
                fg.AppendLine($"{name} (TalkingActivator) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITalkingActivatorGetter item,
            FileGeneration fg,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM.TryGet(out var PNAMItem))
            {
                fg.AppendItem(PNAMItem, "PNAM");
            }
            if ((printMask?.LoopingSound ?? true)
                && item.LoopingSound.TryGet(out var LoopingSoundItem))
            {
                fg.AppendItem(LoopingSoundItem, "LoopingSound");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM.TryGet(out var FNAMItem))
            {
                fg.AppendItem(FNAMItem, "FNAM");
            }
            if ((printMask?.VoiceType ?? true)
                && item.VoiceType.TryGet(out var VoiceTypeItem))
            {
                fg.AppendItem(VoiceTypeItem, "VoiceType");
            }
        }
        
        public bool HasBeenSet(
            ITalkingActivatorGetter item,
            TalkingActivator.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.PNAM.HasValue && checkMask.PNAM.Value != (item.PNAM != null)) return false;
            if (checkMask.LoopingSound.HasValue && checkMask.LoopingSound.Value != (item.LoopingSound.FormKey != null)) return false;
            if (checkMask.FNAM.HasValue && checkMask.FNAM.Value != (item.FNAM != null)) return false;
            if (checkMask.VoiceType.HasValue && checkMask.VoiceType.Value != (item.VoiceType.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITalkingActivatorGetter item,
            TalkingActivator.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.PNAM = (item.PNAM != null);
            mask.LoopingSound = (item.LoopingSound.FormKey != null);
            mask.FNAM = (item.FNAM != null);
            mask.VoiceType = (item.VoiceType.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static TalkingActivator_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (TalkingActivator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new TalkingActivator_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TalkingActivator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITalkingActivatorGetter? lhs,
            ITalkingActivatorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (lhs.PNAM != rhs.PNAM) return false;
            if (!lhs.LoopingSound.Equals(rhs.LoopingSound)) return false;
            if (lhs.FNAM != rhs.FNAM) return false;
            if (!lhs.VoiceType.Equals(rhs.VoiceType)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITalkingActivatorGetter?)lhs,
                rhs: rhs as ITalkingActivatorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITalkingActivatorGetter?)lhs,
                rhs: rhs as ITalkingActivatorGetter);
        }
        
        public virtual int GetHashCode(ITalkingActivatorGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            if (item.PNAM.TryGet(out var PNAMitem))
            {
                hash.Add(PNAMitem);
            }
            if (item.LoopingSound.TryGet(out var LoopingSounditem))
            {
                hash.Add(LoopingSounditem);
            }
            if (item.FNAM.TryGet(out var FNAMitem))
            {
                hash.Add(FNAMitem);
            }
            if (item.VoiceType.TryGet(out var VoiceTypeitem))
            {
                hash.Add(VoiceTypeitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ITalkingActivatorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITalkingActivatorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TalkingActivator.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ITalkingActivatorGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.LoopingSound.FormKey.TryGet(out var LoopingSoundKey))
            {
                yield return LoopingSoundKey;
            }
            if (obj.VoiceType.FormKey.TryGet(out var VoiceTypeKey))
            {
                yield return VoiceTypeKey;
            }
            yield break;
        }
        
        public void RemapLinks(ITalkingActivatorGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(TalkingActivator obj, TalkingActivator rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new TalkingActivator(getNextFormKey());
            ret.DeepCopyIn((TalkingActivator)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (TalkingActivator)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TalkingActivatorSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly TalkingActivatorSetterTranslationCommon Instance = new TalkingActivatorSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITalkingActivatorInternal item,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ITalkingActivator item,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.PNAM) ?? true))
            {
                item.PNAM = rhs.PNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.LoopingSound) ?? true))
            {
                item.LoopingSound = rhs.LoopingSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.FNAM) ?? true))
            {
                item.FNAM = rhs.FNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VoiceType) ?? true))
            {
                item.VoiceType = rhs.VoiceType.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITalkingActivatorInternal)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITalkingActivator)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITalkingActivatorInternal)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITalkingActivator)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TalkingActivator
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TalkingActivator_Registration.Instance;
        public new static TalkingActivator_Registration Registration => TalkingActivator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TalkingActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TalkingActivatorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TalkingActivatorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TalkingActivatorXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TalkingActivatorXmlWriteTranslation Instance = new TalkingActivatorXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITalkingActivatorGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)TalkingActivator_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)TalkingActivator_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)TalkingActivator_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)TalkingActivator_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Model));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)TalkingActivator_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Destructible));
                }
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLink<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)TalkingActivator_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLink<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.PNAM != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.PNAM) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PNAM),
                    item: item.PNAM.Value,
                    fieldIndex: (int)TalkingActivator_FieldIndex.PNAM,
                    errorMask: errorMask);
            }
            if ((item.LoopingSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.LoopingSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LoopingSound),
                    item: item.LoopingSound.FormKey,
                    fieldIndex: (int)TalkingActivator_FieldIndex.LoopingSound,
                    errorMask: errorMask);
            }
            if ((item.FNAM != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.FNAM) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FNAM),
                    item: item.FNAM.Value,
                    fieldIndex: (int)TalkingActivator_FieldIndex.FNAM,
                    errorMask: errorMask);
            }
            if ((item.VoiceType.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VoiceType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VoiceType),
                    item: item.VoiceType.FormKey,
                    fieldIndex: (int)TalkingActivator_FieldIndex.VoiceType,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITalkingActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TalkingActivator");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TalkingActivator");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TalkingActivatorXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static TalkingActivatorXmlCreateTranslation Instance = new TalkingActivatorXmlCreateTranslation();

        public static void FillPublicXml(
            ITalkingActivatorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TalkingActivatorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITalkingActivatorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBounds":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PNAM":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.PNAM);
                    try
                    {
                        item.PNAM = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoopingSound":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.LoopingSound);
                    try
                    {
                        item.LoopingSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FNAM":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.FNAM);
                    try
                    {
                        item.FNAM = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoiceType":
                    errorMask?.PushIndex((int)TalkingActivator_FieldIndex.VoiceType);
                    try
                    {
                        item.VoiceType = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TalkingActivatorXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITalkingActivatorGetter item,
            XElement node,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TalkingActivatorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITalkingActivatorGetter item,
            string path,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITalkingActivatorGetter item,
            Stream stream,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TalkingActivatorBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TalkingActivatorBinaryWriteTranslation Instance = new TalkingActivatorBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITalkingActivatorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LoopingSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNDR));
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VNAM));
        }

        public void Write(
            MutagenWriter writer,
            ITalkingActivatorGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.TACT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TalkingActivatorBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static TalkingActivatorBinaryCreateTranslation Instance = new TalkingActivatorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TACT;
        public static void FillBinaryStructs(
            ITalkingActivatorInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            ITalkingActivatorInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.VirtualMachineAdapter);
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.ObjectBounds);
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Name);
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Model);
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Destructible);
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.KSIZ,
                            triggeringRecord: RecordTypes.KWDA,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Keywords);
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.PNAM);
                }
                case RecordTypeInts.SNDR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopingSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.LoopingSound);
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = frame.ReadInt16();
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.FNAM);
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.VoiceType);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TalkingActivatorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TalkingActivatorBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ITalkingActivatorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TalkingActivator_Registration.Instance;
        public new static TalkingActivator_Registration Registration => TalkingActivator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TalkingActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TalkingActivatorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITalkingActivatorGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => TalkingActivatorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TalkingActivatorCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TalkingActivatorCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TalkingActivatorCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TalkingActivatorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TalkingActivatorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TalkingActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TalkingActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public TalkingActivator.MajorFlag MajorFlags => (TalkingActivator.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        #region PNAM
        private int? _PNAMLocation;
        public Int32? PNAM => _PNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region LoopingSound
        private int? _LoopingSoundLocation;
        public bool LoopingSound_IsSet => _LoopingSoundLocation.HasValue;
        public IFormLinkNullable<ISoundMarkerGetter> LoopingSound => _LoopingSoundLocation.HasValue ? new FormLinkNullable<ISoundMarkerGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _LoopingSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundMarkerGetter>.Null;
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public Int16? FNAM => _FNAMLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FNAMLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        #region VoiceType
        private int? _VoiceTypeLocation;
        public bool VoiceType_IsSet => _VoiceTypeLocation.HasValue;
        public IFormLinkNullable<IVoiceTypeGetter> VoiceType => _VoiceTypeLocation.HasValue ? new FormLinkNullable<IVoiceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VoiceTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IVoiceTypeGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TalkingActivatorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TalkingActivatorBinaryOverlay TalkingActivatorFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new TalkingActivatorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TalkingActivatorBinaryOverlay TalkingActivatorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TalkingActivatorFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.VirtualMachineAdapter);
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.ObjectBounds);
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Name);
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Model);
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Destructible);
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList<IFormLink<IKeywordGetter>>.FactoryByCount(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.Keywords);
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.PNAM);
                }
                case RecordTypeInts.SNDR:
                {
                    _LoopingSoundLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.LoopingSound);
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.FNAM);
                }
                case RecordTypeInts.VNAM:
                {
                    _VoiceTypeLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TalkingActivator_FieldIndex.VoiceType);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TalkingActivatorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

