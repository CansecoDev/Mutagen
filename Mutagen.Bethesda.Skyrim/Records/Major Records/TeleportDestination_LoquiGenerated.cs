/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TeleportDestination :
        ITeleportDestination,
        ILoquiObjectSetter<TeleportDestination>,
        IEquatable<TeleportDestination>,
        IEqualsMask
    {
        #region Ctor
        public TeleportDestination()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Door
        public FormLink<PlacedObject> Door { get; set; } = new FormLink<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IPlacedObjectGetter> ITeleportDestinationGetter.Door => this.Door;
        #endregion
        #region Position
        public P3Float Position { get; set; } = default;
        #endregion
        #region Rotation
        public P3Float Rotation { get; set; } = default;
        #endregion
        #region Flags
        public TeleportDestination.Flag Flags { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TeleportDestinationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITeleportDestinationGetter rhs)) return false;
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TeleportDestination? obj)
        {
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TeleportDestinationCommon)((ITeleportDestinationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TeleportDestinationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TeleportDestinationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TeleportDestination CreateFromXml(
            XElement node,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TeleportDestination CreateFromXml(
            XElement node,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TeleportDestination.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TeleportDestination CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TeleportDestination();
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TeleportDestination CreateFromXml(
            string path,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TeleportDestination CreateFromXml(
            string path,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TeleportDestination CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TeleportDestination CreateFromXml(
            Stream stream,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TeleportDestination CreateFromXml(
            Stream stream,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TeleportDestination CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Door = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.Flags = initialValue;
            }

            public Mask(
                TItem Door,
                TItem Position,
                TItem Rotation,
                TItem Flags)
            {
                this.Door = Door;
                this.Position = Position;
                this.Rotation = Rotation;
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Door;
            public TItem Position;
            public TItem Rotation;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Door, rhs.Door)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Door);
                hash.Add(this.Position);
                hash.Add(this.Rotation);
                hash.Add(this.Flags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Door)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Door)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TeleportDestination.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Door = eval(this.Door);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TeleportDestination.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TeleportDestination.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TeleportDestination.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Door ?? true)
                    {
                        fg.AppendItem(Door, "Door");
                    }
                    if (printMask?.Position ?? true)
                    {
                        fg.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        fg.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Door;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
                switch (enu)
                {
                    case TeleportDestination_FieldIndex.Door:
                        return Door;
                    case TeleportDestination_FieldIndex.Position:
                        return Position;
                    case TeleportDestination_FieldIndex.Rotation:
                        return Rotation;
                    case TeleportDestination_FieldIndex.Flags:
                        return Flags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
                switch (enu)
                {
                    case TeleportDestination_FieldIndex.Door:
                        this.Door = ex;
                        break;
                    case TeleportDestination_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case TeleportDestination_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case TeleportDestination_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
                switch (enu)
                {
                    case TeleportDestination_FieldIndex.Door:
                        this.Door = (Exception?)obj;
                        break;
                    case TeleportDestination_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case TeleportDestination_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case TeleportDestination_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Door != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Door, "Door");
                fg.AppendItem(Position, "Position");
                fg.AppendItem(Rotation, "Rotation");
                fg.AppendItem(Flags, "Flags");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Door = this.Door.Combine(rhs.Door);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Door;
            public bool Position;
            public bool Rotation;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Door = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Door, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((Flags, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = TeleportDestination_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => TeleportDestinationCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TeleportDestinationCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TeleportDestinationCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TeleportDestinationCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TeleportDestinationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TeleportDestinationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static TeleportDestination CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static TeleportDestination CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TeleportDestination();
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TeleportDestination item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITeleportDestinationGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TeleportDestination GetNew()
        {
            return new TeleportDestination();
        }

    }
    #endregion

    #region Interface
    public partial interface ITeleportDestination :
        ITeleportDestinationGetter,
        IPositionRotation,
        ILoquiObjectSetter<ITeleportDestination>
    {
        new FormLink<PlacedObject> Door { get; set; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new TeleportDestination.Flag Flags { get; set; }
    }

    public partial interface ITeleportDestinationGetter :
        ILoquiObject,
        IPositionRotationGetter,
        ILoquiObject<ITeleportDestinationGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TeleportDestination_Registration.Instance;
        IFormLink<IPlacedObjectGetter> Door { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        TeleportDestination.Flag Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TeleportDestinationMixIn
    {
        public static void Clear(this ITeleportDestination item)
        {
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TeleportDestination.Mask<bool> GetEqualsMask(
            this ITeleportDestinationGetter item,
            ITeleportDestinationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITeleportDestinationGetter item,
            string? name = null,
            TeleportDestination.Mask<bool>? printMask = null)
        {
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITeleportDestinationGetter item,
            FileGeneration fg,
            string? name = null,
            TeleportDestination.Mask<bool>? printMask = null)
        {
            ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITeleportDestinationGetter item,
            TeleportDestination.Mask<bool?> checkMask)
        {
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TeleportDestination.Mask<bool> GetHasBeenSetMask(this ITeleportDestinationGetter item)
        {
            var ret = new TeleportDestination.Mask<bool>(false);
            ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITeleportDestinationGetter item,
            ITeleportDestinationGetter rhs)
        {
            return ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITeleportDestination lhs,
            ITeleportDestinationGetter rhs)
        {
            ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITeleportDestination lhs,
            ITeleportDestinationGetter rhs,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITeleportDestination lhs,
            ITeleportDestinationGetter rhs,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TeleportDestination.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITeleportDestination lhs,
            ITeleportDestinationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TeleportDestination DeepCopy(
            this ITeleportDestinationGetter item,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            return ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TeleportDestination DeepCopy(
            this ITeleportDestinationGetter item,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            return ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TeleportDestination DeepCopy(
            this ITeleportDestinationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TeleportDestinationSetterTranslationCommon)((ITeleportDestinationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITeleportDestination item,
            XElement node,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITeleportDestination item,
            XElement node,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TeleportDestination.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            string path,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            string path,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            string path,
            ErrorMaskBuilder? errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            Stream stream,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            Stream stream,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITeleportDestination item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITeleportDestination item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITeleportDestination item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TeleportDestinationSetterCommon)((ITeleportDestinationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TeleportDestination_FieldIndex
    {
        Door = 0,
        Position = 1,
        Rotation = 2,
        Flags = 3,
    }
    #endregion

    #region Registration
    public partial class TeleportDestination_Registration : ILoquiRegistration
    {
        public static readonly TeleportDestination_Registration Instance = new TeleportDestination_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 305,
            version: 0);

        public const string GUID = "b67ff340-7a4a-4aa1-b4cb-076b5ddc5c78";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(TeleportDestination.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TeleportDestination.ErrorMask);

        public static readonly Type ClassType = typeof(TeleportDestination);

        public static readonly Type GetterType = typeof(ITeleportDestinationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITeleportDestination);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.TeleportDestination";

        public const string Name = "TeleportDestination";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DOOR":
                    return (ushort)TeleportDestination_FieldIndex.Door;
                case "POSITION":
                    return (ushort)TeleportDestination_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)TeleportDestination_FieldIndex.Rotation;
                case "FLAGS":
                    return (ushort)TeleportDestination_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                case TeleportDestination_FieldIndex.Position:
                case TeleportDestination_FieldIndex.Rotation:
                case TeleportDestination_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                case TeleportDestination_FieldIndex.Position:
                case TeleportDestination_FieldIndex.Rotation:
                case TeleportDestination_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                case TeleportDestination_FieldIndex.Position:
                case TeleportDestination_FieldIndex.Rotation:
                case TeleportDestination_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                    return "Door";
                case TeleportDestination_FieldIndex.Position:
                    return "Position";
                case TeleportDestination_FieldIndex.Rotation:
                    return "Rotation";
                case TeleportDestination_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                case TeleportDestination_FieldIndex.Position:
                case TeleportDestination_FieldIndex.Rotation:
                case TeleportDestination_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                case TeleportDestination_FieldIndex.Position:
                case TeleportDestination_FieldIndex.Rotation:
                case TeleportDestination_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TeleportDestination_FieldIndex enu = (TeleportDestination_FieldIndex)index;
            switch (enu)
            {
                case TeleportDestination_FieldIndex.Door:
                    return typeof(FormLink<PlacedObject>);
                case TeleportDestination_FieldIndex.Position:
                    return typeof(P3Float);
                case TeleportDestination_FieldIndex.Rotation:
                    return typeof(P3Float);
                case TeleportDestination_FieldIndex.Flags:
                    return typeof(TeleportDestination.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TeleportDestinationXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.XTEL;
        public static readonly Type BinaryWriteTranslation = typeof(TeleportDestinationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TeleportDestinationSetterCommon
    {
        public static readonly TeleportDestinationSetterCommon Instance = new TeleportDestinationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITeleportDestination item)
        {
            ClearPartial();
            item.Door = FormLink<PlacedObject>.Null;
            item.Position = default;
            item.Rotation = default;
            item.Flags = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ITeleportDestination item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TeleportDestinationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITeleportDestination item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.XTEL)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TeleportDestinationBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class TeleportDestinationCommon
    {
        public static readonly TeleportDestinationCommon Instance = new TeleportDestinationCommon();

        public TeleportDestination.Mask<bool> GetEqualsMask(
            ITeleportDestinationGetter item,
            ITeleportDestinationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TeleportDestination.Mask<bool>(false);
            ((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITeleportDestinationGetter item,
            ITeleportDestinationGetter rhs,
            TeleportDestination.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Door = object.Equals(item.Door, rhs.Door);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string ToString(
            ITeleportDestinationGetter item,
            string? name = null,
            TeleportDestination.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITeleportDestinationGetter item,
            FileGeneration fg,
            string? name = null,
            TeleportDestination.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TeleportDestination =>");
            }
            else
            {
                fg.AppendLine($"{name} (TeleportDestination) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITeleportDestinationGetter item,
            FileGeneration fg,
            TeleportDestination.Mask<bool>? printMask = null)
        {
            if (printMask?.Door ?? true)
            {
                fg.AppendItem(item.Door, "Door");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendItem(item.Rotation, "Rotation");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
        }
        
        public bool HasBeenSet(
            ITeleportDestinationGetter item,
            TeleportDestination.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITeleportDestinationGetter item,
            TeleportDestination.Mask<bool> mask)
        {
            mask.Door = true;
            mask.Position = true;
            mask.Rotation = true;
            mask.Flags = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITeleportDestinationGetter? lhs,
            ITeleportDestinationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Door.Equals(rhs.Door)) return false;
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITeleportDestinationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Door);
            hash.Add(item.Position);
            hash.Add(item.Rotation);
            hash.Add(item.Flags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TeleportDestination.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ITeleportDestinationGetter obj)
        {
            yield return obj.Door.FormKey;
            yield break;
        }
        
        public void RemapLinks(ITeleportDestinationGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class TeleportDestinationSetterTranslationCommon
    {
        public static readonly TeleportDestinationSetterTranslationCommon Instance = new TeleportDestinationSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITeleportDestination item,
            ITeleportDestinationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Door) ?? true))
            {
                item.Door = rhs.Door.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public TeleportDestination DeepCopy(
            ITeleportDestinationGetter item,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            TeleportDestination ret = (TeleportDestination)((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TeleportDestination DeepCopy(
            ITeleportDestinationGetter item,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? copyMask = null)
        {
            TeleportDestination ret = (TeleportDestination)((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TeleportDestination DeepCopy(
            ITeleportDestinationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TeleportDestination ret = (TeleportDestination)((TeleportDestinationCommon)((ITeleportDestinationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TeleportDestination
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TeleportDestination_Registration.Instance;
        public static TeleportDestination_Registration Registration => TeleportDestination_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TeleportDestinationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TeleportDestinationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TeleportDestinationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITeleportDestinationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITeleportDestinationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITeleportDestinationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TeleportDestinationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TeleportDestinationXmlWriteTranslation Instance = new TeleportDestinationXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITeleportDestinationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Door) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Door),
                    item: item.Door.FormKey,
                    fieldIndex: (int)TeleportDestination_FieldIndex.Door,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Position) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Position),
                    item: item.Position,
                    fieldIndex: (int)TeleportDestination_FieldIndex.Position,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Rotation) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Rotation),
                    item: item.Rotation,
                    fieldIndex: (int)TeleportDestination_FieldIndex.Rotation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TeleportDestination_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<TeleportDestination.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)TeleportDestination_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITeleportDestinationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TeleportDestination");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TeleportDestination");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITeleportDestinationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITeleportDestinationGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITeleportDestinationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TeleportDestinationXmlCreateTranslation
    {
        public readonly static TeleportDestinationXmlCreateTranslation Instance = new TeleportDestinationXmlCreateTranslation();

        public static void FillPublicXml(
            ITeleportDestination item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TeleportDestinationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITeleportDestination item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Door":
                    errorMask?.PushIndex((int)TeleportDestination_FieldIndex.Door);
                    try
                    {
                        item.Door = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    errorMask?.PushIndex((int)TeleportDestination_FieldIndex.Position);
                    try
                    {
                        item.Position = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Rotation":
                    errorMask?.PushIndex((int)TeleportDestination_FieldIndex.Rotation);
                    try
                    {
                        item.Rotation = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)TeleportDestination_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<TeleportDestination.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TeleportDestinationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            XElement node,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TeleportDestinationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TeleportDestination.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            string path,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            Stream stream,
            out TeleportDestination.ErrorMask errorMask,
            TeleportDestination.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TeleportDestinationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            XElement node,
            string? name = null,
            TeleportDestination.TranslationMask? translationMask = null)
        {
            ((TeleportDestinationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TeleportDestinationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITeleportDestinationGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TeleportDestinationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TeleportDestinationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TeleportDestinationBinaryWriteTranslation Instance = new TeleportDestinationBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITeleportDestinationGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Door);
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Position);
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Rotation);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TeleportDestination.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            ITeleportDestinationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.XTEL),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITeleportDestinationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TeleportDestinationBinaryCreateTranslation
    {
        public readonly static TeleportDestinationBinaryCreateTranslation Instance = new TeleportDestinationBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITeleportDestination item,
            MutagenFrame frame)
        {
            item.Door = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Position = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Rotation = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Flags = EnumBinaryTranslation<TeleportDestination.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TeleportDestinationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITeleportDestinationGetter item,
            MutagenWriter writer)
        {
            ((TeleportDestinationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TeleportDestinationBinaryOverlay :
        BinaryOverlay,
        ITeleportDestinationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TeleportDestination_Registration.Instance;
        public static TeleportDestination_Registration Registration => TeleportDestination_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TeleportDestinationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TeleportDestinationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITeleportDestinationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITeleportDestinationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITeleportDestinationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITeleportDestinationGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => TeleportDestinationCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TeleportDestinationCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TeleportDestinationCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TeleportDestinationCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TeleportDestinationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TeleportDestinationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TeleportDestinationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TeleportDestinationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IFormLink<IPlacedObjectGetter> Door => new FormLink<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public P3Float Position => P3FloatBinaryTranslation.Read(_data.Slice(0x4, 0xC));
        public P3Float Rotation => P3FloatBinaryTranslation.Read(_data.Slice(0x10, 0xC));
        public TeleportDestination.Flag Flags => (TeleportDestination.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x1C, 0x4));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TeleportDestinationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TeleportDestinationBinaryOverlay TeleportDestinationFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TeleportDestinationBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x20 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static TeleportDestinationBinaryOverlay TeleportDestinationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TeleportDestinationFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TeleportDestinationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

