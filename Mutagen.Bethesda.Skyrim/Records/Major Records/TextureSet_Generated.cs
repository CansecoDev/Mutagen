/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TextureSet :
        SkyrimMajorRecord,
        ITextureSetInternal,
        ILoquiObjectSetter<TextureSet>,
        IEquatable<TextureSet>,
        IEqualsMask
    {
        #region Ctor
        protected TextureSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITextureSetGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Diffuse
        public String? Diffuse { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.Diffuse => this.Diffuse;
        #endregion
        #region NormalOrGloss
        public String? NormalOrGloss { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.NormalOrGloss => this.NormalOrGloss;
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        public String? EnvironmentMaskOrSubsurfaceTint { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.EnvironmentMaskOrSubsurfaceTint => this.EnvironmentMaskOrSubsurfaceTint;
        #endregion
        #region GlowOrDetailMap
        public String? GlowOrDetailMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.GlowOrDetailMap => this.GlowOrDetailMap;
        #endregion
        #region Height
        public String? Height { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.Height => this.Height;
        #endregion
        #region Environment
        public String? Environment { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.Environment => this.Environment;
        #endregion
        #region Multilayer
        public String? Multilayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.Multilayer => this.Multilayer;
        #endregion
        #region BacklightMaskOrSpecular
        public String? BacklightMaskOrSpecular { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITextureSetGetter.BacklightMaskOrSpecular => this.BacklightMaskOrSpecular;
        #endregion
        #region Decal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Decal? _Decal;
        public Decal? Decal
        {
            get => _Decal;
            set => _Decal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDecalGetter? ITextureSetGetter.Decal => this.Decal;
        #endregion
        #region Flags
        public TextureSet.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TextureSet.Flag? ITextureSetGetter.Flags => this.Flags;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TextureSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITextureSetGetter rhs)) return false;
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TextureSet? obj)
        {
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TextureSetXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TextureSetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new TextureSet CreateFromXml(
            XElement node,
            TextureSet.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TextureSet CreateFromXml(
            XElement node,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static TextureSet CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TextureSet();
            ((TextureSetSetterCommon)((ITextureSetGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TextureSet CreateFromXml(
            string path,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            string path,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TextureSet CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Diffuse = initialValue;
                this.NormalOrGloss = initialValue;
                this.EnvironmentMaskOrSubsurfaceTint = initialValue;
                this.GlowOrDetailMap = initialValue;
                this.Height = initialValue;
                this.Environment = initialValue;
                this.Multilayer = initialValue;
                this.BacklightMaskOrSpecular = initialValue;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(initialValue, new Decal.Mask<TItem>(initialValue));
                this.Flags = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Diffuse,
                TItem NormalOrGloss,
                TItem EnvironmentMaskOrSubsurfaceTint,
                TItem GlowOrDetailMap,
                TItem Height,
                TItem Environment,
                TItem Multilayer,
                TItem BacklightMaskOrSpecular,
                TItem Decal,
                TItem Flags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Diffuse = Diffuse;
                this.NormalOrGloss = NormalOrGloss;
                this.EnvironmentMaskOrSubsurfaceTint = EnvironmentMaskOrSubsurfaceTint;
                this.GlowOrDetailMap = GlowOrDetailMap;
                this.Height = Height;
                this.Environment = Environment;
                this.Multilayer = Multilayer;
                this.BacklightMaskOrSpecular = BacklightMaskOrSpecular;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(Decal, new Decal.Mask<TItem>(Decal));
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Diffuse;
            public TItem NormalOrGloss;
            public TItem EnvironmentMaskOrSubsurfaceTint;
            public TItem GlowOrDetailMap;
            public TItem Height;
            public TItem Environment;
            public TItem Multilayer;
            public TItem BacklightMaskOrSpecular;
            public MaskItem<TItem, Decal.Mask<TItem>?>? Decal { get; set; }
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Diffuse, rhs.Diffuse)) return false;
                if (!object.Equals(this.NormalOrGloss, rhs.NormalOrGloss)) return false;
                if (!object.Equals(this.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
                if (!object.Equals(this.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Environment, rhs.Environment)) return false;
                if (!object.Equals(this.Multilayer, rhs.Multilayer)) return false;
                if (!object.Equals(this.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
                if (!object.Equals(this.Decal, rhs.Decal)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Diffuse);
                hash.Add(this.NormalOrGloss);
                hash.Add(this.EnvironmentMaskOrSubsurfaceTint);
                hash.Add(this.GlowOrDetailMap);
                hash.Add(this.Height);
                hash.Add(this.Environment);
                hash.Add(this.Multilayer);
                hash.Add(this.BacklightMaskOrSpecular);
                hash.Add(this.Decal);
                hash.Add(this.Flags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Diffuse)) return false;
                if (!eval(this.NormalOrGloss)) return false;
                if (!eval(this.EnvironmentMaskOrSubsurfaceTint)) return false;
                if (!eval(this.GlowOrDetailMap)) return false;
                if (!eval(this.Height)) return false;
                if (!eval(this.Environment)) return false;
                if (!eval(this.Multilayer)) return false;
                if (!eval(this.BacklightMaskOrSpecular)) return false;
                if (Decal != null)
                {
                    if (!eval(this.Decal.Overall)) return false;
                    if (this.Decal.Specific != null && !this.Decal.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Diffuse)) return true;
                if (eval(this.NormalOrGloss)) return true;
                if (eval(this.EnvironmentMaskOrSubsurfaceTint)) return true;
                if (eval(this.GlowOrDetailMap)) return true;
                if (eval(this.Height)) return true;
                if (eval(this.Environment)) return true;
                if (eval(this.Multilayer)) return true;
                if (eval(this.BacklightMaskOrSpecular)) return true;
                if (Decal != null)
                {
                    if (eval(this.Decal.Overall)) return true;
                    if (this.Decal.Specific != null && this.Decal.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TextureSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Diffuse = eval(this.Diffuse);
                obj.NormalOrGloss = eval(this.NormalOrGloss);
                obj.EnvironmentMaskOrSubsurfaceTint = eval(this.EnvironmentMaskOrSubsurfaceTint);
                obj.GlowOrDetailMap = eval(this.GlowOrDetailMap);
                obj.Height = eval(this.Height);
                obj.Environment = eval(this.Environment);
                obj.Multilayer = eval(this.Multilayer);
                obj.BacklightMaskOrSpecular = eval(this.BacklightMaskOrSpecular);
                obj.Decal = this.Decal == null ? null : new MaskItem<R, Decal.Mask<R>?>(eval(this.Decal.Overall), this.Decal.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TextureSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TextureSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TextureSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Diffuse ?? true)
                    {
                        fg.AppendItem(Diffuse, "Diffuse");
                    }
                    if (printMask?.NormalOrGloss ?? true)
                    {
                        fg.AppendItem(NormalOrGloss, "NormalOrGloss");
                    }
                    if (printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
                    {
                        fg.AppendItem(EnvironmentMaskOrSubsurfaceTint, "EnvironmentMaskOrSubsurfaceTint");
                    }
                    if (printMask?.GlowOrDetailMap ?? true)
                    {
                        fg.AppendItem(GlowOrDetailMap, "GlowOrDetailMap");
                    }
                    if (printMask?.Height ?? true)
                    {
                        fg.AppendItem(Height, "Height");
                    }
                    if (printMask?.Environment ?? true)
                    {
                        fg.AppendItem(Environment, "Environment");
                    }
                    if (printMask?.Multilayer ?? true)
                    {
                        fg.AppendItem(Multilayer, "Multilayer");
                    }
                    if (printMask?.BacklightMaskOrSpecular ?? true)
                    {
                        fg.AppendItem(BacklightMaskOrSpecular, "BacklightMaskOrSpecular");
                    }
                    if (printMask?.Decal?.Overall ?? true)
                    {
                        Decal?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Diffuse;
            public Exception? NormalOrGloss;
            public Exception? EnvironmentMaskOrSubsurfaceTint;
            public Exception? GlowOrDetailMap;
            public Exception? Height;
            public Exception? Environment;
            public Exception? Multilayer;
            public Exception? BacklightMaskOrSpecular;
            public MaskItem<Exception?, Decal.ErrorMask?>? Decal;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case TextureSet_FieldIndex.Diffuse:
                        return Diffuse;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        return NormalOrGloss;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        return EnvironmentMaskOrSubsurfaceTint;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        return GlowOrDetailMap;
                    case TextureSet_FieldIndex.Height:
                        return Height;
                    case TextureSet_FieldIndex.Environment:
                        return Environment;
                    case TextureSet_FieldIndex.Multilayer:
                        return Multilayer;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        return BacklightMaskOrSpecular;
                    case TextureSet_FieldIndex.Decal:
                        return Decal;
                    case TextureSet_FieldIndex.Flags:
                        return Flags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case TextureSet_FieldIndex.Diffuse:
                        this.Diffuse = ex;
                        break;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        this.NormalOrGloss = ex;
                        break;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        this.EnvironmentMaskOrSubsurfaceTint = ex;
                        break;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        this.GlowOrDetailMap = ex;
                        break;
                    case TextureSet_FieldIndex.Height:
                        this.Height = ex;
                        break;
                    case TextureSet_FieldIndex.Environment:
                        this.Environment = ex;
                        break;
                    case TextureSet_FieldIndex.Multilayer:
                        this.Multilayer = ex;
                        break;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        this.BacklightMaskOrSpecular = ex;
                        break;
                    case TextureSet_FieldIndex.Decal:
                        this.Decal = new MaskItem<Exception?, Decal.ErrorMask?>(ex, null);
                        break;
                    case TextureSet_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case TextureSet_FieldIndex.Diffuse:
                        this.Diffuse = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        this.NormalOrGloss = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        this.EnvironmentMaskOrSubsurfaceTint = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        this.GlowOrDetailMap = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Height:
                        this.Height = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Environment:
                        this.Environment = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Multilayer:
                        this.Multilayer = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        this.BacklightMaskOrSpecular = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Decal:
                        this.Decal = (MaskItem<Exception?, Decal.ErrorMask?>?)obj;
                        break;
                    case TextureSet_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Diffuse != null) return true;
                if (NormalOrGloss != null) return true;
                if (EnvironmentMaskOrSubsurfaceTint != null) return true;
                if (GlowOrDetailMap != null) return true;
                if (Height != null) return true;
                if (Environment != null) return true;
                if (Multilayer != null) return true;
                if (BacklightMaskOrSpecular != null) return true;
                if (Decal != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Diffuse, "Diffuse");
                fg.AppendItem(NormalOrGloss, "NormalOrGloss");
                fg.AppendItem(EnvironmentMaskOrSubsurfaceTint, "EnvironmentMaskOrSubsurfaceTint");
                fg.AppendItem(GlowOrDetailMap, "GlowOrDetailMap");
                fg.AppendItem(Height, "Height");
                fg.AppendItem(Environment, "Environment");
                fg.AppendItem(Multilayer, "Multilayer");
                fg.AppendItem(BacklightMaskOrSpecular, "BacklightMaskOrSpecular");
                Decal?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Diffuse = this.Diffuse.Combine(rhs.Diffuse);
                ret.NormalOrGloss = this.NormalOrGloss.Combine(rhs.NormalOrGloss);
                ret.EnvironmentMaskOrSubsurfaceTint = this.EnvironmentMaskOrSubsurfaceTint.Combine(rhs.EnvironmentMaskOrSubsurfaceTint);
                ret.GlowOrDetailMap = this.GlowOrDetailMap.Combine(rhs.GlowOrDetailMap);
                ret.Height = this.Height.Combine(rhs.Height);
                ret.Environment = this.Environment.Combine(rhs.Environment);
                ret.Multilayer = this.Multilayer.Combine(rhs.Multilayer);
                ret.BacklightMaskOrSpecular = this.BacklightMaskOrSpecular.Combine(rhs.BacklightMaskOrSpecular);
                ret.Decal = this.Decal.Combine(rhs.Decal, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Diffuse;
            public bool NormalOrGloss;
            public bool EnvironmentMaskOrSubsurfaceTint;
            public bool GlowOrDetailMap;
            public bool Height;
            public bool Environment;
            public bool Multilayer;
            public bool BacklightMaskOrSpecular;
            public MaskItem<bool, Decal.TranslationMask?> Decal;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Diffuse = defaultOn;
                this.NormalOrGloss = defaultOn;
                this.EnvironmentMaskOrSubsurfaceTint = defaultOn;
                this.GlowOrDetailMap = defaultOn;
                this.Height = defaultOn;
                this.Environment = defaultOn;
                this.Multilayer = defaultOn;
                this.BacklightMaskOrSpecular = defaultOn;
                this.Decal = new MaskItem<bool, Decal.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Diffuse, null));
                ret.Add((NormalOrGloss, null));
                ret.Add((EnvironmentMaskOrSubsurfaceTint, null));
                ret.Add((GlowOrDetailMap, null));
                ret.Add((Height, null));
                ret.Add((Environment, null));
                ret.Add((Multilayer, null));
                ret.Add((BacklightMaskOrSpecular, null));
                ret.Add((Decal?.Overall ?? true, Decal?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = TextureSet_Registration.TriggeringRecordType;
        public TextureSet(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public TextureSet(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public TextureSet(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new TextureSet CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static TextureSet CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TextureSet();
            ((TextureSetSetterCommon)((ITextureSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TextureSet item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITextureSetGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TextureSet GetNew()
        {
            return new TextureSet();
        }

    }
    #endregion

    #region Interface
    public partial interface ITextureSet :
        ITextureSetGetter,
        ISkyrimMajorRecord,
        IObjectId,
        IObjectBounded,
        ILoquiObjectSetter<ITextureSetInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new String? Diffuse { get; set; }
        new String? NormalOrGloss { get; set; }
        new String? EnvironmentMaskOrSubsurfaceTint { get; set; }
        new String? GlowOrDetailMap { get; set; }
        new String? Height { get; set; }
        new String? Environment { get; set; }
        new String? Multilayer { get; set; }
        new String? BacklightMaskOrSpecular { get; set; }
        new Decal? Decal { get; set; }
        new TextureSet.Flag? Flags { get; set; }
    }

    public partial interface ITextureSetInternal :
        ISkyrimMajorRecordInternal,
        ITextureSet,
        ITextureSetGetter
    {
    }

    public partial interface ITextureSetGetter :
        ISkyrimMajorRecordGetter,
        IObjectIdGetter,
        IObjectBoundedGetter,
        ILoquiObject<ITextureSetGetter>,
        IXmlItem,
        IBinaryItem
    {
        static ILoquiRegistration Registration => TextureSet_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        String? Diffuse { get; }
        String? NormalOrGloss { get; }
        String? EnvironmentMaskOrSubsurfaceTint { get; }
        String? GlowOrDetailMap { get; }
        String? Height { get; }
        String? Environment { get; }
        String? Multilayer { get; }
        String? BacklightMaskOrSpecular { get; }
        IDecalGetter? Decal { get; }
        TextureSet.Flag? Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TextureSetMixIn
    {
        public static void Clear(this ITextureSetInternal item)
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TextureSet.Mask<bool> GetEqualsMask(
            this ITextureSetGetter item,
            ITextureSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITextureSetGetter item,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITextureSetGetter item,
            FileGeneration fg,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITextureSetGetter item,
            TextureSet.Mask<bool?> checkMask)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TextureSet.Mask<bool> GetHasBeenSetMask(this ITextureSetGetter item)
        {
            var ret = new TextureSet.Mask<bool>(false);
            ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITextureSetGetter item,
            ITextureSetGetter rhs)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITextureSetInternal lhs,
            ITextureSetGetter rhs,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITextureSetInternal lhs,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            TextureSet.TranslationMask? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITextureSetInternal item,
            XElement node,
            TextureSet.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITextureSetInternal item,
            XElement node,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            string path,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            string path,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            Stream stream,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            Stream stream,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITextureSetInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TextureSet.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITextureSetInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITextureSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TextureSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Diffuse = 7,
        NormalOrGloss = 8,
        EnvironmentMaskOrSubsurfaceTint = 9,
        GlowOrDetailMap = 10,
        Height = 11,
        Environment = 12,
        Multilayer = 13,
        BacklightMaskOrSpecular = 14,
        Decal = 15,
        Flags = 16,
    }
    #endregion

    #region Registration
    public partial class TextureSet_Registration : ILoquiRegistration
    {
        public static readonly TextureSet_Registration Instance = new TextureSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 22,
            version: 0);

        public const string GUID = "7d698f54-6430-49c7-ab37-7649204e689b";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(TextureSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TextureSet.ErrorMask);

        public static readonly Type ClassType = typeof(TextureSet);

        public static readonly Type GetterType = typeof(ITextureSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITextureSet);

        public static readonly Type? InternalSetterType = typeof(ITextureSetInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.TextureSet";

        public const string Name = "TextureSet";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)TextureSet_FieldIndex.ObjectBounds;
                case "DIFFUSE":
                    return (ushort)TextureSet_FieldIndex.Diffuse;
                case "NORMALORGLOSS":
                    return (ushort)TextureSet_FieldIndex.NormalOrGloss;
                case "ENVIRONMENTMASKORSUBSURFACETINT":
                    return (ushort)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                case "GLOWORDETAILMAP":
                    return (ushort)TextureSet_FieldIndex.GlowOrDetailMap;
                case "HEIGHT":
                    return (ushort)TextureSet_FieldIndex.Height;
                case "ENVIRONMENT":
                    return (ushort)TextureSet_FieldIndex.Environment;
                case "MULTILAYER":
                    return (ushort)TextureSet_FieldIndex.Multilayer;
                case "BACKLIGHTMASKORSPECULAR":
                    return (ushort)TextureSet_FieldIndex.BacklightMaskOrSpecular;
                case "DECAL":
                    return (ushort)TextureSet_FieldIndex.Decal;
                case "FLAGS":
                    return (ushort)TextureSet_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Diffuse:
                case TextureSet_FieldIndex.NormalOrGloss:
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case TextureSet_FieldIndex.GlowOrDetailMap:
                case TextureSet_FieldIndex.Height:
                case TextureSet_FieldIndex.Environment:
                case TextureSet_FieldIndex.Multilayer:
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Decal:
                    return true;
                case TextureSet_FieldIndex.Diffuse:
                case TextureSet_FieldIndex.NormalOrGloss:
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case TextureSet_FieldIndex.GlowOrDetailMap:
                case TextureSet_FieldIndex.Height:
                case TextureSet_FieldIndex.Environment:
                case TextureSet_FieldIndex.Multilayer:
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Diffuse:
                case TextureSet_FieldIndex.NormalOrGloss:
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case TextureSet_FieldIndex.GlowOrDetailMap:
                case TextureSet_FieldIndex.Height:
                case TextureSet_FieldIndex.Environment:
                case TextureSet_FieldIndex.Multilayer:
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case TextureSet_FieldIndex.Diffuse:
                    return "Diffuse";
                case TextureSet_FieldIndex.NormalOrGloss:
                    return "NormalOrGloss";
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    return "EnvironmentMaskOrSubsurfaceTint";
                case TextureSet_FieldIndex.GlowOrDetailMap:
                    return "GlowOrDetailMap";
                case TextureSet_FieldIndex.Height:
                    return "Height";
                case TextureSet_FieldIndex.Environment:
                    return "Environment";
                case TextureSet_FieldIndex.Multilayer:
                    return "Multilayer";
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                    return "BacklightMaskOrSpecular";
                case TextureSet_FieldIndex.Decal:
                    return "Decal";
                case TextureSet_FieldIndex.Flags:
                    return "Flags";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Diffuse:
                case TextureSet_FieldIndex.NormalOrGloss:
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case TextureSet_FieldIndex.GlowOrDetailMap:
                case TextureSet_FieldIndex.Height:
                case TextureSet_FieldIndex.Environment:
                case TextureSet_FieldIndex.Multilayer:
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                case TextureSet_FieldIndex.Diffuse:
                case TextureSet_FieldIndex.NormalOrGloss:
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                case TextureSet_FieldIndex.GlowOrDetailMap:
                case TextureSet_FieldIndex.Height:
                case TextureSet_FieldIndex.Environment:
                case TextureSet_FieldIndex.Multilayer:
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                case TextureSet_FieldIndex.Decal:
                case TextureSet_FieldIndex.Flags:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
            switch (enu)
            {
                case TextureSet_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case TextureSet_FieldIndex.Diffuse:
                    return typeof(String);
                case TextureSet_FieldIndex.NormalOrGloss:
                    return typeof(String);
                case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                    return typeof(String);
                case TextureSet_FieldIndex.GlowOrDetailMap:
                    return typeof(String);
                case TextureSet_FieldIndex.Height:
                    return typeof(String);
                case TextureSet_FieldIndex.Environment:
                    return typeof(String);
                case TextureSet_FieldIndex.Multilayer:
                    return typeof(String);
                case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                    return typeof(String);
                case TextureSet_FieldIndex.Decal:
                    return typeof(Decal);
                case TextureSet_FieldIndex.Flags:
                    return typeof(TextureSet.Flag);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TextureSetXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.TXST;
        public static readonly Type BinaryWriteTranslation = typeof(TextureSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TextureSetSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TextureSetSetterCommon Instance = new TextureSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITextureSetInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Diffuse = default;
            item.NormalOrGloss = default;
            item.EnvironmentMaskOrSubsurfaceTint = default;
            item.GlowOrDetailMap = default;
            item.Height = default;
            item.Environment = default;
            item.Multilayer = default;
            item.BacklightMaskOrSpecular = default;
            item.Decal = null;
            item.Flags = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ITextureSetInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ITextureSetInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TextureSetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (TextureSet)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (TextureSet)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITextureSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ITextureSetInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TextureSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TextureSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (TextureSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (TextureSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class TextureSetCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TextureSetCommon Instance = new TextureSetCommon();

        public TextureSet.Mask<bool> GetEqualsMask(
            ITextureSetGetter item,
            ITextureSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TextureSet.Mask<bool>(false);
            ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITextureSetGetter item,
            ITextureSetGetter rhs,
            TextureSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Diffuse = string.Equals(item.Diffuse, rhs.Diffuse);
            ret.NormalOrGloss = string.Equals(item.NormalOrGloss, rhs.NormalOrGloss);
            ret.EnvironmentMaskOrSubsurfaceTint = string.Equals(item.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint);
            ret.GlowOrDetailMap = string.Equals(item.GlowOrDetailMap, rhs.GlowOrDetailMap);
            ret.Height = string.Equals(item.Height, rhs.Height);
            ret.Environment = string.Equals(item.Environment, rhs.Environment);
            ret.Multilayer = string.Equals(item.Multilayer, rhs.Multilayer);
            ret.BacklightMaskOrSpecular = string.Equals(item.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular);
            ret.Decal = EqualsMaskHelper.EqualsHelper(
                item.Decal,
                rhs.Decal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITextureSetGetter item,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITextureSetGetter item,
            FileGeneration fg,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TextureSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (TextureSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITextureSetGetter item,
            FileGeneration fg,
            TextureSet.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Diffuse ?? true)
                && item.Diffuse.TryGet(out var DiffuseItem))
            {
                fg.AppendItem(DiffuseItem, "Diffuse");
            }
            if ((printMask?.NormalOrGloss ?? true)
                && item.NormalOrGloss.TryGet(out var NormalOrGlossItem))
            {
                fg.AppendItem(NormalOrGlossItem, "NormalOrGloss");
            }
            if ((printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
                && item.EnvironmentMaskOrSubsurfaceTint.TryGet(out var EnvironmentMaskOrSubsurfaceTintItem))
            {
                fg.AppendItem(EnvironmentMaskOrSubsurfaceTintItem, "EnvironmentMaskOrSubsurfaceTint");
            }
            if ((printMask?.GlowOrDetailMap ?? true)
                && item.GlowOrDetailMap.TryGet(out var GlowOrDetailMapItem))
            {
                fg.AppendItem(GlowOrDetailMapItem, "GlowOrDetailMap");
            }
            if ((printMask?.Height ?? true)
                && item.Height.TryGet(out var HeightItem))
            {
                fg.AppendItem(HeightItem, "Height");
            }
            if ((printMask?.Environment ?? true)
                && item.Environment.TryGet(out var EnvironmentItem))
            {
                fg.AppendItem(EnvironmentItem, "Environment");
            }
            if ((printMask?.Multilayer ?? true)
                && item.Multilayer.TryGet(out var MultilayerItem))
            {
                fg.AppendItem(MultilayerItem, "Multilayer");
            }
            if ((printMask?.BacklightMaskOrSpecular ?? true)
                && item.BacklightMaskOrSpecular.TryGet(out var BacklightMaskOrSpecularItem))
            {
                fg.AppendItem(BacklightMaskOrSpecularItem, "BacklightMaskOrSpecular");
            }
            if ((printMask?.Decal?.Overall ?? true)
                && item.Decal.TryGet(out var DecalItem))
            {
                DecalItem?.ToString(fg, "Decal");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
        }
        
        public bool HasBeenSet(
            ITextureSetGetter item,
            TextureSet.Mask<bool?> checkMask)
        {
            if (checkMask.Diffuse.HasValue && checkMask.Diffuse.Value != (item.Diffuse != null)) return false;
            if (checkMask.NormalOrGloss.HasValue && checkMask.NormalOrGloss.Value != (item.NormalOrGloss != null)) return false;
            if (checkMask.EnvironmentMaskOrSubsurfaceTint.HasValue && checkMask.EnvironmentMaskOrSubsurfaceTint.Value != (item.EnvironmentMaskOrSubsurfaceTint != null)) return false;
            if (checkMask.GlowOrDetailMap.HasValue && checkMask.GlowOrDetailMap.Value != (item.GlowOrDetailMap != null)) return false;
            if (checkMask.Height.HasValue && checkMask.Height.Value != (item.Height != null)) return false;
            if (checkMask.Environment.HasValue && checkMask.Environment.Value != (item.Environment != null)) return false;
            if (checkMask.Multilayer.HasValue && checkMask.Multilayer.Value != (item.Multilayer != null)) return false;
            if (checkMask.BacklightMaskOrSpecular.HasValue && checkMask.BacklightMaskOrSpecular.Value != (item.BacklightMaskOrSpecular != null)) return false;
            if (checkMask.Decal?.Overall.HasValue ?? false && checkMask.Decal.Overall.Value != (item.Decal != null)) return false;
            if (checkMask.Decal?.Specific != null && (item.Decal == null || !item.Decal.HasBeenSet(checkMask.Decal.Specific))) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITextureSetGetter item,
            TextureSet.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Diffuse = (item.Diffuse != null);
            mask.NormalOrGloss = (item.NormalOrGloss != null);
            mask.EnvironmentMaskOrSubsurfaceTint = (item.EnvironmentMaskOrSubsurfaceTint != null);
            mask.GlowOrDetailMap = (item.GlowOrDetailMap != null);
            mask.Height = (item.Height != null);
            mask.Environment = (item.Environment != null);
            mask.Multilayer = (item.Multilayer != null);
            mask.BacklightMaskOrSpecular = (item.BacklightMaskOrSpecular != null);
            var itemDecal = item.Decal;
            mask.Decal = new MaskItem<bool, Decal.Mask<bool>?>(itemDecal != null, itemDecal?.GetHasBeenSetMask());
            mask.Flags = (item.Flags != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static TextureSet_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new TextureSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITextureSetGetter? lhs,
            ITextureSetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Diffuse, rhs.Diffuse)) return false;
            if (!string.Equals(lhs.NormalOrGloss, rhs.NormalOrGloss)) return false;
            if (!string.Equals(lhs.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
            if (!string.Equals(lhs.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
            if (!string.Equals(lhs.Height, rhs.Height)) return false;
            if (!string.Equals(lhs.Environment, rhs.Environment)) return false;
            if (!string.Equals(lhs.Multilayer, rhs.Multilayer)) return false;
            if (!string.Equals(lhs.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
            if (!object.Equals(lhs.Decal, rhs.Decal)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITextureSetGetter?)lhs,
                rhs: rhs as ITextureSetGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITextureSetGetter?)lhs,
                rhs: rhs as ITextureSetGetter);
        }
        
        public virtual int GetHashCode(ITextureSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Diffuse.TryGet(out var Diffuseitem))
            {
                hash.Add(Diffuseitem);
            }
            if (item.NormalOrGloss.TryGet(out var NormalOrGlossitem))
            {
                hash.Add(NormalOrGlossitem);
            }
            if (item.EnvironmentMaskOrSubsurfaceTint.TryGet(out var EnvironmentMaskOrSubsurfaceTintitem))
            {
                hash.Add(EnvironmentMaskOrSubsurfaceTintitem);
            }
            if (item.GlowOrDetailMap.TryGet(out var GlowOrDetailMapitem))
            {
                hash.Add(GlowOrDetailMapitem);
            }
            if (item.Height.TryGet(out var Heightitem))
            {
                hash.Add(Heightitem);
            }
            if (item.Environment.TryGet(out var Environmentitem))
            {
                hash.Add(Environmentitem);
            }
            if (item.Multilayer.TryGet(out var Multilayeritem))
            {
                hash.Add(Multilayeritem);
            }
            if (item.BacklightMaskOrSpecular.TryGet(out var BacklightMaskOrSpecularitem))
            {
                hash.Add(BacklightMaskOrSpecularitem);
            }
            if (item.Decal.TryGet(out var Decalitem))
            {
                hash.Add(Decalitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ITextureSetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITextureSetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TextureSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ITextureSetGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(ITextureSetGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(TextureSet obj, TextureSet rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new TextureSet(getNextFormKey());
            ret.DeepCopyIn((TextureSet)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (TextureSet)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TextureSetSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly TextureSetSetterTranslationCommon Instance = new TextureSetSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITextureSetInternal item,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ITextureSet item,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Diffuse) ?? true))
            {
                item.Diffuse = rhs.Diffuse;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.NormalOrGloss) ?? true))
            {
                item.NormalOrGloss = rhs.NormalOrGloss;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint) ?? true))
            {
                item.EnvironmentMaskOrSubsurfaceTint = rhs.EnvironmentMaskOrSubsurfaceTint;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.GlowOrDetailMap) ?? true))
            {
                item.GlowOrDetailMap = rhs.GlowOrDetailMap;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Height) ?? true))
            {
                item.Height = rhs.Height;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Environment) ?? true))
            {
                item.Environment = rhs.Environment;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Multilayer) ?? true))
            {
                item.Multilayer = rhs.Multilayer;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.BacklightMaskOrSpecular) ?? true))
            {
                item.BacklightMaskOrSpecular = rhs.BacklightMaskOrSpecular;
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Decal) ?? true))
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                try
                {
                    if(rhs.Decal.TryGet(out var rhsDecal))
                    {
                        item.Decal = rhsDecal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal));
                    }
                    else
                    {
                        item.Decal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITextureSetInternal)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITextureSet)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITextureSetInternal)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITextureSet)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            TextureSet.TranslationMask? copyMask = null)
        {
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TextureSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static TextureSet_Registration Registration => TextureSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TextureSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TextureSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TextureSetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TextureSetXmlWriteTranslation Instance = new TextureSetXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITextureSetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)TextureSet_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds));
            }
            if ((item.Diffuse != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Diffuse) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Diffuse),
                    item: item.Diffuse,
                    fieldIndex: (int)TextureSet_FieldIndex.Diffuse,
                    errorMask: errorMask);
            }
            if ((item.NormalOrGloss != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.NormalOrGloss) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NormalOrGloss),
                    item: item.NormalOrGloss,
                    fieldIndex: (int)TextureSet_FieldIndex.NormalOrGloss,
                    errorMask: errorMask);
            }
            if ((item.EnvironmentMaskOrSubsurfaceTint != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnvironmentMaskOrSubsurfaceTint),
                    item: item.EnvironmentMaskOrSubsurfaceTint,
                    fieldIndex: (int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint,
                    errorMask: errorMask);
            }
            if ((item.GlowOrDetailMap != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.GlowOrDetailMap) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlowOrDetailMap),
                    item: item.GlowOrDetailMap,
                    fieldIndex: (int)TextureSet_FieldIndex.GlowOrDetailMap,
                    errorMask: errorMask);
            }
            if ((item.Height != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Height) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Height),
                    item: item.Height,
                    fieldIndex: (int)TextureSet_FieldIndex.Height,
                    errorMask: errorMask);
            }
            if ((item.Environment != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Environment) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Environment),
                    item: item.Environment,
                    fieldIndex: (int)TextureSet_FieldIndex.Environment,
                    errorMask: errorMask);
            }
            if ((item.Multilayer != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Multilayer) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Multilayer),
                    item: item.Multilayer,
                    fieldIndex: (int)TextureSet_FieldIndex.Multilayer,
                    errorMask: errorMask);
            }
            if ((item.BacklightMaskOrSpecular != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.BacklightMaskOrSpecular) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BacklightMaskOrSpecular),
                    item: item.BacklightMaskOrSpecular,
                    fieldIndex: (int)TextureSet_FieldIndex.BacklightMaskOrSpecular,
                    errorMask: errorMask);
            }
            if ((item.Decal != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Decal) ?? true))
            {
                if (item.Decal.TryGet(out var DecalItem))
                {
                    ((DecalXmlWriteTranslation)((IXmlItem)DecalItem).XmlWriteTranslator).Write(
                        item: DecalItem,
                        node: node,
                        name: nameof(item.Decal),
                        fieldIndex: (int)TextureSet_FieldIndex.Decal,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal));
                }
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<TextureSet.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)TextureSet_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITextureSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TextureSet");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TextureSet");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TextureSetXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static TextureSetXmlCreateTranslation Instance = new TextureSetXmlCreateTranslation();

        public static void FillPublicXml(
            ITextureSetInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TextureSetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITextureSetInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Diffuse":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Diffuse);
                    try
                    {
                        item.Diffuse = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NormalOrGloss":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.NormalOrGloss);
                    try
                    {
                        item.NormalOrGloss = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnvironmentMaskOrSubsurfaceTint":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint);
                    try
                    {
                        item.EnvironmentMaskOrSubsurfaceTint = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlowOrDetailMap":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.GlowOrDetailMap);
                    try
                    {
                        item.GlowOrDetailMap = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Height":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Height);
                    try
                    {
                        item.Height = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Environment":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Environment);
                    try
                    {
                        item.Environment = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Multilayer":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Multilayer);
                    try
                    {
                        item.Multilayer = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BacklightMaskOrSpecular":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.BacklightMaskOrSpecular);
                    try
                    {
                        item.BacklightMaskOrSpecular = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Decal":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                    try
                    {
                        item.Decal = LoquiXmlTranslation<Decal>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)TextureSet_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<TextureSet.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TextureSetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITextureSetGetter item,
            XElement node,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TextureSetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITextureSetGetter item,
            string path,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITextureSetGetter item,
            Stream stream,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TextureSetBinaryWriteTranslation Instance = new TextureSetBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITextureSetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Diffuse,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NormalOrGloss,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX01),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnvironmentMaskOrSubsurfaceTint,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX02),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlowOrDetailMap,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX03),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Height,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX04),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Environment,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX05),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Multilayer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX06),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BacklightMaskOrSpecular,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TX07),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Decal.TryGet(out var DecalItem))
            {
                ((DecalBinaryWriteTranslation)((IBinaryItem)DecalItem).BinaryWriteTranslator).Write(
                    item: DecalItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TextureSet.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
        }

        public void Write(
            MutagenWriter writer,
            ITextureSetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.TXST),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TextureSetBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static TextureSetBinaryCreateTranslation Instance = new TextureSetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TXST;
        public static void FillBinaryStructs(
            ITextureSetInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ITextureSetInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)TextureSet_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.TX00:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Diffuse = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.Diffuse;
                }
                case RecordTypeInts.TX01:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NormalOrGloss = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.NormalOrGloss;
                }
                case RecordTypeInts.TX02:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnvironmentMaskOrSubsurfaceTint = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                }
                case RecordTypeInts.TX03:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlowOrDetailMap = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.GlowOrDetailMap;
                }
                case RecordTypeInts.TX04:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Height = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.Height;
                }
                case RecordTypeInts.TX05:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Environment = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.Environment;
                }
                case RecordTypeInts.TX06:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Multilayer = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.Multilayer;
                }
                case RecordTypeInts.TX07:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BacklightMaskOrSpecular = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TextureSet_FieldIndex.BacklightMaskOrSpecular;
                }
                case RecordTypeInts.DODT:
                {
                    item.Decal = Mutagen.Bethesda.Skyrim.Decal.CreateFromBinary(frame: frame);
                    return (int)TextureSet_FieldIndex.Decal;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<TextureSet.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.Flags;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TextureSetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TextureSetBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ITextureSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static TextureSet_Registration Registration => TextureSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TextureSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TextureSetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITextureSetGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TextureSetXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TextureSetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Diffuse
        private int? _DiffuseLocation;
        public String? Diffuse => _DiffuseLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DiffuseLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region NormalOrGloss
        private int? _NormalOrGlossLocation;
        public String? NormalOrGloss => _NormalOrGlossLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NormalOrGlossLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        private int? _EnvironmentMaskOrSubsurfaceTintLocation;
        public String? EnvironmentMaskOrSubsurfaceTint => _EnvironmentMaskOrSubsurfaceTintLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EnvironmentMaskOrSubsurfaceTintLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region GlowOrDetailMap
        private int? _GlowOrDetailMapLocation;
        public String? GlowOrDetailMap => _GlowOrDetailMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _GlowOrDetailMapLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Height
        private int? _HeightLocation;
        public String? Height => _HeightLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _HeightLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Environment
        private int? _EnvironmentLocation;
        public String? Environment => _EnvironmentLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EnvironmentLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Multilayer
        private int? _MultilayerLocation;
        public String? Multilayer => _MultilayerLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MultilayerLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region BacklightMaskOrSpecular
        private int? _BacklightMaskOrSpecularLocation;
        public String? BacklightMaskOrSpecular => _BacklightMaskOrSpecularLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BacklightMaskOrSpecularLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Decal
        private RangeInt32? _DecalLocation;
        public IDecalGetter? Decal => _DecalLocation.HasValue ? DecalBinaryOverlay.DecalFactory(new OverlayStream(_data.Slice(_DecalLocation!.Value.Min), _package), _package) : default;
        public bool Decal_IsSet => _DecalLocation.HasValue;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public TextureSet.Flag? Flags => _FlagsLocation.HasValue ? (TextureSet.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(TextureSet.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TextureSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TextureSetBinaryOverlay TextureSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new TextureSetBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TextureSetBinaryOverlay TextureSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TextureSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)TextureSet_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.TX00:
                {
                    _DiffuseLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Diffuse;
                }
                case RecordTypeInts.TX01:
                {
                    _NormalOrGlossLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.NormalOrGloss;
                }
                case RecordTypeInts.TX02:
                {
                    _EnvironmentMaskOrSubsurfaceTintLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                }
                case RecordTypeInts.TX03:
                {
                    _GlowOrDetailMapLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.GlowOrDetailMap;
                }
                case RecordTypeInts.TX04:
                {
                    _HeightLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Height;
                }
                case RecordTypeInts.TX05:
                {
                    _EnvironmentLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Environment;
                }
                case RecordTypeInts.TX06:
                {
                    _MultilayerLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Multilayer;
                }
                case RecordTypeInts.TX07:
                {
                    _BacklightMaskOrSpecularLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.BacklightMaskOrSpecular;
                }
                case RecordTypeInts.DODT:
                {
                    _DecalLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)TextureSet_FieldIndex.Decal;
                }
                case RecordTypeInts.DNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TextureSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

