/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class WeatherVolumetricLighting :
        IWeatherVolumetricLighting,
        ILoquiObjectSetter<WeatherVolumetricLighting>,
        IEquatable<WeatherVolumetricLighting>,
        IEqualsMask
    {
        #region Ctor
        public WeatherVolumetricLighting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sunrise
        public FormLink<VolumetricLighting> Sunrise { get; set; } = new FormLink<VolumetricLighting>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IVolumetricLightingGetter> IWeatherVolumetricLightingGetter.Sunrise => this.Sunrise;
        #endregion
        #region Day
        public FormLink<VolumetricLighting> Day { get; set; } = new FormLink<VolumetricLighting>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IVolumetricLightingGetter> IWeatherVolumetricLightingGetter.Day => this.Day;
        #endregion
        #region Sunset
        public FormLink<VolumetricLighting> Sunset { get; set; } = new FormLink<VolumetricLighting>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IVolumetricLightingGetter> IWeatherVolumetricLightingGetter.Sunset => this.Sunset;
        #endregion
        #region Night
        public FormLink<VolumetricLighting> Night { get; set; } = new FormLink<VolumetricLighting>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IVolumetricLightingGetter> IWeatherVolumetricLightingGetter.Night => this.Night;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherVolumetricLightingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherVolumetricLightingGetter rhs)) return false;
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(WeatherVolumetricLighting? obj)
        {
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WeatherVolumetricLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherVolumetricLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WeatherVolumetricLighting CreateFromXml(
            XElement node,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WeatherVolumetricLighting CreateFromXml(
            XElement node,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherVolumetricLighting.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherVolumetricLighting CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new WeatherVolumetricLighting();
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static WeatherVolumetricLighting CreateFromXml(
            string path,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WeatherVolumetricLighting CreateFromXml(
            string path,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherVolumetricLighting CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WeatherVolumetricLighting CreateFromXml(
            Stream stream,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WeatherVolumetricLighting CreateFromXml(
            Stream stream,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherVolumetricLighting CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Sunrise = initialValue;
                this.Day = initialValue;
                this.Sunset = initialValue;
                this.Night = initialValue;
            }

            public Mask(
                TItem Sunrise,
                TItem Day,
                TItem Sunset,
                TItem Night)
            {
                this.Sunrise = Sunrise;
                this.Day = Day;
                this.Sunset = Sunset;
                this.Night = Night;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Sunrise;
            public TItem Day;
            public TItem Sunset;
            public TItem Night;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Sunrise, rhs.Sunrise)) return false;
                if (!object.Equals(this.Day, rhs.Day)) return false;
                if (!object.Equals(this.Sunset, rhs.Sunset)) return false;
                if (!object.Equals(this.Night, rhs.Night)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Sunrise);
                hash.Add(this.Day);
                hash.Add(this.Sunset);
                hash.Add(this.Night);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Sunrise)) return false;
                if (!eval(this.Day)) return false;
                if (!eval(this.Sunset)) return false;
                if (!eval(this.Night)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Sunrise)) return true;
                if (eval(this.Day)) return true;
                if (eval(this.Sunset)) return true;
                if (eval(this.Night)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeatherVolumetricLighting.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Sunrise = eval(this.Sunrise);
                obj.Day = eval(this.Day);
                obj.Sunset = eval(this.Sunset);
                obj.Night = eval(this.Night);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WeatherVolumetricLighting.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WeatherVolumetricLighting.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WeatherVolumetricLighting.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Sunrise ?? true)
                    {
                        fg.AppendItem(Sunrise, "Sunrise");
                    }
                    if (printMask?.Day ?? true)
                    {
                        fg.AppendItem(Day, "Day");
                    }
                    if (printMask?.Sunset ?? true)
                    {
                        fg.AppendItem(Sunset, "Sunset");
                    }
                    if (printMask?.Night ?? true)
                    {
                        fg.AppendItem(Night, "Night");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Sunrise;
            public Exception? Day;
            public Exception? Sunset;
            public Exception? Night;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
                switch (enu)
                {
                    case WeatherVolumetricLighting_FieldIndex.Sunrise:
                        return Sunrise;
                    case WeatherVolumetricLighting_FieldIndex.Day:
                        return Day;
                    case WeatherVolumetricLighting_FieldIndex.Sunset:
                        return Sunset;
                    case WeatherVolumetricLighting_FieldIndex.Night:
                        return Night;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
                switch (enu)
                {
                    case WeatherVolumetricLighting_FieldIndex.Sunrise:
                        this.Sunrise = ex;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Day:
                        this.Day = ex;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Sunset:
                        this.Sunset = ex;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Night:
                        this.Night = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
                switch (enu)
                {
                    case WeatherVolumetricLighting_FieldIndex.Sunrise:
                        this.Sunrise = (Exception?)obj;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Day:
                        this.Day = (Exception?)obj;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Sunset:
                        this.Sunset = (Exception?)obj;
                        break;
                    case WeatherVolumetricLighting_FieldIndex.Night:
                        this.Night = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Sunrise != null) return true;
                if (Day != null) return true;
                if (Sunset != null) return true;
                if (Night != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Sunrise, "Sunrise");
                fg.AppendItem(Day, "Day");
                fg.AppendItem(Sunset, "Sunset");
                fg.AppendItem(Night, "Night");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Sunrise = this.Sunrise.Combine(rhs.Sunrise);
                ret.Day = this.Day.Combine(rhs.Day);
                ret.Sunset = this.Sunset.Combine(rhs.Sunset);
                ret.Night = this.Night.Combine(rhs.Night);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Sunrise;
            public bool Day;
            public bool Sunset;
            public bool Night;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Sunrise = defaultOn;
                this.Day = defaultOn;
                this.Sunset = defaultOn;
                this.Night = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Sunrise, null));
                ret.Add((Day, null));
                ret.Add((Sunset, null));
                ret.Add((Night, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = WeatherVolumetricLighting_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WeatherVolumetricLightingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherVolumetricLightingCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherVolumetricLightingCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherVolumetricLightingCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherVolumetricLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherVolumetricLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherVolumetricLighting CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static WeatherVolumetricLighting CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherVolumetricLighting();
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeatherVolumetricLighting item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherVolumetricLightingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeatherVolumetricLighting GetNew()
        {
            return new WeatherVolumetricLighting();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeatherVolumetricLighting :
        IWeatherVolumetricLightingGetter,
        ILoquiObjectSetter<IWeatherVolumetricLighting>
    {
        new FormLink<VolumetricLighting> Sunrise { get; set; }
        new FormLink<VolumetricLighting> Day { get; set; }
        new FormLink<VolumetricLighting> Sunset { get; set; }
        new FormLink<VolumetricLighting> Night { get; set; }
    }

    public partial interface IWeatherVolumetricLightingGetter :
        ILoquiObject,
        ILoquiObject<IWeatherVolumetricLightingGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WeatherVolumetricLighting_Registration.Instance;
        IFormLink<IVolumetricLightingGetter> Sunrise { get; }
        IFormLink<IVolumetricLightingGetter> Day { get; }
        IFormLink<IVolumetricLightingGetter> Sunset { get; }
        IFormLink<IVolumetricLightingGetter> Night { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherVolumetricLightingMixIn
    {
        public static void Clear(this IWeatherVolumetricLighting item)
        {
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeatherVolumetricLighting.Mask<bool> GetEqualsMask(
            this IWeatherVolumetricLightingGetter item,
            IWeatherVolumetricLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherVolumetricLightingGetter item,
            string? name = null,
            WeatherVolumetricLighting.Mask<bool>? printMask = null)
        {
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherVolumetricLightingGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherVolumetricLighting.Mask<bool>? printMask = null)
        {
            ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherVolumetricLightingGetter item,
            WeatherVolumetricLighting.Mask<bool?> checkMask)
        {
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WeatherVolumetricLighting.Mask<bool> GetHasBeenSetMask(this IWeatherVolumetricLightingGetter item)
        {
            var ret = new WeatherVolumetricLighting.Mask<bool>(false);
            ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherVolumetricLightingGetter item,
            IWeatherVolumetricLightingGetter rhs)
        {
            return ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeatherVolumetricLighting lhs,
            IWeatherVolumetricLightingGetter rhs)
        {
            ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IWeatherVolumetricLighting lhs,
            IWeatherVolumetricLightingGetter rhs,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeatherVolumetricLighting lhs,
            IWeatherVolumetricLightingGetter rhs,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = WeatherVolumetricLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherVolumetricLighting lhs,
            IWeatherVolumetricLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static WeatherVolumetricLighting DeepCopy(
            this IWeatherVolumetricLightingGetter item,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            return ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeatherVolumetricLighting DeepCopy(
            this IWeatherVolumetricLightingGetter item,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            return ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeatherVolumetricLighting DeepCopy(
            this IWeatherVolumetricLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherVolumetricLightingSetterTranslationCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            XElement node,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            XElement node,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherVolumetricLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            string path,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            string path,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            string path,
            ErrorMaskBuilder? errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            Stream stream,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            Stream stream,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherVolumetricLighting item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeatherVolumetricLighting item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeatherVolumetricLighting item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherVolumetricLightingSetterCommon)((IWeatherVolumetricLightingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum WeatherVolumetricLighting_FieldIndex
    {
        Sunrise = 0,
        Day = 1,
        Sunset = 2,
        Night = 3,
    }
    #endregion

    #region Registration
    public partial class WeatherVolumetricLighting_Registration : ILoquiRegistration
    {
        public static readonly WeatherVolumetricLighting_Registration Instance = new WeatherVolumetricLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 254,
            version: 0);

        public const string GUID = "9c43a8c4-aa8c-4c76-9c57-7770b4583e47";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(WeatherVolumetricLighting.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherVolumetricLighting.ErrorMask);

        public static readonly Type ClassType = typeof(WeatherVolumetricLighting);

        public static readonly Type GetterType = typeof(IWeatherVolumetricLightingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherVolumetricLighting);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.WeatherVolumetricLighting";

        public const string Name = "WeatherVolumetricLighting";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SUNRISE":
                    return (ushort)WeatherVolumetricLighting_FieldIndex.Sunrise;
                case "DAY":
                    return (ushort)WeatherVolumetricLighting_FieldIndex.Day;
                case "SUNSET":
                    return (ushort)WeatherVolumetricLighting_FieldIndex.Sunset;
                case "NIGHT":
                    return (ushort)WeatherVolumetricLighting_FieldIndex.Night;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                case WeatherVolumetricLighting_FieldIndex.Day:
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                case WeatherVolumetricLighting_FieldIndex.Day:
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                case WeatherVolumetricLighting_FieldIndex.Day:
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                    return "Sunrise";
                case WeatherVolumetricLighting_FieldIndex.Day:
                    return "Day";
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                    return "Sunset";
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return "Night";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                case WeatherVolumetricLighting_FieldIndex.Day:
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                case WeatherVolumetricLighting_FieldIndex.Day:
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherVolumetricLighting_FieldIndex enu = (WeatherVolumetricLighting_FieldIndex)index;
            switch (enu)
            {
                case WeatherVolumetricLighting_FieldIndex.Sunrise:
                    return typeof(FormLink<VolumetricLighting>);
                case WeatherVolumetricLighting_FieldIndex.Day:
                    return typeof(FormLink<VolumetricLighting>);
                case WeatherVolumetricLighting_FieldIndex.Sunset:
                    return typeof(FormLink<VolumetricLighting>);
                case WeatherVolumetricLighting_FieldIndex.Night:
                    return typeof(FormLink<VolumetricLighting>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherVolumetricLightingXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherVolumetricLightingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherVolumetricLightingSetterCommon
    {
        public static readonly WeatherVolumetricLightingSetterCommon Instance = new WeatherVolumetricLightingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherVolumetricLighting item)
        {
            ClearPartial();
            item.Sunrise = FormLink<VolumetricLighting>.Null;
            item.Day = FormLink<VolumetricLighting>.Null;
            item.Sunset = FormLink<VolumetricLighting>.Null;
            item.Night = FormLink<VolumetricLighting>.Null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IWeatherVolumetricLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherVolumetricLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherVolumetricLighting item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.HNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WeatherVolumetricLightingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class WeatherVolumetricLightingCommon
    {
        public static readonly WeatherVolumetricLightingCommon Instance = new WeatherVolumetricLightingCommon();

        public WeatherVolumetricLighting.Mask<bool> GetEqualsMask(
            IWeatherVolumetricLightingGetter item,
            IWeatherVolumetricLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherVolumetricLighting.Mask<bool>(false);
            ((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherVolumetricLightingGetter item,
            IWeatherVolumetricLightingGetter rhs,
            WeatherVolumetricLighting.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sunrise = object.Equals(item.Sunrise, rhs.Sunrise);
            ret.Day = object.Equals(item.Day, rhs.Day);
            ret.Sunset = object.Equals(item.Sunset, rhs.Sunset);
            ret.Night = object.Equals(item.Night, rhs.Night);
        }
        
        public string ToString(
            IWeatherVolumetricLightingGetter item,
            string? name = null,
            WeatherVolumetricLighting.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherVolumetricLightingGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherVolumetricLighting.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WeatherVolumetricLighting =>");
            }
            else
            {
                fg.AppendLine($"{name} (WeatherVolumetricLighting) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherVolumetricLightingGetter item,
            FileGeneration fg,
            WeatherVolumetricLighting.Mask<bool>? printMask = null)
        {
            if (printMask?.Sunrise ?? true)
            {
                fg.AppendItem(item.Sunrise, "Sunrise");
            }
            if (printMask?.Day ?? true)
            {
                fg.AppendItem(item.Day, "Day");
            }
            if (printMask?.Sunset ?? true)
            {
                fg.AppendItem(item.Sunset, "Sunset");
            }
            if (printMask?.Night ?? true)
            {
                fg.AppendItem(item.Night, "Night");
            }
        }
        
        public bool HasBeenSet(
            IWeatherVolumetricLightingGetter item,
            WeatherVolumetricLighting.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWeatherVolumetricLightingGetter item,
            WeatherVolumetricLighting.Mask<bool> mask)
        {
            mask.Sunrise = true;
            mask.Day = true;
            mask.Sunset = true;
            mask.Night = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherVolumetricLightingGetter? lhs,
            IWeatherVolumetricLightingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Sunrise.Equals(rhs.Sunrise)) return false;
            if (!lhs.Day.Equals(rhs.Day)) return false;
            if (!lhs.Sunset.Equals(rhs.Sunset)) return false;
            if (!lhs.Night.Equals(rhs.Night)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWeatherVolumetricLightingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Sunrise);
            hash.Add(item.Day);
            hash.Add(item.Sunset);
            hash.Add(item.Night);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeatherVolumetricLighting.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWeatherVolumetricLightingGetter obj)
        {
            yield return obj.Sunrise.FormKey;
            yield return obj.Day.FormKey;
            yield return obj.Sunset.FormKey;
            yield return obj.Night.FormKey;
            yield break;
        }
        
        public void RemapLinks(IWeatherVolumetricLightingGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class WeatherVolumetricLightingSetterTranslationCommon
    {
        public static readonly WeatherVolumetricLightingSetterTranslationCommon Instance = new WeatherVolumetricLightingSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWeatherVolumetricLighting item,
            IWeatherVolumetricLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Sunrise) ?? true))
            {
                item.Sunrise = rhs.Sunrise.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Day) ?? true))
            {
                item.Day = rhs.Day.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Sunset) ?? true))
            {
                item.Sunset = rhs.Sunset.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Night) ?? true))
            {
                item.Night = rhs.Night.FormKey;
            }
        }
        
        #endregion
        
        public WeatherVolumetricLighting DeepCopy(
            IWeatherVolumetricLightingGetter item,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            WeatherVolumetricLighting ret = (WeatherVolumetricLighting)((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public WeatherVolumetricLighting DeepCopy(
            IWeatherVolumetricLightingGetter item,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? copyMask = null)
        {
            WeatherVolumetricLighting ret = (WeatherVolumetricLighting)((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public WeatherVolumetricLighting DeepCopy(
            IWeatherVolumetricLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeatherVolumetricLighting ret = (WeatherVolumetricLighting)((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class WeatherVolumetricLighting
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherVolumetricLighting_Registration.Instance;
        public static WeatherVolumetricLighting_Registration Registration => WeatherVolumetricLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherVolumetricLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeatherVolumetricLightingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherVolumetricLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherVolumetricLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeatherVolumetricLightingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeatherVolumetricLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherVolumetricLightingXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WeatherVolumetricLightingXmlWriteTranslation Instance = new WeatherVolumetricLightingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherVolumetricLightingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Sunrise) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sunrise),
                    item: item.Sunrise.FormKey,
                    fieldIndex: (int)WeatherVolumetricLighting_FieldIndex.Sunrise,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Day) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Day),
                    item: item.Day.FormKey,
                    fieldIndex: (int)WeatherVolumetricLighting_FieldIndex.Day,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Sunset) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sunset),
                    item: item.Sunset.FormKey,
                    fieldIndex: (int)WeatherVolumetricLighting_FieldIndex.Sunset,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherVolumetricLighting_FieldIndex.Night) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Night),
                    item: item.Night.FormKey,
                    fieldIndex: (int)WeatherVolumetricLighting_FieldIndex.Night,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeatherVolumetricLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.WeatherVolumetricLighting");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.WeatherVolumetricLighting");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherVolumetricLightingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWeatherVolumetricLightingGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IWeatherVolumetricLightingGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WeatherVolumetricLightingXmlCreateTranslation
    {
        public readonly static WeatherVolumetricLightingXmlCreateTranslation Instance = new WeatherVolumetricLightingXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherVolumetricLighting item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherVolumetricLightingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherVolumetricLighting item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Sunrise":
                    errorMask?.PushIndex((int)WeatherVolumetricLighting_FieldIndex.Sunrise);
                    try
                    {
                        item.Sunrise = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Day":
                    errorMask?.PushIndex((int)WeatherVolumetricLighting_FieldIndex.Day);
                    try
                    {
                        item.Day = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sunset":
                    errorMask?.PushIndex((int)WeatherVolumetricLighting_FieldIndex.Sunset);
                    try
                    {
                        item.Sunset = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Night":
                    errorMask?.PushIndex((int)WeatherVolumetricLighting_FieldIndex.Night);
                    try
                    {
                        item.Night = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class WeatherVolumetricLightingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            XElement node,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherVolumetricLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherVolumetricLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            string path,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            Stream stream,
            out WeatherVolumetricLighting.ErrorMask errorMask,
            WeatherVolumetricLighting.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((WeatherVolumetricLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            XElement node,
            string? name = null,
            WeatherVolumetricLighting.TranslationMask? translationMask = null)
        {
            ((WeatherVolumetricLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WeatherVolumetricLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherVolumetricLightingGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WeatherVolumetricLightingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherVolumetricLightingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WeatherVolumetricLightingBinaryWriteTranslation Instance = new WeatherVolumetricLightingBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWeatherVolumetricLightingGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sunrise);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Day);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Sunset);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Night);
        }

        public void Write(
            MutagenWriter writer,
            IWeatherVolumetricLightingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherVolumetricLightingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherVolumetricLightingBinaryCreateTranslation
    {
        public readonly static WeatherVolumetricLightingBinaryCreateTranslation Instance = new WeatherVolumetricLightingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWeatherVolumetricLighting item,
            MutagenFrame frame)
        {
            item.Sunrise = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Day = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Sunset = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Night = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WeatherVolumetricLightingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeatherVolumetricLightingGetter item,
            MutagenWriter writer)
        {
            ((WeatherVolumetricLightingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherVolumetricLightingBinaryOverlay :
        BinaryOverlay,
        IWeatherVolumetricLightingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherVolumetricLighting_Registration.Instance;
        public static WeatherVolumetricLighting_Registration Registration => WeatherVolumetricLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherVolumetricLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherVolumetricLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherVolumetricLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeatherVolumetricLightingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeatherVolumetricLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherVolumetricLightingGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WeatherVolumetricLightingCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherVolumetricLightingCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherVolumetricLightingCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherVolumetricLightingCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WeatherVolumetricLightingXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherVolumetricLightingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherVolumetricLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherVolumetricLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IFormLink<IVolumetricLightingGetter> Sunrise => new FormLink<IVolumetricLightingGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public IFormLink<IVolumetricLightingGetter> Day => new FormLink<IVolumetricLightingGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x4, 0x4))));
        public IFormLink<IVolumetricLightingGetter> Sunset => new FormLink<IVolumetricLightingGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x8, 0x4))));
        public IFormLink<IVolumetricLightingGetter> Night => new FormLink<IVolumetricLightingGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0xC, 0x4))));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherVolumetricLightingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeatherVolumetricLightingBinaryOverlay WeatherVolumetricLightingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherVolumetricLightingBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WeatherVolumetricLightingBinaryOverlay WeatherVolumetricLightingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeatherVolumetricLightingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherVolumetricLightingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

